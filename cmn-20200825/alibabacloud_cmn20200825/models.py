# -*- coding: utf-8 -*-
# This file is auto-generated, don't edit it. Thanks.
from Tea.model import TeaModel


class Agent(TeaModel):
    def __init__(self, agent_id=None, agent_name=None, agent_version=None, cpu_usage=None, disk_usage=None,
                 gmt_modify=None, ip=None, kernel_version=None, memory_usage=None, security_domain=None, status=None):
        self.agent_id = agent_id  # type: str
        self.agent_name = agent_name  # type: str
        self.agent_version = agent_version  # type: str
        self.cpu_usage = cpu_usage  # type: str
        self.disk_usage = disk_usage  # type: str
        self.gmt_modify = gmt_modify  # type: str
        self.ip = ip  # type: str
        self.kernel_version = kernel_version  # type: str
        self.memory_usage = memory_usage  # type: str
        self.security_domain = security_domain  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(Agent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_id is not None:
            result['AgentId'] = self.agent_id
        if self.agent_name is not None:
            result['AgentName'] = self.agent_name
        if self.agent_version is not None:
            result['AgentVersion'] = self.agent_version
        if self.cpu_usage is not None:
            result['CpuUsage'] = self.cpu_usage
        if self.disk_usage is not None:
            result['DiskUsage'] = self.disk_usage
        if self.gmt_modify is not None:
            result['GmtModify'] = self.gmt_modify
        if self.ip is not None:
            result['Ip'] = self.ip
        if self.kernel_version is not None:
            result['KernelVersion'] = self.kernel_version
        if self.memory_usage is not None:
            result['MemoryUsage'] = self.memory_usage
        if self.security_domain is not None:
            result['SecurityDomain'] = self.security_domain
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AgentId') is not None:
            self.agent_id = m.get('AgentId')
        if m.get('AgentName') is not None:
            self.agent_name = m.get('AgentName')
        if m.get('AgentVersion') is not None:
            self.agent_version = m.get('AgentVersion')
        if m.get('CpuUsage') is not None:
            self.cpu_usage = m.get('CpuUsage')
        if m.get('DiskUsage') is not None:
            self.disk_usage = m.get('DiskUsage')
        if m.get('GmtModify') is not None:
            self.gmt_modify = m.get('GmtModify')
        if m.get('Ip') is not None:
            self.ip = m.get('Ip')
        if m.get('KernelVersion') is not None:
            self.kernel_version = m.get('KernelVersion')
        if m.get('MemoryUsage') is not None:
            self.memory_usage = m.get('MemoryUsage')
        if m.get('SecurityDomain') is not None:
            self.security_domain = m.get('SecurityDomain')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class AgentsTask(TeaModel):
    def __init__(self, action_type=None, agent_type=None, agents_task_id=None, gmt_create=None, gmt_modify=None,
                 params=None, status=None):
        self.action_type = action_type  # type: str
        self.agent_type = agent_type  # type: str
        self.agents_task_id = agents_task_id  # type: str
        self.gmt_create = gmt_create  # type: str
        self.gmt_modify = gmt_modify  # type: str
        self.params = params  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AgentsTask, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.action_type is not None:
            result['ActionType'] = self.action_type
        if self.agent_type is not None:
            result['AgentType'] = self.agent_type
        if self.agents_task_id is not None:
            result['AgentsTaskId'] = self.agents_task_id
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modify is not None:
            result['GmtModify'] = self.gmt_modify
        if self.params is not None:
            result['Params'] = self.params
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ActionType') is not None:
            self.action_type = m.get('ActionType')
        if m.get('AgentType') is not None:
            self.agent_type = m.get('AgentType')
        if m.get('AgentsTaskId') is not None:
            self.agents_task_id = m.get('AgentsTaskId')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModify') is not None:
            self.gmt_modify = m.get('GmtModify')
        if m.get('Params') is not None:
            self.params = m.get('Params')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class AggregateData(TeaModel):
    def __init__(self, aggregate_data_description=None, aggregate_data_id=None, aggregate_data_name=None,
                 aggregate_mode_list=None, data_item=None, device_id_list=None, gmt_create=None, gmt_modified=None, is_all_device=None,
                 monitor_item_id=None):
        self.aggregate_data_description = aggregate_data_description  # type: str
        self.aggregate_data_id = aggregate_data_id  # type: str
        self.aggregate_data_name = aggregate_data_name  # type: str
        self.aggregate_mode_list = aggregate_mode_list  # type: list[str]
        self.data_item = data_item  # type: str
        self.device_id_list = device_id_list  # type: list[str]
        self.gmt_create = gmt_create  # type: str
        self.gmt_modified = gmt_modified  # type: str
        self.is_all_device = is_all_device  # type: int
        self.monitor_item_id = monitor_item_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AggregateData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aggregate_data_description is not None:
            result['AggregateDataDescription'] = self.aggregate_data_description
        if self.aggregate_data_id is not None:
            result['AggregateDataId'] = self.aggregate_data_id
        if self.aggregate_data_name is not None:
            result['AggregateDataName'] = self.aggregate_data_name
        if self.aggregate_mode_list is not None:
            result['AggregateModeList'] = self.aggregate_mode_list
        if self.data_item is not None:
            result['DataItem'] = self.data_item
        if self.device_id_list is not None:
            result['DeviceIdList'] = self.device_id_list
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.is_all_device is not None:
            result['IsAllDevice'] = self.is_all_device
        if self.monitor_item_id is not None:
            result['MonitorItemId'] = self.monitor_item_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AggregateDataDescription') is not None:
            self.aggregate_data_description = m.get('AggregateDataDescription')
        if m.get('AggregateDataId') is not None:
            self.aggregate_data_id = m.get('AggregateDataId')
        if m.get('AggregateDataName') is not None:
            self.aggregate_data_name = m.get('AggregateDataName')
        if m.get('AggregateModeList') is not None:
            self.aggregate_mode_list = m.get('AggregateModeList')
        if m.get('DataItem') is not None:
            self.data_item = m.get('DataItem')
        if m.get('DeviceIdList') is not None:
            self.device_id_list = m.get('DeviceIdList')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('IsAllDevice') is not None:
            self.is_all_device = m.get('IsAllDevice')
        if m.get('MonitorItemId') is not None:
            self.monitor_item_id = m.get('MonitorItemId')
        return self


class AlarmOverviewConditionList(TeaModel):
    def __init__(self, condition_name=None, condition_value=None):
        self.condition_name = condition_name  # type: str
        self.condition_value = condition_value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AlarmOverviewConditionList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.condition_name is not None:
            result['ConditionName'] = self.condition_name
        if self.condition_value is not None:
            result['ConditionValue'] = self.condition_value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ConditionName') is not None:
            self.condition_name = m.get('ConditionName')
        if m.get('ConditionValue') is not None:
            self.condition_value = m.get('ConditionValue')
        return self


class AlarmOverview(TeaModel):
    def __init__(self, alarm_overview_id=None, alarm_overview_name=None, condition_list=None, serial_number=None):
        self.alarm_overview_id = alarm_overview_id  # type: str
        self.alarm_overview_name = alarm_overview_name  # type: str
        self.condition_list = condition_list  # type: list[AlarmOverviewConditionList]
        self.serial_number = serial_number  # type: int

    def validate(self):
        if self.condition_list:
            for k in self.condition_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(AlarmOverview, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alarm_overview_id is not None:
            result['AlarmOverviewId'] = self.alarm_overview_id
        if self.alarm_overview_name is not None:
            result['AlarmOverviewName'] = self.alarm_overview_name
        result['ConditionList'] = []
        if self.condition_list is not None:
            for k in self.condition_list:
                result['ConditionList'].append(k.to_map() if k else None)
        if self.serial_number is not None:
            result['SerialNumber'] = self.serial_number
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AlarmOverviewId') is not None:
            self.alarm_overview_id = m.get('AlarmOverviewId')
        if m.get('AlarmOverviewName') is not None:
            self.alarm_overview_name = m.get('AlarmOverviewName')
        self.condition_list = []
        if m.get('ConditionList') is not None:
            for k in m.get('ConditionList'):
                temp_model = AlarmOverviewConditionList()
                self.condition_list.append(temp_model.from_map(k))
        if m.get('SerialNumber') is not None:
            self.serial_number = m.get('SerialNumber')
        return self


class AtomicStepInput(TeaModel):
    def __init__(self, description=None, name=None, sample=None, type=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.sample = sample  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AtomicStepInput, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.sample is not None:
            result['Sample'] = self.sample
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Sample') is not None:
            self.sample = m.get('Sample')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class AtomicStepOutput(TeaModel):
    def __init__(self, description=None, name=None, sample=None, type=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.sample = sample  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AtomicStepOutput, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.sample is not None:
            result['Sample'] = self.sample
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Sample') is not None:
            self.sample = m.get('Sample')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class AtomicStep(TeaModel):
    def __init__(self, description=None, input=None, output=None, step_id=None, step_name=None, step_type=None):
        self.description = description  # type: str
        self.input = input  # type: list[AtomicStepInput]
        self.output = output  # type: list[AtomicStepOutput]
        self.step_id = step_id  # type: str
        self.step_name = step_name  # type: str
        self.step_type = step_type  # type: str

    def validate(self):
        if self.input:
            for k in self.input:
                if k:
                    k.validate()
        if self.output:
            for k in self.output:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(AtomicStep, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        result['Input'] = []
        if self.input is not None:
            for k in self.input:
                result['Input'].append(k.to_map() if k else None)
        result['Output'] = []
        if self.output is not None:
            for k in self.output:
                result['Output'].append(k.to_map() if k else None)
        if self.step_id is not None:
            result['StepId'] = self.step_id
        if self.step_name is not None:
            result['StepName'] = self.step_name
        if self.step_type is not None:
            result['StepType'] = self.step_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        self.input = []
        if m.get('Input') is not None:
            for k in m.get('Input'):
                temp_model = AtomicStepInput()
                self.input.append(temp_model.from_map(k))
        self.output = []
        if m.get('Output') is not None:
            for k in m.get('Output'):
                temp_model = AtomicStepOutput()
                self.output.append(temp_model.from_map(k))
        if m.get('StepId') is not None:
            self.step_id = m.get('StepId')
        if m.get('StepName') is not None:
            self.step_name = m.get('StepName')
        if m.get('StepType') is not None:
            self.step_type = m.get('StepType')
        return self


class BusinessType(TeaModel):
    def __init__(self, abbr=None, action_flag=None, business_type_id=None, create_time=None, direction=None,
                 gateway=None, lease_time=None, mask=None, name=None, reserve_number=None, sharing=None, type=None,
                 update_time=None, vlan=None, zone_type=None):
        self.abbr = abbr  # type: str
        self.action_flag = action_flag  # type: str
        self.business_type_id = business_type_id  # type: str
        self.create_time = create_time  # type: str
        self.direction = direction  # type: long
        self.gateway = gateway  # type: long
        self.lease_time = lease_time  # type: str
        self.mask = mask  # type: str
        self.name = name  # type: str
        self.reserve_number = reserve_number  # type: long
        self.sharing = sharing  # type: str
        self.type = type  # type: str
        self.update_time = update_time  # type: str
        self.vlan = vlan  # type: str
        self.zone_type = zone_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(BusinessType, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.abbr is not None:
            result['Abbr'] = self.abbr
        if self.action_flag is not None:
            result['ActionFlag'] = self.action_flag
        if self.business_type_id is not None:
            result['BusinessTypeId'] = self.business_type_id
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.direction is not None:
            result['Direction'] = self.direction
        if self.gateway is not None:
            result['Gateway'] = self.gateway
        if self.lease_time is not None:
            result['LeaseTime'] = self.lease_time
        if self.mask is not None:
            result['Mask'] = self.mask
        if self.name is not None:
            result['Name'] = self.name
        if self.reserve_number is not None:
            result['ReserveNumber'] = self.reserve_number
        if self.sharing is not None:
            result['Sharing'] = self.sharing
        if self.type is not None:
            result['Type'] = self.type
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        if self.vlan is not None:
            result['Vlan'] = self.vlan
        if self.zone_type is not None:
            result['ZoneType'] = self.zone_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Abbr') is not None:
            self.abbr = m.get('Abbr')
        if m.get('ActionFlag') is not None:
            self.action_flag = m.get('ActionFlag')
        if m.get('BusinessTypeId') is not None:
            self.business_type_id = m.get('BusinessTypeId')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Direction') is not None:
            self.direction = m.get('Direction')
        if m.get('Gateway') is not None:
            self.gateway = m.get('Gateway')
        if m.get('LeaseTime') is not None:
            self.lease_time = m.get('LeaseTime')
        if m.get('Mask') is not None:
            self.mask = m.get('Mask')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('ReserveNumber') is not None:
            self.reserve_number = m.get('ReserveNumber')
        if m.get('Sharing') is not None:
            self.sharing = m.get('Sharing')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        if m.get('Vlan') is not None:
            self.vlan = m.get('Vlan')
        if m.get('ZoneType') is not None:
            self.zone_type = m.get('ZoneType')
        return self


class CliTask(TeaModel):
    def __init__(self, agent_ip=None, cli_task_id=None, command=None, device_id=None, gmt_create=None,
                 gmt_modify=None, output=None, protocol=None, response_code=None, result=None, session_id=None, status=None,
                 timeout=None):
        self.agent_ip = agent_ip  # type: str
        self.cli_task_id = cli_task_id  # type: str
        self.command = command  # type: str
        self.device_id = device_id  # type: str
        self.gmt_create = gmt_create  # type: str
        self.gmt_modify = gmt_modify  # type: str
        self.output = output  # type: str
        self.protocol = protocol  # type: str
        self.response_code = response_code  # type: str
        self.result = result  # type: str
        self.session_id = session_id  # type: str
        self.status = status  # type: str
        self.timeout = timeout  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(CliTask, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_ip is not None:
            result['AgentIp'] = self.agent_ip
        if self.cli_task_id is not None:
            result['CliTaskId'] = self.cli_task_id
        if self.command is not None:
            result['Command'] = self.command
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modify is not None:
            result['GmtModify'] = self.gmt_modify
        if self.output is not None:
            result['Output'] = self.output
        if self.protocol is not None:
            result['Protocol'] = self.protocol
        if self.response_code is not None:
            result['ResponseCode'] = self.response_code
        if self.result is not None:
            result['Result'] = self.result
        if self.session_id is not None:
            result['SessionId'] = self.session_id
        if self.status is not None:
            result['Status'] = self.status
        if self.timeout is not None:
            result['Timeout'] = self.timeout
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AgentIp') is not None:
            self.agent_ip = m.get('AgentIp')
        if m.get('CliTaskId') is not None:
            self.cli_task_id = m.get('CliTaskId')
        if m.get('Command') is not None:
            self.command = m.get('Command')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModify') is not None:
            self.gmt_modify = m.get('GmtModify')
        if m.get('Output') is not None:
            self.output = m.get('Output')
        if m.get('Protocol') is not None:
            self.protocol = m.get('Protocol')
        if m.get('ResponseCode') is not None:
            self.response_code = m.get('ResponseCode')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        if m.get('SessionId') is not None:
            self.session_id = m.get('SessionId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Timeout') is not None:
            self.timeout = m.get('Timeout')
        return self


class ConfigurationSpecification(TeaModel):
    def __init__(self, architecture=None, configuration_specification_id=None, create_time=None, model=None,
                 related_variate=None, role=None, specification_content=None, specification_name=None, update_time=None,
                 vendor=None):
        self.architecture = architecture  # type: str
        self.configuration_specification_id = configuration_specification_id  # type: str
        self.create_time = create_time  # type: str
        self.model = model  # type: str
        self.related_variate = related_variate  # type: list[str]
        self.role = role  # type: str
        self.specification_content = specification_content  # type: str
        self.specification_name = specification_name  # type: str
        self.update_time = update_time  # type: str
        self.vendor = vendor  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ConfigurationSpecification, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.architecture is not None:
            result['Architecture'] = self.architecture
        if self.configuration_specification_id is not None:
            result['ConfigurationSpecificationId'] = self.configuration_specification_id
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.model is not None:
            result['Model'] = self.model
        if self.related_variate is not None:
            result['RelatedVariate'] = self.related_variate
        if self.role is not None:
            result['Role'] = self.role
        if self.specification_content is not None:
            result['SpecificationContent'] = self.specification_content
        if self.specification_name is not None:
            result['SpecificationName'] = self.specification_name
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Architecture') is not None:
            self.architecture = m.get('Architecture')
        if m.get('ConfigurationSpecificationId') is not None:
            self.configuration_specification_id = m.get('ConfigurationSpecificationId')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('RelatedVariate') is not None:
            self.related_variate = m.get('RelatedVariate')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('SpecificationContent') is not None:
            self.specification_content = m.get('SpecificationContent')
        if m.get('SpecificationName') is not None:
            self.specification_name = m.get('SpecificationName')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        return self


class ConfigurationVariate(TeaModel):
    def __init__(self, comment=None, configuration_variate_id=None, create_time=None, format_function=None,
                 update_time=None, variate_name=None):
        self.comment = comment  # type: str
        self.configuration_variate_id = configuration_variate_id  # type: str
        self.create_time = create_time  # type: str
        self.format_function = format_function  # type: str
        self.update_time = update_time  # type: str
        self.variate_name = variate_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ConfigurationVariate, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.comment is not None:
            result['Comment'] = self.comment
        if self.configuration_variate_id is not None:
            result['ConfigurationVariateId'] = self.configuration_variate_id
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.format_function is not None:
            result['FormatFunction'] = self.format_function
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        if self.variate_name is not None:
            result['VariateName'] = self.variate_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Comment') is not None:
            self.comment = m.get('Comment')
        if m.get('ConfigurationVariateId') is not None:
            self.configuration_variate_id = m.get('ConfigurationVariateId')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('FormatFunction') is not None:
            self.format_function = m.get('FormatFunction')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        if m.get('VariateName') is not None:
            self.variate_name = m.get('VariateName')
        return self


class ConnectionPolicy(TeaModel):
    def __init__(self, algorithm=None, connection_policy_id=None, create_time=None, downlink_device_id=None,
                 downlink_module_id=None, id=None, link_count=None, name=None, network_architecture_iteration_id=None,
                 update_time=None, uplink_device_id=None, uplink_model_id=None):
        self.algorithm = algorithm  # type: str
        self.connection_policy_id = connection_policy_id  # type: str
        self.create_time = create_time  # type: str
        self.downlink_device_id = downlink_device_id  # type: str
        self.downlink_module_id = downlink_module_id  # type: str
        self.id = id  # type: str
        self.link_count = link_count  # type: long
        self.name = name  # type: str
        self.network_architecture_iteration_id = network_architecture_iteration_id  # type: str
        self.update_time = update_time  # type: str
        self.uplink_device_id = uplink_device_id  # type: str
        self.uplink_model_id = uplink_model_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ConnectionPolicy, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.algorithm is not None:
            result['Algorithm'] = self.algorithm
        if self.connection_policy_id is not None:
            result['ConnectionPolicyId'] = self.connection_policy_id
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.downlink_device_id is not None:
            result['DownlinkDeviceId'] = self.downlink_device_id
        if self.downlink_module_id is not None:
            result['DownlinkModuleId'] = self.downlink_module_id
        if self.id is not None:
            result['Id'] = self.id
        if self.link_count is not None:
            result['LinkCount'] = self.link_count
        if self.name is not None:
            result['Name'] = self.name
        if self.network_architecture_iteration_id is not None:
            result['NetworkArchitectureIterationId'] = self.network_architecture_iteration_id
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        if self.uplink_device_id is not None:
            result['UplinkDeviceId'] = self.uplink_device_id
        if self.uplink_model_id is not None:
            result['UplinkModelId'] = self.uplink_model_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Algorithm') is not None:
            self.algorithm = m.get('Algorithm')
        if m.get('ConnectionPolicyId') is not None:
            self.connection_policy_id = m.get('ConnectionPolicyId')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('DownlinkDeviceId') is not None:
            self.downlink_device_id = m.get('DownlinkDeviceId')
        if m.get('DownlinkModuleId') is not None:
            self.downlink_module_id = m.get('DownlinkModuleId')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('LinkCount') is not None:
            self.link_count = m.get('LinkCount')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('NetworkArchitectureIterationId') is not None:
            self.network_architecture_iteration_id = m.get('NetworkArchitectureIterationId')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        if m.get('UplinkDeviceId') is not None:
            self.uplink_device_id = m.get('UplinkDeviceId')
        if m.get('UplinkModelId') is not None:
            self.uplink_model_id = m.get('UplinkModelId')
        return self


class DataView(TeaModel):
    def __init__(self, data_view_chart_list=None, data_view_description=None, data_view_id=None,
                 data_view_name=None, gmt_create=None, gmt_modified=None):
        self.data_view_chart_list = data_view_chart_list  # type: list[DataViewChart]
        self.data_view_description = data_view_description  # type: str
        self.data_view_id = data_view_id  # type: str
        self.data_view_name = data_view_name  # type: str
        self.gmt_create = gmt_create  # type: str
        self.gmt_modified = gmt_modified  # type: str

    def validate(self):
        if self.data_view_chart_list:
            for k in self.data_view_chart_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DataView, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['DataViewChartList'] = []
        if self.data_view_chart_list is not None:
            for k in self.data_view_chart_list:
                result['DataViewChartList'].append(k.to_map() if k else None)
        if self.data_view_description is not None:
            result['DataViewDescription'] = self.data_view_description
        if self.data_view_id is not None:
            result['DataViewId'] = self.data_view_id
        if self.data_view_name is not None:
            result['DataViewName'] = self.data_view_name
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.data_view_chart_list = []
        if m.get('DataViewChartList') is not None:
            for k in m.get('DataViewChartList'):
                temp_model = DataViewChart()
                self.data_view_chart_list.append(temp_model.from_map(k))
        if m.get('DataViewDescription') is not None:
            self.data_view_description = m.get('DataViewDescription')
        if m.get('DataViewId') is not None:
            self.data_view_id = m.get('DataViewId')
        if m.get('DataViewName') is not None:
            self.data_view_name = m.get('DataViewName')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        return self


class DataViewChart(TeaModel):
    def __init__(self, chart_type=None, data_view_id=None, data_view_source=None, gmt_create=None,
                 gmt_modified=None, grid=None):
        self.chart_type = chart_type  # type: str
        self.data_view_id = data_view_id  # type: str
        self.data_view_source = data_view_source  # type: str
        self.gmt_create = gmt_create  # type: str
        self.gmt_modified = gmt_modified  # type: str
        self.grid = grid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DataViewChart, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.chart_type is not None:
            result['ChartType'] = self.chart_type
        if self.data_view_id is not None:
            result['DataViewId'] = self.data_view_id
        if self.data_view_source is not None:
            result['DataViewSource'] = self.data_view_source
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.grid is not None:
            result['Grid'] = self.grid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ChartType') is not None:
            self.chart_type = m.get('ChartType')
        if m.get('DataViewId') is not None:
            self.data_view_id = m.get('DataViewId')
        if m.get('DataViewSource') is not None:
            self.data_view_source = m.get('DataViewSource')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Grid') is not None:
            self.grid = m.get('Grid')
        return self


class DedicatedLine(TeaModel):
    def __init__(self, bandwidth=None, device_id=None, device_port=None, isp=None, line_gateway=None, line_id=None,
                 line_ip=None, line_role=None):
        self.bandwidth = bandwidth  # type: int
        self.device_id = device_id  # type: str
        self.device_port = device_port  # type: str
        self.isp = isp  # type: str
        self.line_gateway = line_gateway  # type: str
        self.line_id = line_id  # type: str
        self.line_ip = line_ip  # type: str
        self.line_role = line_role  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DedicatedLine, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bandwidth is not None:
            result['Bandwidth'] = self.bandwidth
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.device_port is not None:
            result['DevicePort'] = self.device_port
        if self.isp is not None:
            result['Isp'] = self.isp
        if self.line_gateway is not None:
            result['LineGateway'] = self.line_gateway
        if self.line_id is not None:
            result['LineId'] = self.line_id
        if self.line_ip is not None:
            result['LineIp'] = self.line_ip
        if self.line_role is not None:
            result['LineRole'] = self.line_role
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Bandwidth') is not None:
            self.bandwidth = m.get('Bandwidth')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('DevicePort') is not None:
            self.device_port = m.get('DevicePort')
        if m.get('Isp') is not None:
            self.isp = m.get('Isp')
        if m.get('LineGateway') is not None:
            self.line_gateway = m.get('LineGateway')
        if m.get('LineId') is not None:
            self.line_id = m.get('LineId')
        if m.get('LineIp') is not None:
            self.line_ip = m.get('LineIp')
        if m.get('LineRole') is not None:
            self.line_role = m.get('LineRole')
        return self


class Device(TeaModel):
    def __init__(self, account_type=None, account_version=None, auth_pass_phrase=None, auth_protocol=None,
                 community=None, device_form=None, device_id=None, device_ip=None, device_mac=None, device_sn=None,
                 hostname=None, model=None, privacy_pass_phrase=None, privacy_protocol=None, security_domain=None,
                 security_level=None, space=None, ssh_account=None, ssh_password=None, status=None, telnet_account=None,
                 telnet_password=None, user_name=None, vendor=None):
        self.account_type = account_type  # type: str
        self.account_version = account_version  # type: str
        self.auth_pass_phrase = auth_pass_phrase  # type: str
        self.auth_protocol = auth_protocol  # type: str
        self.community = community  # type: str
        self.device_form = device_form  # type: str
        self.device_id = device_id  # type: str
        self.device_ip = device_ip  # type: str
        self.device_mac = device_mac  # type: str
        self.device_sn = device_sn  # type: str
        self.hostname = hostname  # type: str
        self.model = model  # type: str
        self.privacy_pass_phrase = privacy_pass_phrase  # type: str
        self.privacy_protocol = privacy_protocol  # type: str
        self.security_domain = security_domain  # type: str
        self.security_level = security_level  # type: str
        self.space = space  # type: str
        self.ssh_account = ssh_account  # type: str
        self.ssh_password = ssh_password  # type: str
        self.status = status  # type: str
        self.telnet_account = telnet_account  # type: str
        self.telnet_password = telnet_password  # type: str
        self.user_name = user_name  # type: str
        self.vendor = vendor  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(Device, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_type is not None:
            result['AccountType'] = self.account_type
        if self.account_version is not None:
            result['AccountVersion'] = self.account_version
        if self.auth_pass_phrase is not None:
            result['AuthPassPhrase'] = self.auth_pass_phrase
        if self.auth_protocol is not None:
            result['AuthProtocol'] = self.auth_protocol
        if self.community is not None:
            result['Community'] = self.community
        if self.device_form is not None:
            result['DeviceForm'] = self.device_form
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.device_ip is not None:
            result['DeviceIp'] = self.device_ip
        if self.device_mac is not None:
            result['DeviceMac'] = self.device_mac
        if self.device_sn is not None:
            result['DeviceSn'] = self.device_sn
        if self.hostname is not None:
            result['Hostname'] = self.hostname
        if self.model is not None:
            result['Model'] = self.model
        if self.privacy_pass_phrase is not None:
            result['PrivacyPassPhrase'] = self.privacy_pass_phrase
        if self.privacy_protocol is not None:
            result['PrivacyProtocol'] = self.privacy_protocol
        if self.security_domain is not None:
            result['SecurityDomain'] = self.security_domain
        if self.security_level is not None:
            result['SecurityLevel'] = self.security_level
        if self.space is not None:
            result['Space'] = self.space
        if self.ssh_account is not None:
            result['SshAccount'] = self.ssh_account
        if self.ssh_password is not None:
            result['SshPassword'] = self.ssh_password
        if self.status is not None:
            result['Status'] = self.status
        if self.telnet_account is not None:
            result['TelnetAccount'] = self.telnet_account
        if self.telnet_password is not None:
            result['TelnetPassword'] = self.telnet_password
        if self.user_name is not None:
            result['UserName'] = self.user_name
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AccountType') is not None:
            self.account_type = m.get('AccountType')
        if m.get('AccountVersion') is not None:
            self.account_version = m.get('AccountVersion')
        if m.get('AuthPassPhrase') is not None:
            self.auth_pass_phrase = m.get('AuthPassPhrase')
        if m.get('AuthProtocol') is not None:
            self.auth_protocol = m.get('AuthProtocol')
        if m.get('Community') is not None:
            self.community = m.get('Community')
        if m.get('DeviceForm') is not None:
            self.device_form = m.get('DeviceForm')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('DeviceIp') is not None:
            self.device_ip = m.get('DeviceIp')
        if m.get('DeviceMac') is not None:
            self.device_mac = m.get('DeviceMac')
        if m.get('DeviceSn') is not None:
            self.device_sn = m.get('DeviceSn')
        if m.get('Hostname') is not None:
            self.hostname = m.get('Hostname')
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('PrivacyPassPhrase') is not None:
            self.privacy_pass_phrase = m.get('PrivacyPassPhrase')
        if m.get('PrivacyProtocol') is not None:
            self.privacy_protocol = m.get('PrivacyProtocol')
        if m.get('SecurityDomain') is not None:
            self.security_domain = m.get('SecurityDomain')
        if m.get('SecurityLevel') is not None:
            self.security_level = m.get('SecurityLevel')
        if m.get('Space') is not None:
            self.space = m.get('Space')
        if m.get('SshAccount') is not None:
            self.ssh_account = m.get('SshAccount')
        if m.get('SshPassword') is not None:
            self.ssh_password = m.get('SshPassword')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TelnetAccount') is not None:
            self.telnet_account = m.get('TelnetAccount')
        if m.get('TelnetPassword') is not None:
            self.telnet_password = m.get('TelnetPassword')
        if m.get('UserName') is not None:
            self.user_name = m.get('UserName')
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        return self


class DeviceForm(TeaModel):
    def __init__(self, account_config=None, config_compare=None, form_id=None, form_name=None, properties_list=None):
        self.account_config = account_config  # type: str
        self.config_compare = config_compare  # type: str
        self.form_id = form_id  # type: str
        self.form_name = form_name  # type: str
        self.properties_list = properties_list  # type: list[DeviceFormProperty]

    def validate(self):
        if self.properties_list:
            for k in self.properties_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DeviceForm, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_config is not None:
            result['AccountConfig'] = self.account_config
        if self.config_compare is not None:
            result['ConfigCompare'] = self.config_compare
        if self.form_id is not None:
            result['FormId'] = self.form_id
        if self.form_name is not None:
            result['FormName'] = self.form_name
        result['PropertiesList'] = []
        if self.properties_list is not None:
            for k in self.properties_list:
                result['PropertiesList'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AccountConfig') is not None:
            self.account_config = m.get('AccountConfig')
        if m.get('ConfigCompare') is not None:
            self.config_compare = m.get('ConfigCompare')
        if m.get('FormId') is not None:
            self.form_id = m.get('FormId')
        if m.get('FormName') is not None:
            self.form_name = m.get('FormName')
        self.properties_list = []
        if m.get('PropertiesList') is not None:
            for k in m.get('PropertiesList'):
                temp_model = DeviceFormProperty()
                self.properties_list.append(temp_model.from_map(k))
        return self


class DeviceFormProperty(TeaModel):
    def __init__(self, content=None, keyword=None, placeholder=None, required=None, search_supported=None,
                 sequence=None, table_visible=None, uniqueness=None, value_reference=None, value_source=None,
                 value_type=None):
        self.content = content  # type: str
        self.keyword = keyword  # type: str
        self.placeholder = placeholder  # type: bool
        self.required = required  # type: bool
        self.search_supported = search_supported  # type: bool
        self.sequence = sequence  # type: int
        self.table_visible = table_visible  # type: bool
        self.uniqueness = uniqueness  # type: bool
        self.value_reference = value_reference  # type: str
        self.value_source = value_source  # type: str
        self.value_type = value_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeviceFormProperty, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['Content'] = self.content
        if self.keyword is not None:
            result['Keyword'] = self.keyword
        if self.placeholder is not None:
            result['Placeholder'] = self.placeholder
        if self.required is not None:
            result['Required'] = self.required
        if self.search_supported is not None:
            result['SearchSupported'] = self.search_supported
        if self.sequence is not None:
            result['Sequence'] = self.sequence
        if self.table_visible is not None:
            result['TableVisible'] = self.table_visible
        if self.uniqueness is not None:
            result['Uniqueness'] = self.uniqueness
        if self.value_reference is not None:
            result['ValueReference'] = self.value_reference
        if self.value_source is not None:
            result['ValueSource'] = self.value_source
        if self.value_type is not None:
            result['ValueType'] = self.value_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('Keyword') is not None:
            self.keyword = m.get('Keyword')
        if m.get('Placeholder') is not None:
            self.placeholder = m.get('Placeholder')
        if m.get('Required') is not None:
            self.required = m.get('Required')
        if m.get('SearchSupported') is not None:
            self.search_supported = m.get('SearchSupported')
        if m.get('Sequence') is not None:
            self.sequence = m.get('Sequence')
        if m.get('TableVisible') is not None:
            self.table_visible = m.get('TableVisible')
        if m.get('Uniqueness') is not None:
            self.uniqueness = m.get('Uniqueness')
        if m.get('ValueReference') is not None:
            self.value_reference = m.get('ValueReference')
        if m.get('ValueSource') is not None:
            self.value_source = m.get('ValueSource')
        if m.get('ValueType') is not None:
            self.value_type = m.get('ValueType')
        return self


class DeviceProperty(TeaModel):
    def __init__(self, content=None, device_form=None, format=None, name_cn=None, name_en=None, property_id=None):
        self.content = content  # type: str
        self.device_form = device_form  # type: str
        self.format = format  # type: str
        self.name_cn = name_cn  # type: str
        self.name_en = name_en  # type: str
        self.property_id = property_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeviceProperty, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['Content'] = self.content
        if self.device_form is not None:
            result['DeviceForm'] = self.device_form
        if self.format is not None:
            result['Format'] = self.format
        if self.name_cn is not None:
            result['NameCn'] = self.name_cn
        if self.name_en is not None:
            result['NameEn'] = self.name_en
        if self.property_id is not None:
            result['PropertyId'] = self.property_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('DeviceForm') is not None:
            self.device_form = m.get('DeviceForm')
        if m.get('Format') is not None:
            self.format = m.get('Format')
        if m.get('NameCn') is not None:
            self.name_cn = m.get('NameCn')
        if m.get('NameEn') is not None:
            self.name_en = m.get('NameEn')
        if m.get('PropertyId') is not None:
            self.property_id = m.get('PropertyId')
        return self


class DeviceResourceDeviceResource(TeaModel):
    def __init__(self, block_number=None, business=None, config=None, config_generate=None, config_task_status=None,
                 delivery_ip=None, device_number=None, device_resource_id=None, host_name=None, inter_connection=None,
                 location=None, loopback=None, manager_ip=None, model=None, role=None, setup_project_id=None, sn=None,
                 stack=None, vendor=None):
        self.block_number = block_number  # type: str
        self.business = business  # type: str
        self.config = config  # type: str
        self.config_generate = config_generate  # type: bool
        self.config_task_status = config_task_status  # type: str
        self.delivery_ip = delivery_ip  # type: str
        self.device_number = device_number  # type: str
        self.device_resource_id = device_resource_id  # type: str
        self.host_name = host_name  # type: str
        self.inter_connection = inter_connection  # type: str
        self.location = location  # type: str
        self.loopback = loopback  # type: str
        self.manager_ip = manager_ip  # type: str
        self.model = model  # type: str
        self.role = role  # type: str
        self.setup_project_id = setup_project_id  # type: str
        self.sn = sn  # type: str
        self.stack = stack  # type: bool
        self.vendor = vendor  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeviceResourceDeviceResource, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.block_number is not None:
            result['BlockNumber'] = self.block_number
        if self.business is not None:
            result['Business'] = self.business
        if self.config is not None:
            result['Config'] = self.config
        if self.config_generate is not None:
            result['ConfigGenerate'] = self.config_generate
        if self.config_task_status is not None:
            result['ConfigTaskStatus'] = self.config_task_status
        if self.delivery_ip is not None:
            result['DeliveryIp'] = self.delivery_ip
        if self.device_number is not None:
            result['DeviceNumber'] = self.device_number
        if self.device_resource_id is not None:
            result['DeviceResourceId'] = self.device_resource_id
        if self.host_name is not None:
            result['HostName'] = self.host_name
        if self.inter_connection is not None:
            result['InterConnection'] = self.inter_connection
        if self.location is not None:
            result['Location'] = self.location
        if self.loopback is not None:
            result['Loopback'] = self.loopback
        if self.manager_ip is not None:
            result['ManagerIp'] = self.manager_ip
        if self.model is not None:
            result['Model'] = self.model
        if self.role is not None:
            result['Role'] = self.role
        if self.setup_project_id is not None:
            result['SetupProjectId'] = self.setup_project_id
        if self.sn is not None:
            result['Sn'] = self.sn
        if self.stack is not None:
            result['Stack'] = self.stack
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BlockNumber') is not None:
            self.block_number = m.get('BlockNumber')
        if m.get('Business') is not None:
            self.business = m.get('Business')
        if m.get('Config') is not None:
            self.config = m.get('Config')
        if m.get('ConfigGenerate') is not None:
            self.config_generate = m.get('ConfigGenerate')
        if m.get('ConfigTaskStatus') is not None:
            self.config_task_status = m.get('ConfigTaskStatus')
        if m.get('DeliveryIp') is not None:
            self.delivery_ip = m.get('DeliveryIp')
        if m.get('DeviceNumber') is not None:
            self.device_number = m.get('DeviceNumber')
        if m.get('DeviceResourceId') is not None:
            self.device_resource_id = m.get('DeviceResourceId')
        if m.get('HostName') is not None:
            self.host_name = m.get('HostName')
        if m.get('InterConnection') is not None:
            self.inter_connection = m.get('InterConnection')
        if m.get('Location') is not None:
            self.location = m.get('Location')
        if m.get('Loopback') is not None:
            self.loopback = m.get('Loopback')
        if m.get('ManagerIp') is not None:
            self.manager_ip = m.get('ManagerIp')
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('SetupProjectId') is not None:
            self.setup_project_id = m.get('SetupProjectId')
        if m.get('Sn') is not None:
            self.sn = m.get('Sn')
        if m.get('Stack') is not None:
            self.stack = m.get('Stack')
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        return self


class DeviceResource(TeaModel):
    def __init__(self, arch_id=None, business_type=None, business_type_id=None, business_type_params=None,
                 create_time=None, data=None, device_resource=None, device_resource_id=None, device_resource_ids=None,
                 download_type=None, ip_type=None, list_type=None, loopback_port=None, net_location=None, setup_project_id=None,
                 type=None):
        self.arch_id = arch_id  # type: str
        self.business_type = business_type  # type: str
        self.business_type_id = business_type_id  # type: str
        self.business_type_params = business_type_params  # type: str
        self.create_time = create_time  # type: str
        self.data = data  # type: str
        self.device_resource = device_resource  # type: list[DeviceResourceDeviceResource]
        self.device_resource_id = device_resource_id  # type: str
        self.device_resource_ids = device_resource_ids  # type: list[str]
        self.download_type = download_type  # type: str
        self.ip_type = ip_type  # type: str
        self.list_type = list_type  # type: str
        self.loopback_port = loopback_port  # type: str
        self.net_location = net_location  # type: str
        self.setup_project_id = setup_project_id  # type: str
        self.type = type  # type: str

    def validate(self):
        if self.device_resource:
            for k in self.device_resource:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DeviceResource, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arch_id is not None:
            result['ArchId'] = self.arch_id
        if self.business_type is not None:
            result['BusinessType'] = self.business_type
        if self.business_type_id is not None:
            result['BusinessTypeId'] = self.business_type_id
        if self.business_type_params is not None:
            result['BusinessTypeParams'] = self.business_type_params
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.data is not None:
            result['Data'] = self.data
        result['DeviceResource'] = []
        if self.device_resource is not None:
            for k in self.device_resource:
                result['DeviceResource'].append(k.to_map() if k else None)
        if self.device_resource_id is not None:
            result['DeviceResourceId'] = self.device_resource_id
        if self.device_resource_ids is not None:
            result['DeviceResourceIds'] = self.device_resource_ids
        if self.download_type is not None:
            result['DownloadType'] = self.download_type
        if self.ip_type is not None:
            result['IpType'] = self.ip_type
        if self.list_type is not None:
            result['ListType'] = self.list_type
        if self.loopback_port is not None:
            result['LoopbackPort'] = self.loopback_port
        if self.net_location is not None:
            result['NetLocation'] = self.net_location
        if self.setup_project_id is not None:
            result['SetupProjectId'] = self.setup_project_id
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ArchId') is not None:
            self.arch_id = m.get('ArchId')
        if m.get('BusinessType') is not None:
            self.business_type = m.get('BusinessType')
        if m.get('BusinessTypeId') is not None:
            self.business_type_id = m.get('BusinessTypeId')
        if m.get('BusinessTypeParams') is not None:
            self.business_type_params = m.get('BusinessTypeParams')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        self.device_resource = []
        if m.get('DeviceResource') is not None:
            for k in m.get('DeviceResource'):
                temp_model = DeviceResourceDeviceResource()
                self.device_resource.append(temp_model.from_map(k))
        if m.get('DeviceResourceId') is not None:
            self.device_resource_id = m.get('DeviceResourceId')
        if m.get('DeviceResourceIds') is not None:
            self.device_resource_ids = m.get('DeviceResourceIds')
        if m.get('DownloadType') is not None:
            self.download_type = m.get('DownloadType')
        if m.get('IpType') is not None:
            self.ip_type = m.get('IpType')
        if m.get('ListType') is not None:
            self.list_type = m.get('ListType')
        if m.get('LoopbackPort') is not None:
            self.loopback_port = m.get('LoopbackPort')
        if m.get('NetLocation') is not None:
            self.net_location = m.get('NetLocation')
        if m.get('SetupProjectId') is not None:
            self.setup_project_id = m.get('SetupProjectId')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class DeviceTask(TeaModel):
    def __init__(self, device_id=None, device_ip=None, device_name=None, device_task_id=None, gmt_create=None,
                 gmt_modify=None, output=None, params=None, response_code=None, result=None, script_id=None,
                 script_version=None, status=None, template_id=None, template_name=None):
        self.device_id = device_id  # type: str
        self.device_ip = device_ip  # type: str
        self.device_name = device_name  # type: str
        self.device_task_id = device_task_id  # type: str
        self.gmt_create = gmt_create  # type: str
        self.gmt_modify = gmt_modify  # type: str
        self.output = output  # type: str
        self.params = params  # type: str
        self.response_code = response_code  # type: str
        self.result = result  # type: str
        self.script_id = script_id  # type: str
        self.script_version = script_version  # type: str
        self.status = status  # type: str
        self.template_id = template_id  # type: str
        self.template_name = template_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeviceTask, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.device_ip is not None:
            result['DeviceIp'] = self.device_ip
        if self.device_name is not None:
            result['DeviceName'] = self.device_name
        if self.device_task_id is not None:
            result['DeviceTaskId'] = self.device_task_id
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modify is not None:
            result['GmtModify'] = self.gmt_modify
        if self.output is not None:
            result['Output'] = self.output
        if self.params is not None:
            result['Params'] = self.params
        if self.response_code is not None:
            result['ResponseCode'] = self.response_code
        if self.result is not None:
            result['Result'] = self.result
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.script_version is not None:
            result['ScriptVersion'] = self.script_version
        if self.status is not None:
            result['Status'] = self.status
        if self.template_id is not None:
            result['TemplateId'] = self.template_id
        if self.template_name is not None:
            result['TemplateName'] = self.template_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('DeviceIp') is not None:
            self.device_ip = m.get('DeviceIp')
        if m.get('DeviceName') is not None:
            self.device_name = m.get('DeviceName')
        if m.get('DeviceTaskId') is not None:
            self.device_task_id = m.get('DeviceTaskId')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModify') is not None:
            self.gmt_modify = m.get('GmtModify')
        if m.get('Output') is not None:
            self.output = m.get('Output')
        if m.get('Params') is not None:
            self.params = m.get('Params')
        if m.get('ResponseCode') is not None:
            self.response_code = m.get('ResponseCode')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('ScriptVersion') is not None:
            self.script_version = m.get('ScriptVersion')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TemplateId') is not None:
            self.template_id = m.get('TemplateId')
        if m.get('TemplateName') is not None:
            self.template_name = m.get('TemplateName')
        return self


class EventResourceDevice(TeaModel):
    def __init__(self, host_name=None, physical_space=None):
        self.host_name = host_name  # type: str
        self.physical_space = physical_space  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(EventResourceDevice, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.host_name is not None:
            result['HostName'] = self.host_name
        if self.physical_space is not None:
            result['PhysicalSpace'] = self.physical_space
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('HostName') is not None:
            self.host_name = m.get('HostName')
        if m.get('PhysicalSpace') is not None:
            self.physical_space = m.get('PhysicalSpace')
        return self


class Event(TeaModel):
    def __init__(self, alarm_status=None, count=None, create_time=None, device_id=None, event_name=None,
                 event_object=None, event_object_id=None, event_type=None, message=None, resource_device=None, template_id=None,
                 update_time=None):
        self.alarm_status = alarm_status  # type: str
        self.count = count  # type: long
        self.create_time = create_time  # type: str
        self.device_id = device_id  # type: str
        self.event_name = event_name  # type: str
        self.event_object = event_object  # type: str
        self.event_object_id = event_object_id  # type: str
        self.event_type = event_type  # type: str
        self.message = message  # type: str
        self.resource_device = resource_device  # type: EventResourceDevice
        self.template_id = template_id  # type: str
        self.update_time = update_time  # type: str

    def validate(self):
        if self.resource_device:
            self.resource_device.validate()

    def to_map(self):
        _map = super(Event, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alarm_status is not None:
            result['AlarmStatus'] = self.alarm_status
        if self.count is not None:
            result['Count'] = self.count
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.event_name is not None:
            result['EventName'] = self.event_name
        if self.event_object is not None:
            result['EventObject'] = self.event_object
        if self.event_object_id is not None:
            result['EventObjectId'] = self.event_object_id
        if self.event_type is not None:
            result['EventType'] = self.event_type
        if self.message is not None:
            result['Message'] = self.message
        if self.resource_device is not None:
            result['ResourceDevice'] = self.resource_device.to_map()
        if self.template_id is not None:
            result['TemplateId'] = self.template_id
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AlarmStatus') is not None:
            self.alarm_status = m.get('AlarmStatus')
        if m.get('Count') is not None:
            self.count = m.get('Count')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('EventName') is not None:
            self.event_name = m.get('EventName')
        if m.get('EventObject') is not None:
            self.event_object = m.get('EventObject')
        if m.get('EventObjectId') is not None:
            self.event_object_id = m.get('EventObjectId')
        if m.get('EventType') is not None:
            self.event_type = m.get('EventType')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('ResourceDevice') is not None:
            temp_model = EventResourceDevice()
            self.resource_device = temp_model.from_map(m['ResourceDevice'])
        if m.get('TemplateId') is not None:
            self.template_id = m.get('TemplateId')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        return self


class EventDefinition(TeaModel):
    def __init__(self, create_time=None, event_id=None, event_name=None, event_type=None, template_id=None,
                 update_time=None):
        self.create_time = create_time  # type: str
        self.event_id = event_id  # type: str
        self.event_name = event_name  # type: str
        self.event_type = event_type  # type: str
        self.template_id = template_id  # type: str
        self.update_time = update_time  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(EventDefinition, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.event_id is not None:
            result['EventId'] = self.event_id
        if self.event_name is not None:
            result['EventName'] = self.event_name
        if self.event_type is not None:
            result['EventType'] = self.event_type
        if self.template_id is not None:
            result['TemplateId'] = self.template_id
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('EventId') is not None:
            self.event_id = m.get('EventId')
        if m.get('EventName') is not None:
            self.event_name = m.get('EventName')
        if m.get('EventType') is not None:
            self.event_type = m.get('EventType')
        if m.get('TemplateId') is not None:
            self.template_id = m.get('TemplateId')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        return self


class InspectionItem(TeaModel):
    def __init__(self, inspection_crontab=None, item_description=None, item_id=None, item_name=None):
        self.inspection_crontab = inspection_crontab  # type: str
        self.item_description = item_description  # type: str
        self.item_id = item_id  # type: str
        self.item_name = item_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(InspectionItem, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.inspection_crontab is not None:
            result['InspectionCrontab'] = self.inspection_crontab
        if self.item_description is not None:
            result['ItemDescription'] = self.item_description
        if self.item_id is not None:
            result['ItemId'] = self.item_id
        if self.item_name is not None:
            result['ItemName'] = self.item_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InspectionCrontab') is not None:
            self.inspection_crontab = m.get('InspectionCrontab')
        if m.get('ItemDescription') is not None:
            self.item_description = m.get('ItemDescription')
        if m.get('ItemId') is not None:
            self.item_id = m.get('ItemId')
        if m.get('ItemName') is not None:
            self.item_name = m.get('ItemName')
        return self


class InspectionScriptInspectionAlarmRules(TeaModel):
    def __init__(self, alarm_expression=None, alarm_level=None, alarm_operator=None, alarm_value=None):
        self.alarm_expression = alarm_expression  # type: str
        self.alarm_level = alarm_level  # type: str
        self.alarm_operator = alarm_operator  # type: str
        self.alarm_value = alarm_value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(InspectionScriptInspectionAlarmRules, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alarm_expression is not None:
            result['AlarmExpression'] = self.alarm_expression
        if self.alarm_level is not None:
            result['AlarmLevel'] = self.alarm_level
        if self.alarm_operator is not None:
            result['AlarmOperator'] = self.alarm_operator
        if self.alarm_value is not None:
            result['AlarmValue'] = self.alarm_value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AlarmExpression') is not None:
            self.alarm_expression = m.get('AlarmExpression')
        if m.get('AlarmLevel') is not None:
            self.alarm_level = m.get('AlarmLevel')
        if m.get('AlarmOperator') is not None:
            self.alarm_operator = m.get('AlarmOperator')
        if m.get('AlarmValue') is not None:
            self.alarm_value = m.get('AlarmValue')
        return self


class InspectionScript(TeaModel):
    def __init__(self, inspection_alarm_rules=None, inspection_crontab=None, item_description=None, item_id=None,
                 item_name=None, model=None, role=None, script=None, script_id=None, script_status=None, vendor=None):
        self.inspection_alarm_rules = inspection_alarm_rules  # type: list[InspectionScriptInspectionAlarmRules]
        self.inspection_crontab = inspection_crontab  # type: str
        self.item_description = item_description  # type: str
        self.item_id = item_id  # type: str
        self.item_name = item_name  # type: str
        self.model = model  # type: str
        self.role = role  # type: str
        self.script = script  # type: str
        self.script_id = script_id  # type: str
        self.script_status = script_status  # type: str
        self.vendor = vendor  # type: str

    def validate(self):
        if self.inspection_alarm_rules:
            for k in self.inspection_alarm_rules:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(InspectionScript, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['InspectionAlarmRules'] = []
        if self.inspection_alarm_rules is not None:
            for k in self.inspection_alarm_rules:
                result['InspectionAlarmRules'].append(k.to_map() if k else None)
        if self.inspection_crontab is not None:
            result['InspectionCrontab'] = self.inspection_crontab
        if self.item_description is not None:
            result['ItemDescription'] = self.item_description
        if self.item_id is not None:
            result['ItemId'] = self.item_id
        if self.item_name is not None:
            result['ItemName'] = self.item_name
        if self.model is not None:
            result['Model'] = self.model
        if self.role is not None:
            result['Role'] = self.role
        if self.script is not None:
            result['Script'] = self.script
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.script_status is not None:
            result['ScriptStatus'] = self.script_status
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.inspection_alarm_rules = []
        if m.get('InspectionAlarmRules') is not None:
            for k in m.get('InspectionAlarmRules'):
                temp_model = InspectionScriptInspectionAlarmRules()
                self.inspection_alarm_rules.append(temp_model.from_map(k))
        if m.get('InspectionCrontab') is not None:
            self.inspection_crontab = m.get('InspectionCrontab')
        if m.get('ItemDescription') is not None:
            self.item_description = m.get('ItemDescription')
        if m.get('ItemId') is not None:
            self.item_id = m.get('ItemId')
        if m.get('ItemName') is not None:
            self.item_name = m.get('ItemName')
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('Script') is not None:
            self.script = m.get('Script')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('ScriptStatus') is not None:
            self.script_status = m.get('ScriptStatus')
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        return self


class InspectionTaskInspectionAlarmRules(TeaModel):
    def __init__(self, actual_value=None, expression=None, level=None, operator=None, value=None):
        self.actual_value = actual_value  # type: str
        self.expression = expression  # type: str
        self.level = level  # type: str
        self.operator = operator  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(InspectionTaskInspectionAlarmRules, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.actual_value is not None:
            result['ActualValue'] = self.actual_value
        if self.expression is not None:
            result['Expression'] = self.expression
        if self.level is not None:
            result['Level'] = self.level
        if self.operator is not None:
            result['Operator'] = self.operator
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ActualValue') is not None:
            self.actual_value = m.get('ActualValue')
        if m.get('Expression') is not None:
            self.expression = m.get('Expression')
        if m.get('Level') is not None:
            self.level = m.get('Level')
        if m.get('Operator') is not None:
            self.operator = m.get('Operator')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class InspectionTask(TeaModel):
    def __init__(self, device_id=None, error_code=None, execution_begin_time=None, execution_end_time=None,
                 hostname=None, ip=None, inspection_alarm_rules=None, inspection_result=None, item_id=None, item_name=None,
                 model=None, role=None, space=None, task_status=None, template_id=None, vendor=None):
        self.device_id = device_id  # type: str
        self.error_code = error_code  # type: str
        self.execution_begin_time = execution_begin_time  # type: str
        self.execution_end_time = execution_end_time  # type: str
        self.hostname = hostname  # type: str
        self.ip = ip  # type: str
        self.inspection_alarm_rules = inspection_alarm_rules  # type: list[InspectionTaskInspectionAlarmRules]
        self.inspection_result = inspection_result  # type: str
        self.item_id = item_id  # type: str
        self.item_name = item_name  # type: str
        self.model = model  # type: str
        self.role = role  # type: str
        self.space = space  # type: str
        self.task_status = task_status  # type: str
        self.template_id = template_id  # type: str
        self.vendor = vendor  # type: str

    def validate(self):
        if self.inspection_alarm_rules:
            for k in self.inspection_alarm_rules:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(InspectionTask, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.execution_begin_time is not None:
            result['ExecutionBeginTime'] = self.execution_begin_time
        if self.execution_end_time is not None:
            result['ExecutionEndTime'] = self.execution_end_time
        if self.hostname is not None:
            result['Hostname'] = self.hostname
        if self.ip is not None:
            result['IP'] = self.ip
        result['InspectionAlarmRules'] = []
        if self.inspection_alarm_rules is not None:
            for k in self.inspection_alarm_rules:
                result['InspectionAlarmRules'].append(k.to_map() if k else None)
        if self.inspection_result is not None:
            result['InspectionResult'] = self.inspection_result
        if self.item_id is not None:
            result['ItemId'] = self.item_id
        if self.item_name is not None:
            result['ItemName'] = self.item_name
        if self.model is not None:
            result['Model'] = self.model
        if self.role is not None:
            result['Role'] = self.role
        if self.space is not None:
            result['Space'] = self.space
        if self.task_status is not None:
            result['TaskStatus'] = self.task_status
        if self.template_id is not None:
            result['TemplateId'] = self.template_id
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('ExecutionBeginTime') is not None:
            self.execution_begin_time = m.get('ExecutionBeginTime')
        if m.get('ExecutionEndTime') is not None:
            self.execution_end_time = m.get('ExecutionEndTime')
        if m.get('Hostname') is not None:
            self.hostname = m.get('Hostname')
        if m.get('IP') is not None:
            self.ip = m.get('IP')
        self.inspection_alarm_rules = []
        if m.get('InspectionAlarmRules') is not None:
            for k in m.get('InspectionAlarmRules'):
                temp_model = InspectionTaskInspectionAlarmRules()
                self.inspection_alarm_rules.append(temp_model.from_map(k))
        if m.get('InspectionResult') is not None:
            self.inspection_result = m.get('InspectionResult')
        if m.get('ItemId') is not None:
            self.item_id = m.get('ItemId')
        if m.get('ItemName') is not None:
            self.item_name = m.get('ItemName')
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('Space') is not None:
            self.space = m.get('Space')
        if m.get('TaskStatus') is not None:
            self.task_status = m.get('TaskStatus')
        if m.get('TemplateId') is not None:
            self.template_id = m.get('TemplateId')
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        return self


class IpZoneLayer(TeaModel):
    def __init__(self, name=None, value=None):
        self.name = name  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(IpZoneLayer, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name is not None:
            result['Name'] = self.name
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class Ip(TeaModel):
    def __init__(self, business_type_id=None, business_type_name=None, create_time=None, device_mac=None,
                 device_name=None, ip_address=None, ip_id=None, ip_name=None, parent_ip_block=None, port=None, status=None,
                 zone_layer=None):
        self.business_type_id = business_type_id  # type: str
        self.business_type_name = business_type_name  # type: str
        self.create_time = create_time  # type: str
        self.device_mac = device_mac  # type: str
        self.device_name = device_name  # type: str
        self.ip_address = ip_address  # type: str
        self.ip_id = ip_id  # type: str
        self.ip_name = ip_name  # type: str
        self.parent_ip_block = parent_ip_block  # type: str
        self.port = port  # type: str
        self.status = status  # type: str
        self.zone_layer = zone_layer  # type: list[IpZoneLayer]

    def validate(self):
        if self.zone_layer:
            for k in self.zone_layer:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(Ip, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.business_type_id is not None:
            result['BusinessTypeId'] = self.business_type_id
        if self.business_type_name is not None:
            result['BusinessTypeName'] = self.business_type_name
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.device_mac is not None:
            result['DeviceMac'] = self.device_mac
        if self.device_name is not None:
            result['DeviceName'] = self.device_name
        if self.ip_address is not None:
            result['IpAddress'] = self.ip_address
        if self.ip_id is not None:
            result['IpId'] = self.ip_id
        if self.ip_name is not None:
            result['IpName'] = self.ip_name
        if self.parent_ip_block is not None:
            result['ParentIpBlock'] = self.parent_ip_block
        if self.port is not None:
            result['Port'] = self.port
        if self.status is not None:
            result['Status'] = self.status
        result['ZoneLayer'] = []
        if self.zone_layer is not None:
            for k in self.zone_layer:
                result['ZoneLayer'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BusinessTypeId') is not None:
            self.business_type_id = m.get('BusinessTypeId')
        if m.get('BusinessTypeName') is not None:
            self.business_type_name = m.get('BusinessTypeName')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('DeviceMac') is not None:
            self.device_mac = m.get('DeviceMac')
        if m.get('DeviceName') is not None:
            self.device_name = m.get('DeviceName')
        if m.get('IpAddress') is not None:
            self.ip_address = m.get('IpAddress')
        if m.get('IpId') is not None:
            self.ip_id = m.get('IpId')
        if m.get('IpName') is not None:
            self.ip_name = m.get('IpName')
        if m.get('ParentIpBlock') is not None:
            self.parent_ip_block = m.get('ParentIpBlock')
        if m.get('Port') is not None:
            self.port = m.get('Port')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        self.zone_layer = []
        if m.get('ZoneLayer') is not None:
            for k in m.get('ZoneLayer'):
                temp_model = IpZoneLayer()
                self.zone_layer.append(temp_model.from_map(k))
        return self


class IpBlockZoneLayer(TeaModel):
    def __init__(self, name=None, value=None):
        self.name = name  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(IpBlockZoneLayer, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name is not None:
            result['Name'] = self.name
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class IpBlock(TeaModel):
    def __init__(self, application=None, backup_device_name=None, block=None, business_type_id=None, category=None,
                 create_time=None, description=None, device_name=None, ip_block_id=None, mask=None, net_business=None,
                 net_type=None, ownership=None, parent_id=None, reserve_parent_block=None, resource_group_id=None,
                 update_type=None, zone_layer=None, zone_name=None):
        self.application = application  # type: str
        self.backup_device_name = backup_device_name  # type: str
        self.block = block  # type: str
        self.business_type_id = business_type_id  # type: str
        self.category = category  # type: str
        self.create_time = create_time  # type: str
        self.description = description  # type: str
        self.device_name = device_name  # type: str
        self.ip_block_id = ip_block_id  # type: str
        self.mask = mask  # type: str
        self.net_business = net_business  # type: str
        self.net_type = net_type  # type: str
        self.ownership = ownership  # type: str
        self.parent_id = parent_id  # type: str
        self.reserve_parent_block = reserve_parent_block  # type: str
        self.resource_group_id = resource_group_id  # type: str
        self.update_type = update_type  # type: str
        self.zone_layer = zone_layer  # type: list[IpBlockZoneLayer]
        self.zone_name = zone_name  # type: str

    def validate(self):
        if self.zone_layer:
            for k in self.zone_layer:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(IpBlock, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.application is not None:
            result['Application'] = self.application
        if self.backup_device_name is not None:
            result['BackupDeviceName'] = self.backup_device_name
        if self.block is not None:
            result['Block'] = self.block
        if self.business_type_id is not None:
            result['BusinessTypeId'] = self.business_type_id
        if self.category is not None:
            result['Category'] = self.category
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.description is not None:
            result['Description'] = self.description
        if self.device_name is not None:
            result['DeviceName'] = self.device_name
        if self.ip_block_id is not None:
            result['IpBlockId'] = self.ip_block_id
        if self.mask is not None:
            result['Mask'] = self.mask
        if self.net_business is not None:
            result['NetBusiness'] = self.net_business
        if self.net_type is not None:
            result['NetType'] = self.net_type
        if self.ownership is not None:
            result['Ownership'] = self.ownership
        if self.parent_id is not None:
            result['ParentId'] = self.parent_id
        if self.reserve_parent_block is not None:
            result['ReserveParentBlock'] = self.reserve_parent_block
        if self.resource_group_id is not None:
            result['ResourceGroupId'] = self.resource_group_id
        if self.update_type is not None:
            result['UpdateType'] = self.update_type
        result['ZoneLayer'] = []
        if self.zone_layer is not None:
            for k in self.zone_layer:
                result['ZoneLayer'].append(k.to_map() if k else None)
        if self.zone_name is not None:
            result['ZoneName'] = self.zone_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Application') is not None:
            self.application = m.get('Application')
        if m.get('BackupDeviceName') is not None:
            self.backup_device_name = m.get('BackupDeviceName')
        if m.get('Block') is not None:
            self.block = m.get('Block')
        if m.get('BusinessTypeId') is not None:
            self.business_type_id = m.get('BusinessTypeId')
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('DeviceName') is not None:
            self.device_name = m.get('DeviceName')
        if m.get('IpBlockId') is not None:
            self.ip_block_id = m.get('IpBlockId')
        if m.get('Mask') is not None:
            self.mask = m.get('Mask')
        if m.get('NetBusiness') is not None:
            self.net_business = m.get('NetBusiness')
        if m.get('NetType') is not None:
            self.net_type = m.get('NetType')
        if m.get('Ownership') is not None:
            self.ownership = m.get('Ownership')
        if m.get('ParentId') is not None:
            self.parent_id = m.get('ParentId')
        if m.get('ReserveParentBlock') is not None:
            self.reserve_parent_block = m.get('ReserveParentBlock')
        if m.get('ResourceGroupId') is not None:
            self.resource_group_id = m.get('ResourceGroupId')
        if m.get('UpdateType') is not None:
            self.update_type = m.get('UpdateType')
        self.zone_layer = []
        if m.get('ZoneLayer') is not None:
            for k in m.get('ZoneLayer'):
                temp_model = IpBlockZoneLayer()
                self.zone_layer.append(temp_model.from_map(k))
        if m.get('ZoneName') is not None:
            self.zone_name = m.get('ZoneName')
        return self


class IpBlockRecordDetailZoneLayer(TeaModel):
    def __init__(self, name=None, value=None):
        self.name = name  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(IpBlockRecordDetailZoneLayer, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name is not None:
            result['Name'] = self.name
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class IpBlockRecordDetail(TeaModel):
    def __init__(self, business_type_name=None, device_name=None, gateway=None, parent_ip_blocks=None,
                 zone_layer=None):
        self.business_type_name = business_type_name  # type: str
        self.device_name = device_name  # type: str
        self.gateway = gateway  # type: str
        self.parent_ip_blocks = parent_ip_blocks  # type: list[str]
        self.zone_layer = zone_layer  # type: list[IpBlockRecordDetailZoneLayer]

    def validate(self):
        if self.zone_layer:
            for k in self.zone_layer:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(IpBlockRecordDetail, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.business_type_name is not None:
            result['BusinessTypeName'] = self.business_type_name
        if self.device_name is not None:
            result['DeviceName'] = self.device_name
        if self.gateway is not None:
            result['Gateway'] = self.gateway
        if self.parent_ip_blocks is not None:
            result['ParentIpBlocks'] = self.parent_ip_blocks
        result['ZoneLayer'] = []
        if self.zone_layer is not None:
            for k in self.zone_layer:
                result['ZoneLayer'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BusinessTypeName') is not None:
            self.business_type_name = m.get('BusinessTypeName')
        if m.get('DeviceName') is not None:
            self.device_name = m.get('DeviceName')
        if m.get('Gateway') is not None:
            self.gateway = m.get('Gateway')
        if m.get('ParentIpBlocks') is not None:
            self.parent_ip_blocks = m.get('ParentIpBlocks')
        self.zone_layer = []
        if m.get('ZoneLayer') is not None:
            for k in m.get('ZoneLayer'):
                temp_model = IpBlockRecordDetailZoneLayer()
                self.zone_layer.append(temp_model.from_map(k))
        return self


class IpBlockRecord(TeaModel):
    def __init__(self, create_time=None, creator=None, description=None, detail=None, ip_block_code=None,
                 ip_block_record_id=None, net_type=None, record_type=None, status=None, title=None, update_time=None, work_no=None,
                 zone_name=None):
        self.create_time = create_time  # type: str
        self.creator = creator  # type: long
        self.description = description  # type: str
        self.detail = detail  # type: list[IpBlockRecordDetail]
        self.ip_block_code = ip_block_code  # type: list[str]
        self.ip_block_record_id = ip_block_record_id  # type: str
        self.net_type = net_type  # type: str
        self.record_type = record_type  # type: str
        self.status = status  # type: str
        self.title = title  # type: str
        self.update_time = update_time  # type: str
        self.work_no = work_no  # type: str
        self.zone_name = zone_name  # type: str

    def validate(self):
        if self.detail:
            for k in self.detail:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(IpBlockRecord, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.creator is not None:
            result['Creator'] = self.creator
        if self.description is not None:
            result['Description'] = self.description
        result['Detail'] = []
        if self.detail is not None:
            for k in self.detail:
                result['Detail'].append(k.to_map() if k else None)
        if self.ip_block_code is not None:
            result['IpBlockCode'] = self.ip_block_code
        if self.ip_block_record_id is not None:
            result['IpBlockRecordId'] = self.ip_block_record_id
        if self.net_type is not None:
            result['NetType'] = self.net_type
        if self.record_type is not None:
            result['RecordType'] = self.record_type
        if self.status is not None:
            result['Status'] = self.status
        if self.title is not None:
            result['Title'] = self.title
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        if self.work_no is not None:
            result['WorkNo'] = self.work_no
        if self.zone_name is not None:
            result['ZoneName'] = self.zone_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Creator') is not None:
            self.creator = m.get('Creator')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        self.detail = []
        if m.get('Detail') is not None:
            for k in m.get('Detail'):
                temp_model = IpBlockRecordDetail()
                self.detail.append(temp_model.from_map(k))
        if m.get('IpBlockCode') is not None:
            self.ip_block_code = m.get('IpBlockCode')
        if m.get('IpBlockRecordId') is not None:
            self.ip_block_record_id = m.get('IpBlockRecordId')
        if m.get('NetType') is not None:
            self.net_type = m.get('NetType')
        if m.get('RecordType') is not None:
            self.record_type = m.get('RecordType')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Title') is not None:
            self.title = m.get('Title')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        if m.get('WorkNo') is not None:
            self.work_no = m.get('WorkNo')
        if m.get('ZoneName') is not None:
            self.zone_name = m.get('ZoneName')
        return self


class IpRecordDetailZoneLayer(TeaModel):
    def __init__(self, name=None, value=None):
        self.name = name  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(IpRecordDetailZoneLayer, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name is not None:
            result['Name'] = self.name
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class IpRecordDetail(TeaModel):
    def __init__(self, device_mac=None, device_name=None, gateway=None, ip=None, parent_ip_blocks=None, port=None,
                 remote_device_name=None, remote_ip=None, remote_port=None, zone_layer=None):
        self.device_mac = device_mac  # type: str
        self.device_name = device_name  # type: str
        self.gateway = gateway  # type: str
        self.ip = ip  # type: str
        self.parent_ip_blocks = parent_ip_blocks  # type: list[str]
        self.port = port  # type: str
        self.remote_device_name = remote_device_name  # type: str
        self.remote_ip = remote_ip  # type: str
        self.remote_port = remote_port  # type: str
        self.zone_layer = zone_layer  # type: list[IpRecordDetailZoneLayer]

    def validate(self):
        if self.zone_layer:
            for k in self.zone_layer:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(IpRecordDetail, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_mac is not None:
            result['DeviceMac'] = self.device_mac
        if self.device_name is not None:
            result['DeviceName'] = self.device_name
        if self.gateway is not None:
            result['Gateway'] = self.gateway
        if self.ip is not None:
            result['Ip'] = self.ip
        if self.parent_ip_blocks is not None:
            result['ParentIpBlocks'] = self.parent_ip_blocks
        if self.port is not None:
            result['Port'] = self.port
        if self.remote_device_name is not None:
            result['RemoteDeviceName'] = self.remote_device_name
        if self.remote_ip is not None:
            result['RemoteIp'] = self.remote_ip
        if self.remote_port is not None:
            result['RemotePort'] = self.remote_port
        result['ZoneLayer'] = []
        if self.zone_layer is not None:
            for k in self.zone_layer:
                result['ZoneLayer'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeviceMac') is not None:
            self.device_mac = m.get('DeviceMac')
        if m.get('DeviceName') is not None:
            self.device_name = m.get('DeviceName')
        if m.get('Gateway') is not None:
            self.gateway = m.get('Gateway')
        if m.get('Ip') is not None:
            self.ip = m.get('Ip')
        if m.get('ParentIpBlocks') is not None:
            self.parent_ip_blocks = m.get('ParentIpBlocks')
        if m.get('Port') is not None:
            self.port = m.get('Port')
        if m.get('RemoteDeviceName') is not None:
            self.remote_device_name = m.get('RemoteDeviceName')
        if m.get('RemoteIp') is not None:
            self.remote_ip = m.get('RemoteIp')
        if m.get('RemotePort') is not None:
            self.remote_port = m.get('RemotePort')
        self.zone_layer = []
        if m.get('ZoneLayer') is not None:
            for k in m.get('ZoneLayer'):
                temp_model = IpRecordDetailZoneLayer()
                self.zone_layer.append(temp_model.from_map(k))
        return self


class IpRecord(TeaModel):
    def __init__(self, business_type_name=None, create_time=None, creator=None, description=None, detail=None,
                 ip_block=None, ip_code=None, ip_record_id=None, recode_type=None, status=None, update_time=None,
                 zone_name=None):
        self.business_type_name = business_type_name  # type: str
        self.create_time = create_time  # type: str
        self.creator = creator  # type: str
        self.description = description  # type: str
        self.detail = detail  # type: list[IpRecordDetail]
        self.ip_block = ip_block  # type: str
        self.ip_code = ip_code  # type: list[str]
        self.ip_record_id = ip_record_id  # type: str
        self.recode_type = recode_type  # type: str
        self.status = status  # type: str
        self.update_time = update_time  # type: str
        self.zone_name = zone_name  # type: str

    def validate(self):
        if self.detail:
            for k in self.detail:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(IpRecord, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.business_type_name is not None:
            result['BusinessTypeName'] = self.business_type_name
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.creator is not None:
            result['Creator'] = self.creator
        if self.description is not None:
            result['Description'] = self.description
        result['Detail'] = []
        if self.detail is not None:
            for k in self.detail:
                result['Detail'].append(k.to_map() if k else None)
        if self.ip_block is not None:
            result['IpBlock'] = self.ip_block
        if self.ip_code is not None:
            result['IpCode'] = self.ip_code
        if self.ip_record_id is not None:
            result['IpRecordId'] = self.ip_record_id
        if self.recode_type is not None:
            result['RecodeType'] = self.recode_type
        if self.status is not None:
            result['Status'] = self.status
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        if self.zone_name is not None:
            result['ZoneName'] = self.zone_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BusinessTypeName') is not None:
            self.business_type_name = m.get('BusinessTypeName')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Creator') is not None:
            self.creator = m.get('Creator')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        self.detail = []
        if m.get('Detail') is not None:
            for k in m.get('Detail'):
                temp_model = IpRecordDetail()
                self.detail.append(temp_model.from_map(k))
        if m.get('IpBlock') is not None:
            self.ip_block = m.get('IpBlock')
        if m.get('IpCode') is not None:
            self.ip_code = m.get('IpCode')
        if m.get('IpRecordId') is not None:
            self.ip_record_id = m.get('IpRecordId')
        if m.get('RecodeType') is not None:
            self.recode_type = m.get('RecodeType')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        if m.get('ZoneName') is not None:
            self.zone_name = m.get('ZoneName')
        return self


class ModelToRole(TeaModel):
    def __init__(self, create_time=None, id=None, model=None, model_to_role_id=None,
                 network_architecture_iteration_id=None, role=None, update_time=None, vendor=None):
        self.create_time = create_time  # type: str
        self.id = id  # type: str
        self.model = model  # type: str
        self.model_to_role_id = model_to_role_id  # type: str
        self.network_architecture_iteration_id = network_architecture_iteration_id  # type: str
        self.role = role  # type: str
        self.update_time = update_time  # type: str
        self.vendor = vendor  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModelToRole, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.id is not None:
            result['Id'] = self.id
        if self.model is not None:
            result['Model'] = self.model
        if self.model_to_role_id is not None:
            result['ModelToRoleId'] = self.model_to_role_id
        if self.network_architecture_iteration_id is not None:
            result['NetworkArchitectureIterationId'] = self.network_architecture_iteration_id
        if self.role is not None:
            result['Role'] = self.role
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('ModelToRoleId') is not None:
            self.model_to_role_id = m.get('ModelToRoleId')
        if m.get('NetworkArchitectureIterationId') is not None:
            self.network_architecture_iteration_id = m.get('NetworkArchitectureIterationId')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        return self


class ModuleDevice(TeaModel):
    def __init__(self, count=None, create_time=None, device_count=None, device_role=None, device_x=None,
                 device_y=None, id=None, role=None, update_time=None, x=None, y=None):
        self.count = count  # type: long
        self.create_time = create_time  # type: str
        self.device_count = device_count  # type: long
        self.device_role = device_role  # type: str
        self.device_x = device_x  # type: str
        self.device_y = device_y  # type: str
        self.id = id  # type: str
        self.role = role  # type: str
        self.update_time = update_time  # type: str
        self.x = x  # type: str
        self.y = y  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModuleDevice, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.count is not None:
            result['Count'] = self.count
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.device_count is not None:
            result['DeviceCount'] = self.device_count
        if self.device_role is not None:
            result['DeviceRole'] = self.device_role
        if self.device_x is not None:
            result['DeviceX'] = self.device_x
        if self.device_y is not None:
            result['DeviceY'] = self.device_y
        if self.id is not None:
            result['Id'] = self.id
        if self.role is not None:
            result['Role'] = self.role
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        if self.x is not None:
            result['X'] = self.x
        if self.y is not None:
            result['Y'] = self.y
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Count') is not None:
            self.count = m.get('Count')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('DeviceCount') is not None:
            self.device_count = m.get('DeviceCount')
        if m.get('DeviceRole') is not None:
            self.device_role = m.get('DeviceRole')
        if m.get('DeviceX') is not None:
            self.device_x = m.get('DeviceX')
        if m.get('DeviceY') is not None:
            self.device_y = m.get('DeviceY')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        if m.get('X') is not None:
            self.x = m.get('X')
        if m.get('Y') is not None:
            self.y = m.get('Y')
        return self


class ModuleModuleDetailsDeviceDetails(TeaModel):
    def __init__(self, order_number=None):
        self.order_number = order_number  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModuleModuleDetailsDeviceDetails, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.order_number is not None:
            result['OrderNumber'] = self.order_number
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OrderNumber') is not None:
            self.order_number = m.get('OrderNumber')
        return self


class ModuleModuleDetails(TeaModel):
    def __init__(self, device_details=None, order_number=None):
        self.device_details = device_details  # type: list[ModuleModuleDetailsDeviceDetails]
        self.order_number = order_number  # type: long

    def validate(self):
        if self.device_details:
            for k in self.device_details:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ModuleModuleDetails, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['DeviceDetails'] = []
        if self.device_details is not None:
            for k in self.device_details:
                result['DeviceDetails'].append(k.to_map() if k else None)
        if self.order_number is not None:
            result['OrderNumber'] = self.order_number
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.device_details = []
        if m.get('DeviceDetails') is not None:
            for k in m.get('DeviceDetails'):
                temp_model = ModuleModuleDetailsDeviceDetails()
                self.device_details.append(temp_model.from_map(k))
        if m.get('OrderNumber') is not None:
            self.order_number = m.get('OrderNumber')
        return self


class Module(TeaModel):
    def __init__(self, create_time=None, device=None, id=None, max_count=None, min_count=None, module_details=None,
                 module_id=None, module_type=None, name=None, parent_module_id=None, stack=None, update_time=None):
        self.create_time = create_time  # type: str
        self.device = device  # type: ModuleDevice
        self.id = id  # type: str
        self.max_count = max_count  # type: long
        self.min_count = min_count  # type: long
        self.module_details = module_details  # type: list[ModuleModuleDetails]
        self.module_id = module_id  # type: str
        self.module_type = module_type  # type: str
        self.name = name  # type: str
        self.parent_module_id = parent_module_id  # type: str
        self.stack = stack  # type: bool
        self.update_time = update_time  # type: str

    def validate(self):
        if self.device:
            self.device.validate()
        if self.module_details:
            for k in self.module_details:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(Module, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.device is not None:
            result['Device'] = self.device.to_map()
        if self.id is not None:
            result['Id'] = self.id
        if self.max_count is not None:
            result['MaxCount'] = self.max_count
        if self.min_count is not None:
            result['MinCount'] = self.min_count
        result['ModuleDetails'] = []
        if self.module_details is not None:
            for k in self.module_details:
                result['ModuleDetails'].append(k.to_map() if k else None)
        if self.module_id is not None:
            result['ModuleId'] = self.module_id
        if self.module_type is not None:
            result['ModuleType'] = self.module_type
        if self.name is not None:
            result['Name'] = self.name
        if self.parent_module_id is not None:
            result['ParentModuleId'] = self.parent_module_id
        if self.stack is not None:
            result['Stack'] = self.stack
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Device') is not None:
            temp_model = ModuleDevice()
            self.device = temp_model.from_map(m['Device'])
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('MaxCount') is not None:
            self.max_count = m.get('MaxCount')
        if m.get('MinCount') is not None:
            self.min_count = m.get('MinCount')
        self.module_details = []
        if m.get('ModuleDetails') is not None:
            for k in m.get('ModuleDetails'):
                temp_model = ModuleModuleDetails()
                self.module_details.append(temp_model.from_map(k))
        if m.get('ModuleId') is not None:
            self.module_id = m.get('ModuleId')
        if m.get('ModuleType') is not None:
            self.module_type = m.get('ModuleType')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('ParentModuleId') is not None:
            self.parent_module_id = m.get('ParentModuleId')
        if m.get('Stack') is not None:
            self.stack = m.get('Stack')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        return self


class MonitorItem(TeaModel):
    def __init__(self, analysis_code=None, collection_type=None, config=None, enable=None, exec_interval=None,
                 gmt_create=None, gmt_modified=None, monitor_item_description=None, monitor_item_id=None,
                 monitor_item_name=None, security_domain=None):
        self.analysis_code = analysis_code  # type: str
        self.collection_type = collection_type  # type: str
        self.config = config  # type: str
        self.enable = enable  # type: int
        self.exec_interval = exec_interval  # type: str
        self.gmt_create = gmt_create  # type: str
        self.gmt_modified = gmt_modified  # type: str
        self.monitor_item_description = monitor_item_description  # type: str
        self.monitor_item_id = monitor_item_id  # type: str
        self.monitor_item_name = monitor_item_name  # type: str
        self.security_domain = security_domain  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(MonitorItem, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.analysis_code is not None:
            result['AnalysisCode'] = self.analysis_code
        if self.collection_type is not None:
            result['CollectionType'] = self.collection_type
        if self.config is not None:
            result['Config'] = self.config
        if self.enable is not None:
            result['Enable'] = self.enable
        if self.exec_interval is not None:
            result['ExecInterval'] = self.exec_interval
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.monitor_item_description is not None:
            result['MonitorItemDescription'] = self.monitor_item_description
        if self.monitor_item_id is not None:
            result['MonitorItemId'] = self.monitor_item_id
        if self.monitor_item_name is not None:
            result['MonitorItemName'] = self.monitor_item_name
        if self.security_domain is not None:
            result['SecurityDomain'] = self.security_domain
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AnalysisCode') is not None:
            self.analysis_code = m.get('AnalysisCode')
        if m.get('CollectionType') is not None:
            self.collection_type = m.get('CollectionType')
        if m.get('Config') is not None:
            self.config = m.get('Config')
        if m.get('Enable') is not None:
            self.enable = m.get('Enable')
        if m.get('ExecInterval') is not None:
            self.exec_interval = m.get('ExecInterval')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('MonitorItemDescription') is not None:
            self.monitor_item_description = m.get('MonitorItemDescription')
        if m.get('MonitorItemId') is not None:
            self.monitor_item_id = m.get('MonitorItemId')
        if m.get('MonitorItemName') is not None:
            self.monitor_item_name = m.get('MonitorItemName')
        if m.get('SecurityDomain') is not None:
            self.security_domain = m.get('SecurityDomain')
        return self


class NetworkArchitecture(TeaModel):
    def __init__(self, arch_version_iteration_id=None, availabe=None, children=None, create_time=None,
                 description=None, device_number=None, group_number=None, id=None, name=None, network_architecture_id=None,
                 role=None, selected=None, stack=None, status=None, update_time=None, version=None):
        self.arch_version_iteration_id = arch_version_iteration_id  # type: str
        self.availabe = availabe  # type: bool
        self.children = children  # type: list[str]
        self.create_time = create_time  # type: str
        self.description = description  # type: str
        self.device_number = device_number  # type: long
        self.group_number = group_number  # type: long
        self.id = id  # type: str
        self.name = name  # type: str
        self.network_architecture_id = network_architecture_id  # type: str
        self.role = role  # type: str
        self.selected = selected  # type: bool
        self.stack = stack  # type: bool
        self.status = status  # type: str
        self.update_time = update_time  # type: str
        self.version = version  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(NetworkArchitecture, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arch_version_iteration_id is not None:
            result['ArchVersionIterationId'] = self.arch_version_iteration_id
        if self.availabe is not None:
            result['Availabe'] = self.availabe
        if self.children is not None:
            result['Children'] = self.children
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.description is not None:
            result['Description'] = self.description
        if self.device_number is not None:
            result['DeviceNumber'] = self.device_number
        if self.group_number is not None:
            result['GroupNumber'] = self.group_number
        if self.id is not None:
            result['Id'] = self.id
        if self.name is not None:
            result['Name'] = self.name
        if self.network_architecture_id is not None:
            result['NetworkArchitectureId'] = self.network_architecture_id
        if self.role is not None:
            result['Role'] = self.role
        if self.selected is not None:
            result['Selected'] = self.selected
        if self.stack is not None:
            result['Stack'] = self.stack
        if self.status is not None:
            result['Status'] = self.status
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        if self.version is not None:
            result['Version'] = self.version
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ArchVersionIterationId') is not None:
            self.arch_version_iteration_id = m.get('ArchVersionIterationId')
        if m.get('Availabe') is not None:
            self.availabe = m.get('Availabe')
        if m.get('Children') is not None:
            self.children = m.get('Children')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('DeviceNumber') is not None:
            self.device_number = m.get('DeviceNumber')
        if m.get('GroupNumber') is not None:
            self.group_number = m.get('GroupNumber')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('NetworkArchitectureId') is not None:
            self.network_architecture_id = m.get('NetworkArchitectureId')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('Selected') is not None:
            self.selected = m.get('Selected')
        if m.get('Stack') is not None:
            self.stack = m.get('Stack')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        return self


class NotificationGroup(TeaModel):
    def __init__(self, gmt_create=None, gmt_modified=None, notification_group_description=None,
                 notification_group_id=None, notification_group_name=None, notification_group_type=None, webhook=None):
        self.gmt_create = gmt_create  # type: str
        self.gmt_modified = gmt_modified  # type: str
        self.notification_group_description = notification_group_description  # type: str
        self.notification_group_id = notification_group_id  # type: str
        self.notification_group_name = notification_group_name  # type: str
        self.notification_group_type = notification_group_type  # type: str
        self.webhook = webhook  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(NotificationGroup, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.notification_group_description is not None:
            result['NotificationGroupDescription'] = self.notification_group_description
        if self.notification_group_id is not None:
            result['NotificationGroupId'] = self.notification_group_id
        if self.notification_group_name is not None:
            result['NotificationGroupName'] = self.notification_group_name
        if self.notification_group_type is not None:
            result['NotificationGroupType'] = self.notification_group_type
        if self.webhook is not None:
            result['Webhook'] = self.webhook
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('NotificationGroupDescription') is not None:
            self.notification_group_description = m.get('NotificationGroupDescription')
        if m.get('NotificationGroupId') is not None:
            self.notification_group_id = m.get('NotificationGroupId')
        if m.get('NotificationGroupName') is not None:
            self.notification_group_name = m.get('NotificationGroupName')
        if m.get('NotificationGroupType') is not None:
            self.notification_group_type = m.get('NotificationGroupType')
        if m.get('Webhook') is not None:
            self.webhook = m.get('Webhook')
        return self


class Order(TeaModel):
    def __init__(self, gmt_create=None, gmt_modify=None, order_id=None, output=None, params=None, scheme_id=None,
                 scheme_name=None, status=None, title=None):
        self.gmt_create = gmt_create  # type: str
        self.gmt_modify = gmt_modify  # type: str
        self.order_id = order_id  # type: str
        self.output = output  # type: str
        self.params = params  # type: str
        self.scheme_id = scheme_id  # type: str
        self.scheme_name = scheme_name  # type: str
        self.status = status  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(Order, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modify is not None:
            result['GmtModify'] = self.gmt_modify
        if self.order_id is not None:
            result['OrderId'] = self.order_id
        if self.output is not None:
            result['Output'] = self.output
        if self.params is not None:
            result['Params'] = self.params
        if self.scheme_id is not None:
            result['SchemeId'] = self.scheme_id
        if self.scheme_name is not None:
            result['SchemeName'] = self.scheme_name
        if self.status is not None:
            result['Status'] = self.status
        if self.title is not None:
            result['Title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModify') is not None:
            self.gmt_modify = m.get('GmtModify')
        if m.get('OrderId') is not None:
            self.order_id = m.get('OrderId')
        if m.get('Output') is not None:
            self.output = m.get('Output')
        if m.get('Params') is not None:
            self.params = m.get('Params')
        if m.get('SchemeId') is not None:
            self.scheme_id = m.get('SchemeId')
        if m.get('SchemeName') is not None:
            self.scheme_name = m.get('SchemeName')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Title') is not None:
            self.title = m.get('Title')
        return self


class OrderStepRestriction(TeaModel):
    def __init__(self, label=None, value=None):
        self.label = label  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(OrderStepRestriction, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.label is not None:
            result['Label'] = self.label
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Label') is not None:
            self.label = m.get('Label')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class OrderStep(TeaModel):
    def __init__(self, display_method=None, gmt_create=None, gmt_modify=None, job_kwargs=None, job_message=None,
                 job_return_status=None, job_return_values=None, job_system=None, order_id=None, order_step_id=None,
                 real_next_step=None, restriction=None, step_name=None, step_status=None, step_title=None, step_type=None):
        self.display_method = display_method  # type: str
        self.gmt_create = gmt_create  # type: str
        self.gmt_modify = gmt_modify  # type: str
        self.job_kwargs = job_kwargs  # type: str
        self.job_message = job_message  # type: str
        self.job_return_status = job_return_status  # type: str
        self.job_return_values = job_return_values  # type: str
        self.job_system = job_system  # type: str
        self.order_id = order_id  # type: str
        self.order_step_id = order_step_id  # type: str
        self.real_next_step = real_next_step  # type: str
        self.restriction = restriction  # type: list[OrderStepRestriction]
        self.step_name = step_name  # type: str
        self.step_status = step_status  # type: str
        self.step_title = step_title  # type: str
        self.step_type = step_type  # type: str

    def validate(self):
        if self.restriction:
            for k in self.restriction:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(OrderStep, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.display_method is not None:
            result['DisplayMethod'] = self.display_method
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modify is not None:
            result['GmtModify'] = self.gmt_modify
        if self.job_kwargs is not None:
            result['JobKwargs'] = self.job_kwargs
        if self.job_message is not None:
            result['JobMessage'] = self.job_message
        if self.job_return_status is not None:
            result['JobReturnStatus'] = self.job_return_status
        if self.job_return_values is not None:
            result['JobReturnValues'] = self.job_return_values
        if self.job_system is not None:
            result['JobSystem'] = self.job_system
        if self.order_id is not None:
            result['OrderId'] = self.order_id
        if self.order_step_id is not None:
            result['OrderStepId'] = self.order_step_id
        if self.real_next_step is not None:
            result['RealNextStep'] = self.real_next_step
        result['Restriction'] = []
        if self.restriction is not None:
            for k in self.restriction:
                result['Restriction'].append(k.to_map() if k else None)
        if self.step_name is not None:
            result['StepName'] = self.step_name
        if self.step_status is not None:
            result['StepStatus'] = self.step_status
        if self.step_title is not None:
            result['StepTitle'] = self.step_title
        if self.step_type is not None:
            result['StepType'] = self.step_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DisplayMethod') is not None:
            self.display_method = m.get('DisplayMethod')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModify') is not None:
            self.gmt_modify = m.get('GmtModify')
        if m.get('JobKwargs') is not None:
            self.job_kwargs = m.get('JobKwargs')
        if m.get('JobMessage') is not None:
            self.job_message = m.get('JobMessage')
        if m.get('JobReturnStatus') is not None:
            self.job_return_status = m.get('JobReturnStatus')
        if m.get('JobReturnValues') is not None:
            self.job_return_values = m.get('JobReturnValues')
        if m.get('JobSystem') is not None:
            self.job_system = m.get('JobSystem')
        if m.get('OrderId') is not None:
            self.order_id = m.get('OrderId')
        if m.get('OrderStepId') is not None:
            self.order_step_id = m.get('OrderStepId')
        if m.get('RealNextStep') is not None:
            self.real_next_step = m.get('RealNextStep')
        self.restriction = []
        if m.get('Restriction') is not None:
            for k in m.get('Restriction'):
                temp_model = OrderStepRestriction()
                self.restriction.append(temp_model.from_map(k))
        if m.get('StepName') is not None:
            self.step_name = m.get('StepName')
        if m.get('StepStatus') is not None:
            self.step_status = m.get('StepStatus')
        if m.get('StepTitle') is not None:
            self.step_title = m.get('StepTitle')
        if m.get('StepType') is not None:
            self.step_type = m.get('StepType')
        return self


class OsVersion(TeaModel):
    def __init__(self, access_id=None, create_time=None, directory=None, expire_time=None, file_name=None,
                 file_path=None, host=None, model=None, os_version=None, os_version_id=None, policy=None, signature=None,
                 status=None, vendor=None):
        self.access_id = access_id  # type: str
        self.create_time = create_time  # type: str
        self.directory = directory  # type: str
        self.expire_time = expire_time  # type: str
        self.file_name = file_name  # type: str
        self.file_path = file_path  # type: str
        self.host = host  # type: str
        self.model = model  # type: str
        self.os_version = os_version  # type: str
        self.os_version_id = os_version_id  # type: str
        self.policy = policy  # type: str
        self.signature = signature  # type: str
        self.status = status  # type: str
        self.vendor = vendor  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(OsVersion, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.access_id is not None:
            result['AccessId'] = self.access_id
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.directory is not None:
            result['Directory'] = self.directory
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.file_path is not None:
            result['FilePath'] = self.file_path
        if self.host is not None:
            result['Host'] = self.host
        if self.model is not None:
            result['Model'] = self.model
        if self.os_version is not None:
            result['OsVersion'] = self.os_version
        if self.os_version_id is not None:
            result['OsVersionId'] = self.os_version_id
        if self.policy is not None:
            result['Policy'] = self.policy
        if self.signature is not None:
            result['Signature'] = self.signature
        if self.status is not None:
            result['Status'] = self.status
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AccessId') is not None:
            self.access_id = m.get('AccessId')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Directory') is not None:
            self.directory = m.get('Directory')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('FilePath') is not None:
            self.file_path = m.get('FilePath')
        if m.get('Host') is not None:
            self.host = m.get('Host')
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('OsVersion') is not None:
            self.os_version = m.get('OsVersion')
        if m.get('OsVersionId') is not None:
            self.os_version_id = m.get('OsVersionId')
        if m.get('Policy') is not None:
            self.policy = m.get('Policy')
        if m.get('Signature') is not None:
            self.signature = m.get('Signature')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        return self


class PhysicalSpace(TeaModel):
    def __init__(self, address=None, city=None, country=None, province=None, space_id=None, space_name=None):
        self.address = address  # type: str
        self.city = city  # type: str
        self.country = country  # type: str
        self.province = province  # type: str
        self.space_id = space_id  # type: str
        self.space_name = space_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(PhysicalSpace, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.address is not None:
            result['Address'] = self.address
        if self.city is not None:
            result['City'] = self.city
        if self.country is not None:
            result['Country'] = self.country
        if self.province is not None:
            result['Province'] = self.province
        if self.space_id is not None:
            result['SpaceId'] = self.space_id
        if self.space_name is not None:
            result['SpaceName'] = self.space_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Address') is not None:
            self.address = m.get('Address')
        if m.get('City') is not None:
            self.city = m.get('City')
        if m.get('Country') is not None:
            self.country = m.get('Country')
        if m.get('Province') is not None:
            self.province = m.get('Province')
        if m.get('SpaceId') is not None:
            self.space_id = m.get('SpaceId')
        if m.get('SpaceName') is not None:
            self.space_name = m.get('SpaceName')
        return self


class PhysicalSpaceDto(TeaModel):
    def __init__(self, address=None, children=None, city=None, country=None, full_parent_path=None, instance=None,
                 owner=None, parent_uid=None, physical_space_id=None, physical_space_name=None, province=None,
                 remark=None, security_domain_list=None, space_abbreviation=None, space_type=None):
        self.address = address  # type: str
        self.children = children  # type: list[PhysicalSpaceDto]
        self.city = city  # type: str
        self.country = country  # type: str
        self.full_parent_path = full_parent_path  # type: str
        self.instance = instance  # type: str
        self.owner = owner  # type: str
        self.parent_uid = parent_uid  # type: str
        self.physical_space_id = physical_space_id  # type: str
        self.physical_space_name = physical_space_name  # type: str
        self.province = province  # type: str
        self.remark = remark  # type: str
        self.security_domain_list = security_domain_list  # type: list[str]
        self.space_abbreviation = space_abbreviation  # type: str
        self.space_type = space_type  # type: str

    def validate(self):
        if self.children:
            for k in self.children:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(PhysicalSpaceDto, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.address is not None:
            result['Address'] = self.address
        result['Children'] = []
        if self.children is not None:
            for k in self.children:
                result['Children'].append(k.to_map() if k else None)
        if self.city is not None:
            result['City'] = self.city
        if self.country is not None:
            result['Country'] = self.country
        if self.full_parent_path is not None:
            result['FullParentPath'] = self.full_parent_path
        if self.instance is not None:
            result['Instance'] = self.instance
        if self.owner is not None:
            result['Owner'] = self.owner
        if self.parent_uid is not None:
            result['ParentUid'] = self.parent_uid
        if self.physical_space_id is not None:
            result['PhysicalSpaceId'] = self.physical_space_id
        if self.physical_space_name is not None:
            result['PhysicalSpaceName'] = self.physical_space_name
        if self.province is not None:
            result['Province'] = self.province
        if self.remark is not None:
            result['Remark'] = self.remark
        if self.security_domain_list is not None:
            result['SecurityDomainList'] = self.security_domain_list
        if self.space_abbreviation is not None:
            result['SpaceAbbreviation'] = self.space_abbreviation
        if self.space_type is not None:
            result['SpaceType'] = self.space_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Address') is not None:
            self.address = m.get('Address')
        self.children = []
        if m.get('Children') is not None:
            for k in m.get('Children'):
                temp_model = PhysicalSpaceDto()
                self.children.append(temp_model.from_map(k))
        if m.get('City') is not None:
            self.city = m.get('City')
        if m.get('Country') is not None:
            self.country = m.get('Country')
        if m.get('FullParentPath') is not None:
            self.full_parent_path = m.get('FullParentPath')
        if m.get('Instance') is not None:
            self.instance = m.get('Instance')
        if m.get('Owner') is not None:
            self.owner = m.get('Owner')
        if m.get('ParentUid') is not None:
            self.parent_uid = m.get('ParentUid')
        if m.get('PhysicalSpaceId') is not None:
            self.physical_space_id = m.get('PhysicalSpaceId')
        if m.get('PhysicalSpaceName') is not None:
            self.physical_space_name = m.get('PhysicalSpaceName')
        if m.get('Province') is not None:
            self.province = m.get('Province')
        if m.get('Remark') is not None:
            self.remark = m.get('Remark')
        if m.get('SecurityDomainList') is not None:
            self.security_domain_list = m.get('SecurityDomainList')
        if m.get('SpaceAbbreviation') is not None:
            self.space_abbreviation = m.get('SpaceAbbreviation')
        if m.get('SpaceType') is not None:
            self.space_type = m.get('SpaceType')
        return self


class Port(TeaModel):
    def __init__(self, device_id=None, gmt_create=None, gmt_modified=None, port_collection_id=None, port_name=None):
        self.device_id = device_id  # type: str
        self.gmt_create = gmt_create  # type: str
        self.gmt_modified = gmt_modified  # type: str
        self.port_collection_id = port_collection_id  # type: str
        self.port_name = port_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(Port, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.port_collection_id is not None:
            result['PortCollectionId'] = self.port_collection_id
        if self.port_name is not None:
            result['PortName'] = self.port_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('PortCollectionId') is not None:
            self.port_collection_id = m.get('PortCollectionId')
        if m.get('PortName') is not None:
            self.port_name = m.get('PortName')
        return self


class PortCollection(TeaModel):
    def __init__(self, gmt_create=None, gmt_modified=None, port_collection_description=None,
                 port_collection_id=None, port_collection_name=None, port_list=None):
        self.gmt_create = gmt_create  # type: str
        self.gmt_modified = gmt_modified  # type: str
        self.port_collection_description = port_collection_description  # type: str
        self.port_collection_id = port_collection_id  # type: str
        self.port_collection_name = port_collection_name  # type: str
        self.port_list = port_list  # type: list[Port]

    def validate(self):
        if self.port_list:
            for k in self.port_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(PortCollection, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.port_collection_description is not None:
            result['PortCollectionDescription'] = self.port_collection_description
        if self.port_collection_id is not None:
            result['PortCollectionId'] = self.port_collection_id
        if self.port_collection_name is not None:
            result['PortCollectionName'] = self.port_collection_name
        result['PortList'] = []
        if self.port_list is not None:
            for k in self.port_list:
                result['PortList'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('PortCollectionDescription') is not None:
            self.port_collection_description = m.get('PortCollectionDescription')
        if m.get('PortCollectionId') is not None:
            self.port_collection_id = m.get('PortCollectionId')
        if m.get('PortCollectionName') is not None:
            self.port_collection_name = m.get('PortCollectionName')
        self.port_list = []
        if m.get('PortList') is not None:
            for k in m.get('PortList'):
                temp_model = Port()
                self.port_list.append(temp_model.from_map(k))
        return self


class ResourceInformationInformation(TeaModel):
    def __init__(self, key=None, key_action=None, key_attribute=None, key_description=None):
        self.key = key  # type: str
        self.key_action = key_action  # type: str
        self.key_attribute = key_attribute  # type: str
        self.key_description = key_description  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ResourceInformationInformation, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.key_action is not None:
            result['KeyAction'] = self.key_action
        if self.key_attribute is not None:
            result['KeyAttribute'] = self.key_attribute
        if self.key_description is not None:
            result['KeyDescription'] = self.key_description
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('KeyAction') is not None:
            self.key_action = m.get('KeyAction')
        if m.get('KeyAttribute') is not None:
            self.key_attribute = m.get('KeyAttribute')
        if m.get('KeyDescription') is not None:
            self.key_description = m.get('KeyDescription')
        return self


class ResourceInformation(TeaModel):
    def __init__(self, architecture_id=None, create_time=None, information=None, resource_attribute=None,
                 resource_information_id=None, resource_type=None, setup_project_id=None, update_time=None):
        self.architecture_id = architecture_id  # type: str
        self.create_time = create_time  # type: str
        self.information = information  # type: list[ResourceInformationInformation]
        self.resource_attribute = resource_attribute  # type: str
        self.resource_information_id = resource_information_id  # type: str
        self.resource_type = resource_type  # type: str
        self.setup_project_id = setup_project_id  # type: str
        self.update_time = update_time  # type: str

    def validate(self):
        if self.information:
            for k in self.information:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ResourceInformation, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.architecture_id is not None:
            result['ArchitectureId'] = self.architecture_id
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        result['Information'] = []
        if self.information is not None:
            for k in self.information:
                result['Information'].append(k.to_map() if k else None)
        if self.resource_attribute is not None:
            result['ResourceAttribute'] = self.resource_attribute
        if self.resource_information_id is not None:
            result['ResourceInformationId'] = self.resource_information_id
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        if self.setup_project_id is not None:
            result['SetupProjectId'] = self.setup_project_id
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ArchitectureId') is not None:
            self.architecture_id = m.get('ArchitectureId')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        self.information = []
        if m.get('Information') is not None:
            for k in m.get('Information'):
                temp_model = ResourceInformationInformation()
                self.information.append(temp_model.from_map(k))
        if m.get('ResourceAttribute') is not None:
            self.resource_attribute = m.get('ResourceAttribute')
        if m.get('ResourceInformationId') is not None:
            self.resource_information_id = m.get('ResourceInformationId')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        if m.get('SetupProjectId') is not None:
            self.setup_project_id = m.get('SetupProjectId')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        return self


class ScheduleDutyTypeWorkerList(TeaModel):
    def __init__(self, schedule_type_id=None, schedule_worker_name=None):
        self.schedule_type_id = schedule_type_id  # type: str
        self.schedule_worker_name = schedule_worker_name  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(ScheduleDutyTypeWorkerList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.schedule_type_id is not None:
            result['ScheduleTypeId'] = self.schedule_type_id
        if self.schedule_worker_name is not None:
            result['ScheduleWorkerName'] = self.schedule_worker_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ScheduleTypeId') is not None:
            self.schedule_type_id = m.get('ScheduleTypeId')
        if m.get('ScheduleWorkerName') is not None:
            self.schedule_worker_name = m.get('ScheduleWorkerName')
        return self


class ScheduleDuty(TeaModel):
    def __init__(self, create_time=None, end_date=None, schedule_duty_id=None, schedule_type_ids=None,
                 start_date=None, type_worker_list=None, update_time=None, work_date=None, work_type=None, worker_id=None,
                 worker_name=None):
        self.create_time = create_time  # type: str
        self.end_date = end_date  # type: str
        self.schedule_duty_id = schedule_duty_id  # type: str
        self.schedule_type_ids = schedule_type_ids  # type: list[str]
        self.start_date = start_date  # type: str
        self.type_worker_list = type_worker_list  # type: list[ScheduleDutyTypeWorkerList]
        self.update_time = update_time  # type: str
        self.work_date = work_date  # type: str
        self.work_type = work_type  # type: str
        self.worker_id = worker_id  # type: str
        self.worker_name = worker_name  # type: str

    def validate(self):
        if self.type_worker_list:
            for k in self.type_worker_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ScheduleDuty, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.end_date is not None:
            result['EndDate'] = self.end_date
        if self.schedule_duty_id is not None:
            result['ScheduleDutyId'] = self.schedule_duty_id
        if self.schedule_type_ids is not None:
            result['ScheduleTypeIds'] = self.schedule_type_ids
        if self.start_date is not None:
            result['StartDate'] = self.start_date
        result['TypeWorkerList'] = []
        if self.type_worker_list is not None:
            for k in self.type_worker_list:
                result['TypeWorkerList'].append(k.to_map() if k else None)
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        if self.work_date is not None:
            result['WorkDate'] = self.work_date
        if self.work_type is not None:
            result['WorkType'] = self.work_type
        if self.worker_id is not None:
            result['WorkerId'] = self.worker_id
        if self.worker_name is not None:
            result['WorkerName'] = self.worker_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('EndDate') is not None:
            self.end_date = m.get('EndDate')
        if m.get('ScheduleDutyId') is not None:
            self.schedule_duty_id = m.get('ScheduleDutyId')
        if m.get('ScheduleTypeIds') is not None:
            self.schedule_type_ids = m.get('ScheduleTypeIds')
        if m.get('StartDate') is not None:
            self.start_date = m.get('StartDate')
        self.type_worker_list = []
        if m.get('TypeWorkerList') is not None:
            for k in m.get('TypeWorkerList'):
                temp_model = ScheduleDutyTypeWorkerList()
                self.type_worker_list.append(temp_model.from_map(k))
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        if m.get('WorkDate') is not None:
            self.work_date = m.get('WorkDate')
        if m.get('WorkType') is not None:
            self.work_type = m.get('WorkType')
        if m.get('WorkerId') is not None:
            self.worker_id = m.get('WorkerId')
        if m.get('WorkerName') is not None:
            self.worker_name = m.get('WorkerName')
        return self


class ScheduleType(TeaModel):
    def __init__(self, create_time=None, key=None, related_worker=None, schedule_type_id=None, status=None,
                 update_time=None, value=None):
        self.create_time = create_time  # type: str
        self.key = key  # type: str
        self.related_worker = related_worker  # type: list[str]
        self.schedule_type_id = schedule_type_id  # type: str
        self.status = status  # type: str
        self.update_time = update_time  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ScheduleType, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.key is not None:
            result['Key'] = self.key
        if self.related_worker is not None:
            result['RelatedWorker'] = self.related_worker
        if self.schedule_type_id is not None:
            result['ScheduleTypeId'] = self.schedule_type_id
        if self.status is not None:
            result['Status'] = self.status
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('RelatedWorker') is not None:
            self.related_worker = m.get('RelatedWorker')
        if m.get('ScheduleTypeId') is not None:
            self.schedule_type_id = m.get('ScheduleTypeId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ScheduleWorker(TeaModel):
    def __init__(self, create_time=None, schedule_worker_id=None, update_time=None, worker_contact=None,
                 worker_id=None, worker_name=None):
        self.create_time = create_time  # type: str
        self.schedule_worker_id = schedule_worker_id  # type: str
        self.update_time = update_time  # type: str
        self.worker_contact = worker_contact  # type: str
        self.worker_id = worker_id  # type: str
        self.worker_name = worker_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ScheduleWorker, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.schedule_worker_id is not None:
            result['ScheduleWorkerId'] = self.schedule_worker_id
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        if self.worker_contact is not None:
            result['WorkerContact'] = self.worker_contact
        if self.worker_id is not None:
            result['WorkerId'] = self.worker_id
        if self.worker_name is not None:
            result['WorkerName'] = self.worker_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('ScheduleWorkerId') is not None:
            self.schedule_worker_id = m.get('ScheduleWorkerId')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        if m.get('WorkerContact') is not None:
            self.worker_contact = m.get('WorkerContact')
        if m.get('WorkerId') is not None:
            self.worker_id = m.get('WorkerId')
        if m.get('WorkerName') is not None:
            self.worker_name = m.get('WorkerName')
        return self


class SchemeInput(TeaModel):
    def __init__(self, description=None, name=None, sample=None, type=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.sample = sample  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SchemeInput, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.sample is not None:
            result['Sample'] = self.sample
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Sample') is not None:
            self.sample = m.get('Sample')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class SchemeOutput(TeaModel):
    def __init__(self, description=None, name=None, sample=None, type=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.sample = sample  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SchemeOutput, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.sample is not None:
            result['Sample'] = self.sample
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Sample') is not None:
            self.sample = m.get('Sample')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class Scheme(TeaModel):
    def __init__(self, category=None, content=None, description=None, gmt_create=None, gmt_modify=None, input=None,
                 output=None, scheme_id=None, scheme_name=None, status=None, view=None):
        self.category = category  # type: str
        self.content = content  # type: str
        self.description = description  # type: str
        self.gmt_create = gmt_create  # type: str
        self.gmt_modify = gmt_modify  # type: str
        self.input = input  # type: list[SchemeInput]
        self.output = output  # type: list[SchemeOutput]
        self.scheme_id = scheme_id  # type: str
        self.scheme_name = scheme_name  # type: str
        self.status = status  # type: str
        self.view = view  # type: str

    def validate(self):
        if self.input:
            for k in self.input:
                if k:
                    k.validate()
        if self.output:
            for k in self.output:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(Scheme, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['Category'] = self.category
        if self.content is not None:
            result['Content'] = self.content
        if self.description is not None:
            result['Description'] = self.description
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modify is not None:
            result['GmtModify'] = self.gmt_modify
        result['Input'] = []
        if self.input is not None:
            for k in self.input:
                result['Input'].append(k.to_map() if k else None)
        result['Output'] = []
        if self.output is not None:
            for k in self.output:
                result['Output'].append(k.to_map() if k else None)
        if self.scheme_id is not None:
            result['SchemeId'] = self.scheme_id
        if self.scheme_name is not None:
            result['SchemeName'] = self.scheme_name
        if self.status is not None:
            result['Status'] = self.status
        if self.view is not None:
            result['View'] = self.view
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModify') is not None:
            self.gmt_modify = m.get('GmtModify')
        self.input = []
        if m.get('Input') is not None:
            for k in m.get('Input'):
                temp_model = SchemeInput()
                self.input.append(temp_model.from_map(k))
        self.output = []
        if m.get('Output') is not None:
            for k in m.get('Output'):
                temp_model = SchemeOutput()
                self.output.append(temp_model.from_map(k))
        if m.get('SchemeId') is not None:
            self.scheme_id = m.get('SchemeId')
        if m.get('SchemeName') is not None:
            self.scheme_name = m.get('SchemeName')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('View') is not None:
            self.view = m.get('View')
        return self


class ScriptInput(TeaModel):
    def __init__(self, description=None, name=None, sample=None, type=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.sample = sample  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ScriptInput, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.sample is not None:
            result['Sample'] = self.sample
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Sample') is not None:
            self.sample = m.get('Sample')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class ScriptOutput(TeaModel):
    def __init__(self, description=None, name=None, sample=None, type=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.sample = sample  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ScriptOutput, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.sample is not None:
            result['Sample'] = self.sample
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Sample') is not None:
            self.sample = m.get('Sample')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class Script(TeaModel):
    def __init__(self, content=None, gmt_create=None, gmt_modify=None, input=None, output=None, rules=None,
                 script_id=None, template_id=None, version_id=None):
        self.content = content  # type: str
        self.gmt_create = gmt_create  # type: str
        self.gmt_modify = gmt_modify  # type: str
        self.input = input  # type: list[ScriptInput]
        self.output = output  # type: list[ScriptOutput]
        self.rules = rules  # type: list[ScriptRule]
        self.script_id = script_id  # type: str
        self.template_id = template_id  # type: str
        self.version_id = version_id  # type: str

    def validate(self):
        if self.input:
            for k in self.input:
                if k:
                    k.validate()
        if self.output:
            for k in self.output:
                if k:
                    k.validate()
        if self.rules:
            for k in self.rules:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(Script, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['Content'] = self.content
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modify is not None:
            result['GmtModify'] = self.gmt_modify
        result['Input'] = []
        if self.input is not None:
            for k in self.input:
                result['Input'].append(k.to_map() if k else None)
        result['Output'] = []
        if self.output is not None:
            for k in self.output:
                result['Output'].append(k.to_map() if k else None)
        result['Rules'] = []
        if self.rules is not None:
            for k in self.rules:
                result['Rules'].append(k.to_map() if k else None)
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.template_id is not None:
            result['TemplateId'] = self.template_id
        if self.version_id is not None:
            result['VersionId'] = self.version_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModify') is not None:
            self.gmt_modify = m.get('GmtModify')
        self.input = []
        if m.get('Input') is not None:
            for k in m.get('Input'):
                temp_model = ScriptInput()
                self.input.append(temp_model.from_map(k))
        self.output = []
        if m.get('Output') is not None:
            for k in m.get('Output'):
                temp_model = ScriptOutput()
                self.output.append(temp_model.from_map(k))
        self.rules = []
        if m.get('Rules') is not None:
            for k in m.get('Rules'):
                temp_model = ScriptRule()
                self.rules.append(temp_model.from_map(k))
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('TemplateId') is not None:
            self.template_id = m.get('TemplateId')
        if m.get('VersionId') is not None:
            self.version_id = m.get('VersionId')
        return self


class ScriptHistoryInput(TeaModel):
    def __init__(self, description=None, name=None, sample=None, type=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.sample = sample  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ScriptHistoryInput, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.sample is not None:
            result['Sample'] = self.sample
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Sample') is not None:
            self.sample = m.get('Sample')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class ScriptHistoryOutput(TeaModel):
    def __init__(self, description=None, name=None, sample=None, type=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.sample = sample  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ScriptHistoryOutput, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.sample is not None:
            result['Sample'] = self.sample
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Sample') is not None:
            self.sample = m.get('Sample')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class ScriptHistory(TeaModel):
    def __init__(self, comment=None, content=None, gmt_create=None, gmt_modify=None, input=None, output=None,
                 script_id=None, version_id=None):
        self.comment = comment  # type: str
        self.content = content  # type: str
        self.gmt_create = gmt_create  # type: str
        self.gmt_modify = gmt_modify  # type: str
        self.input = input  # type: list[ScriptHistoryInput]
        self.output = output  # type: list[ScriptHistoryOutput]
        self.script_id = script_id  # type: str
        self.version_id = version_id  # type: str

    def validate(self):
        if self.input:
            for k in self.input:
                if k:
                    k.validate()
        if self.output:
            for k in self.output:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ScriptHistory, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.comment is not None:
            result['Comment'] = self.comment
        if self.content is not None:
            result['Content'] = self.content
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modify is not None:
            result['GmtModify'] = self.gmt_modify
        result['Input'] = []
        if self.input is not None:
            for k in self.input:
                result['Input'].append(k.to_map() if k else None)
        result['Output'] = []
        if self.output is not None:
            for k in self.output:
                result['Output'].append(k.to_map() if k else None)
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.version_id is not None:
            result['VersionId'] = self.version_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Comment') is not None:
            self.comment = m.get('Comment')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModify') is not None:
            self.gmt_modify = m.get('GmtModify')
        self.input = []
        if m.get('Input') is not None:
            for k in m.get('Input'):
                temp_model = ScriptHistoryInput()
                self.input.append(temp_model.from_map(k))
        self.output = []
        if m.get('Output') is not None:
            for k in m.get('Output'):
                temp_model = ScriptHistoryOutput()
                self.output.append(temp_model.from_map(k))
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('VersionId') is not None:
            self.version_id = m.get('VersionId')
        return self


class ScriptRule(TeaModel):
    def __init__(self, arch=None, domain=None, model=None, os=None, role=None, rule_id=None, script_id=None,
                 vendor=None):
        self.arch = arch  # type: str
        self.domain = domain  # type: str
        self.model = model  # type: str
        self.os = os  # type: str
        self.role = role  # type: str
        self.rule_id = rule_id  # type: str
        self.script_id = script_id  # type: str
        self.vendor = vendor  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ScriptRule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arch is not None:
            result['Arch'] = self.arch
        if self.domain is not None:
            result['Domain'] = self.domain
        if self.model is not None:
            result['Model'] = self.model
        if self.os is not None:
            result['Os'] = self.os
        if self.role is not None:
            result['Role'] = self.role
        if self.rule_id is not None:
            result['RuleId'] = self.rule_id
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Arch') is not None:
            self.arch = m.get('Arch')
        if m.get('Domain') is not None:
            self.domain = m.get('Domain')
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('Os') is not None:
            self.os = m.get('Os')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('RuleId') is not None:
            self.rule_id = m.get('RuleId')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        return self


class SetupProjectPackages(TeaModel):
    def __init__(self, device_number=None, model=None, role=None, vendor=None):
        self.device_number = device_number  # type: str
        self.model = model  # type: str
        self.role = role  # type: str
        self.vendor = vendor  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SetupProjectPackages, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_number is not None:
            result['DeviceNumber'] = self.device_number
        if self.model is not None:
            result['Model'] = self.model
        if self.role is not None:
            result['Role'] = self.role
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeviceNumber') is not None:
            self.device_number = m.get('DeviceNumber')
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        return self


class SetupProject(TeaModel):
    def __init__(self, arch_id=None, arch_version=None, architecture_id=None, create_time=None, delivery_time=None,
                 description=None, nodes=None, packages=None, setup_project_id=None, setup_project_name=None, space_id=None,
                 space_name=None, space_type=None, status=None):
        self.arch_id = arch_id  # type: str
        self.arch_version = arch_version  # type: str
        self.architecture_id = architecture_id  # type: str
        self.create_time = create_time  # type: str
        self.delivery_time = delivery_time  # type: str
        self.description = description  # type: str
        self.nodes = nodes  # type: str
        self.packages = packages  # type: list[SetupProjectPackages]
        self.setup_project_id = setup_project_id  # type: str
        self.setup_project_name = setup_project_name  # type: str
        self.space_id = space_id  # type: str
        self.space_name = space_name  # type: str
        self.space_type = space_type  # type: str
        self.status = status  # type: str

    def validate(self):
        if self.packages:
            for k in self.packages:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(SetupProject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arch_id is not None:
            result['ArchId'] = self.arch_id
        if self.arch_version is not None:
            result['ArchVersion'] = self.arch_version
        if self.architecture_id is not None:
            result['ArchitectureId'] = self.architecture_id
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.delivery_time is not None:
            result['DeliveryTime'] = self.delivery_time
        if self.description is not None:
            result['Description'] = self.description
        if self.nodes is not None:
            result['Nodes'] = self.nodes
        result['Packages'] = []
        if self.packages is not None:
            for k in self.packages:
                result['Packages'].append(k.to_map() if k else None)
        if self.setup_project_id is not None:
            result['SetupProjectId'] = self.setup_project_id
        if self.setup_project_name is not None:
            result['SetupProjectName'] = self.setup_project_name
        if self.space_id is not None:
            result['SpaceId'] = self.space_id
        if self.space_name is not None:
            result['SpaceName'] = self.space_name
        if self.space_type is not None:
            result['SpaceType'] = self.space_type
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ArchId') is not None:
            self.arch_id = m.get('ArchId')
        if m.get('ArchVersion') is not None:
            self.arch_version = m.get('ArchVersion')
        if m.get('ArchitectureId') is not None:
            self.architecture_id = m.get('ArchitectureId')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('DeliveryTime') is not None:
            self.delivery_time = m.get('DeliveryTime')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Nodes') is not None:
            self.nodes = m.get('Nodes')
        self.packages = []
        if m.get('Packages') is not None:
            for k in m.get('Packages'):
                temp_model = SetupProjectPackages()
                self.packages.append(temp_model.from_map(k))
        if m.get('SetupProjectId') is not None:
            self.setup_project_id = m.get('SetupProjectId')
        if m.get('SetupProjectName') is not None:
            self.setup_project_name = m.get('SetupProjectName')
        if m.get('SpaceId') is not None:
            self.space_id = m.get('SpaceId')
        if m.get('SpaceName') is not None:
            self.space_name = m.get('SpaceName')
        if m.get('SpaceType') is not None:
            self.space_type = m.get('SpaceType')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class SpaceModelSort(TeaModel):
    def __init__(self, level=None, level_name=None):
        self.level = level  # type: long
        self.level_name = level_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SpaceModelSort, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.level is not None:
            result['Level'] = self.level
        if self.level_name is not None:
            result['LevelName'] = self.level_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Level') is not None:
            self.level = m.get('Level')
        if m.get('LevelName') is not None:
            self.level_name = m.get('LevelName')
        return self


class SpaceModelSpaceModelSort(TeaModel):
    def __init__(self, level=None, levle_name=None):
        self.level = level  # type: long
        self.levle_name = levle_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SpaceModelSpaceModelSort, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.level is not None:
            result['Level'] = self.level
        if self.levle_name is not None:
            result['LevleName'] = self.levle_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Level') is not None:
            self.level = m.get('Level')
        if m.get('LevleName') is not None:
            self.levle_name = m.get('LevleName')
        return self


class SpaceModelSpaceModel(TeaModel):
    def __init__(self, create_time=None, sort=None, space_model_id=None, space_type=None, status=None,
                 update_time=None):
        self.create_time = create_time  # type: str
        self.sort = sort  # type: SpaceModelSpaceModelSort
        self.space_model_id = space_model_id  # type: str
        self.space_type = space_type  # type: str
        self.status = status  # type: str
        self.update_time = update_time  # type: str

    def validate(self):
        if self.sort:
            self.sort.validate()

    def to_map(self):
        _map = super(SpaceModelSpaceModel, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.sort is not None:
            result['Sort'] = self.sort.to_map()
        if self.space_model_id is not None:
            result['SpaceModelId'] = self.space_model_id
        if self.space_type is not None:
            result['SpaceType'] = self.space_type
        if self.status is not None:
            result['Status'] = self.status
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Sort') is not None:
            temp_model = SpaceModelSpaceModelSort()
            self.sort = temp_model.from_map(m['Sort'])
        if m.get('SpaceModelId') is not None:
            self.space_model_id = m.get('SpaceModelId')
        if m.get('SpaceType') is not None:
            self.space_type = m.get('SpaceType')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        return self


class SpaceModel(TeaModel):
    def __init__(self, create_time=None, instance=None, operate_type=None, sort=None, space_id=None,
                 space_model=None, space_model_id=None, space_model_name=None, space_type=None, status=None):
        self.create_time = create_time  # type: str
        self.instance = instance  # type: str
        self.operate_type = operate_type  # type: str
        self.sort = sort  # type: SpaceModelSort
        self.space_id = space_id  # type: str
        self.space_model = space_model  # type: SpaceModelSpaceModel
        self.space_model_id = space_model_id  # type: str
        self.space_model_name = space_model_name  # type: str
        self.space_type = space_type  # type: str
        self.status = status  # type: str

    def validate(self):
        if self.sort:
            self.sort.validate()
        if self.space_model:
            self.space_model.validate()

    def to_map(self):
        _map = super(SpaceModel, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.instance is not None:
            result['Instance'] = self.instance
        if self.operate_type is not None:
            result['OperateType'] = self.operate_type
        if self.sort is not None:
            result['Sort'] = self.sort.to_map()
        if self.space_id is not None:
            result['SpaceId'] = self.space_id
        if self.space_model is not None:
            result['SpaceModel'] = self.space_model.to_map()
        if self.space_model_id is not None:
            result['SpaceModelId'] = self.space_model_id
        if self.space_model_name is not None:
            result['SpaceModelName'] = self.space_model_name
        if self.space_type is not None:
            result['SpaceType'] = self.space_type
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Instance') is not None:
            self.instance = m.get('Instance')
        if m.get('OperateType') is not None:
            self.operate_type = m.get('OperateType')
        if m.get('Sort') is not None:
            temp_model = SpaceModelSort()
            self.sort = temp_model.from_map(m['Sort'])
        if m.get('SpaceId') is not None:
            self.space_id = m.get('SpaceId')
        if m.get('SpaceModel') is not None:
            temp_model = SpaceModelSpaceModel()
            self.space_model = temp_model.from_map(m['SpaceModel'])
        if m.get('SpaceModelId') is not None:
            self.space_model_id = m.get('SpaceModelId')
        if m.get('SpaceModelName') is not None:
            self.space_model_name = m.get('SpaceModelName')
        if m.get('SpaceType') is not None:
            self.space_type = m.get('SpaceType')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class SubscriptionItem(TeaModel):
    def __init__(self, alarm_status=None, language=None, monitor_item_id=None, notification_group_id=None,
                 notification_mode=None, recovery_notice=None, subscription_item_id=None, subscription_type=None,
                 suppression_strategy=None, trigger_times=None):
        self.alarm_status = alarm_status  # type: str
        self.language = language  # type: str
        self.monitor_item_id = monitor_item_id  # type: str
        self.notification_group_id = notification_group_id  # type: str
        self.notification_mode = notification_mode  # type: str
        self.recovery_notice = recovery_notice  # type: int
        self.subscription_item_id = subscription_item_id  # type: str
        self.subscription_type = subscription_type  # type: str
        self.suppression_strategy = suppression_strategy  # type: str
        self.trigger_times = trigger_times  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(SubscriptionItem, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alarm_status is not None:
            result['AlarmStatus'] = self.alarm_status
        if self.language is not None:
            result['Language'] = self.language
        if self.monitor_item_id is not None:
            result['MonitorItemId'] = self.monitor_item_id
        if self.notification_group_id is not None:
            result['NotificationGroupId'] = self.notification_group_id
        if self.notification_mode is not None:
            result['NotificationMode'] = self.notification_mode
        if self.recovery_notice is not None:
            result['RecoveryNotice'] = self.recovery_notice
        if self.subscription_item_id is not None:
            result['SubscriptionItemId'] = self.subscription_item_id
        if self.subscription_type is not None:
            result['SubscriptionType'] = self.subscription_type
        if self.suppression_strategy is not None:
            result['SuppressionStrategy'] = self.suppression_strategy
        if self.trigger_times is not None:
            result['TriggerTimes'] = self.trigger_times
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AlarmStatus') is not None:
            self.alarm_status = m.get('AlarmStatus')
        if m.get('Language') is not None:
            self.language = m.get('Language')
        if m.get('MonitorItemId') is not None:
            self.monitor_item_id = m.get('MonitorItemId')
        if m.get('NotificationGroupId') is not None:
            self.notification_group_id = m.get('NotificationGroupId')
        if m.get('NotificationMode') is not None:
            self.notification_mode = m.get('NotificationMode')
        if m.get('RecoveryNotice') is not None:
            self.recovery_notice = m.get('RecoveryNotice')
        if m.get('SubscriptionItemId') is not None:
            self.subscription_item_id = m.get('SubscriptionItemId')
        if m.get('SubscriptionType') is not None:
            self.subscription_type = m.get('SubscriptionType')
        if m.get('SuppressionStrategy') is not None:
            self.suppression_strategy = m.get('SuppressionStrategy')
        if m.get('TriggerTimes') is not None:
            self.trigger_times = m.get('TriggerTimes')
        return self


class Task(TeaModel):
    def __init__(self, category=None, gmt_create=None, gmt_modify=None, params=None, response_code=None, result=None,
                 status=None, task_id=None, template_id=None, template_name=None):
        self.category = category  # type: str
        self.gmt_create = gmt_create  # type: str
        self.gmt_modify = gmt_modify  # type: str
        self.params = params  # type: str
        self.response_code = response_code  # type: str
        self.result = result  # type: str
        self.status = status  # type: str
        self.task_id = task_id  # type: str
        self.template_id = template_id  # type: str
        self.template_name = template_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(Task, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['Category'] = self.category
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modify is not None:
            result['GmtModify'] = self.gmt_modify
        if self.params is not None:
            result['Params'] = self.params
        if self.response_code is not None:
            result['ResponseCode'] = self.response_code
        if self.result is not None:
            result['Result'] = self.result
        if self.status is not None:
            result['Status'] = self.status
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.template_id is not None:
            result['TemplateId'] = self.template_id
        if self.template_name is not None:
            result['TemplateName'] = self.template_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModify') is not None:
            self.gmt_modify = m.get('GmtModify')
        if m.get('Params') is not None:
            self.params = m.get('Params')
        if m.get('ResponseCode') is not None:
            self.response_code = m.get('ResponseCode')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('TemplateId') is not None:
            self.template_id = m.get('TemplateId')
        if m.get('TemplateName') is not None:
            self.template_name = m.get('TemplateName')
        return self


class TaskLog(TeaModel):
    def __init__(self, func_name=None, gmt_create=None, level=None, line_no=None, log_id=None, message=None,
                 task_id=None):
        self.func_name = func_name  # type: str
        self.gmt_create = gmt_create  # type: str
        self.level = level  # type: str
        self.line_no = line_no  # type: int
        self.log_id = log_id  # type: str
        self.message = message  # type: str
        self.task_id = task_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TaskLog, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.func_name is not None:
            result['FuncName'] = self.func_name
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.level is not None:
            result['Level'] = self.level
        if self.line_no is not None:
            result['LineNo'] = self.line_no
        if self.log_id is not None:
            result['LogId'] = self.log_id
        if self.message is not None:
            result['Message'] = self.message
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('FuncName') is not None:
            self.func_name = m.get('FuncName')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('Level') is not None:
            self.level = m.get('Level')
        if m.get('LineNo') is not None:
            self.line_no = m.get('LineNo')
        if m.get('LogId') is not None:
            self.log_id = m.get('LogId')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class TemplateInput(TeaModel):
    def __init__(self, description=None, name=None, sample=None, type=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.sample = sample  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TemplateInput, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.sample is not None:
            result['Sample'] = self.sample
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Sample') is not None:
            self.sample = m.get('Sample')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class TemplateOutput(TeaModel):
    def __init__(self, description=None, name=None, sample=None, type=None):
        self.description = description  # type: str
        self.name = name  # type: str
        self.sample = sample  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TemplateOutput, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.name is not None:
            result['Name'] = self.name
        if self.sample is not None:
            result['Sample'] = self.sample
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Sample') is not None:
            self.sample = m.get('Sample')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class Template(TeaModel):
    def __init__(self, category=None, comment=None, gmt_create=None, gmt_modify=None, input=None, output=None,
                 template_name=None, template_type=None):
        self.category = category  # type: str
        self.comment = comment  # type: str
        self.gmt_create = gmt_create  # type: str
        self.gmt_modify = gmt_modify  # type: str
        self.input = input  # type: list[TemplateInput]
        self.output = output  # type: list[TemplateOutput]
        self.template_name = template_name  # type: str
        self.template_type = template_type  # type: str

    def validate(self):
        if self.input:
            for k in self.input:
                if k:
                    k.validate()
        if self.output:
            for k in self.output:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(Template, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['Category'] = self.category
        if self.comment is not None:
            result['Comment'] = self.comment
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modify is not None:
            result['GmtModify'] = self.gmt_modify
        result['Input'] = []
        if self.input is not None:
            for k in self.input:
                result['Input'].append(k.to_map() if k else None)
        result['Output'] = []
        if self.output is not None:
            for k in self.output:
                result['Output'].append(k.to_map() if k else None)
        if self.template_name is not None:
            result['TemplateName'] = self.template_name
        if self.template_type is not None:
            result['TemplateType'] = self.template_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('Comment') is not None:
            self.comment = m.get('Comment')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModify') is not None:
            self.gmt_modify = m.get('GmtModify')
        self.input = []
        if m.get('Input') is not None:
            for k in m.get('Input'):
                temp_model = TemplateInput()
                self.input.append(temp_model.from_map(k))
        self.output = []
        if m.get('Output') is not None:
            for k in m.get('Output'):
                temp_model = TemplateOutput()
                self.output.append(temp_model.from_map(k))
        if m.get('TemplateName') is not None:
            self.template_name = m.get('TemplateName')
        if m.get('TemplateType') is not None:
            self.template_type = m.get('TemplateType')
        return self


class TimePeriod(TeaModel):
    def __init__(self, cron_expression=None, gmt_create=None, gmt_modified=None, source=None,
                 time_period_description=None, time_period_id=None, time_period_name=None):
        self.cron_expression = cron_expression  # type: str
        self.gmt_create = gmt_create  # type: str
        self.gmt_modified = gmt_modified  # type: str
        self.source = source  # type: str
        self.time_period_description = time_period_description  # type: str
        self.time_period_id = time_period_id  # type: str
        self.time_period_name = time_period_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TimePeriod, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cron_expression is not None:
            result['CronExpression'] = self.cron_expression
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.source is not None:
            result['Source'] = self.source
        if self.time_period_description is not None:
            result['TimePeriodDescription'] = self.time_period_description
        if self.time_period_id is not None:
            result['TimePeriodId'] = self.time_period_id
        if self.time_period_name is not None:
            result['TimePeriodName'] = self.time_period_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CronExpression') is not None:
            self.cron_expression = m.get('CronExpression')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Source') is not None:
            self.source = m.get('Source')
        if m.get('TimePeriodDescription') is not None:
            self.time_period_description = m.get('TimePeriodDescription')
        if m.get('TimePeriodId') is not None:
            self.time_period_id = m.get('TimePeriodId')
        if m.get('TimePeriodName') is not None:
            self.time_period_name = m.get('TimePeriodName')
        return self


class ZoneTypeZoneTypeLayer(TeaModel):
    def __init__(self, mask=None, name=None):
        self.mask = mask  # type: long
        self.name = name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ZoneTypeZoneTypeLayer, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.mask is not None:
            result['Mask'] = self.mask
        if self.name is not None:
            result['Name'] = self.name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Mask') is not None:
            self.mask = m.get('Mask')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        return self


class ZoneType(TeaModel):
    def __init__(self, create_time=None, name=None, zone_type_id=None, zone_type_layer=None, zone_type_name=None):
        self.create_time = create_time  # type: str
        self.name = name  # type: str
        self.zone_type_id = zone_type_id  # type: str
        self.zone_type_layer = zone_type_layer  # type: list[ZoneTypeZoneTypeLayer]
        self.zone_type_name = zone_type_name  # type: str

    def validate(self):
        if self.zone_type_layer:
            for k in self.zone_type_layer:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ZoneType, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.name is not None:
            result['Name'] = self.name
        if self.zone_type_id is not None:
            result['ZoneTypeId'] = self.zone_type_id
        result['ZoneTypeLayer'] = []
        if self.zone_type_layer is not None:
            for k in self.zone_type_layer:
                result['ZoneTypeLayer'].append(k.to_map() if k else None)
        if self.zone_type_name is not None:
            result['ZoneTypeName'] = self.zone_type_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('ZoneTypeId') is not None:
            self.zone_type_id = m.get('ZoneTypeId')
        self.zone_type_layer = []
        if m.get('ZoneTypeLayer') is not None:
            for k in m.get('ZoneTypeLayer'):
                temp_model = ZoneTypeZoneTypeLayer()
                self.zone_type_layer.append(temp_model.from_map(k))
        if m.get('ZoneTypeName') is not None:
            self.zone_type_name = m.get('ZoneTypeName')
        return self


class ApplyIPRequest(TeaModel):
    def __init__(self, business_type_id=None, business_type_params=None, device_resource_id=None,
                 device_resource_ids=None, instance_id=None, ip_type=None, loopback_port=None, net_location=None, setup_project_id=None):
        self.business_type_id = business_type_id  # type: str
        self.business_type_params = business_type_params  # type: str
        self.device_resource_id = device_resource_id  # type: str
        self.device_resource_ids = device_resource_ids  # type: list[str]
        self.instance_id = instance_id  # type: str
        self.ip_type = ip_type  # type: str
        self.loopback_port = loopback_port  # type: str
        self.net_location = net_location  # type: str
        self.setup_project_id = setup_project_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ApplyIPRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.business_type_id is not None:
            result['BusinessTypeId'] = self.business_type_id
        if self.business_type_params is not None:
            result['BusinessTypeParams'] = self.business_type_params
        if self.device_resource_id is not None:
            result['DeviceResourceId'] = self.device_resource_id
        if self.device_resource_ids is not None:
            result['DeviceResourceIds'] = self.device_resource_ids
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.ip_type is not None:
            result['IpType'] = self.ip_type
        if self.loopback_port is not None:
            result['LoopbackPort'] = self.loopback_port
        if self.net_location is not None:
            result['NetLocation'] = self.net_location
        if self.setup_project_id is not None:
            result['SetupProjectId'] = self.setup_project_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BusinessTypeId') is not None:
            self.business_type_id = m.get('BusinessTypeId')
        if m.get('BusinessTypeParams') is not None:
            self.business_type_params = m.get('BusinessTypeParams')
        if m.get('DeviceResourceId') is not None:
            self.device_resource_id = m.get('DeviceResourceId')
        if m.get('DeviceResourceIds') is not None:
            self.device_resource_ids = m.get('DeviceResourceIds')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('IpType') is not None:
            self.ip_type = m.get('IpType')
        if m.get('LoopbackPort') is not None:
            self.loopback_port = m.get('LoopbackPort')
        if m.get('NetLocation') is not None:
            self.net_location = m.get('NetLocation')
        if m.get('SetupProjectId') is not None:
            self.setup_project_id = m.get('SetupProjectId')
        return self


class ApplyIPShrinkRequest(TeaModel):
    def __init__(self, business_type_id=None, business_type_params=None, device_resource_id=None,
                 device_resource_ids_shrink=None, instance_id=None, ip_type=None, loopback_port=None, net_location=None, setup_project_id=None):
        self.business_type_id = business_type_id  # type: str
        self.business_type_params = business_type_params  # type: str
        self.device_resource_id = device_resource_id  # type: str
        self.device_resource_ids_shrink = device_resource_ids_shrink  # type: str
        self.instance_id = instance_id  # type: str
        self.ip_type = ip_type  # type: str
        self.loopback_port = loopback_port  # type: str
        self.net_location = net_location  # type: str
        self.setup_project_id = setup_project_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ApplyIPShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.business_type_id is not None:
            result['BusinessTypeId'] = self.business_type_id
        if self.business_type_params is not None:
            result['BusinessTypeParams'] = self.business_type_params
        if self.device_resource_id is not None:
            result['DeviceResourceId'] = self.device_resource_id
        if self.device_resource_ids_shrink is not None:
            result['DeviceResourceIds'] = self.device_resource_ids_shrink
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.ip_type is not None:
            result['IpType'] = self.ip_type
        if self.loopback_port is not None:
            result['LoopbackPort'] = self.loopback_port
        if self.net_location is not None:
            result['NetLocation'] = self.net_location
        if self.setup_project_id is not None:
            result['SetupProjectId'] = self.setup_project_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BusinessTypeId') is not None:
            self.business_type_id = m.get('BusinessTypeId')
        if m.get('BusinessTypeParams') is not None:
            self.business_type_params = m.get('BusinessTypeParams')
        if m.get('DeviceResourceId') is not None:
            self.device_resource_id = m.get('DeviceResourceId')
        if m.get('DeviceResourceIds') is not None:
            self.device_resource_ids_shrink = m.get('DeviceResourceIds')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('IpType') is not None:
            self.ip_type = m.get('IpType')
        if m.get('LoopbackPort') is not None:
            self.loopback_port = m.get('LoopbackPort')
        if m.get('NetLocation') is not None:
            self.net_location = m.get('NetLocation')
        if m.get('SetupProjectId') is not None:
            self.setup_project_id = m.get('SetupProjectId')
        return self


class ApplyIPResponseBody(TeaModel):
    def __init__(self, request_id=None):
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ApplyIPResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class ApplyIPResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ApplyIPResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ApplyIPResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ApplyIPResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AutoDutyRequest(TeaModel):
    def __init__(self, duty_batch=None, duty_name=None, end_date=None, instance_id=None, start_date=None):
        self.duty_batch = duty_batch  # type: str
        self.duty_name = duty_name  # type: str
        self.end_date = end_date  # type: str
        self.instance_id = instance_id  # type: str
        self.start_date = start_date  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AutoDutyRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.duty_batch is not None:
            result['DutyBatch'] = self.duty_batch
        if self.duty_name is not None:
            result['DutyName'] = self.duty_name
        if self.end_date is not None:
            result['EndDate'] = self.end_date
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.start_date is not None:
            result['StartDate'] = self.start_date
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DutyBatch') is not None:
            self.duty_batch = m.get('DutyBatch')
        if m.get('DutyName') is not None:
            self.duty_name = m.get('DutyName')
        if m.get('EndDate') is not None:
            self.end_date = m.get('EndDate')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('StartDate') is not None:
            self.start_date = m.get('StartDate')
        return self


class AutoDutyResponseBody(TeaModel):
    def __init__(self, request_id=None):
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AutoDutyResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class AutoDutyResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: AutoDutyResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(AutoDutyResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AutoDutyResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CloseEventRequest(TeaModel):
    def __init__(self, event_name=None, event_object_id=None, event_type=None, instance_id=None):
        self.event_name = event_name  # type: str
        self.event_object_id = event_object_id  # type: str
        self.event_type = event_type  # type: str
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CloseEventRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.event_name is not None:
            result['EventName'] = self.event_name
        if self.event_object_id is not None:
            result['EventObjectId'] = self.event_object_id
        if self.event_type is not None:
            result['EventType'] = self.event_type
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EventName') is not None:
            self.event_name = m.get('EventName')
        if m.get('EventObjectId') is not None:
            self.event_object_id = m.get('EventObjectId')
        if m.get('EventType') is not None:
            self.event_type = m.get('EventType')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class CloseEventResponseBody(TeaModel):
    def __init__(self, request_id=None):
        # Id of the request
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CloseEventResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class CloseEventResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CloseEventResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CloseEventResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CloseEventResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateConfigurationSpecificationRequest(TeaModel):
    def __init__(self, architecture=None, client_token=None, instance_id=None, model=None, related_variate=None,
                 role=None, specification_content=None, specification_name=None, vendor=None):
        self.architecture = architecture  # type: str
        self.client_token = client_token  # type: str
        self.instance_id = instance_id  # type: str
        self.model = model  # type: str
        self.related_variate = related_variate  # type: list[bytes]
        self.role = role  # type: str
        self.specification_content = specification_content  # type: str
        self.specification_name = specification_name  # type: str
        self.vendor = vendor  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateConfigurationSpecificationRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.architecture is not None:
            result['Architecture'] = self.architecture
        if self.client_token is not None:
            result['ClientToken'] = self.client_token
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.model is not None:
            result['Model'] = self.model
        if self.related_variate is not None:
            result['RelatedVariate'] = self.related_variate
        if self.role is not None:
            result['Role'] = self.role
        if self.specification_content is not None:
            result['SpecificationContent'] = self.specification_content
        if self.specification_name is not None:
            result['SpecificationName'] = self.specification_name
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Architecture') is not None:
            self.architecture = m.get('Architecture')
        if m.get('ClientToken') is not None:
            self.client_token = m.get('ClientToken')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('RelatedVariate') is not None:
            self.related_variate = m.get('RelatedVariate')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('SpecificationContent') is not None:
            self.specification_content = m.get('SpecificationContent')
        if m.get('SpecificationName') is not None:
            self.specification_name = m.get('SpecificationName')
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        return self


class CreateConfigurationSpecificationShrinkRequest(TeaModel):
    def __init__(self, architecture=None, client_token=None, instance_id=None, model=None,
                 related_variate_shrink=None, role=None, specification_content=None, specification_name=None, vendor=None):
        self.architecture = architecture  # type: str
        self.client_token = client_token  # type: str
        self.instance_id = instance_id  # type: str
        self.model = model  # type: str
        self.related_variate_shrink = related_variate_shrink  # type: str
        self.role = role  # type: str
        self.specification_content = specification_content  # type: str
        self.specification_name = specification_name  # type: str
        self.vendor = vendor  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateConfigurationSpecificationShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.architecture is not None:
            result['Architecture'] = self.architecture
        if self.client_token is not None:
            result['ClientToken'] = self.client_token
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.model is not None:
            result['Model'] = self.model
        if self.related_variate_shrink is not None:
            result['RelatedVariate'] = self.related_variate_shrink
        if self.role is not None:
            result['Role'] = self.role
        if self.specification_content is not None:
            result['SpecificationContent'] = self.specification_content
        if self.specification_name is not None:
            result['SpecificationName'] = self.specification_name
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Architecture') is not None:
            self.architecture = m.get('Architecture')
        if m.get('ClientToken') is not None:
            self.client_token = m.get('ClientToken')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('RelatedVariate') is not None:
            self.related_variate_shrink = m.get('RelatedVariate')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('SpecificationContent') is not None:
            self.specification_content = m.get('SpecificationContent')
        if m.get('SpecificationName') is not None:
            self.specification_name = m.get('SpecificationName')
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        return self


class CreateConfigurationSpecificationResponseBody(TeaModel):
    def __init__(self, configuration_specification_id=None, request_id=None):
        self.configuration_specification_id = configuration_specification_id  # type: str
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateConfigurationSpecificationResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.configuration_specification_id is not None:
            result['ConfigurationSpecificationId'] = self.configuration_specification_id
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ConfigurationSpecificationId') is not None:
            self.configuration_specification_id = m.get('ConfigurationSpecificationId')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class CreateConfigurationSpecificationResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateConfigurationSpecificationResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateConfigurationSpecificationResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateConfigurationSpecificationResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateConfigurationVariateRequest(TeaModel):
    def __init__(self, client_token=None, comment=None, format_function=None, instance_id=None, variate_name=None):
        self.client_token = client_token  # type: str
        self.comment = comment  # type: str
        self.format_function = format_function  # type: str
        self.instance_id = instance_id  # type: str
        # 代表资源名称的资源属性字段
        self.variate_name = variate_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateConfigurationVariateRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.client_token is not None:
            result['ClientToken'] = self.client_token
        if self.comment is not None:
            result['Comment'] = self.comment
        if self.format_function is not None:
            result['FormatFunction'] = self.format_function
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.variate_name is not None:
            result['VariateName'] = self.variate_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ClientToken') is not None:
            self.client_token = m.get('ClientToken')
        if m.get('Comment') is not None:
            self.comment = m.get('Comment')
        if m.get('FormatFunction') is not None:
            self.format_function = m.get('FormatFunction')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('VariateName') is not None:
            self.variate_name = m.get('VariateName')
        return self


class CreateConfigurationVariateResponseBody(TeaModel):
    def __init__(self, configuration_variate_id=None, request_id=None):
        self.configuration_variate_id = configuration_variate_id  # type: str
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateConfigurationVariateResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.configuration_variate_id is not None:
            result['ConfigurationVariateId'] = self.configuration_variate_id
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ConfigurationVariateId') is not None:
            self.configuration_variate_id = m.get('ConfigurationVariateId')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class CreateConfigurationVariateResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateConfigurationVariateResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateConfigurationVariateResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateConfigurationVariateResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateDedicatedLineRequest(TeaModel):
    def __init__(self, bandwidth=None, client_token=None, contact=None, dedicated_line_gateway=None,
                 dedicated_line_ip=None, dedicated_line_role=None, description=None, device_id=None, device_port=None,
                 expiration_date=None, ext_attributes=None, instance_id=None, isp=None, isp_form_id=None, isp_id=None, keyword=None,
                 online_date=None, phone=None, physical_space_id=None):
        self.bandwidth = bandwidth  # type: int
        self.client_token = client_token  # type: str
        self.contact = contact  # type: str
        self.dedicated_line_gateway = dedicated_line_gateway  # type: str
        self.dedicated_line_ip = dedicated_line_ip  # type: str
        self.dedicated_line_role = dedicated_line_role  # type: str
        self.description = description  # type: str
        self.device_id = device_id  # type: str
        self.device_port = device_port  # type: str
        self.expiration_date = expiration_date  # type: str
        self.ext_attributes = ext_attributes  # type: str
        self.instance_id = instance_id  # type: str
        self.isp = isp  # type: str
        self.isp_form_id = isp_form_id  # type: str
        self.isp_id = isp_id  # type: str
        self.keyword = keyword  # type: str
        self.online_date = online_date  # type: str
        self.phone = phone  # type: str
        self.physical_space_id = physical_space_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateDedicatedLineRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bandwidth is not None:
            result['Bandwidth'] = self.bandwidth
        if self.client_token is not None:
            result['ClientToken'] = self.client_token
        if self.contact is not None:
            result['Contact'] = self.contact
        if self.dedicated_line_gateway is not None:
            result['DedicatedLineGateway'] = self.dedicated_line_gateway
        if self.dedicated_line_ip is not None:
            result['DedicatedLineIp'] = self.dedicated_line_ip
        if self.dedicated_line_role is not None:
            result['DedicatedLineRole'] = self.dedicated_line_role
        if self.description is not None:
            result['Description'] = self.description
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.device_port is not None:
            result['DevicePort'] = self.device_port
        if self.expiration_date is not None:
            result['ExpirationDate'] = self.expiration_date
        if self.ext_attributes is not None:
            result['ExtAttributes'] = self.ext_attributes
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.isp is not None:
            result['Isp'] = self.isp
        if self.isp_form_id is not None:
            result['IspFormId'] = self.isp_form_id
        if self.isp_id is not None:
            result['IspId'] = self.isp_id
        if self.keyword is not None:
            result['Keyword'] = self.keyword
        if self.online_date is not None:
            result['OnlineDate'] = self.online_date
        if self.phone is not None:
            result['Phone'] = self.phone
        if self.physical_space_id is not None:
            result['PhysicalSpaceId'] = self.physical_space_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Bandwidth') is not None:
            self.bandwidth = m.get('Bandwidth')
        if m.get('ClientToken') is not None:
            self.client_token = m.get('ClientToken')
        if m.get('Contact') is not None:
            self.contact = m.get('Contact')
        if m.get('DedicatedLineGateway') is not None:
            self.dedicated_line_gateway = m.get('DedicatedLineGateway')
        if m.get('DedicatedLineIp') is not None:
            self.dedicated_line_ip = m.get('DedicatedLineIp')
        if m.get('DedicatedLineRole') is not None:
            self.dedicated_line_role = m.get('DedicatedLineRole')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('DevicePort') is not None:
            self.device_port = m.get('DevicePort')
        if m.get('ExpirationDate') is not None:
            self.expiration_date = m.get('ExpirationDate')
        if m.get('ExtAttributes') is not None:
            self.ext_attributes = m.get('ExtAttributes')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Isp') is not None:
            self.isp = m.get('Isp')
        if m.get('IspFormId') is not None:
            self.isp_form_id = m.get('IspFormId')
        if m.get('IspId') is not None:
            self.isp_id = m.get('IspId')
        if m.get('Keyword') is not None:
            self.keyword = m.get('Keyword')
        if m.get('OnlineDate') is not None:
            self.online_date = m.get('OnlineDate')
        if m.get('Phone') is not None:
            self.phone = m.get('Phone')
        if m.get('PhysicalSpaceId') is not None:
            self.physical_space_id = m.get('PhysicalSpaceId')
        return self


class CreateDedicatedLineResponseBody(TeaModel):
    def __init__(self, dedicated_line_id=None, request_id=None):
        self.dedicated_line_id = dedicated_line_id  # type: str
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateDedicatedLineResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dedicated_line_id is not None:
            result['DedicatedLineId'] = self.dedicated_line_id
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DedicatedLineId') is not None:
            self.dedicated_line_id = m.get('DedicatedLineId')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class CreateDedicatedLineResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateDedicatedLineResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateDedicatedLineResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateDedicatedLineResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateDeviceRequest(TeaModel):
    def __init__(self, client_token=None, device_form_id=None, enable_password=None, ext_attributes=None,
                 host_name=None, instance_id=None, ip=None, login_password=None, login_type=None, login_username=None,
                 mac=None, model=None, physical_space_id=None, security_domain=None, service_status=None, sn=None,
                 snmp_account_type=None, snmp_account_version=None, snmp_auth_passphrase=None, snmp_auth_protocol=None,
                 snmp_community=None, snmp_privacy_passphrase=None, snmp_privacy_protocol=None, snmp_security_level=None,
                 snmp_username=None, vendor=None):
        self.client_token = client_token  # type: str
        self.device_form_id = device_form_id  # type: str
        # enable密码
        self.enable_password = enable_password  # type: str
        # 设备额外属性(JSON)
        self.ext_attributes = ext_attributes  # type: str
        # 主机名
        self.host_name = host_name  # type: str
        # 实例ID
        self.instance_id = instance_id  # type: str
        # 设备IP
        self.ip = ip  # type: str
        # 设备TELNET账号
        self.login_password = login_password  # type: str
        # 设备SSH登录账号
        self.login_type = login_type  # type: str
        # 设备SSH登录密码
        self.login_username = login_username  # type: str
        # 设备MAC地址
        self.mac = mac  # type: str
        # 设备型号
        self.model = model  # type: str
        self.physical_space_id = physical_space_id  # type: str
        # 设备安全域
        self.security_domain = security_domain  # type: str
        # 设备状态
        self.service_status = service_status  # type: str
        # 设备SN
        self.sn = sn  # type: str
        # 账号类型
        self.snmp_account_type = snmp_account_type  # type: str
        # SNMP版本号
        self.snmp_account_version = snmp_account_version  # type: str
        # SNMP Auth PassPhrase
        self.snmp_auth_passphrase = snmp_auth_passphrase  # type: str
        # SNMP Auth Protocol
        self.snmp_auth_protocol = snmp_auth_protocol  # type: str
        # SNMP Community
        self.snmp_community = snmp_community  # type: str
        # SNMP Privacy Passphrase
        self.snmp_privacy_passphrase = snmp_privacy_passphrase  # type: str
        # SNMP Privacy Protocol
        self.snmp_privacy_protocol = snmp_privacy_protocol  # type: str
        # 安全级别
        self.snmp_security_level = snmp_security_level  # type: str
        # 用户名
        self.snmp_username = snmp_username  # type: str
        # 设备厂商
        self.vendor = vendor  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateDeviceRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.client_token is not None:
            result['ClientToken'] = self.client_token
        if self.device_form_id is not None:
            result['DeviceFormId'] = self.device_form_id
        if self.enable_password is not None:
            result['EnablePassword'] = self.enable_password
        if self.ext_attributes is not None:
            result['ExtAttributes'] = self.ext_attributes
        if self.host_name is not None:
            result['HostName'] = self.host_name
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.ip is not None:
            result['Ip'] = self.ip
        if self.login_password is not None:
            result['LoginPassword'] = self.login_password
        if self.login_type is not None:
            result['LoginType'] = self.login_type
        if self.login_username is not None:
            result['LoginUsername'] = self.login_username
        if self.mac is not None:
            result['Mac'] = self.mac
        if self.model is not None:
            result['Model'] = self.model
        if self.physical_space_id is not None:
            result['PhysicalSpaceId'] = self.physical_space_id
        if self.security_domain is not None:
            result['SecurityDomain'] = self.security_domain
        if self.service_status is not None:
            result['ServiceStatus'] = self.service_status
        if self.sn is not None:
            result['Sn'] = self.sn
        if self.snmp_account_type is not None:
            result['SnmpAccountType'] = self.snmp_account_type
        if self.snmp_account_version is not None:
            result['SnmpAccountVersion'] = self.snmp_account_version
        if self.snmp_auth_passphrase is not None:
            result['SnmpAuthPassphrase'] = self.snmp_auth_passphrase
        if self.snmp_auth_protocol is not None:
            result['SnmpAuthProtocol'] = self.snmp_auth_protocol
        if self.snmp_community is not None:
            result['SnmpCommunity'] = self.snmp_community
        if self.snmp_privacy_passphrase is not None:
            result['SnmpPrivacyPassphrase'] = self.snmp_privacy_passphrase
        if self.snmp_privacy_protocol is not None:
            result['SnmpPrivacyProtocol'] = self.snmp_privacy_protocol
        if self.snmp_security_level is not None:
            result['SnmpSecurityLevel'] = self.snmp_security_level
        if self.snmp_username is not None:
            result['SnmpUsername'] = self.snmp_username
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ClientToken') is not None:
            self.client_token = m.get('ClientToken')
        if m.get('DeviceFormId') is not None:
            self.device_form_id = m.get('DeviceFormId')
        if m.get('EnablePassword') is not None:
            self.enable_password = m.get('EnablePassword')
        if m.get('ExtAttributes') is not None:
            self.ext_attributes = m.get('ExtAttributes')
        if m.get('HostName') is not None:
            self.host_name = m.get('HostName')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Ip') is not None:
            self.ip = m.get('Ip')
        if m.get('LoginPassword') is not None:
            self.login_password = m.get('LoginPassword')
        if m.get('LoginType') is not None:
            self.login_type = m.get('LoginType')
        if m.get('LoginUsername') is not None:
            self.login_username = m.get('LoginUsername')
        if m.get('Mac') is not None:
            self.mac = m.get('Mac')
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('PhysicalSpaceId') is not None:
            self.physical_space_id = m.get('PhysicalSpaceId')
        if m.get('SecurityDomain') is not None:
            self.security_domain = m.get('SecurityDomain')
        if m.get('ServiceStatus') is not None:
            self.service_status = m.get('ServiceStatus')
        if m.get('Sn') is not None:
            self.sn = m.get('Sn')
        if m.get('SnmpAccountType') is not None:
            self.snmp_account_type = m.get('SnmpAccountType')
        if m.get('SnmpAccountVersion') is not None:
            self.snmp_account_version = m.get('SnmpAccountVersion')
        if m.get('SnmpAuthPassphrase') is not None:
            self.snmp_auth_passphrase = m.get('SnmpAuthPassphrase')
        if m.get('SnmpAuthProtocol') is not None:
            self.snmp_auth_protocol = m.get('SnmpAuthProtocol')
        if m.get('SnmpCommunity') is not None:
            self.snmp_community = m.get('SnmpCommunity')
        if m.get('SnmpPrivacyPassphrase') is not None:
            self.snmp_privacy_passphrase = m.get('SnmpPrivacyPassphrase')
        if m.get('SnmpPrivacyProtocol') is not None:
            self.snmp_privacy_protocol = m.get('SnmpPrivacyProtocol')
        if m.get('SnmpSecurityLevel') is not None:
            self.snmp_security_level = m.get('SnmpSecurityLevel')
        if m.get('SnmpUsername') is not None:
            self.snmp_username = m.get('SnmpUsername')
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        return self


class CreateDeviceResponseBody(TeaModel):
    def __init__(self, device_id=None, request_id=None):
        self.device_id = device_id  # type: str
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateDeviceResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class CreateDeviceResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateDeviceResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateDeviceResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateDeviceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateDeviceFormRequest(TeaModel):
    def __init__(self, account_config=None, client_token=None, config_compare=None, detail_display=None,
                 device_form_name=None, instance_id=None, related_device_form_id=None, resource_use=None, script=None,
                 unique_key=None):
        # 是否需要账号配置
        self.account_config = account_config  # type: bool
        self.client_token = client_token  # type: str
        # 是否支持配置生成
        self.config_compare = config_compare  # type: bool
        self.detail_display = detail_display  # type: bool
        # 设备形态名称
        self.device_form_name = device_form_name  # type: str
        self.instance_id = instance_id  # type: str
        self.related_device_form_id = related_device_form_id  # type: str
        self.resource_use = resource_use  # type: str
        self.script = script  # type: str
        self.unique_key = unique_key  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateDeviceFormRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_config is not None:
            result['AccountConfig'] = self.account_config
        if self.client_token is not None:
            result['ClientToken'] = self.client_token
        if self.config_compare is not None:
            result['ConfigCompare'] = self.config_compare
        if self.detail_display is not None:
            result['DetailDisplay'] = self.detail_display
        if self.device_form_name is not None:
            result['DeviceFormName'] = self.device_form_name
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.related_device_form_id is not None:
            result['RelatedDeviceFormId'] = self.related_device_form_id
        if self.resource_use is not None:
            result['ResourceUse'] = self.resource_use
        if self.script is not None:
            result['Script'] = self.script
        if self.unique_key is not None:
            result['UniqueKey'] = self.unique_key
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AccountConfig') is not None:
            self.account_config = m.get('AccountConfig')
        if m.get('ClientToken') is not None:
            self.client_token = m.get('ClientToken')
        if m.get('ConfigCompare') is not None:
            self.config_compare = m.get('ConfigCompare')
        if m.get('DetailDisplay') is not None:
            self.detail_display = m.get('DetailDisplay')
        if m.get('DeviceFormName') is not None:
            self.device_form_name = m.get('DeviceFormName')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RelatedDeviceFormId') is not None:
            self.related_device_form_id = m.get('RelatedDeviceFormId')
        if m.get('ResourceUse') is not None:
            self.resource_use = m.get('ResourceUse')
        if m.get('Script') is not None:
            self.script = m.get('Script')
        if m.get('UniqueKey') is not None:
            self.unique_key = m.get('UniqueKey')
        return self


class CreateDeviceFormResponseBody(TeaModel):
    def __init__(self, device_form_id=None, request_id=None):
        self.device_form_id = device_form_id  # type: str
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateDeviceFormResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_form_id is not None:
            result['DeviceFormId'] = self.device_form_id
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeviceFormId') is not None:
            self.device_form_id = m.get('DeviceFormId')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class CreateDeviceFormResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateDeviceFormResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateDeviceFormResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateDeviceFormResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateDevicePropertyRequest(TeaModel):
    def __init__(self, client_token=None, device_form_id=None, instance_id=None, property_content=None,
                 property_format=None, property_key=None, property_name=None):
        self.client_token = client_token  # type: str
        self.device_form_id = device_form_id  # type: str
        self.instance_id = instance_id  # type: str
        self.property_content = property_content  # type: str
        self.property_format = property_format  # type: str
        self.property_key = property_key  # type: str
        self.property_name = property_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateDevicePropertyRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.client_token is not None:
            result['ClientToken'] = self.client_token
        if self.device_form_id is not None:
            result['DeviceFormId'] = self.device_form_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.property_content is not None:
            result['PropertyContent'] = self.property_content
        if self.property_format is not None:
            result['PropertyFormat'] = self.property_format
        if self.property_key is not None:
            result['PropertyKey'] = self.property_key
        if self.property_name is not None:
            result['PropertyName'] = self.property_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ClientToken') is not None:
            self.client_token = m.get('ClientToken')
        if m.get('DeviceFormId') is not None:
            self.device_form_id = m.get('DeviceFormId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PropertyContent') is not None:
            self.property_content = m.get('PropertyContent')
        if m.get('PropertyFormat') is not None:
            self.property_format = m.get('PropertyFormat')
        if m.get('PropertyKey') is not None:
            self.property_key = m.get('PropertyKey')
        if m.get('PropertyName') is not None:
            self.property_name = m.get('PropertyName')
        return self


class CreateDevicePropertyResponseBody(TeaModel):
    def __init__(self, device_property_id=None, request_id=None):
        self.device_property_id = device_property_id  # type: str
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateDevicePropertyResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_property_id is not None:
            result['DevicePropertyId'] = self.device_property_id
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DevicePropertyId') is not None:
            self.device_property_id = m.get('DevicePropertyId')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class CreateDevicePropertyResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateDevicePropertyResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateDevicePropertyResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateDevicePropertyResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateDevicesRequestDeviceParamModelList(TeaModel):
    def __init__(self, enable_password=None, ext_attributes=None, host_name=None, ip=None, login_password=None,
                 login_type=None, login_username=None, mac=None, model=None, physical_space_name=None, security_domain=None,
                 service_status=None, sn=None, snmp_account_type=None, snmp_account_version=None, snmp_auth_passphrase=None,
                 snmp_auth_protocol=None, snmp_community=None, snmp_privacy_passphrase=None, snmp_privacy_protocol=None,
                 snmp_security_level=None, snmp_username=None, vendor=None):
        self.enable_password = enable_password  # type: str
        self.ext_attributes = ext_attributes  # type: str
        self.host_name = host_name  # type: str
        self.ip = ip  # type: str
        self.login_password = login_password  # type: str
        self.login_type = login_type  # type: str
        self.login_username = login_username  # type: str
        self.mac = mac  # type: str
        self.model = model  # type: str
        self.physical_space_name = physical_space_name  # type: str
        self.security_domain = security_domain  # type: str
        self.service_status = service_status  # type: str
        self.sn = sn  # type: str
        self.snmp_account_type = snmp_account_type  # type: str
        self.snmp_account_version = snmp_account_version  # type: str
        self.snmp_auth_passphrase = snmp_auth_passphrase  # type: str
        self.snmp_auth_protocol = snmp_auth_protocol  # type: str
        self.snmp_community = snmp_community  # type: str
        self.snmp_privacy_passphrase = snmp_privacy_passphrase  # type: str
        self.snmp_privacy_protocol = snmp_privacy_protocol  # type: str
        self.snmp_security_level = snmp_security_level  # type: str
        self.snmp_username = snmp_username  # type: str
        self.vendor = vendor  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateDevicesRequestDeviceParamModelList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.enable_password is not None:
            result['EnablePassword'] = self.enable_password
        if self.ext_attributes is not None:
            result['ExtAttributes'] = self.ext_attributes
        if self.host_name is not None:
            result['HostName'] = self.host_name
        if self.ip is not None:
            result['Ip'] = self.ip
        if self.login_password is not None:
            result['LoginPassword'] = self.login_password
        if self.login_type is not None:
            result['LoginType'] = self.login_type
        if self.login_username is not None:
            result['LoginUsername'] = self.login_username
        if self.mac is not None:
            result['Mac'] = self.mac
        if self.model is not None:
            result['Model'] = self.model
        if self.physical_space_name is not None:
            result['PhysicalSpaceName'] = self.physical_space_name
        if self.security_domain is not None:
            result['SecurityDomain'] = self.security_domain
        if self.service_status is not None:
            result['ServiceStatus'] = self.service_status
        if self.sn is not None:
            result['Sn'] = self.sn
        if self.snmp_account_type is not None:
            result['SnmpAccountType'] = self.snmp_account_type
        if self.snmp_account_version is not None:
            result['SnmpAccountVersion'] = self.snmp_account_version
        if self.snmp_auth_passphrase is not None:
            result['SnmpAuthPassphrase'] = self.snmp_auth_passphrase
        if self.snmp_auth_protocol is not None:
            result['SnmpAuthProtocol'] = self.snmp_auth_protocol
        if self.snmp_community is not None:
            result['SnmpCommunity'] = self.snmp_community
        if self.snmp_privacy_passphrase is not None:
            result['SnmpPrivacyPassphrase'] = self.snmp_privacy_passphrase
        if self.snmp_privacy_protocol is not None:
            result['SnmpPrivacyProtocol'] = self.snmp_privacy_protocol
        if self.snmp_security_level is not None:
            result['SnmpSecurityLevel'] = self.snmp_security_level
        if self.snmp_username is not None:
            result['SnmpUsername'] = self.snmp_username
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EnablePassword') is not None:
            self.enable_password = m.get('EnablePassword')
        if m.get('ExtAttributes') is not None:
            self.ext_attributes = m.get('ExtAttributes')
        if m.get('HostName') is not None:
            self.host_name = m.get('HostName')
        if m.get('Ip') is not None:
            self.ip = m.get('Ip')
        if m.get('LoginPassword') is not None:
            self.login_password = m.get('LoginPassword')
        if m.get('LoginType') is not None:
            self.login_type = m.get('LoginType')
        if m.get('LoginUsername') is not None:
            self.login_username = m.get('LoginUsername')
        if m.get('Mac') is not None:
            self.mac = m.get('Mac')
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('PhysicalSpaceName') is not None:
            self.physical_space_name = m.get('PhysicalSpaceName')
        if m.get('SecurityDomain') is not None:
            self.security_domain = m.get('SecurityDomain')
        if m.get('ServiceStatus') is not None:
            self.service_status = m.get('ServiceStatus')
        if m.get('Sn') is not None:
            self.sn = m.get('Sn')
        if m.get('SnmpAccountType') is not None:
            self.snmp_account_type = m.get('SnmpAccountType')
        if m.get('SnmpAccountVersion') is not None:
            self.snmp_account_version = m.get('SnmpAccountVersion')
        if m.get('SnmpAuthPassphrase') is not None:
            self.snmp_auth_passphrase = m.get('SnmpAuthPassphrase')
        if m.get('SnmpAuthProtocol') is not None:
            self.snmp_auth_protocol = m.get('SnmpAuthProtocol')
        if m.get('SnmpCommunity') is not None:
            self.snmp_community = m.get('SnmpCommunity')
        if m.get('SnmpPrivacyPassphrase') is not None:
            self.snmp_privacy_passphrase = m.get('SnmpPrivacyPassphrase')
        if m.get('SnmpPrivacyProtocol') is not None:
            self.snmp_privacy_protocol = m.get('SnmpPrivacyProtocol')
        if m.get('SnmpSecurityLevel') is not None:
            self.snmp_security_level = m.get('SnmpSecurityLevel')
        if m.get('SnmpUsername') is not None:
            self.snmp_username = m.get('SnmpUsername')
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        return self


class CreateDevicesRequest(TeaModel):
    def __init__(self, client_token=None, device_form_id=None, device_param_model_list=None, instance_id=None):
        self.client_token = client_token  # type: str
        self.device_form_id = device_form_id  # type: str
        self.device_param_model_list = device_param_model_list  # type: list[CreateDevicesRequestDeviceParamModelList]
        self.instance_id = instance_id  # type: str

    def validate(self):
        if self.device_param_model_list:
            for k in self.device_param_model_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(CreateDevicesRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.client_token is not None:
            result['ClientToken'] = self.client_token
        if self.device_form_id is not None:
            result['DeviceFormId'] = self.device_form_id
        result['DeviceParamModelList'] = []
        if self.device_param_model_list is not None:
            for k in self.device_param_model_list:
                result['DeviceParamModelList'].append(k.to_map() if k else None)
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ClientToken') is not None:
            self.client_token = m.get('ClientToken')
        if m.get('DeviceFormId') is not None:
            self.device_form_id = m.get('DeviceFormId')
        self.device_param_model_list = []
        if m.get('DeviceParamModelList') is not None:
            for k in m.get('DeviceParamModelList'):
                temp_model = CreateDevicesRequestDeviceParamModelList()
                self.device_param_model_list.append(temp_model.from_map(k))
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class CreateDevicesShrinkRequest(TeaModel):
    def __init__(self, client_token=None, device_form_id=None, device_param_model_list_shrink=None,
                 instance_id=None):
        self.client_token = client_token  # type: str
        self.device_form_id = device_form_id  # type: str
        self.device_param_model_list_shrink = device_param_model_list_shrink  # type: str
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateDevicesShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.client_token is not None:
            result['ClientToken'] = self.client_token
        if self.device_form_id is not None:
            result['DeviceFormId'] = self.device_form_id
        if self.device_param_model_list_shrink is not None:
            result['DeviceParamModelList'] = self.device_param_model_list_shrink
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ClientToken') is not None:
            self.client_token = m.get('ClientToken')
        if m.get('DeviceFormId') is not None:
            self.device_form_id = m.get('DeviceFormId')
        if m.get('DeviceParamModelList') is not None:
            self.device_param_model_list_shrink = m.get('DeviceParamModelList')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class CreateDevicesResponseBody(TeaModel):
    def __init__(self, device_id=None, request_id=None):
        self.device_id = device_id  # type: str
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateDevicesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class CreateDevicesResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateDevicesResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateDevicesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateDevicesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateEventDefinitionRequest(TeaModel):
    def __init__(self, client_token=None, event_name=None, event_type=None, instance_id=None, template_id=None):
        self.client_token = client_token  # type: str
        self.event_name = event_name  # type: str
        self.event_type = event_type  # type: str
        self.instance_id = instance_id  # type: str
        self.template_id = template_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateEventDefinitionRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.client_token is not None:
            result['ClientToken'] = self.client_token
        if self.event_name is not None:
            result['EventName'] = self.event_name
        if self.event_type is not None:
            result['EventType'] = self.event_type
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.template_id is not None:
            result['TemplateId'] = self.template_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ClientToken') is not None:
            self.client_token = m.get('ClientToken')
        if m.get('EventName') is not None:
            self.event_name = m.get('EventName')
        if m.get('EventType') is not None:
            self.event_type = m.get('EventType')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('TemplateId') is not None:
            self.template_id = m.get('TemplateId')
        return self


class CreateEventDefinitionResponseBody(TeaModel):
    def __init__(self, event_id=None, request_id=None):
        self.event_id = event_id  # type: str
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateEventDefinitionResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.event_id is not None:
            result['EventId'] = self.event_id
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EventId') is not None:
            self.event_id = m.get('EventId')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class CreateEventDefinitionResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateEventDefinitionResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateEventDefinitionResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateEventDefinitionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateLinkJobRequest(TeaModel):
    def __init__(self, auto_confirm=None, double_convert_strategy=None, instance_id=None, job_id=None,
                 single_strategy=None):
        # 是否自动确认
        self.auto_confirm = auto_confirm  # type: bool
        # 双端链路转换策略
        self.double_convert_strategy = double_convert_strategy  # type: str
        self.instance_id = instance_id  # type: str
        # 任务ID
        self.job_id = job_id  # type: str
        # 单端链路发现策略
        self.single_strategy = single_strategy  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateLinkJobRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.auto_confirm is not None:
            result['AutoConfirm'] = self.auto_confirm
        if self.double_convert_strategy is not None:
            result['DoubleConvertStrategy'] = self.double_convert_strategy
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.single_strategy is not None:
            result['SingleStrategy'] = self.single_strategy
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AutoConfirm') is not None:
            self.auto_confirm = m.get('AutoConfirm')
        if m.get('DoubleConvertStrategy') is not None:
            self.double_convert_strategy = m.get('DoubleConvertStrategy')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('SingleStrategy') is not None:
            self.single_strategy = m.get('SingleStrategy')
        return self


class CreateLinkJobResponseBody(TeaModel):
    def __init__(self, content=None, request_id=None):
        self.content = content  # type: str
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateLinkJobResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['Content'] = self.content
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class CreateLinkJobResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateLinkJobResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateLinkJobResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateLinkJobResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateMonitorItemRequestAlarmRuleList(TeaModel):
    def __init__(self, alarm_status=None, expression=None, value=None, variable=None):
        self.alarm_status = alarm_status  # type: str
        self.expression = expression  # type: str
        self.value = value  # type: str
        self.variable = variable  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateMonitorItemRequestAlarmRuleList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alarm_status is not None:
            result['AlarmStatus'] = self.alarm_status
        if self.expression is not None:
            result['Expression'] = self.expression
        if self.value is not None:
            result['Value'] = self.value
        if self.variable is not None:
            result['Variable'] = self.variable
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AlarmStatus') is not None:
            self.alarm_status = m.get('AlarmStatus')
        if m.get('Expression') is not None:
            self.expression = m.get('Expression')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        if m.get('Variable') is not None:
            self.variable = m.get('Variable')
        return self


class CreateMonitorItemRequest(TeaModel):
    def __init__(self, alarm_rule_list=None, analysis_code=None, client_token=None, collection_type=None,
                 config=None, data_item=None, device_form=None, effective=None, exec_interval=None, instance_id=None,
                 monitor_item_description=None, monitor_item_name=None, security_domain=None, type=None):
        self.alarm_rule_list = alarm_rule_list  # type: list[CreateMonitorItemRequestAlarmRuleList]
        self.analysis_code = analysis_code  # type: str
        self.client_token = client_token  # type: str
        self.collection_type = collection_type  # type: str
        self.config = config  # type: str
        self.data_item = data_item  # type: str
        self.device_form = device_form  # type: str
        self.effective = effective  # type: int
        self.exec_interval = exec_interval  # type: int
        self.instance_id = instance_id  # type: str
        self.monitor_item_description = monitor_item_description  # type: str
        self.monitor_item_name = monitor_item_name  # type: str
        self.security_domain = security_domain  # type: str
        self.type = type  # type: str

    def validate(self):
        if self.alarm_rule_list:
            for k in self.alarm_rule_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(CreateMonitorItemRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AlarmRuleList'] = []
        if self.alarm_rule_list is not None:
            for k in self.alarm_rule_list:
                result['AlarmRuleList'].append(k.to_map() if k else None)
        if self.analysis_code is not None:
            result['AnalysisCode'] = self.analysis_code
        if self.client_token is not None:
            result['ClientToken'] = self.client_token
        if self.collection_type is not None:
            result['CollectionType'] = self.collection_type
        if self.config is not None:
            result['Config'] = self.config
        if self.data_item is not None:
            result['DataItem'] = self.data_item
        if self.device_form is not None:
            result['DeviceForm'] = self.device_form
        if self.effective is not None:
            result['Effective'] = self.effective
        if self.exec_interval is not None:
            result['ExecInterval'] = self.exec_interval
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.monitor_item_description is not None:
            result['MonitorItemDescription'] = self.monitor_item_description
        if self.monitor_item_name is not None:
            result['MonitorItemName'] = self.monitor_item_name
        if self.security_domain is not None:
            result['SecurityDomain'] = self.security_domain
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.alarm_rule_list = []
        if m.get('AlarmRuleList') is not None:
            for k in m.get('AlarmRuleList'):
                temp_model = CreateMonitorItemRequestAlarmRuleList()
                self.alarm_rule_list.append(temp_model.from_map(k))
        if m.get('AnalysisCode') is not None:
            self.analysis_code = m.get('AnalysisCode')
        if m.get('ClientToken') is not None:
            self.client_token = m.get('ClientToken')
        if m.get('CollectionType') is not None:
            self.collection_type = m.get('CollectionType')
        if m.get('Config') is not None:
            self.config = m.get('Config')
        if m.get('DataItem') is not None:
            self.data_item = m.get('DataItem')
        if m.get('DeviceForm') is not None:
            self.device_form = m.get('DeviceForm')
        if m.get('Effective') is not None:
            self.effective = m.get('Effective')
        if m.get('ExecInterval') is not None:
            self.exec_interval = m.get('ExecInterval')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('MonitorItemDescription') is not None:
            self.monitor_item_description = m.get('MonitorItemDescription')
        if m.get('MonitorItemName') is not None:
            self.monitor_item_name = m.get('MonitorItemName')
        if m.get('SecurityDomain') is not None:
            self.security_domain = m.get('SecurityDomain')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class CreateMonitorItemShrinkRequest(TeaModel):
    def __init__(self, alarm_rule_list_shrink=None, analysis_code=None, client_token=None, collection_type=None,
                 config=None, data_item=None, device_form=None, effective=None, exec_interval=None, instance_id=None,
                 monitor_item_description=None, monitor_item_name=None, security_domain=None, type=None):
        self.alarm_rule_list_shrink = alarm_rule_list_shrink  # type: str
        self.analysis_code = analysis_code  # type: str
        self.client_token = client_token  # type: str
        self.collection_type = collection_type  # type: str
        self.config = config  # type: str
        self.data_item = data_item  # type: str
        self.device_form = device_form  # type: str
        self.effective = effective  # type: int
        self.exec_interval = exec_interval  # type: int
        self.instance_id = instance_id  # type: str
        self.monitor_item_description = monitor_item_description  # type: str
        self.monitor_item_name = monitor_item_name  # type: str
        self.security_domain = security_domain  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateMonitorItemShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alarm_rule_list_shrink is not None:
            result['AlarmRuleList'] = self.alarm_rule_list_shrink
        if self.analysis_code is not None:
            result['AnalysisCode'] = self.analysis_code
        if self.client_token is not None:
            result['ClientToken'] = self.client_token
        if self.collection_type is not None:
            result['CollectionType'] = self.collection_type
        if self.config is not None:
            result['Config'] = self.config
        if self.data_item is not None:
            result['DataItem'] = self.data_item
        if self.device_form is not None:
            result['DeviceForm'] = self.device_form
        if self.effective is not None:
            result['Effective'] = self.effective
        if self.exec_interval is not None:
            result['ExecInterval'] = self.exec_interval
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.monitor_item_description is not None:
            result['MonitorItemDescription'] = self.monitor_item_description
        if self.monitor_item_name is not None:
            result['MonitorItemName'] = self.monitor_item_name
        if self.security_domain is not None:
            result['SecurityDomain'] = self.security_domain
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AlarmRuleList') is not None:
            self.alarm_rule_list_shrink = m.get('AlarmRuleList')
        if m.get('AnalysisCode') is not None:
            self.analysis_code = m.get('AnalysisCode')
        if m.get('ClientToken') is not None:
            self.client_token = m.get('ClientToken')
        if m.get('CollectionType') is not None:
            self.collection_type = m.get('CollectionType')
        if m.get('Config') is not None:
            self.config = m.get('Config')
        if m.get('DataItem') is not None:
            self.data_item = m.get('DataItem')
        if m.get('DeviceForm') is not None:
            self.device_form = m.get('DeviceForm')
        if m.get('Effective') is not None:
            self.effective = m.get('Effective')
        if m.get('ExecInterval') is not None:
            self.exec_interval = m.get('ExecInterval')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('MonitorItemDescription') is not None:
            self.monitor_item_description = m.get('MonitorItemDescription')
        if m.get('MonitorItemName') is not None:
            self.monitor_item_name = m.get('MonitorItemName')
        if m.get('SecurityDomain') is not None:
            self.security_domain = m.get('SecurityDomain')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class CreateMonitorItemResponseBody(TeaModel):
    def __init__(self, monitor_item_id=None, request_id=None):
        self.monitor_item_id = monitor_item_id  # type: str
        # Id of the request
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateMonitorItemResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.monitor_item_id is not None:
            result['MonitorItemId'] = self.monitor_item_id
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('MonitorItemId') is not None:
            self.monitor_item_id = m.get('MonitorItemId')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class CreateMonitorItemResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateMonitorItemResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateMonitorItemResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateMonitorItemResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateOsVersionRequest(TeaModel):
    def __init__(self, boot_patch=None, client_token=None, create_time=None, feature_patch=None, file_name=None,
                 file_path=None, instance_id=None, model=None, os_version=None, status=None, system_patch=None, vendor=None):
        self.boot_patch = boot_patch  # type: str
        self.client_token = client_token  # type: str
        # 代表创建时间的资源属性字段
        self.create_time = create_time  # type: str
        self.feature_patch = feature_patch  # type: str
        # 文件名
        self.file_name = file_name  # type: str
        # 文件路径
        self.file_path = file_path  # type: str
        self.instance_id = instance_id  # type: str
        # 型号
        self.model = model  # type: str
        # 系统版本
        self.os_version = os_version  # type: str
        # 状态
        self.status = status  # type: str
        self.system_patch = system_patch  # type: str
        # 厂商
        self.vendor = vendor  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateOsVersionRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.boot_patch is not None:
            result['BootPatch'] = self.boot_patch
        if self.client_token is not None:
            result['ClientToken'] = self.client_token
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.feature_patch is not None:
            result['FeaturePatch'] = self.feature_patch
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.file_path is not None:
            result['FilePath'] = self.file_path
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.model is not None:
            result['Model'] = self.model
        if self.os_version is not None:
            result['OsVersion'] = self.os_version
        if self.status is not None:
            result['Status'] = self.status
        if self.system_patch is not None:
            result['SystemPatch'] = self.system_patch
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BootPatch') is not None:
            self.boot_patch = m.get('BootPatch')
        if m.get('ClientToken') is not None:
            self.client_token = m.get('ClientToken')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('FeaturePatch') is not None:
            self.feature_patch = m.get('FeaturePatch')
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('FilePath') is not None:
            self.file_path = m.get('FilePath')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('OsVersion') is not None:
            self.os_version = m.get('OsVersion')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('SystemPatch') is not None:
            self.system_patch = m.get('SystemPatch')
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        return self


class CreateOsVersionResponseBody(TeaModel):
    def __init__(self, os_version_id=None, request_id=None):
        self.os_version_id = os_version_id  # type: str
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateOsVersionResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.os_version_id is not None:
            result['OsVersionId'] = self.os_version_id
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OsVersionId') is not None:
            self.os_version_id = m.get('OsVersionId')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class CreateOsVersionResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateOsVersionResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateOsVersionResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateOsVersionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreatePhysicalSpaceRequest(TeaModel):
    def __init__(self, address=None, city=None, client_token=None, country=None, instance_id=None, owner=None,
                 parent_uid=None, physical_space_name=None, province=None, remark=None, security_domain_list=None,
                 space_abbreviation=None, space_type=None):
        self.address = address  # type: str
        self.city = city  # type: str
        self.client_token = client_token  # type: str
        self.country = country  # type: str
        self.instance_id = instance_id  # type: str
        self.owner = owner  # type: str
        self.parent_uid = parent_uid  # type: str
        self.physical_space_name = physical_space_name  # type: str
        self.province = province  # type: str
        self.remark = remark  # type: str
        self.security_domain_list = security_domain_list  # type: list[str]
        self.space_abbreviation = space_abbreviation  # type: str
        self.space_type = space_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreatePhysicalSpaceRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.address is not None:
            result['Address'] = self.address
        if self.city is not None:
            result['City'] = self.city
        if self.client_token is not None:
            result['ClientToken'] = self.client_token
        if self.country is not None:
            result['Country'] = self.country
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.owner is not None:
            result['Owner'] = self.owner
        if self.parent_uid is not None:
            result['ParentUid'] = self.parent_uid
        if self.physical_space_name is not None:
            result['PhysicalSpaceName'] = self.physical_space_name
        if self.province is not None:
            result['Province'] = self.province
        if self.remark is not None:
            result['Remark'] = self.remark
        if self.security_domain_list is not None:
            result['SecurityDomainList'] = self.security_domain_list
        if self.space_abbreviation is not None:
            result['SpaceAbbreviation'] = self.space_abbreviation
        if self.space_type is not None:
            result['SpaceType'] = self.space_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Address') is not None:
            self.address = m.get('Address')
        if m.get('City') is not None:
            self.city = m.get('City')
        if m.get('ClientToken') is not None:
            self.client_token = m.get('ClientToken')
        if m.get('Country') is not None:
            self.country = m.get('Country')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Owner') is not None:
            self.owner = m.get('Owner')
        if m.get('ParentUid') is not None:
            self.parent_uid = m.get('ParentUid')
        if m.get('PhysicalSpaceName') is not None:
            self.physical_space_name = m.get('PhysicalSpaceName')
        if m.get('Province') is not None:
            self.province = m.get('Province')
        if m.get('Remark') is not None:
            self.remark = m.get('Remark')
        if m.get('SecurityDomainList') is not None:
            self.security_domain_list = m.get('SecurityDomainList')
        if m.get('SpaceAbbreviation') is not None:
            self.space_abbreviation = m.get('SpaceAbbreviation')
        if m.get('SpaceType') is not None:
            self.space_type = m.get('SpaceType')
        return self


class CreatePhysicalSpaceShrinkRequest(TeaModel):
    def __init__(self, address=None, city=None, client_token=None, country=None, instance_id=None, owner=None,
                 parent_uid=None, physical_space_name=None, province=None, remark=None, security_domain_list_shrink=None,
                 space_abbreviation=None, space_type=None):
        self.address = address  # type: str
        self.city = city  # type: str
        self.client_token = client_token  # type: str
        self.country = country  # type: str
        self.instance_id = instance_id  # type: str
        self.owner = owner  # type: str
        self.parent_uid = parent_uid  # type: str
        self.physical_space_name = physical_space_name  # type: str
        self.province = province  # type: str
        self.remark = remark  # type: str
        self.security_domain_list_shrink = security_domain_list_shrink  # type: str
        self.space_abbreviation = space_abbreviation  # type: str
        self.space_type = space_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreatePhysicalSpaceShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.address is not None:
            result['Address'] = self.address
        if self.city is not None:
            result['City'] = self.city
        if self.client_token is not None:
            result['ClientToken'] = self.client_token
        if self.country is not None:
            result['Country'] = self.country
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.owner is not None:
            result['Owner'] = self.owner
        if self.parent_uid is not None:
            result['ParentUid'] = self.parent_uid
        if self.physical_space_name is not None:
            result['PhysicalSpaceName'] = self.physical_space_name
        if self.province is not None:
            result['Province'] = self.province
        if self.remark is not None:
            result['Remark'] = self.remark
        if self.security_domain_list_shrink is not None:
            result['SecurityDomainList'] = self.security_domain_list_shrink
        if self.space_abbreviation is not None:
            result['SpaceAbbreviation'] = self.space_abbreviation
        if self.space_type is not None:
            result['SpaceType'] = self.space_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Address') is not None:
            self.address = m.get('Address')
        if m.get('City') is not None:
            self.city = m.get('City')
        if m.get('ClientToken') is not None:
            self.client_token = m.get('ClientToken')
        if m.get('Country') is not None:
            self.country = m.get('Country')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Owner') is not None:
            self.owner = m.get('Owner')
        if m.get('ParentUid') is not None:
            self.parent_uid = m.get('ParentUid')
        if m.get('PhysicalSpaceName') is not None:
            self.physical_space_name = m.get('PhysicalSpaceName')
        if m.get('Province') is not None:
            self.province = m.get('Province')
        if m.get('Remark') is not None:
            self.remark = m.get('Remark')
        if m.get('SecurityDomainList') is not None:
            self.security_domain_list_shrink = m.get('SecurityDomainList')
        if m.get('SpaceAbbreviation') is not None:
            self.space_abbreviation = m.get('SpaceAbbreviation')
        if m.get('SpaceType') is not None:
            self.space_type = m.get('SpaceType')
        return self


class CreatePhysicalSpaceResponseBody(TeaModel):
    def __init__(self, physical_space_id=None, request_id=None):
        self.physical_space_id = physical_space_id  # type: str
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreatePhysicalSpaceResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.physical_space_id is not None:
            result['PhysicalSpaceId'] = self.physical_space_id
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('PhysicalSpaceId') is not None:
            self.physical_space_id = m.get('PhysicalSpaceId')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class CreatePhysicalSpaceResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreatePhysicalSpaceResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreatePhysicalSpaceResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreatePhysicalSpaceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateRealtimeTaskRequest(TeaModel):
    def __init__(self, check_duplicate_policy=None, client_token=None, device_id=None, instance_id=None,
                 item_name=None, script=None):
        # 检查策略，是否进行已有设备ID和巡检项的检查。
        # - ERROR：不忽略，如果有运行中则报错。
        # - IGNORE：忽略重复检查。
        # - CURRENT：不忽略，如果有运行中则返回运行中。
        self.check_duplicate_policy = check_duplicate_policy  # type: str
        # 幂等校验 token。
        self.client_token = client_token  # type: str
        self.device_id = device_id  # type: str
        # 实例ID。
        self.instance_id = instance_id  # type: str
        # 巡检项名字。
        self.item_name = item_name  # type: str
        self.script = script  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateRealtimeTaskRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.check_duplicate_policy is not None:
            result['CheckDuplicatePolicy'] = self.check_duplicate_policy
        if self.client_token is not None:
            result['ClientToken'] = self.client_token
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.item_name is not None:
            result['ItemName'] = self.item_name
        if self.script is not None:
            result['Script'] = self.script
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CheckDuplicatePolicy') is not None:
            self.check_duplicate_policy = m.get('CheckDuplicatePolicy')
        if m.get('ClientToken') is not None:
            self.client_token = m.get('ClientToken')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ItemName') is not None:
            self.item_name = m.get('ItemName')
        if m.get('Script') is not None:
            self.script = m.get('Script')
        return self


class CreateRealtimeTaskResponseBody(TeaModel):
    def __init__(self, request_id=None, task_id=None):
        self.request_id = request_id  # type: str
        self.task_id = task_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateRealtimeTaskResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class CreateRealtimeTaskResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateRealtimeTaskResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateRealtimeTaskResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateRealtimeTaskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateResourceInformationRequestInformation(TeaModel):
    def __init__(self, key=None, key_action=None, key_attribute=None, key_description=None):
        # 键
        self.key = key  # type: str
        # 键动作
        self.key_action = key_action  # type: str
        # 键属性
        self.key_attribute = key_attribute  # type: str
        # 键描述
        self.key_description = key_description  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateResourceInformationRequestInformation, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.key_action is not None:
            result['KeyAction'] = self.key_action
        if self.key_attribute is not None:
            result['KeyAttribute'] = self.key_attribute
        if self.key_description is not None:
            result['KeyDescription'] = self.key_description
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('KeyAction') is not None:
            self.key_action = m.get('KeyAction')
        if m.get('KeyAttribute') is not None:
            self.key_attribute = m.get('KeyAttribute')
        if m.get('KeyDescription') is not None:
            self.key_description = m.get('KeyDescription')
        return self


class CreateResourceInformationRequest(TeaModel):
    def __init__(self, architecture_id=None, client_token=None, information=None, instance_id=None,
                 resource_attribute=None, resource_type=None):
        self.architecture_id = architecture_id  # type: str
        self.client_token = client_token  # type: str
        # 信息
        self.information = information  # type: list[CreateResourceInformationRequestInformation]
        self.instance_id = instance_id  # type: str
        # 资源属性
        self.resource_attribute = resource_attribute  # type: str
        # 资源类型
        self.resource_type = resource_type  # type: str

    def validate(self):
        if self.information:
            for k in self.information:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(CreateResourceInformationRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.architecture_id is not None:
            result['ArchitectureId'] = self.architecture_id
        if self.client_token is not None:
            result['ClientToken'] = self.client_token
        result['Information'] = []
        if self.information is not None:
            for k in self.information:
                result['Information'].append(k.to_map() if k else None)
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.resource_attribute is not None:
            result['ResourceAttribute'] = self.resource_attribute
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ArchitectureId') is not None:
            self.architecture_id = m.get('ArchitectureId')
        if m.get('ClientToken') is not None:
            self.client_token = m.get('ClientToken')
        self.information = []
        if m.get('Information') is not None:
            for k in m.get('Information'):
                temp_model = CreateResourceInformationRequestInformation()
                self.information.append(temp_model.from_map(k))
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ResourceAttribute') is not None:
            self.resource_attribute = m.get('ResourceAttribute')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        return self


class CreateResourceInformationResponseBody(TeaModel):
    def __init__(self, request_id=None, resource_information_id=None):
        self.request_id = request_id  # type: str
        self.resource_information_id = resource_information_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateResourceInformationResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.resource_information_id is not None:
            result['ResourceInformationId'] = self.resource_information_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ResourceInformationId') is not None:
            self.resource_information_id = m.get('ResourceInformationId')
        return self


class CreateResourceInformationResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateResourceInformationResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateResourceInformationResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateResourceInformationResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateSetupProjectRequest(TeaModel):
    def __init__(self, delivery_time=None, description=None, instance_id=None, space_id=None):
        # 代表创建时间的资源属性字段
        self.delivery_time = delivery_time  # type: str
        # 描述
        self.description = description  # type: str
        self.instance_id = instance_id  # type: str
        # 物理空间uId
        self.space_id = space_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateSetupProjectRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.delivery_time is not None:
            result['DeliveryTime'] = self.delivery_time
        if self.description is not None:
            result['Description'] = self.description
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.space_id is not None:
            result['SpaceId'] = self.space_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeliveryTime') is not None:
            self.delivery_time = m.get('DeliveryTime')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('SpaceId') is not None:
            self.space_id = m.get('SpaceId')
        return self


class CreateSetupProjectResponseBody(TeaModel):
    def __init__(self, request_id=None, setup_project_id=None):
        self.request_id = request_id  # type: str
        self.setup_project_id = setup_project_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateSetupProjectResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.setup_project_id is not None:
            result['SetupProjectId'] = self.setup_project_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('SetupProjectId') is not None:
            self.setup_project_id = m.get('SetupProjectId')
        return self


class CreateSetupProjectResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateSetupProjectResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateSetupProjectResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateSetupProjectResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateSpaceModelRequestSort(TeaModel):
    def __init__(self, level=None, level_name=None):
        self.level = level  # type: long
        self.level_name = level_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateSpaceModelRequestSort, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.level is not None:
            result['Level'] = self.level
        if self.level_name is not None:
            result['LevelName'] = self.level_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Level') is not None:
            self.level = m.get('Level')
        if m.get('LevelName') is not None:
            self.level_name = m.get('LevelName')
        return self


class CreateSpaceModelRequest(TeaModel):
    def __init__(self, client_token=None, instance_id=None, sort=None, space_type=None):
        self.client_token = client_token  # type: str
        self.instance_id = instance_id  # type: str
        self.sort = sort  # type: list[CreateSpaceModelRequestSort]
        # 物理空间类型
        self.space_type = space_type  # type: str

    def validate(self):
        if self.sort:
            for k in self.sort:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(CreateSpaceModelRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.client_token is not None:
            result['ClientToken'] = self.client_token
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        result['Sort'] = []
        if self.sort is not None:
            for k in self.sort:
                result['Sort'].append(k.to_map() if k else None)
        if self.space_type is not None:
            result['SpaceType'] = self.space_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ClientToken') is not None:
            self.client_token = m.get('ClientToken')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        self.sort = []
        if m.get('Sort') is not None:
            for k in m.get('Sort'):
                temp_model = CreateSpaceModelRequestSort()
                self.sort.append(temp_model.from_map(k))
        if m.get('SpaceType') is not None:
            self.space_type = m.get('SpaceType')
        return self


class CreateSpaceModelShrinkRequest(TeaModel):
    def __init__(self, client_token=None, instance_id=None, sort_shrink=None, space_type=None):
        self.client_token = client_token  # type: str
        self.instance_id = instance_id  # type: str
        self.sort_shrink = sort_shrink  # type: str
        # 物理空间类型
        self.space_type = space_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateSpaceModelShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.client_token is not None:
            result['ClientToken'] = self.client_token
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.sort_shrink is not None:
            result['Sort'] = self.sort_shrink
        if self.space_type is not None:
            result['SpaceType'] = self.space_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ClientToken') is not None:
            self.client_token = m.get('ClientToken')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Sort') is not None:
            self.sort_shrink = m.get('Sort')
        if m.get('SpaceType') is not None:
            self.space_type = m.get('SpaceType')
        return self


class CreateSpaceModelResponseBody(TeaModel):
    def __init__(self, request_id=None, space_model_id=None):
        self.request_id = request_id  # type: str
        self.space_model_id = space_model_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateSpaceModelResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.space_model_id is not None:
            result['SpaceModelId'] = self.space_model_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('SpaceModelId') is not None:
            self.space_model_id = m.get('SpaceModelId')
        return self


class CreateSpaceModelResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateSpaceModelResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateSpaceModelResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateSpaceModelResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateTaskRequest(TeaModel):
    def __init__(self, client_token=None, instance_id=None, params=None, template_id=None):
        self.client_token = client_token  # type: str
        self.instance_id = instance_id  # type: str
        self.params = params  # type: str
        self.template_id = template_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateTaskRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.client_token is not None:
            result['ClientToken'] = self.client_token
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.params is not None:
            result['Params'] = self.params
        if self.template_id is not None:
            result['TemplateId'] = self.template_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ClientToken') is not None:
            self.client_token = m.get('ClientToken')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Params') is not None:
            self.params = m.get('Params')
        if m.get('TemplateId') is not None:
            self.template_id = m.get('TemplateId')
        return self


class CreateTaskResponseBody(TeaModel):
    def __init__(self, request_id=None, task_id=None):
        self.request_id = request_id  # type: str
        self.task_id = task_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateTaskResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class CreateTaskResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateTaskResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateTaskResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateTaskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateTimePeriodRequest(TeaModel):
    def __init__(self, client_token=None, expression=None, instance_id=None, time_period_description=None,
                 time_period_name=None):
        self.client_token = client_token  # type: str
        self.expression = expression  # type: str
        self.instance_id = instance_id  # type: str
        self.time_period_description = time_period_description  # type: str
        self.time_period_name = time_period_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateTimePeriodRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.client_token is not None:
            result['ClientToken'] = self.client_token
        if self.expression is not None:
            result['Expression'] = self.expression
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.time_period_description is not None:
            result['TimePeriodDescription'] = self.time_period_description
        if self.time_period_name is not None:
            result['TimePeriodName'] = self.time_period_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ClientToken') is not None:
            self.client_token = m.get('ClientToken')
        if m.get('Expression') is not None:
            self.expression = m.get('Expression')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('TimePeriodDescription') is not None:
            self.time_period_description = m.get('TimePeriodDescription')
        if m.get('TimePeriodName') is not None:
            self.time_period_name = m.get('TimePeriodName')
        return self


class CreateTimePeriodResponseBody(TeaModel):
    def __init__(self, request_id=None, time_period_id=None):
        self.request_id = request_id  # type: str
        self.time_period_id = time_period_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateTimePeriodResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.time_period_id is not None:
            result['TimePeriodId'] = self.time_period_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('TimePeriodId') is not None:
            self.time_period_id = m.get('TimePeriodId')
        return self


class CreateTimePeriodResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateTimePeriodResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateTimePeriodResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateTimePeriodResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteConfigurationSpecificationRequest(TeaModel):
    def __init__(self, configuration_specification_id=None, instance_id=None):
        self.configuration_specification_id = configuration_specification_id  # type: str
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteConfigurationSpecificationRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.configuration_specification_id is not None:
            result['ConfigurationSpecificationId'] = self.configuration_specification_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ConfigurationSpecificationId') is not None:
            self.configuration_specification_id = m.get('ConfigurationSpecificationId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class DeleteConfigurationSpecificationResponseBody(TeaModel):
    def __init__(self, request_id=None):
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteConfigurationSpecificationResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DeleteConfigurationSpecificationResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteConfigurationSpecificationResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteConfigurationSpecificationResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteConfigurationSpecificationResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteConfigurationVariateRequest(TeaModel):
    def __init__(self, configuration_variate_id=None, instance_id=None):
        self.configuration_variate_id = configuration_variate_id  # type: str
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteConfigurationVariateRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.configuration_variate_id is not None:
            result['ConfigurationVariateId'] = self.configuration_variate_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ConfigurationVariateId') is not None:
            self.configuration_variate_id = m.get('ConfigurationVariateId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class DeleteConfigurationVariateResponseBody(TeaModel):
    def __init__(self, request_id=None):
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteConfigurationVariateResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DeleteConfigurationVariateResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteConfigurationVariateResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteConfigurationVariateResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteConfigurationVariateResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteDedicatedLineRequest(TeaModel):
    def __init__(self, dedicated_line_id=None, instance_id=None):
        self.dedicated_line_id = dedicated_line_id  # type: str
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteDedicatedLineRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dedicated_line_id is not None:
            result['DedicatedLineId'] = self.dedicated_line_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DedicatedLineId') is not None:
            self.dedicated_line_id = m.get('DedicatedLineId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class DeleteDedicatedLineResponseBody(TeaModel):
    def __init__(self, request_id=None):
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteDedicatedLineResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DeleteDedicatedLineResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteDedicatedLineResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteDedicatedLineResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteDedicatedLineResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteDeliveryArchVersionRequest(TeaModel):
    def __init__(self, delivery_arch_version_id=None, instance_id=None):
        self.delivery_arch_version_id = delivery_arch_version_id  # type: str
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteDeliveryArchVersionRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.delivery_arch_version_id is not None:
            result['DeliveryArchVersionId'] = self.delivery_arch_version_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeliveryArchVersionId') is not None:
            self.delivery_arch_version_id = m.get('DeliveryArchVersionId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class DeleteDeliveryArchVersionResponseBody(TeaModel):
    def __init__(self, request_id=None):
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteDeliveryArchVersionResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DeleteDeliveryArchVersionResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteDeliveryArchVersionResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteDeliveryArchVersionResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteDeliveryArchVersionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteDeliveryProjectRequest(TeaModel):
    def __init__(self, delivery_project_id=None, instance_id=None):
        self.delivery_project_id = delivery_project_id  # type: str
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteDeliveryProjectRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.delivery_project_id is not None:
            result['DeliveryProjectId'] = self.delivery_project_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeliveryProjectId') is not None:
            self.delivery_project_id = m.get('DeliveryProjectId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class DeleteDeliveryProjectResponseBody(TeaModel):
    def __init__(self, request_id=None):
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteDeliveryProjectResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DeleteDeliveryProjectResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteDeliveryProjectResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteDeliveryProjectResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteDeliveryProjectResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteDeviceRequest(TeaModel):
    def __init__(self, device_id=None, instance_id=None):
        self.device_id = device_id  # type: str
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteDeviceRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class DeleteDeviceResponseBody(TeaModel):
    def __init__(self, request_id=None):
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteDeviceResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DeleteDeviceResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteDeviceResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteDeviceResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteDeviceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteDeviceFormRequest(TeaModel):
    def __init__(self, device_form_id=None, instance_id=None):
        self.device_form_id = device_form_id  # type: str
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteDeviceFormRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_form_id is not None:
            result['DeviceFormId'] = self.device_form_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeviceFormId') is not None:
            self.device_form_id = m.get('DeviceFormId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class DeleteDeviceFormResponseBody(TeaModel):
    def __init__(self, request_id=None):
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteDeviceFormResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DeleteDeviceFormResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteDeviceFormResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteDeviceFormResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteDeviceFormResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteDevicePropertyRequest(TeaModel):
    def __init__(self, device_property_id=None, instance_id=None):
        self.device_property_id = device_property_id  # type: str
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteDevicePropertyRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_property_id is not None:
            result['DevicePropertyId'] = self.device_property_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DevicePropertyId') is not None:
            self.device_property_id = m.get('DevicePropertyId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class DeleteDevicePropertyResponseBody(TeaModel):
    def __init__(self, request_id=None):
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteDevicePropertyResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DeleteDevicePropertyResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteDevicePropertyResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteDevicePropertyResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteDevicePropertyResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteDeviceResourceRequest(TeaModel):
    def __init__(self, device_resource_id=None, instance_id=None):
        self.device_resource_id = device_resource_id  # type: str
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteDeviceResourceRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_resource_id is not None:
            result['DeviceResourceId'] = self.device_resource_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeviceResourceId') is not None:
            self.device_resource_id = m.get('DeviceResourceId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class DeleteDeviceResourceResponseBody(TeaModel):
    def __init__(self, request_id=None):
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteDeviceResourceResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DeleteDeviceResourceResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteDeviceResourceResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteDeviceResourceResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteDeviceResourceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteDevicesRequest(TeaModel):
    def __init__(self, device_ids=None, instance_id=None):
        self.device_ids = device_ids  # type: list[str]
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteDevicesRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_ids is not None:
            result['DeviceIds'] = self.device_ids
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeviceIds') is not None:
            self.device_ids = m.get('DeviceIds')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class DeleteDevicesShrinkRequest(TeaModel):
    def __init__(self, device_ids_shrink=None, instance_id=None):
        self.device_ids_shrink = device_ids_shrink  # type: str
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteDevicesShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_ids_shrink is not None:
            result['DeviceIds'] = self.device_ids_shrink
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeviceIds') is not None:
            self.device_ids_shrink = m.get('DeviceIds')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class DeleteDevicesResponseBody(TeaModel):
    def __init__(self, request_id=None):
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteDevicesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DeleteDevicesResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteDevicesResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteDevicesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteDevicesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteEventDefinitionRequest(TeaModel):
    def __init__(self, event_id=None, instance_id=None):
        self.event_id = event_id  # type: str
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteEventDefinitionRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.event_id is not None:
            result['EventId'] = self.event_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EventId') is not None:
            self.event_id = m.get('EventId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class DeleteEventDefinitionResponseBody(TeaModel):
    def __init__(self, request_id=None):
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteEventDefinitionResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DeleteEventDefinitionResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteEventDefinitionResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteEventDefinitionResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteEventDefinitionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteInspectionTaskRequest(TeaModel):
    def __init__(self, instance_id=None, task_id=None):
        self.instance_id = instance_id  # type: str
        self.task_id = task_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteInspectionTaskRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class DeleteInspectionTaskResponseBody(TeaModel):
    def __init__(self, request_id=None):
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteInspectionTaskResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DeleteInspectionTaskResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteInspectionTaskResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteInspectionTaskResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteInspectionTaskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteOsVersionRequest(TeaModel):
    def __init__(self, instance_id=None, os_version_id=None):
        self.instance_id = instance_id  # type: str
        self.os_version_id = os_version_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteOsVersionRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.os_version_id is not None:
            result['OsVersionId'] = self.os_version_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('OsVersionId') is not None:
            self.os_version_id = m.get('OsVersionId')
        return self


class DeleteOsVersionResponseBody(TeaModel):
    def __init__(self, request_id=None):
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteOsVersionResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DeleteOsVersionResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteOsVersionResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteOsVersionResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteOsVersionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeletePhysicalSpaceRequest(TeaModel):
    def __init__(self, instance_id=None, physical_space_id=None):
        self.instance_id = instance_id  # type: str
        self.physical_space_id = physical_space_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeletePhysicalSpaceRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.physical_space_id is not None:
            result['PhysicalSpaceId'] = self.physical_space_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PhysicalSpaceId') is not None:
            self.physical_space_id = m.get('PhysicalSpaceId')
        return self


class DeletePhysicalSpaceResponseBody(TeaModel):
    def __init__(self, request_id=None):
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeletePhysicalSpaceResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DeletePhysicalSpaceResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeletePhysicalSpaceResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeletePhysicalSpaceResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeletePhysicalSpaceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteResourceInformationRequest(TeaModel):
    def __init__(self, instance_id=None, resource_information_id=None):
        self.instance_id = instance_id  # type: str
        self.resource_information_id = resource_information_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteResourceInformationRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.resource_information_id is not None:
            result['ResourceInformationId'] = self.resource_information_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ResourceInformationId') is not None:
            self.resource_information_id = m.get('ResourceInformationId')
        return self


class DeleteResourceInformationResponseBody(TeaModel):
    def __init__(self, request_id=None):
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteResourceInformationResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DeleteResourceInformationResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteResourceInformationResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteResourceInformationResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteResourceInformationResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteSetupProjectRequest(TeaModel):
    def __init__(self, instance_id=None, setup_project_id=None):
        self.instance_id = instance_id  # type: str
        self.setup_project_id = setup_project_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteSetupProjectRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.setup_project_id is not None:
            result['SetupProjectId'] = self.setup_project_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('SetupProjectId') is not None:
            self.setup_project_id = m.get('SetupProjectId')
        return self


class DeleteSetupProjectResponseBody(TeaModel):
    def __init__(self, request_id=None):
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteSetupProjectResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DeleteSetupProjectResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteSetupProjectResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteSetupProjectResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteSetupProjectResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteSpaceModelRequest(TeaModel):
    def __init__(self, instance_id=None, space_model_id=None):
        self.instance_id = instance_id  # type: str
        self.space_model_id = space_model_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteSpaceModelRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.space_model_id is not None:
            result['SpaceModelId'] = self.space_model_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('SpaceModelId') is not None:
            self.space_model_id = m.get('SpaceModelId')
        return self


class DeleteSpaceModelResponseBody(TeaModel):
    def __init__(self, request_id=None):
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteSpaceModelResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DeleteSpaceModelResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteSpaceModelResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteSpaceModelResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteSpaceModelResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DisableNotificationRequestList(TeaModel):
    def __init__(self, aggregate_data_id=None, app_id=None, dedicated_line_id=None, device_id=None, event_id=None,
                 event_object_id=None, monitor_item_id=None, port_collection_id=None, type=None):
        self.aggregate_data_id = aggregate_data_id  # type: str
        self.app_id = app_id  # type: str
        self.dedicated_line_id = dedicated_line_id  # type: str
        self.device_id = device_id  # type: str
        self.event_id = event_id  # type: str
        self.event_object_id = event_object_id  # type: str
        self.monitor_item_id = monitor_item_id  # type: str
        self.port_collection_id = port_collection_id  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DisableNotificationRequestList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aggregate_data_id is not None:
            result['AggregateDataId'] = self.aggregate_data_id
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.dedicated_line_id is not None:
            result['DedicatedLineId'] = self.dedicated_line_id
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.event_id is not None:
            result['EventId'] = self.event_id
        if self.event_object_id is not None:
            result['EventObjectId'] = self.event_object_id
        if self.monitor_item_id is not None:
            result['MonitorItemId'] = self.monitor_item_id
        if self.port_collection_id is not None:
            result['PortCollectionId'] = self.port_collection_id
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AggregateDataId') is not None:
            self.aggregate_data_id = m.get('AggregateDataId')
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('DedicatedLineId') is not None:
            self.dedicated_line_id = m.get('DedicatedLineId')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('EventId') is not None:
            self.event_id = m.get('EventId')
        if m.get('EventObjectId') is not None:
            self.event_object_id = m.get('EventObjectId')
        if m.get('MonitorItemId') is not None:
            self.monitor_item_id = m.get('MonitorItemId')
        if m.get('PortCollectionId') is not None:
            self.port_collection_id = m.get('PortCollectionId')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class DisableNotificationRequest(TeaModel):
    def __init__(self, expiry_time=None, instance_id=None, list=None, reason=None):
        self.expiry_time = expiry_time  # type: str
        self.instance_id = instance_id  # type: str
        self.list = list  # type: list[DisableNotificationRequestList]
        self.reason = reason  # type: str

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DisableNotificationRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.expiry_time is not None:
            result['ExpiryTime'] = self.expiry_time
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.reason is not None:
            result['Reason'] = self.reason
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ExpiryTime') is not None:
            self.expiry_time = m.get('ExpiryTime')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = DisableNotificationRequestList()
                self.list.append(temp_model.from_map(k))
        if m.get('Reason') is not None:
            self.reason = m.get('Reason')
        return self


class DisableNotificationShrinkRequest(TeaModel):
    def __init__(self, expiry_time=None, instance_id=None, list_shrink=None, reason=None):
        self.expiry_time = expiry_time  # type: str
        self.instance_id = instance_id  # type: str
        self.list_shrink = list_shrink  # type: str
        self.reason = reason  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DisableNotificationShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.expiry_time is not None:
            result['ExpiryTime'] = self.expiry_time
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.list_shrink is not None:
            result['List'] = self.list_shrink
        if self.reason is not None:
            result['Reason'] = self.reason
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ExpiryTime') is not None:
            self.expiry_time = m.get('ExpiryTime')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('List') is not None:
            self.list_shrink = m.get('List')
        if m.get('Reason') is not None:
            self.reason = m.get('Reason')
        return self


class DisableNotificationResponseBody(TeaModel):
    def __init__(self, request_id=None):
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DisableNotificationResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DisableNotificationResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DisableNotificationResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DisableNotificationResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DisableNotificationResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DownloadDeviceResourceRequest(TeaModel):
    def __init__(self, device_resource_id=None, device_resource_ids=None, download_type=None, instance_id=None,
                 setup_project_id=None):
        self.device_resource_id = device_resource_id  # type: str
        self.device_resource_ids = device_resource_ids  # type: list[str]
        self.download_type = download_type  # type: str
        self.instance_id = instance_id  # type: str
        self.setup_project_id = setup_project_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DownloadDeviceResourceRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_resource_id is not None:
            result['DeviceResourceId'] = self.device_resource_id
        if self.device_resource_ids is not None:
            result['DeviceResourceIds'] = self.device_resource_ids
        if self.download_type is not None:
            result['DownloadType'] = self.download_type
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.setup_project_id is not None:
            result['SetupProjectId'] = self.setup_project_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeviceResourceId') is not None:
            self.device_resource_id = m.get('DeviceResourceId')
        if m.get('DeviceResourceIds') is not None:
            self.device_resource_ids = m.get('DeviceResourceIds')
        if m.get('DownloadType') is not None:
            self.download_type = m.get('DownloadType')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('SetupProjectId') is not None:
            self.setup_project_id = m.get('SetupProjectId')
        return self


class DownloadDeviceResourceShrinkRequest(TeaModel):
    def __init__(self, device_resource_id=None, device_resource_ids_shrink=None, download_type=None,
                 instance_id=None, setup_project_id=None):
        self.device_resource_id = device_resource_id  # type: str
        self.device_resource_ids_shrink = device_resource_ids_shrink  # type: str
        self.download_type = download_type  # type: str
        self.instance_id = instance_id  # type: str
        self.setup_project_id = setup_project_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DownloadDeviceResourceShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_resource_id is not None:
            result['DeviceResourceId'] = self.device_resource_id
        if self.device_resource_ids_shrink is not None:
            result['DeviceResourceIds'] = self.device_resource_ids_shrink
        if self.download_type is not None:
            result['DownloadType'] = self.download_type
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.setup_project_id is not None:
            result['SetupProjectId'] = self.setup_project_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeviceResourceId') is not None:
            self.device_resource_id = m.get('DeviceResourceId')
        if m.get('DeviceResourceIds') is not None:
            self.device_resource_ids_shrink = m.get('DeviceResourceIds')
        if m.get('DownloadType') is not None:
            self.download_type = m.get('DownloadType')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('SetupProjectId') is not None:
            self.setup_project_id = m.get('SetupProjectId')
        return self


class DownloadDeviceResourceResponseBody(TeaModel):
    def __init__(self, download_url=None, request_id=None):
        self.download_url = download_url  # type: str
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DownloadDeviceResourceResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.download_url is not None:
            result['DownloadUrl'] = self.download_url
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DownloadUrl') is not None:
            self.download_url = m.get('DownloadUrl')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class DownloadDeviceResourceResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DownloadDeviceResourceResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DownloadDeviceResourceResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DownloadDeviceResourceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class EnableNotificationRequestList(TeaModel):
    def __init__(self, aggregate_data_id=None, app_id=None, dedicated_line_id=None, device_id=None, event_id=None,
                 event_object_id=None, monitor_item_id=None, port_collection_id=None, type=None):
        self.aggregate_data_id = aggregate_data_id  # type: str
        self.app_id = app_id  # type: str
        self.dedicated_line_id = dedicated_line_id  # type: str
        self.device_id = device_id  # type: str
        self.event_id = event_id  # type: str
        self.event_object_id = event_object_id  # type: str
        self.monitor_item_id = monitor_item_id  # type: str
        self.port_collection_id = port_collection_id  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(EnableNotificationRequestList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aggregate_data_id is not None:
            result['AggregateDataId'] = self.aggregate_data_id
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.dedicated_line_id is not None:
            result['DedicatedLineId'] = self.dedicated_line_id
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.event_id is not None:
            result['EventId'] = self.event_id
        if self.event_object_id is not None:
            result['EventObjectId'] = self.event_object_id
        if self.monitor_item_id is not None:
            result['MonitorItemId'] = self.monitor_item_id
        if self.port_collection_id is not None:
            result['PortCollectionId'] = self.port_collection_id
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AggregateDataId') is not None:
            self.aggregate_data_id = m.get('AggregateDataId')
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('DedicatedLineId') is not None:
            self.dedicated_line_id = m.get('DedicatedLineId')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('EventId') is not None:
            self.event_id = m.get('EventId')
        if m.get('EventObjectId') is not None:
            self.event_object_id = m.get('EventObjectId')
        if m.get('MonitorItemId') is not None:
            self.monitor_item_id = m.get('MonitorItemId')
        if m.get('PortCollectionId') is not None:
            self.port_collection_id = m.get('PortCollectionId')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class EnableNotificationRequest(TeaModel):
    def __init__(self, instance_id=None, list=None):
        self.instance_id = instance_id  # type: str
        self.list = list  # type: list[EnableNotificationRequestList]

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(EnableNotificationRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = EnableNotificationRequestList()
                self.list.append(temp_model.from_map(k))
        return self


class EnableNotificationShrinkRequest(TeaModel):
    def __init__(self, instance_id=None, list_shrink=None):
        self.instance_id = instance_id  # type: str
        self.list_shrink = list_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(EnableNotificationShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.list_shrink is not None:
            result['List'] = self.list_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('List') is not None:
            self.list_shrink = m.get('List')
        return self


class EnableNotificationResponseBody(TeaModel):
    def __init__(self, request_id=None):
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(EnableNotificationResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class EnableNotificationResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: EnableNotificationResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(EnableNotificationResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = EnableNotificationResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetAlarmStatusRequest(TeaModel):
    def __init__(self, aggregate_data_id=None, app_id=None, dedicated_line_id=None, device_id=None,
                 instance_id=None, monitor_item_id=None, port_collection_id=None, type=None):
        self.aggregate_data_id = aggregate_data_id  # type: str
        self.app_id = app_id  # type: str
        self.dedicated_line_id = dedicated_line_id  # type: str
        self.device_id = device_id  # type: str
        self.instance_id = instance_id  # type: str
        self.monitor_item_id = monitor_item_id  # type: str
        self.port_collection_id = port_collection_id  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetAlarmStatusRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aggregate_data_id is not None:
            result['AggregateDataId'] = self.aggregate_data_id
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.dedicated_line_id is not None:
            result['DedicatedLineId'] = self.dedicated_line_id
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.monitor_item_id is not None:
            result['MonitorItemId'] = self.monitor_item_id
        if self.port_collection_id is not None:
            result['PortCollectionId'] = self.port_collection_id
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AggregateDataId') is not None:
            self.aggregate_data_id = m.get('AggregateDataId')
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('DedicatedLineId') is not None:
            self.dedicated_line_id = m.get('DedicatedLineId')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('MonitorItemId') is not None:
            self.monitor_item_id = m.get('MonitorItemId')
        if m.get('PortCollectionId') is not None:
            self.port_collection_id = m.get('PortCollectionId')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class GetAlarmStatusResponseBodyAlarmStatusAggregateData(TeaModel):
    def __init__(self, aggregate_data_description=None, aggregate_data_id=None, aggregate_data_name=None,
                 aggregate_mode=None, data_item=None, device_id=None, is_all_device=None, monitor_item_id=None):
        # 描述
        self.aggregate_data_description = aggregate_data_description  # type: str
        # 聚合数据ID
        self.aggregate_data_id = aggregate_data_id  # type: str
        # 聚合数据名称
        self.aggregate_data_name = aggregate_data_name  # type: str
        # 聚合方式
        self.aggregate_mode = aggregate_mode  # type: str
        # 数据项
        self.data_item = data_item  # type: str
        # 设备ID
        self.device_id = device_id  # type: str
        # 是否聚合全部设备
        self.is_all_device = is_all_device  # type: int
        # 监控项ID
        self.monitor_item_id = monitor_item_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetAlarmStatusResponseBodyAlarmStatusAggregateData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aggregate_data_description is not None:
            result['AggregateDataDescription'] = self.aggregate_data_description
        if self.aggregate_data_id is not None:
            result['AggregateDataId'] = self.aggregate_data_id
        if self.aggregate_data_name is not None:
            result['AggregateDataName'] = self.aggregate_data_name
        if self.aggregate_mode is not None:
            result['AggregateMode'] = self.aggregate_mode
        if self.data_item is not None:
            result['DataItem'] = self.data_item
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.is_all_device is not None:
            result['IsAllDevice'] = self.is_all_device
        if self.monitor_item_id is not None:
            result['MonitorItemId'] = self.monitor_item_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AggregateDataDescription') is not None:
            self.aggregate_data_description = m.get('AggregateDataDescription')
        if m.get('AggregateDataId') is not None:
            self.aggregate_data_id = m.get('AggregateDataId')
        if m.get('AggregateDataName') is not None:
            self.aggregate_data_name = m.get('AggregateDataName')
        if m.get('AggregateMode') is not None:
            self.aggregate_mode = m.get('AggregateMode')
        if m.get('DataItem') is not None:
            self.data_item = m.get('DataItem')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('IsAllDevice') is not None:
            self.is_all_device = m.get('IsAllDevice')
        if m.get('MonitorItemId') is not None:
            self.monitor_item_id = m.get('MonitorItemId')
        return self


class GetAlarmStatusResponseBodyAlarmStatusDedicatedLine(TeaModel):
    def __init__(self, bandwidth=None, dedicated_line_gateway=None, dedicated_line_name=None, device_id=None,
                 ip=None, port_name=None, space=None):
        self.bandwidth = bandwidth  # type: str
        self.dedicated_line_gateway = dedicated_line_gateway  # type: str
        self.dedicated_line_name = dedicated_line_name  # type: str
        self.device_id = device_id  # type: str
        self.ip = ip  # type: str
        self.port_name = port_name  # type: str
        self.space = space  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetAlarmStatusResponseBodyAlarmStatusDedicatedLine, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bandwidth is not None:
            result['Bandwidth'] = self.bandwidth
        if self.dedicated_line_gateway is not None:
            result['DedicatedLineGateway'] = self.dedicated_line_gateway
        if self.dedicated_line_name is not None:
            result['DedicatedLineName'] = self.dedicated_line_name
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.ip is not None:
            result['Ip'] = self.ip
        if self.port_name is not None:
            result['PortName'] = self.port_name
        if self.space is not None:
            result['Space'] = self.space
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Bandwidth') is not None:
            self.bandwidth = m.get('Bandwidth')
        if m.get('DedicatedLineGateway') is not None:
            self.dedicated_line_gateway = m.get('DedicatedLineGateway')
        if m.get('DedicatedLineName') is not None:
            self.dedicated_line_name = m.get('DedicatedLineName')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('Ip') is not None:
            self.ip = m.get('Ip')
        if m.get('PortName') is not None:
            self.port_name = m.get('PortName')
        if m.get('Space') is not None:
            self.space = m.get('Space')
        return self


class GetAlarmStatusResponseBodyAlarmStatusMonitorItem(TeaModel):
    def __init__(self, collection_type=None, device_form=None, effective=None, exec_interval=None,
                 monitor_item_description=None, monitor_item_id=None, monitor_item_name=None, security_domain=None):
        self.collection_type = collection_type  # type: str
        self.device_form = device_form  # type: str
        self.effective = effective  # type: long
        self.exec_interval = exec_interval  # type: str
        self.monitor_item_description = monitor_item_description  # type: str
        self.monitor_item_id = monitor_item_id  # type: str
        self.monitor_item_name = monitor_item_name  # type: str
        self.security_domain = security_domain  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetAlarmStatusResponseBodyAlarmStatusMonitorItem, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.collection_type is not None:
            result['CollectionType'] = self.collection_type
        if self.device_form is not None:
            result['DeviceForm'] = self.device_form
        if self.effective is not None:
            result['Effective'] = self.effective
        if self.exec_interval is not None:
            result['ExecInterval'] = self.exec_interval
        if self.monitor_item_description is not None:
            result['MonitorItemDescription'] = self.monitor_item_description
        if self.monitor_item_id is not None:
            result['MonitorItemId'] = self.monitor_item_id
        if self.monitor_item_name is not None:
            result['MonitorItemName'] = self.monitor_item_name
        if self.security_domain is not None:
            result['SecurityDomain'] = self.security_domain
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CollectionType') is not None:
            self.collection_type = m.get('CollectionType')
        if m.get('DeviceForm') is not None:
            self.device_form = m.get('DeviceForm')
        if m.get('Effective') is not None:
            self.effective = m.get('Effective')
        if m.get('ExecInterval') is not None:
            self.exec_interval = m.get('ExecInterval')
        if m.get('MonitorItemDescription') is not None:
            self.monitor_item_description = m.get('MonitorItemDescription')
        if m.get('MonitorItemId') is not None:
            self.monitor_item_id = m.get('MonitorItemId')
        if m.get('MonitorItemName') is not None:
            self.monitor_item_name = m.get('MonitorItemName')
        if m.get('SecurityDomain') is not None:
            self.security_domain = m.get('SecurityDomain')
        return self


class GetAlarmStatusResponseBodyAlarmStatusNotificationSwitch(TeaModel):
    def __init__(self, expiry_time=None, reason=None):
        self.expiry_time = expiry_time  # type: str
        self.reason = reason  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetAlarmStatusResponseBodyAlarmStatusNotificationSwitch, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.expiry_time is not None:
            result['ExpiryTime'] = self.expiry_time
        if self.reason is not None:
            result['Reason'] = self.reason
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ExpiryTime') is not None:
            self.expiry_time = m.get('ExpiryTime')
        if m.get('Reason') is not None:
            self.reason = m.get('Reason')
        return self


class GetAlarmStatusResponseBodyAlarmStatusPortCollectionPortListResourceDevice(TeaModel):
    def __init__(self, host_name=None, ip=None, security_domain=None):
        self.host_name = host_name  # type: str
        self.ip = ip  # type: str
        self.security_domain = security_domain  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetAlarmStatusResponseBodyAlarmStatusPortCollectionPortListResourceDevice, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.host_name is not None:
            result['HostName'] = self.host_name
        if self.ip is not None:
            result['Ip'] = self.ip
        if self.security_domain is not None:
            result['SecurityDomain'] = self.security_domain
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('HostName') is not None:
            self.host_name = m.get('HostName')
        if m.get('Ip') is not None:
            self.ip = m.get('Ip')
        if m.get('SecurityDomain') is not None:
            self.security_domain = m.get('SecurityDomain')
        return self


class GetAlarmStatusResponseBodyAlarmStatusPortCollectionPortList(TeaModel):
    def __init__(self, device_id=None, port_name=None, resource_device=None):
        self.device_id = device_id  # type: str
        self.port_name = port_name  # type: str
        self.resource_device = resource_device  # type: GetAlarmStatusResponseBodyAlarmStatusPortCollectionPortListResourceDevice

    def validate(self):
        if self.resource_device:
            self.resource_device.validate()

    def to_map(self):
        _map = super(GetAlarmStatusResponseBodyAlarmStatusPortCollectionPortList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.port_name is not None:
            result['PortName'] = self.port_name
        if self.resource_device is not None:
            result['ResourceDevice'] = self.resource_device.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('PortName') is not None:
            self.port_name = m.get('PortName')
        if m.get('ResourceDevice') is not None:
            temp_model = GetAlarmStatusResponseBodyAlarmStatusPortCollectionPortListResourceDevice()
            self.resource_device = temp_model.from_map(m['ResourceDevice'])
        return self


class GetAlarmStatusResponseBodyAlarmStatusPortCollection(TeaModel):
    def __init__(self, port_collection_description=None, port_collection_id=None, port_collection_name=None,
                 port_list=None):
        self.port_collection_description = port_collection_description  # type: str
        self.port_collection_id = port_collection_id  # type: str
        self.port_collection_name = port_collection_name  # type: str
        self.port_list = port_list  # type: list[GetAlarmStatusResponseBodyAlarmStatusPortCollectionPortList]

    def validate(self):
        if self.port_list:
            for k in self.port_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetAlarmStatusResponseBodyAlarmStatusPortCollection, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.port_collection_description is not None:
            result['PortCollectionDescription'] = self.port_collection_description
        if self.port_collection_id is not None:
            result['PortCollectionId'] = self.port_collection_id
        if self.port_collection_name is not None:
            result['PortCollectionName'] = self.port_collection_name
        result['PortList'] = []
        if self.port_list is not None:
            for k in self.port_list:
                result['PortList'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('PortCollectionDescription') is not None:
            self.port_collection_description = m.get('PortCollectionDescription')
        if m.get('PortCollectionId') is not None:
            self.port_collection_id = m.get('PortCollectionId')
        if m.get('PortCollectionName') is not None:
            self.port_collection_name = m.get('PortCollectionName')
        self.port_list = []
        if m.get('PortList') is not None:
            for k in m.get('PortList'):
                temp_model = GetAlarmStatusResponseBodyAlarmStatusPortCollectionPortList()
                self.port_list.append(temp_model.from_map(k))
        return self


class GetAlarmStatusResponseBodyAlarmStatusResourceApp(TeaModel):
    def __init__(self, app_id=None, domain=None, port=None, security_domain=None, type=None):
        self.app_id = app_id  # type: str
        self.domain = domain  # type: str
        self.port = port  # type: str
        self.security_domain = security_domain  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetAlarmStatusResponseBodyAlarmStatusResourceApp, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.domain is not None:
            result['Domain'] = self.domain
        if self.port is not None:
            result['Port'] = self.port
        if self.security_domain is not None:
            result['SecurityDomain'] = self.security_domain
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('Domain') is not None:
            self.domain = m.get('Domain')
        if m.get('Port') is not None:
            self.port = m.get('Port')
        if m.get('SecurityDomain') is not None:
            self.security_domain = m.get('SecurityDomain')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class GetAlarmStatusResponseBodyAlarmStatusResourceDevice(TeaModel):
    def __init__(self, device_form=None, device_id=None, host_name=None, ip=None, model=None, security_domain=None,
                 sn=None, space=None, status=None, vendor=None):
        self.device_form = device_form  # type: str
        self.device_id = device_id  # type: str
        self.host_name = host_name  # type: str
        self.ip = ip  # type: str
        self.model = model  # type: str
        self.security_domain = security_domain  # type: str
        self.sn = sn  # type: str
        self.space = space  # type: str
        self.status = status  # type: str
        self.vendor = vendor  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetAlarmStatusResponseBodyAlarmStatusResourceDevice, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_form is not None:
            result['DeviceForm'] = self.device_form
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.host_name is not None:
            result['HostName'] = self.host_name
        if self.ip is not None:
            result['Ip'] = self.ip
        if self.model is not None:
            result['Model'] = self.model
        if self.security_domain is not None:
            result['SecurityDomain'] = self.security_domain
        if self.sn is not None:
            result['Sn'] = self.sn
        if self.space is not None:
            result['Space'] = self.space
        if self.status is not None:
            result['Status'] = self.status
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeviceForm') is not None:
            self.device_form = m.get('DeviceForm')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('HostName') is not None:
            self.host_name = m.get('HostName')
        if m.get('Ip') is not None:
            self.ip = m.get('Ip')
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('SecurityDomain') is not None:
            self.security_domain = m.get('SecurityDomain')
        if m.get('Sn') is not None:
            self.sn = m.get('Sn')
        if m.get('Space') is not None:
            self.space = m.get('Space')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        return self


class GetAlarmStatusResponseBodyAlarmStatus(TeaModel):
    def __init__(self, abnormal_data_item=None, agent_ip=None, aggregate_data=None, aggregate_data_id=None,
                 alarm_rule=None, alarm_status=None, app_id=None, collection_time=None, dedicated_line=None,
                 dedicated_line_id=None, device_id=None, first_abnormal_time=None, monitor_item=None, monitor_item_id=None,
                 notification_switch=None, port_collection=None, port_collection_id=None, receive_time=None, resource_app=None,
                 resource_device=None, response_code=None, result=None, unique_key=None):
        self.abnormal_data_item = abnormal_data_item  # type: str
        self.agent_ip = agent_ip  # type: str
        self.aggregate_data = aggregate_data  # type: GetAlarmStatusResponseBodyAlarmStatusAggregateData
        self.aggregate_data_id = aggregate_data_id  # type: str
        self.alarm_rule = alarm_rule  # type: str
        self.alarm_status = alarm_status  # type: str
        self.app_id = app_id  # type: str
        self.collection_time = collection_time  # type: str
        self.dedicated_line = dedicated_line  # type: GetAlarmStatusResponseBodyAlarmStatusDedicatedLine
        self.dedicated_line_id = dedicated_line_id  # type: str
        self.device_id = device_id  # type: str
        self.first_abnormal_time = first_abnormal_time  # type: str
        self.monitor_item = monitor_item  # type: GetAlarmStatusResponseBodyAlarmStatusMonitorItem
        self.monitor_item_id = monitor_item_id  # type: str
        self.notification_switch = notification_switch  # type: GetAlarmStatusResponseBodyAlarmStatusNotificationSwitch
        self.port_collection = port_collection  # type: GetAlarmStatusResponseBodyAlarmStatusPortCollection
        self.port_collection_id = port_collection_id  # type: str
        self.receive_time = receive_time  # type: str
        self.resource_app = resource_app  # type: GetAlarmStatusResponseBodyAlarmStatusResourceApp
        self.resource_device = resource_device  # type: GetAlarmStatusResponseBodyAlarmStatusResourceDevice
        self.response_code = response_code  # type: str
        self.result = result  # type: str
        self.unique_key = unique_key  # type: str

    def validate(self):
        if self.aggregate_data:
            self.aggregate_data.validate()
        if self.dedicated_line:
            self.dedicated_line.validate()
        if self.monitor_item:
            self.monitor_item.validate()
        if self.notification_switch:
            self.notification_switch.validate()
        if self.port_collection:
            self.port_collection.validate()
        if self.resource_app:
            self.resource_app.validate()
        if self.resource_device:
            self.resource_device.validate()

    def to_map(self):
        _map = super(GetAlarmStatusResponseBodyAlarmStatus, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.abnormal_data_item is not None:
            result['AbnormalDataItem'] = self.abnormal_data_item
        if self.agent_ip is not None:
            result['AgentIp'] = self.agent_ip
        if self.aggregate_data is not None:
            result['AggregateData'] = self.aggregate_data.to_map()
        if self.aggregate_data_id is not None:
            result['AggregateDataId'] = self.aggregate_data_id
        if self.alarm_rule is not None:
            result['AlarmRule'] = self.alarm_rule
        if self.alarm_status is not None:
            result['AlarmStatus'] = self.alarm_status
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.collection_time is not None:
            result['CollectionTime'] = self.collection_time
        if self.dedicated_line is not None:
            result['DedicatedLine'] = self.dedicated_line.to_map()
        if self.dedicated_line_id is not None:
            result['DedicatedLineId'] = self.dedicated_line_id
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.first_abnormal_time is not None:
            result['FirstAbnormalTime'] = self.first_abnormal_time
        if self.monitor_item is not None:
            result['MonitorItem'] = self.monitor_item.to_map()
        if self.monitor_item_id is not None:
            result['MonitorItemId'] = self.monitor_item_id
        if self.notification_switch is not None:
            result['NotificationSwitch'] = self.notification_switch.to_map()
        if self.port_collection is not None:
            result['PortCollection'] = self.port_collection.to_map()
        if self.port_collection_id is not None:
            result['PortCollectionId'] = self.port_collection_id
        if self.receive_time is not None:
            result['ReceiveTime'] = self.receive_time
        if self.resource_app is not None:
            result['ResourceApp'] = self.resource_app.to_map()
        if self.resource_device is not None:
            result['ResourceDevice'] = self.resource_device.to_map()
        if self.response_code is not None:
            result['ResponseCode'] = self.response_code
        if self.result is not None:
            result['Result'] = self.result
        if self.unique_key is not None:
            result['UniqueKey'] = self.unique_key
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AbnormalDataItem') is not None:
            self.abnormal_data_item = m.get('AbnormalDataItem')
        if m.get('AgentIp') is not None:
            self.agent_ip = m.get('AgentIp')
        if m.get('AggregateData') is not None:
            temp_model = GetAlarmStatusResponseBodyAlarmStatusAggregateData()
            self.aggregate_data = temp_model.from_map(m['AggregateData'])
        if m.get('AggregateDataId') is not None:
            self.aggregate_data_id = m.get('AggregateDataId')
        if m.get('AlarmRule') is not None:
            self.alarm_rule = m.get('AlarmRule')
        if m.get('AlarmStatus') is not None:
            self.alarm_status = m.get('AlarmStatus')
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('CollectionTime') is not None:
            self.collection_time = m.get('CollectionTime')
        if m.get('DedicatedLine') is not None:
            temp_model = GetAlarmStatusResponseBodyAlarmStatusDedicatedLine()
            self.dedicated_line = temp_model.from_map(m['DedicatedLine'])
        if m.get('DedicatedLineId') is not None:
            self.dedicated_line_id = m.get('DedicatedLineId')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('FirstAbnormalTime') is not None:
            self.first_abnormal_time = m.get('FirstAbnormalTime')
        if m.get('MonitorItem') is not None:
            temp_model = GetAlarmStatusResponseBodyAlarmStatusMonitorItem()
            self.monitor_item = temp_model.from_map(m['MonitorItem'])
        if m.get('MonitorItemId') is not None:
            self.monitor_item_id = m.get('MonitorItemId')
        if m.get('NotificationSwitch') is not None:
            temp_model = GetAlarmStatusResponseBodyAlarmStatusNotificationSwitch()
            self.notification_switch = temp_model.from_map(m['NotificationSwitch'])
        if m.get('PortCollection') is not None:
            temp_model = GetAlarmStatusResponseBodyAlarmStatusPortCollection()
            self.port_collection = temp_model.from_map(m['PortCollection'])
        if m.get('PortCollectionId') is not None:
            self.port_collection_id = m.get('PortCollectionId')
        if m.get('ReceiveTime') is not None:
            self.receive_time = m.get('ReceiveTime')
        if m.get('ResourceApp') is not None:
            temp_model = GetAlarmStatusResponseBodyAlarmStatusResourceApp()
            self.resource_app = temp_model.from_map(m['ResourceApp'])
        if m.get('ResourceDevice') is not None:
            temp_model = GetAlarmStatusResponseBodyAlarmStatusResourceDevice()
            self.resource_device = temp_model.from_map(m['ResourceDevice'])
        if m.get('ResponseCode') is not None:
            self.response_code = m.get('ResponseCode')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        if m.get('UniqueKey') is not None:
            self.unique_key = m.get('UniqueKey')
        return self


class GetAlarmStatusResponseBody(TeaModel):
    def __init__(self, alarm_status=None, request_id=None):
        self.alarm_status = alarm_status  # type: GetAlarmStatusResponseBodyAlarmStatus
        self.request_id = request_id  # type: str

    def validate(self):
        if self.alarm_status:
            self.alarm_status.validate()

    def to_map(self):
        _map = super(GetAlarmStatusResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alarm_status is not None:
            result['AlarmStatus'] = self.alarm_status.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AlarmStatus') is not None:
            temp_model = GetAlarmStatusResponseBodyAlarmStatus()
            self.alarm_status = temp_model.from_map(m['AlarmStatus'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class GetAlarmStatusResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetAlarmStatusResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetAlarmStatusResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetAlarmStatusResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetConfigurationSpecificationRequest(TeaModel):
    def __init__(self, configuration_specification_id=None, instance_id=None):
        self.configuration_specification_id = configuration_specification_id  # type: str
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetConfigurationSpecificationRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.configuration_specification_id is not None:
            result['ConfigurationSpecificationId'] = self.configuration_specification_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ConfigurationSpecificationId') is not None:
            self.configuration_specification_id = m.get('ConfigurationSpecificationId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class GetConfigurationSpecificationResponseBodyConfigurationSpecification(TeaModel):
    def __init__(self, architecture=None, configuration_specification_id=None, create_time=None, mode=None,
                 related_variate=None, role=None, specification_content=None, specification_name=None, update_time=None,
                 vendor=None):
        self.architecture = architecture  # type: str
        self.configuration_specification_id = configuration_specification_id  # type: str
        # 代表创建时间的资源属性字段
        self.create_time = create_time  # type: str
        self.mode = mode  # type: str
        self.related_variate = related_variate  # type: list[str]
        self.role = role  # type: str
        self.specification_content = specification_content  # type: str
        self.specification_name = specification_name  # type: str
        self.update_time = update_time  # type: str
        self.vendor = vendor  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetConfigurationSpecificationResponseBodyConfigurationSpecification, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.architecture is not None:
            result['Architecture'] = self.architecture
        if self.configuration_specification_id is not None:
            result['ConfigurationSpecificationId'] = self.configuration_specification_id
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.mode is not None:
            result['Mode'] = self.mode
        if self.related_variate is not None:
            result['RelatedVariate'] = self.related_variate
        if self.role is not None:
            result['Role'] = self.role
        if self.specification_content is not None:
            result['SpecificationContent'] = self.specification_content
        if self.specification_name is not None:
            result['SpecificationName'] = self.specification_name
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Architecture') is not None:
            self.architecture = m.get('Architecture')
        if m.get('ConfigurationSpecificationId') is not None:
            self.configuration_specification_id = m.get('ConfigurationSpecificationId')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Mode') is not None:
            self.mode = m.get('Mode')
        if m.get('RelatedVariate') is not None:
            self.related_variate = m.get('RelatedVariate')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('SpecificationContent') is not None:
            self.specification_content = m.get('SpecificationContent')
        if m.get('SpecificationName') is not None:
            self.specification_name = m.get('SpecificationName')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        return self


class GetConfigurationSpecificationResponseBody(TeaModel):
    def __init__(self, configuration_specification=None, request_id=None):
        self.configuration_specification = configuration_specification  # type: GetConfigurationSpecificationResponseBodyConfigurationSpecification
        self.request_id = request_id  # type: str

    def validate(self):
        if self.configuration_specification:
            self.configuration_specification.validate()

    def to_map(self):
        _map = super(GetConfigurationSpecificationResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.configuration_specification is not None:
            result['ConfigurationSpecification'] = self.configuration_specification.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ConfigurationSpecification') is not None:
            temp_model = GetConfigurationSpecificationResponseBodyConfigurationSpecification()
            self.configuration_specification = temp_model.from_map(m['ConfigurationSpecification'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class GetConfigurationSpecificationResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetConfigurationSpecificationResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetConfigurationSpecificationResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetConfigurationSpecificationResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetConfigurationVariateRequest(TeaModel):
    def __init__(self, configuration_variate_id=None, instance_id=None):
        self.configuration_variate_id = configuration_variate_id  # type: str
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetConfigurationVariateRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.configuration_variate_id is not None:
            result['ConfigurationVariateId'] = self.configuration_variate_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ConfigurationVariateId') is not None:
            self.configuration_variate_id = m.get('ConfigurationVariateId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class GetConfigurationVariateResponseBodyConfigurationVariate(TeaModel):
    def __init__(self, comment=None, format_function=None, variate_name=None):
        self.comment = comment  # type: str
        self.format_function = format_function  # type: str
        self.variate_name = variate_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetConfigurationVariateResponseBodyConfigurationVariate, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.comment is not None:
            result['Comment'] = self.comment
        if self.format_function is not None:
            result['FormatFunction'] = self.format_function
        if self.variate_name is not None:
            result['VariateName'] = self.variate_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Comment') is not None:
            self.comment = m.get('Comment')
        if m.get('FormatFunction') is not None:
            self.format_function = m.get('FormatFunction')
        if m.get('VariateName') is not None:
            self.variate_name = m.get('VariateName')
        return self


class GetConfigurationVariateResponseBody(TeaModel):
    def __init__(self, configuration_variate=None, request_id=None):
        self.configuration_variate = configuration_variate  # type: GetConfigurationVariateResponseBodyConfigurationVariate
        self.request_id = request_id  # type: str

    def validate(self):
        if self.configuration_variate:
            self.configuration_variate.validate()

    def to_map(self):
        _map = super(GetConfigurationVariateResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.configuration_variate is not None:
            result['ConfigurationVariate'] = self.configuration_variate.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ConfigurationVariate') is not None:
            temp_model = GetConfigurationVariateResponseBodyConfigurationVariate()
            self.configuration_variate = temp_model.from_map(m['ConfigurationVariate'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class GetConfigurationVariateResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetConfigurationVariateResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetConfigurationVariateResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetConfigurationVariateResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetDedicatedLineRequest(TeaModel):
    def __init__(self, dedicated_line_id=None, instance_id=None):
        self.dedicated_line_id = dedicated_line_id  # type: str
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDedicatedLineRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dedicated_line_id is not None:
            result['DedicatedLineId'] = self.dedicated_line_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DedicatedLineId') is not None:
            self.dedicated_line_id = m.get('DedicatedLineId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class GetDedicatedLineResponseBodyDedicatedLine(TeaModel):
    def __init__(self, bandwidth=None, dedicated_line_gateway=None, dedicated_line_id=None, dedicated_line_ip=None,
                 dedicated_line_role=None, description=None, device_id=None, device_name=None, device_port=None, isp=None,
                 physical_space_id=None):
        self.bandwidth = bandwidth  # type: int
        self.dedicated_line_gateway = dedicated_line_gateway  # type: str
        self.dedicated_line_id = dedicated_line_id  # type: str
        self.dedicated_line_ip = dedicated_line_ip  # type: str
        self.dedicated_line_role = dedicated_line_role  # type: str
        self.description = description  # type: str
        self.device_id = device_id  # type: str
        self.device_name = device_name  # type: str
        self.device_port = device_port  # type: str
        self.isp = isp  # type: str
        self.physical_space_id = physical_space_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDedicatedLineResponseBodyDedicatedLine, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bandwidth is not None:
            result['Bandwidth'] = self.bandwidth
        if self.dedicated_line_gateway is not None:
            result['DedicatedLineGateway'] = self.dedicated_line_gateway
        if self.dedicated_line_id is not None:
            result['DedicatedLineId'] = self.dedicated_line_id
        if self.dedicated_line_ip is not None:
            result['DedicatedLineIp'] = self.dedicated_line_ip
        if self.dedicated_line_role is not None:
            result['DedicatedLineRole'] = self.dedicated_line_role
        if self.description is not None:
            result['Description'] = self.description
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.device_name is not None:
            result['DeviceName'] = self.device_name
        if self.device_port is not None:
            result['DevicePort'] = self.device_port
        if self.isp is not None:
            result['Isp'] = self.isp
        if self.physical_space_id is not None:
            result['PhysicalSpaceId'] = self.physical_space_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Bandwidth') is not None:
            self.bandwidth = m.get('Bandwidth')
        if m.get('DedicatedLineGateway') is not None:
            self.dedicated_line_gateway = m.get('DedicatedLineGateway')
        if m.get('DedicatedLineId') is not None:
            self.dedicated_line_id = m.get('DedicatedLineId')
        if m.get('DedicatedLineIp') is not None:
            self.dedicated_line_ip = m.get('DedicatedLineIp')
        if m.get('DedicatedLineRole') is not None:
            self.dedicated_line_role = m.get('DedicatedLineRole')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('DeviceName') is not None:
            self.device_name = m.get('DeviceName')
        if m.get('DevicePort') is not None:
            self.device_port = m.get('DevicePort')
        if m.get('Isp') is not None:
            self.isp = m.get('Isp')
        if m.get('PhysicalSpaceId') is not None:
            self.physical_space_id = m.get('PhysicalSpaceId')
        return self


class GetDedicatedLineResponseBody(TeaModel):
    def __init__(self, dedicated_line=None, request_id=None):
        self.dedicated_line = dedicated_line  # type: GetDedicatedLineResponseBodyDedicatedLine
        self.request_id = request_id  # type: str

    def validate(self):
        if self.dedicated_line:
            self.dedicated_line.validate()

    def to_map(self):
        _map = super(GetDedicatedLineResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dedicated_line is not None:
            result['DedicatedLine'] = self.dedicated_line.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DedicatedLine') is not None:
            temp_model = GetDedicatedLineResponseBodyDedicatedLine()
            self.dedicated_line = temp_model.from_map(m['DedicatedLine'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class GetDedicatedLineResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetDedicatedLineResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetDedicatedLineResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetDedicatedLineResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetDeviceRequest(TeaModel):
    def __init__(self, device_id=None, instance_id=None):
        self.device_id = device_id  # type: str
        # 实例ID
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDeviceRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class GetDeviceResponseBodyDevice(TeaModel):
    def __init__(self, device_form_id=None, device_form_name=None, device_id=None, enable_password=None,
                 ext_attributes=None, host_name=None, ip=None, login_password=None, login_type=None, login_username=None, mac=None,
                 model=None, physical_space_id=None, physical_space_name=None, security_domain=None, service_status=None,
                 sn=None, snmp_account_type=None, snmp_account_version=None, snmp_auth_passphrase=None,
                 snmp_auth_protocol=None, snmp_community=None, snmp_privacy_passphrase=None, snmp_privacy_protocol=None,
                 snmp_security_level=None, snmp_username=None, vendor=None):
        self.device_form_id = device_form_id  # type: str
        self.device_form_name = device_form_name  # type: str
        # 设备ID
        self.device_id = device_id  # type: str
        # enable密码
        self.enable_password = enable_password  # type: str
        # 设备额外属性(JSON)
        self.ext_attributes = ext_attributes  # type: str
        # 主机名
        self.host_name = host_name  # type: str
        # 设备IP
        self.ip = ip  # type: str
        # 登录账号
        self.login_password = login_password  # type: str
        # 登录类型，SSH或者TELNET
        self.login_type = login_type  # type: str
        # 登录账号
        self.login_username = login_username  # type: str
        # 设备MAC地址
        self.mac = mac  # type: str
        # 设备型号
        self.model = model  # type: str
        # 物理空间ID
        self.physical_space_id = physical_space_id  # type: str
        # 物理空间名称
        self.physical_space_name = physical_space_name  # type: str
        # 设备安全域
        self.security_domain = security_domain  # type: str
        # 设备状态
        self.service_status = service_status  # type: str
        # 设备SN
        self.sn = sn  # type: str
        # SNMP 账号类型
        self.snmp_account_type = snmp_account_type  # type: str
        # SNMP版本号
        self.snmp_account_version = snmp_account_version  # type: str
        # SNMP Auth PassPhrase
        self.snmp_auth_passphrase = snmp_auth_passphrase  # type: str
        # SNMP Auth Protocol
        self.snmp_auth_protocol = snmp_auth_protocol  # type: str
        # SNMP Community
        self.snmp_community = snmp_community  # type: str
        # SNMP Privacy Passphrase
        self.snmp_privacy_passphrase = snmp_privacy_passphrase  # type: str
        # SNMP Privacy Protocol
        self.snmp_privacy_protocol = snmp_privacy_protocol  # type: str
        # SNMP 安全级别
        self.snmp_security_level = snmp_security_level  # type: str
        # SNMP 用户名
        self.snmp_username = snmp_username  # type: str
        # 设备厂商
        self.vendor = vendor  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDeviceResponseBodyDevice, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_form_id is not None:
            result['DeviceFormId'] = self.device_form_id
        if self.device_form_name is not None:
            result['DeviceFormName'] = self.device_form_name
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.enable_password is not None:
            result['EnablePassword'] = self.enable_password
        if self.ext_attributes is not None:
            result['ExtAttributes'] = self.ext_attributes
        if self.host_name is not None:
            result['HostName'] = self.host_name
        if self.ip is not None:
            result['Ip'] = self.ip
        if self.login_password is not None:
            result['LoginPassword'] = self.login_password
        if self.login_type is not None:
            result['LoginType'] = self.login_type
        if self.login_username is not None:
            result['LoginUsername'] = self.login_username
        if self.mac is not None:
            result['Mac'] = self.mac
        if self.model is not None:
            result['Model'] = self.model
        if self.physical_space_id is not None:
            result['PhysicalSpaceId'] = self.physical_space_id
        if self.physical_space_name is not None:
            result['PhysicalSpaceName'] = self.physical_space_name
        if self.security_domain is not None:
            result['SecurityDomain'] = self.security_domain
        if self.service_status is not None:
            result['ServiceStatus'] = self.service_status
        if self.sn is not None:
            result['Sn'] = self.sn
        if self.snmp_account_type is not None:
            result['SnmpAccountType'] = self.snmp_account_type
        if self.snmp_account_version is not None:
            result['SnmpAccountVersion'] = self.snmp_account_version
        if self.snmp_auth_passphrase is not None:
            result['SnmpAuthPassphrase'] = self.snmp_auth_passphrase
        if self.snmp_auth_protocol is not None:
            result['SnmpAuthProtocol'] = self.snmp_auth_protocol
        if self.snmp_community is not None:
            result['SnmpCommunity'] = self.snmp_community
        if self.snmp_privacy_passphrase is not None:
            result['SnmpPrivacyPassphrase'] = self.snmp_privacy_passphrase
        if self.snmp_privacy_protocol is not None:
            result['SnmpPrivacyProtocol'] = self.snmp_privacy_protocol
        if self.snmp_security_level is not None:
            result['SnmpSecurityLevel'] = self.snmp_security_level
        if self.snmp_username is not None:
            result['SnmpUsername'] = self.snmp_username
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeviceFormId') is not None:
            self.device_form_id = m.get('DeviceFormId')
        if m.get('DeviceFormName') is not None:
            self.device_form_name = m.get('DeviceFormName')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('EnablePassword') is not None:
            self.enable_password = m.get('EnablePassword')
        if m.get('ExtAttributes') is not None:
            self.ext_attributes = m.get('ExtAttributes')
        if m.get('HostName') is not None:
            self.host_name = m.get('HostName')
        if m.get('Ip') is not None:
            self.ip = m.get('Ip')
        if m.get('LoginPassword') is not None:
            self.login_password = m.get('LoginPassword')
        if m.get('LoginType') is not None:
            self.login_type = m.get('LoginType')
        if m.get('LoginUsername') is not None:
            self.login_username = m.get('LoginUsername')
        if m.get('Mac') is not None:
            self.mac = m.get('Mac')
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('PhysicalSpaceId') is not None:
            self.physical_space_id = m.get('PhysicalSpaceId')
        if m.get('PhysicalSpaceName') is not None:
            self.physical_space_name = m.get('PhysicalSpaceName')
        if m.get('SecurityDomain') is not None:
            self.security_domain = m.get('SecurityDomain')
        if m.get('ServiceStatus') is not None:
            self.service_status = m.get('ServiceStatus')
        if m.get('Sn') is not None:
            self.sn = m.get('Sn')
        if m.get('SnmpAccountType') is not None:
            self.snmp_account_type = m.get('SnmpAccountType')
        if m.get('SnmpAccountVersion') is not None:
            self.snmp_account_version = m.get('SnmpAccountVersion')
        if m.get('SnmpAuthPassphrase') is not None:
            self.snmp_auth_passphrase = m.get('SnmpAuthPassphrase')
        if m.get('SnmpAuthProtocol') is not None:
            self.snmp_auth_protocol = m.get('SnmpAuthProtocol')
        if m.get('SnmpCommunity') is not None:
            self.snmp_community = m.get('SnmpCommunity')
        if m.get('SnmpPrivacyPassphrase') is not None:
            self.snmp_privacy_passphrase = m.get('SnmpPrivacyPassphrase')
        if m.get('SnmpPrivacyProtocol') is not None:
            self.snmp_privacy_protocol = m.get('SnmpPrivacyProtocol')
        if m.get('SnmpSecurityLevel') is not None:
            self.snmp_security_level = m.get('SnmpSecurityLevel')
        if m.get('SnmpUsername') is not None:
            self.snmp_username = m.get('SnmpUsername')
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        return self


class GetDeviceResponseBody(TeaModel):
    def __init__(self, device=None, request_id=None):
        self.device = device  # type: GetDeviceResponseBodyDevice
        # Id of the request
        self.request_id = request_id  # type: str

    def validate(self):
        if self.device:
            self.device.validate()

    def to_map(self):
        _map = super(GetDeviceResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device is not None:
            result['Device'] = self.device.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Device') is not None:
            temp_model = GetDeviceResponseBodyDevice()
            self.device = temp_model.from_map(m['Device'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class GetDeviceResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetDeviceResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetDeviceResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetDeviceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetDeviceConfigRequest(TeaModel):
    def __init__(self, date=None, device_id=None, instance_id=None):
        self.date = date  # type: str
        self.device_id = device_id  # type: str
        # 实例ID
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDeviceConfigRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.date is not None:
            result['Date'] = self.date
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Date') is not None:
            self.date = m.get('Date')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class GetDeviceConfigResponseBody(TeaModel):
    def __init__(self, device_config=None, request_id=None):
        # 设备配置内容
        self.device_config = device_config  # type: str
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDeviceConfigResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_config is not None:
            result['DeviceConfig'] = self.device_config
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeviceConfig') is not None:
            self.device_config = m.get('DeviceConfig')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class GetDeviceConfigResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetDeviceConfigResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetDeviceConfigResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetDeviceConfigResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetDeviceConfigDateRequest(TeaModel):
    def __init__(self, device_id=None, instance_id=None):
        self.device_id = device_id  # type: str
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDeviceConfigDateRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class GetDeviceConfigDateResponseBody(TeaModel):
    def __init__(self, device_config_date=None, request_id=None):
        # 设备配置内容
        self.device_config_date = device_config_date  # type: list[str]
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDeviceConfigDateResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_config_date is not None:
            result['DeviceConfigDate'] = self.device_config_date
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeviceConfigDate') is not None:
            self.device_config_date = m.get('DeviceConfigDate')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class GetDeviceConfigDateResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetDeviceConfigDateResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetDeviceConfigDateResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetDeviceConfigDateResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetDeviceConfigDiffRequest(TeaModel):
    def __init__(self, device_id=None, end_date=None, instance_id=None, start_date=None):
        self.device_id = device_id  # type: str
        self.end_date = end_date  # type: str
        self.instance_id = instance_id  # type: str
        self.start_date = start_date  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDeviceConfigDiffRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.end_date is not None:
            result['EndDate'] = self.end_date
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.start_date is not None:
            result['StartDate'] = self.start_date
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('EndDate') is not None:
            self.end_date = m.get('EndDate')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('StartDate') is not None:
            self.start_date = m.get('StartDate')
        return self


class GetDeviceConfigDiffResponseBodyDeviceConfigDiff(TeaModel):
    def __init__(self, extract_diff=None, total_diff=None):
        self.extract_diff = extract_diff  # type: str
        self.total_diff = total_diff  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDeviceConfigDiffResponseBodyDeviceConfigDiff, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.extract_diff is not None:
            result['ExtractDiff'] = self.extract_diff
        if self.total_diff is not None:
            result['TotalDiff'] = self.total_diff
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ExtractDiff') is not None:
            self.extract_diff = m.get('ExtractDiff')
        if m.get('TotalDiff') is not None:
            self.total_diff = m.get('TotalDiff')
        return self


class GetDeviceConfigDiffResponseBody(TeaModel):
    def __init__(self, device_config_diff=None, request_id=None):
        self.device_config_diff = device_config_diff  # type: GetDeviceConfigDiffResponseBodyDeviceConfigDiff
        self.request_id = request_id  # type: str

    def validate(self):
        if self.device_config_diff:
            self.device_config_diff.validate()

    def to_map(self):
        _map = super(GetDeviceConfigDiffResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_config_diff is not None:
            result['DeviceConfigDiff'] = self.device_config_diff.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeviceConfigDiff') is not None:
            temp_model = GetDeviceConfigDiffResponseBodyDeviceConfigDiff()
            self.device_config_diff = temp_model.from_map(m['DeviceConfigDiff'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class GetDeviceConfigDiffResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetDeviceConfigDiffResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetDeviceConfigDiffResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetDeviceConfigDiffResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetDeviceFormRequest(TeaModel):
    def __init__(self, device_form_id=None, instance_id=None):
        self.device_form_id = device_form_id  # type: str
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDeviceFormRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_form_id is not None:
            result['DeviceFormId'] = self.device_form_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeviceFormId') is not None:
            self.device_form_id = m.get('DeviceFormId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class GetDeviceFormResponseBodyDeviceFormAttributeList(TeaModel):
    def __init__(self, attribute_built_in=None, attribute_format=None, attribute_fuzzy_query=None,
                 attribute_key=None, attribute_name=None, attribute_placeholder=None, attribute_query=None,
                 attribute_reference=None, attribute_requirement=None, attribute_sequence=None, attribute_table_display=None,
                 attribute_type=None, attribute_uniqueness=None):
        # 内置属性不可修改和删除
        self.attribute_built_in = attribute_built_in  # type: bool
        # 设备形态属性值格式
        self.attribute_format = attribute_format  # type: str
        # 前端查询控件是否支持模糊搜索
        self.attribute_fuzzy_query = attribute_fuzzy_query  # type: bool
        # 设备形态属性主键
        self.attribute_key = attribute_key  # type: str
        # 设备形态属性名称
        self.attribute_name = attribute_name  # type: str
        # 前端查询控件占位符
        self.attribute_placeholder = attribute_placeholder  # type: str
        # 前端是否展示对应的查询控件
        self.attribute_query = attribute_query  # type: bool
        # 设备形态属性关联对象
        self.attribute_reference = attribute_reference  # type: str
        # 设备形态属性是否必填
        self.attribute_requirement = attribute_requirement  # type: bool
        self.attribute_sequence = attribute_sequence  # type: int
        # 设备形态属性是否表格可见
        self.attribute_table_display = attribute_table_display  # type: bool
        # 设备形态属性值类型
        self.attribute_type = attribute_type  # type: str
        # 设备形态属性是否唯一
        self.attribute_uniqueness = attribute_uniqueness  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDeviceFormResponseBodyDeviceFormAttributeList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.attribute_built_in is not None:
            result['AttributeBuiltIn'] = self.attribute_built_in
        if self.attribute_format is not None:
            result['AttributeFormat'] = self.attribute_format
        if self.attribute_fuzzy_query is not None:
            result['AttributeFuzzyQuery'] = self.attribute_fuzzy_query
        if self.attribute_key is not None:
            result['AttributeKey'] = self.attribute_key
        if self.attribute_name is not None:
            result['AttributeName'] = self.attribute_name
        if self.attribute_placeholder is not None:
            result['AttributePlaceholder'] = self.attribute_placeholder
        if self.attribute_query is not None:
            result['AttributeQuery'] = self.attribute_query
        if self.attribute_reference is not None:
            result['AttributeReference'] = self.attribute_reference
        if self.attribute_requirement is not None:
            result['AttributeRequirement'] = self.attribute_requirement
        if self.attribute_sequence is not None:
            result['AttributeSequence'] = self.attribute_sequence
        if self.attribute_table_display is not None:
            result['AttributeTableDisplay'] = self.attribute_table_display
        if self.attribute_type is not None:
            result['AttributeType'] = self.attribute_type
        if self.attribute_uniqueness is not None:
            result['AttributeUniqueness'] = self.attribute_uniqueness
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AttributeBuiltIn') is not None:
            self.attribute_built_in = m.get('AttributeBuiltIn')
        if m.get('AttributeFormat') is not None:
            self.attribute_format = m.get('AttributeFormat')
        if m.get('AttributeFuzzyQuery') is not None:
            self.attribute_fuzzy_query = m.get('AttributeFuzzyQuery')
        if m.get('AttributeKey') is not None:
            self.attribute_key = m.get('AttributeKey')
        if m.get('AttributeName') is not None:
            self.attribute_name = m.get('AttributeName')
        if m.get('AttributePlaceholder') is not None:
            self.attribute_placeholder = m.get('AttributePlaceholder')
        if m.get('AttributeQuery') is not None:
            self.attribute_query = m.get('AttributeQuery')
        if m.get('AttributeReference') is not None:
            self.attribute_reference = m.get('AttributeReference')
        if m.get('AttributeRequirement') is not None:
            self.attribute_requirement = m.get('AttributeRequirement')
        if m.get('AttributeSequence') is not None:
            self.attribute_sequence = m.get('AttributeSequence')
        if m.get('AttributeTableDisplay') is not None:
            self.attribute_table_display = m.get('AttributeTableDisplay')
        if m.get('AttributeType') is not None:
            self.attribute_type = m.get('AttributeType')
        if m.get('AttributeUniqueness') is not None:
            self.attribute_uniqueness = m.get('AttributeUniqueness')
        return self


class GetDeviceFormResponseBodyDeviceForm(TeaModel):
    def __init__(self, account_config=None, attribute_list=None, config_compare=None, detail_display=None,
                 device_form_id=None, device_form_name=None, form_built_in=None, resource_use=None, script=None, unique_key=None):
        # 是否需要账号配置
        self.account_config = account_config  # type: bool
        # 设备形态属性列表
        self.attribute_list = attribute_list  # type: list[GetDeviceFormResponseBodyDeviceFormAttributeList]
        # 是否支持配置生成
        self.config_compare = config_compare  # type: bool
        self.detail_display = detail_display  # type: bool
        # 设备形态ID
        self.device_form_id = device_form_id  # type: str
        # 设备形态名称
        self.device_form_name = device_form_name  # type: str
        # 内置形态不可修改和删除
        self.form_built_in = form_built_in  # type: bool
        self.resource_use = resource_use  # type: str
        self.script = script  # type: str
        self.unique_key = unique_key  # type: str

    def validate(self):
        if self.attribute_list:
            for k in self.attribute_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetDeviceFormResponseBodyDeviceForm, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_config is not None:
            result['AccountConfig'] = self.account_config
        result['AttributeList'] = []
        if self.attribute_list is not None:
            for k in self.attribute_list:
                result['AttributeList'].append(k.to_map() if k else None)
        if self.config_compare is not None:
            result['ConfigCompare'] = self.config_compare
        if self.detail_display is not None:
            result['DetailDisplay'] = self.detail_display
        if self.device_form_id is not None:
            result['DeviceFormId'] = self.device_form_id
        if self.device_form_name is not None:
            result['DeviceFormName'] = self.device_form_name
        if self.form_built_in is not None:
            result['FormBuiltIn'] = self.form_built_in
        if self.resource_use is not None:
            result['ResourceUse'] = self.resource_use
        if self.script is not None:
            result['Script'] = self.script
        if self.unique_key is not None:
            result['UniqueKey'] = self.unique_key
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AccountConfig') is not None:
            self.account_config = m.get('AccountConfig')
        self.attribute_list = []
        if m.get('AttributeList') is not None:
            for k in m.get('AttributeList'):
                temp_model = GetDeviceFormResponseBodyDeviceFormAttributeList()
                self.attribute_list.append(temp_model.from_map(k))
        if m.get('ConfigCompare') is not None:
            self.config_compare = m.get('ConfigCompare')
        if m.get('DetailDisplay') is not None:
            self.detail_display = m.get('DetailDisplay')
        if m.get('DeviceFormId') is not None:
            self.device_form_id = m.get('DeviceFormId')
        if m.get('DeviceFormName') is not None:
            self.device_form_name = m.get('DeviceFormName')
        if m.get('FormBuiltIn') is not None:
            self.form_built_in = m.get('FormBuiltIn')
        if m.get('ResourceUse') is not None:
            self.resource_use = m.get('ResourceUse')
        if m.get('Script') is not None:
            self.script = m.get('Script')
        if m.get('UniqueKey') is not None:
            self.unique_key = m.get('UniqueKey')
        return self


class GetDeviceFormResponseBody(TeaModel):
    def __init__(self, device_form=None, request_id=None):
        self.device_form = device_form  # type: GetDeviceFormResponseBodyDeviceForm
        self.request_id = request_id  # type: str

    def validate(self):
        if self.device_form:
            self.device_form.validate()

    def to_map(self):
        _map = super(GetDeviceFormResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_form is not None:
            result['DeviceForm'] = self.device_form.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeviceForm') is not None:
            temp_model = GetDeviceFormResponseBodyDeviceForm()
            self.device_form = temp_model.from_map(m['DeviceForm'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class GetDeviceFormResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetDeviceFormResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetDeviceFormResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetDeviceFormResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetDeviceOpLogRequest(TeaModel):
    def __init__(self, device_id=None, instance_id=None, max_results=None, next_token=None):
        self.device_id = device_id  # type: str
        self.instance_id = instance_id  # type: str
        self.max_results = max_results  # type: int
        self.next_token = next_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDeviceOpLogRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        return self


class GetDeviceOpLogResponseBodyOperationLogs(TeaModel):
    def __init__(self, device_id=None, gmt_modified_time=None, keyword=None, new_value=None, old_value=None,
                 operator=None):
        # 设备ID
        self.device_id = device_id  # type: str
        self.gmt_modified_time = gmt_modified_time  # type: str
        # SNMP Privacy Protocol
        self.keyword = keyword  # type: str
        self.new_value = new_value  # type: str
        # 设备额外属性(JSON)
        self.old_value = old_value  # type: str
        # SNMP Privacy Passphrase
        self.operator = operator  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDeviceOpLogResponseBodyOperationLogs, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.gmt_modified_time is not None:
            result['GmtModifiedTime'] = self.gmt_modified_time
        if self.keyword is not None:
            result['Keyword'] = self.keyword
        if self.new_value is not None:
            result['NewValue'] = self.new_value
        if self.old_value is not None:
            result['OldValue'] = self.old_value
        if self.operator is not None:
            result['Operator'] = self.operator
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('GmtModifiedTime') is not None:
            self.gmt_modified_time = m.get('GmtModifiedTime')
        if m.get('Keyword') is not None:
            self.keyword = m.get('Keyword')
        if m.get('NewValue') is not None:
            self.new_value = m.get('NewValue')
        if m.get('OldValue') is not None:
            self.old_value = m.get('OldValue')
        if m.get('Operator') is not None:
            self.operator = m.get('Operator')
        return self


class GetDeviceOpLogResponseBody(TeaModel):
    def __init__(self, max_results=None, next_token=None, operation_logs=None, request_id=None, total_count=None):
        self.max_results = max_results  # type: int
        self.next_token = next_token  # type: int
        self.operation_logs = operation_logs  # type: list[GetDeviceOpLogResponseBodyOperationLogs]
        self.request_id = request_id  # type: str
        self.total_count = total_count  # type: int

    def validate(self):
        if self.operation_logs:
            for k in self.operation_logs:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetDeviceOpLogResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        result['OperationLogs'] = []
        if self.operation_logs is not None:
            for k in self.operation_logs:
                result['OperationLogs'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        self.operation_logs = []
        if m.get('OperationLogs') is not None:
            for k in m.get('OperationLogs'):
                temp_model = GetDeviceOpLogResponseBodyOperationLogs()
                self.operation_logs.append(temp_model.from_map(k))
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class GetDeviceOpLogResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetDeviceOpLogResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetDeviceOpLogResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetDeviceOpLogResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetDevicePropertyRequest(TeaModel):
    def __init__(self, device_form_id=None, device_property_id=None, instance_id=None, property_key=None):
        self.device_form_id = device_form_id  # type: str
        self.device_property_id = device_property_id  # type: str
        self.instance_id = instance_id  # type: str
        self.property_key = property_key  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDevicePropertyRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_form_id is not None:
            result['DeviceFormId'] = self.device_form_id
        if self.device_property_id is not None:
            result['DevicePropertyId'] = self.device_property_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.property_key is not None:
            result['PropertyKey'] = self.property_key
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeviceFormId') is not None:
            self.device_form_id = m.get('DeviceFormId')
        if m.get('DevicePropertyId') is not None:
            self.device_property_id = m.get('DevicePropertyId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PropertyKey') is not None:
            self.property_key = m.get('PropertyKey')
        return self


class GetDevicePropertyResponseBodyDeviceProperty(TeaModel):
    def __init__(self, built_in=None, device_form_id=None, device_form_name=None, device_property_id=None,
                 property_content=None, property_format=None, property_key=None, property_name=None):
        self.built_in = built_in  # type: bool
        self.device_form_id = device_form_id  # type: str
        self.device_form_name = device_form_name  # type: str
        self.device_property_id = device_property_id  # type: str
        self.property_content = property_content  # type: str
        self.property_format = property_format  # type: str
        self.property_key = property_key  # type: str
        self.property_name = property_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDevicePropertyResponseBodyDeviceProperty, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.built_in is not None:
            result['BuiltIn'] = self.built_in
        if self.device_form_id is not None:
            result['DeviceFormId'] = self.device_form_id
        if self.device_form_name is not None:
            result['DeviceFormName'] = self.device_form_name
        if self.device_property_id is not None:
            result['DevicePropertyId'] = self.device_property_id
        if self.property_content is not None:
            result['PropertyContent'] = self.property_content
        if self.property_format is not None:
            result['PropertyFormat'] = self.property_format
        if self.property_key is not None:
            result['PropertyKey'] = self.property_key
        if self.property_name is not None:
            result['PropertyName'] = self.property_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BuiltIn') is not None:
            self.built_in = m.get('BuiltIn')
        if m.get('DeviceFormId') is not None:
            self.device_form_id = m.get('DeviceFormId')
        if m.get('DeviceFormName') is not None:
            self.device_form_name = m.get('DeviceFormName')
        if m.get('DevicePropertyId') is not None:
            self.device_property_id = m.get('DevicePropertyId')
        if m.get('PropertyContent') is not None:
            self.property_content = m.get('PropertyContent')
        if m.get('PropertyFormat') is not None:
            self.property_format = m.get('PropertyFormat')
        if m.get('PropertyKey') is not None:
            self.property_key = m.get('PropertyKey')
        if m.get('PropertyName') is not None:
            self.property_name = m.get('PropertyName')
        return self


class GetDevicePropertyResponseBody(TeaModel):
    def __init__(self, device_property=None, request_id=None):
        self.device_property = device_property  # type: GetDevicePropertyResponseBodyDeviceProperty
        self.request_id = request_id  # type: str

    def validate(self):
        if self.device_property:
            self.device_property.validate()

    def to_map(self):
        _map = super(GetDevicePropertyResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_property is not None:
            result['DeviceProperty'] = self.device_property.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeviceProperty') is not None:
            temp_model = GetDevicePropertyResponseBodyDeviceProperty()
            self.device_property = temp_model.from_map(m['DeviceProperty'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class GetDevicePropertyResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetDevicePropertyResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetDevicePropertyResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetDevicePropertyResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetDeviceResourceRequest(TeaModel):
    def __init__(self, device_resource_id=None, instance_id=None):
        self.device_resource_id = device_resource_id  # type: str
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDeviceResourceRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_resource_id is not None:
            result['DeviceResourceId'] = self.device_resource_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeviceResourceId') is not None:
            self.device_resource_id = m.get('DeviceResourceId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class GetDeviceResourceResponseBodyDeviceResource(TeaModel):
    def __init__(self, block_number=None, business=None, config=None, config_task_status=None, delivery_ip=None,
                 device_num=None, device_resource_id=None, generate_config=None, host_name=None, inter_connection=None,
                 location=None, loopback=None, manager_ip=None, model=None, role=None, setup_project_id=None, sn=None,
                 stack=None, vendor=None):
        self.block_number = block_number  # type: str
        self.business = business  # type: str
        self.config = config  # type: str
        self.config_task_status = config_task_status  # type: str
        self.delivery_ip = delivery_ip  # type: str
        self.device_num = device_num  # type: str
        self.device_resource_id = device_resource_id  # type: str
        self.generate_config = generate_config  # type: str
        self.host_name = host_name  # type: str
        self.inter_connection = inter_connection  # type: str
        self.location = location  # type: str
        self.loopback = loopback  # type: str
        self.manager_ip = manager_ip  # type: str
        self.model = model  # type: str
        self.role = role  # type: str
        # 建设项目id
        self.setup_project_id = setup_project_id  # type: str
        self.sn = sn  # type: str
        self.stack = stack  # type: bool
        self.vendor = vendor  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetDeviceResourceResponseBodyDeviceResource, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.block_number is not None:
            result['BlockNumber'] = self.block_number
        if self.business is not None:
            result['Business'] = self.business
        if self.config is not None:
            result['Config'] = self.config
        if self.config_task_status is not None:
            result['ConfigTaskStatus'] = self.config_task_status
        if self.delivery_ip is not None:
            result['DeliveryIp'] = self.delivery_ip
        if self.device_num is not None:
            result['DeviceNum'] = self.device_num
        if self.device_resource_id is not None:
            result['DeviceResourceId'] = self.device_resource_id
        if self.generate_config is not None:
            result['GenerateConfig'] = self.generate_config
        if self.host_name is not None:
            result['HostName'] = self.host_name
        if self.inter_connection is not None:
            result['InterConnection'] = self.inter_connection
        if self.location is not None:
            result['Location'] = self.location
        if self.loopback is not None:
            result['Loopback'] = self.loopback
        if self.manager_ip is not None:
            result['ManagerIp'] = self.manager_ip
        if self.model is not None:
            result['Model'] = self.model
        if self.role is not None:
            result['Role'] = self.role
        if self.setup_project_id is not None:
            result['SetupProjectId'] = self.setup_project_id
        if self.sn is not None:
            result['Sn'] = self.sn
        if self.stack is not None:
            result['Stack'] = self.stack
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BlockNumber') is not None:
            self.block_number = m.get('BlockNumber')
        if m.get('Business') is not None:
            self.business = m.get('Business')
        if m.get('Config') is not None:
            self.config = m.get('Config')
        if m.get('ConfigTaskStatus') is not None:
            self.config_task_status = m.get('ConfigTaskStatus')
        if m.get('DeliveryIp') is not None:
            self.delivery_ip = m.get('DeliveryIp')
        if m.get('DeviceNum') is not None:
            self.device_num = m.get('DeviceNum')
        if m.get('DeviceResourceId') is not None:
            self.device_resource_id = m.get('DeviceResourceId')
        if m.get('GenerateConfig') is not None:
            self.generate_config = m.get('GenerateConfig')
        if m.get('HostName') is not None:
            self.host_name = m.get('HostName')
        if m.get('InterConnection') is not None:
            self.inter_connection = m.get('InterConnection')
        if m.get('Location') is not None:
            self.location = m.get('Location')
        if m.get('Loopback') is not None:
            self.loopback = m.get('Loopback')
        if m.get('ManagerIp') is not None:
            self.manager_ip = m.get('ManagerIp')
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('SetupProjectId') is not None:
            self.setup_project_id = m.get('SetupProjectId')
        if m.get('Sn') is not None:
            self.sn = m.get('Sn')
        if m.get('Stack') is not None:
            self.stack = m.get('Stack')
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        return self


class GetDeviceResourceResponseBody(TeaModel):
    def __init__(self, device_resource=None, request_id=None):
        self.device_resource = device_resource  # type: GetDeviceResourceResponseBodyDeviceResource
        self.request_id = request_id  # type: str

    def validate(self):
        if self.device_resource:
            self.device_resource.validate()

    def to_map(self):
        _map = super(GetDeviceResourceResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_resource is not None:
            result['DeviceResource'] = self.device_resource.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeviceResource') is not None:
            temp_model = GetDeviceResourceResponseBodyDeviceResource()
            self.device_resource = temp_model.from_map(m['DeviceResource'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class GetDeviceResourceResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetDeviceResourceResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetDeviceResourceResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetDeviceResourceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetInspectionTaskRequest(TeaModel):
    def __init__(self, device_id=None, instance_id=None, item_name=None, task_id=None):
        self.device_id = device_id  # type: str
        self.instance_id = instance_id  # type: str
        self.item_name = item_name  # type: str
        self.task_id = task_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetInspectionTaskRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.item_name is not None:
            result['ItemName'] = self.item_name
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ItemName') is not None:
            self.item_name = m.get('ItemName')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class GetInspectionTaskResponseBodyInspectionTaskInspectionAlarmRules(TeaModel):
    def __init__(self, actual_value=None, expression=None, level=None, operator=None, value=None):
        self.actual_value = actual_value  # type: str
        self.expression = expression  # type: str
        self.level = level  # type: str
        self.operator = operator  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetInspectionTaskResponseBodyInspectionTaskInspectionAlarmRules, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.actual_value is not None:
            result['ActualValue'] = self.actual_value
        if self.expression is not None:
            result['Expression'] = self.expression
        if self.level is not None:
            result['Level'] = self.level
        if self.operator is not None:
            result['Operator'] = self.operator
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ActualValue') is not None:
            self.actual_value = m.get('ActualValue')
        if m.get('Expression') is not None:
            self.expression = m.get('Expression')
        if m.get('Level') is not None:
            self.level = m.get('Level')
        if m.get('Operator') is not None:
            self.operator = m.get('Operator')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetInspectionTaskResponseBodyInspectionTask(TeaModel):
    def __init__(self, device_display=None, device_id=None, error_code=None, execution_begin_time=None,
                 execution_end_time=None, host_name=None, ip=None, inspection_alarm_rules=None, inspection_result=None, item_id=None,
                 item_name=None, model=None, script_id=None, space=None, task_id=None, task_status=None, vendor=None):
        self.device_display = device_display  # type: str
        self.device_id = device_id  # type: str
        self.error_code = error_code  # type: str
        self.execution_begin_time = execution_begin_time  # type: str
        self.execution_end_time = execution_end_time  # type: str
        self.host_name = host_name  # type: str
        self.ip = ip  # type: str
        self.inspection_alarm_rules = inspection_alarm_rules  # type: list[GetInspectionTaskResponseBodyInspectionTaskInspectionAlarmRules]
        self.inspection_result = inspection_result  # type: str
        self.item_id = item_id  # type: str
        self.item_name = item_name  # type: str
        self.model = model  # type: list[str]
        self.script_id = script_id  # type: str
        self.space = space  # type: str
        self.task_id = task_id  # type: str
        self.task_status = task_status  # type: str
        self.vendor = vendor  # type: str

    def validate(self):
        if self.inspection_alarm_rules:
            for k in self.inspection_alarm_rules:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetInspectionTaskResponseBodyInspectionTask, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_display is not None:
            result['DeviceDisplay'] = self.device_display
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.execution_begin_time is not None:
            result['ExecutionBeginTime'] = self.execution_begin_time
        if self.execution_end_time is not None:
            result['ExecutionEndTime'] = self.execution_end_time
        if self.host_name is not None:
            result['HostName'] = self.host_name
        if self.ip is not None:
            result['IP'] = self.ip
        result['InspectionAlarmRules'] = []
        if self.inspection_alarm_rules is not None:
            for k in self.inspection_alarm_rules:
                result['InspectionAlarmRules'].append(k.to_map() if k else None)
        if self.inspection_result is not None:
            result['InspectionResult'] = self.inspection_result
        if self.item_id is not None:
            result['ItemId'] = self.item_id
        if self.item_name is not None:
            result['ItemName'] = self.item_name
        if self.model is not None:
            result['Model'] = self.model
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.space is not None:
            result['Space'] = self.space
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.task_status is not None:
            result['TaskStatus'] = self.task_status
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeviceDisplay') is not None:
            self.device_display = m.get('DeviceDisplay')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('ExecutionBeginTime') is not None:
            self.execution_begin_time = m.get('ExecutionBeginTime')
        if m.get('ExecutionEndTime') is not None:
            self.execution_end_time = m.get('ExecutionEndTime')
        if m.get('HostName') is not None:
            self.host_name = m.get('HostName')
        if m.get('IP') is not None:
            self.ip = m.get('IP')
        self.inspection_alarm_rules = []
        if m.get('InspectionAlarmRules') is not None:
            for k in m.get('InspectionAlarmRules'):
                temp_model = GetInspectionTaskResponseBodyInspectionTaskInspectionAlarmRules()
                self.inspection_alarm_rules.append(temp_model.from_map(k))
        if m.get('InspectionResult') is not None:
            self.inspection_result = m.get('InspectionResult')
        if m.get('ItemId') is not None:
            self.item_id = m.get('ItemId')
        if m.get('ItemName') is not None:
            self.item_name = m.get('ItemName')
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('Space') is not None:
            self.space = m.get('Space')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('TaskStatus') is not None:
            self.task_status = m.get('TaskStatus')
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        return self


class GetInspectionTaskResponseBody(TeaModel):
    def __init__(self, inspection_task=None, request_id=None):
        self.inspection_task = inspection_task  # type: GetInspectionTaskResponseBodyInspectionTask
        self.request_id = request_id  # type: str

    def validate(self):
        if self.inspection_task:
            self.inspection_task.validate()

    def to_map(self):
        _map = super(GetInspectionTaskResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.inspection_task is not None:
            result['InspectionTask'] = self.inspection_task.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InspectionTask') is not None:
            temp_model = GetInspectionTaskResponseBodyInspectionTask()
            self.inspection_task = temp_model.from_map(m['InspectionTask'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class GetInspectionTaskResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetInspectionTaskResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetInspectionTaskResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetInspectionTaskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetMonitorItemRequest(TeaModel):
    def __init__(self, instance_id=None, monitor_item_id=None):
        self.instance_id = instance_id  # type: str
        self.monitor_item_id = monitor_item_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetMonitorItemRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.monitor_item_id is not None:
            result['MonitorItemId'] = self.monitor_item_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('MonitorItemId') is not None:
            self.monitor_item_id = m.get('MonitorItemId')
        return self


class GetMonitorItemResponseBodyMonitorItemAlarmRuleList(TeaModel):
    def __init__(self, alarm_status=None, expression=None, value=None, variable=None):
        self.alarm_status = alarm_status  # type: str
        self.expression = expression  # type: str
        self.value = value  # type: str
        self.variable = variable  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetMonitorItemResponseBodyMonitorItemAlarmRuleList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alarm_status is not None:
            result['AlarmStatus'] = self.alarm_status
        if self.expression is not None:
            result['Expression'] = self.expression
        if self.value is not None:
            result['Value'] = self.value
        if self.variable is not None:
            result['Variable'] = self.variable
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AlarmStatus') is not None:
            self.alarm_status = m.get('AlarmStatus')
        if m.get('Expression') is not None:
            self.expression = m.get('Expression')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        if m.get('Variable') is not None:
            self.variable = m.get('Variable')
        return self


class GetMonitorItemResponseBodyMonitorItemPersonalizedAlarmRuleList(TeaModel):
    def __init__(self, alarm_status=None, expression=None, field_name=None, field_value=None, value=None,
                 variable=None):
        self.alarm_status = alarm_status  # type: str
        self.expression = expression  # type: str
        self.field_name = field_name  # type: str
        self.field_value = field_value  # type: str
        self.value = value  # type: str
        self.variable = variable  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetMonitorItemResponseBodyMonitorItemPersonalizedAlarmRuleList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alarm_status is not None:
            result['AlarmStatus'] = self.alarm_status
        if self.expression is not None:
            result['Expression'] = self.expression
        if self.field_name is not None:
            result['FieldName'] = self.field_name
        if self.field_value is not None:
            result['FieldValue'] = self.field_value
        if self.value is not None:
            result['Value'] = self.value
        if self.variable is not None:
            result['Variable'] = self.variable
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AlarmStatus') is not None:
            self.alarm_status = m.get('AlarmStatus')
        if m.get('Expression') is not None:
            self.expression = m.get('Expression')
        if m.get('FieldName') is not None:
            self.field_name = m.get('FieldName')
        if m.get('FieldValue') is not None:
            self.field_value = m.get('FieldValue')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        if m.get('Variable') is not None:
            self.variable = m.get('Variable')
        return self


class GetMonitorItemResponseBodyMonitorItem(TeaModel):
    def __init__(self, alarm_rule_list=None, analysis_code=None, collection_type=None, config=None,
                 create_time=None, data_item=None, device_form=None, effective=None, exec_interval=None,
                 monitor_item_description=None, monitor_item_id=None, monitor_item_name=None, personalized_alarm_rule_list=None,
                 security_domain=None, type=None, update_time=None):
        self.alarm_rule_list = alarm_rule_list  # type: list[GetMonitorItemResponseBodyMonitorItemAlarmRuleList]
        self.analysis_code = analysis_code  # type: str
        self.collection_type = collection_type  # type: str
        self.config = config  # type: str
        self.create_time = create_time  # type: str
        self.data_item = data_item  # type: str
        self.device_form = device_form  # type: str
        self.effective = effective  # type: int
        self.exec_interval = exec_interval  # type: int
        self.monitor_item_description = monitor_item_description  # type: str
        self.monitor_item_id = monitor_item_id  # type: str
        self.monitor_item_name = monitor_item_name  # type: str
        self.personalized_alarm_rule_list = personalized_alarm_rule_list  # type: list[GetMonitorItemResponseBodyMonitorItemPersonalizedAlarmRuleList]
        self.security_domain = security_domain  # type: str
        self.type = type  # type: str
        self.update_time = update_time  # type: str

    def validate(self):
        if self.alarm_rule_list:
            for k in self.alarm_rule_list:
                if k:
                    k.validate()
        if self.personalized_alarm_rule_list:
            for k in self.personalized_alarm_rule_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetMonitorItemResponseBodyMonitorItem, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AlarmRuleList'] = []
        if self.alarm_rule_list is not None:
            for k in self.alarm_rule_list:
                result['AlarmRuleList'].append(k.to_map() if k else None)
        if self.analysis_code is not None:
            result['AnalysisCode'] = self.analysis_code
        if self.collection_type is not None:
            result['CollectionType'] = self.collection_type
        if self.config is not None:
            result['Config'] = self.config
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.data_item is not None:
            result['DataItem'] = self.data_item
        if self.device_form is not None:
            result['DeviceForm'] = self.device_form
        if self.effective is not None:
            result['Effective'] = self.effective
        if self.exec_interval is not None:
            result['ExecInterval'] = self.exec_interval
        if self.monitor_item_description is not None:
            result['MonitorItemDescription'] = self.monitor_item_description
        if self.monitor_item_id is not None:
            result['MonitorItemId'] = self.monitor_item_id
        if self.monitor_item_name is not None:
            result['MonitorItemName'] = self.monitor_item_name
        result['PersonalizedAlarmRuleList'] = []
        if self.personalized_alarm_rule_list is not None:
            for k in self.personalized_alarm_rule_list:
                result['PersonalizedAlarmRuleList'].append(k.to_map() if k else None)
        if self.security_domain is not None:
            result['SecurityDomain'] = self.security_domain
        if self.type is not None:
            result['Type'] = self.type
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.alarm_rule_list = []
        if m.get('AlarmRuleList') is not None:
            for k in m.get('AlarmRuleList'):
                temp_model = GetMonitorItemResponseBodyMonitorItemAlarmRuleList()
                self.alarm_rule_list.append(temp_model.from_map(k))
        if m.get('AnalysisCode') is not None:
            self.analysis_code = m.get('AnalysisCode')
        if m.get('CollectionType') is not None:
            self.collection_type = m.get('CollectionType')
        if m.get('Config') is not None:
            self.config = m.get('Config')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('DataItem') is not None:
            self.data_item = m.get('DataItem')
        if m.get('DeviceForm') is not None:
            self.device_form = m.get('DeviceForm')
        if m.get('Effective') is not None:
            self.effective = m.get('Effective')
        if m.get('ExecInterval') is not None:
            self.exec_interval = m.get('ExecInterval')
        if m.get('MonitorItemDescription') is not None:
            self.monitor_item_description = m.get('MonitorItemDescription')
        if m.get('MonitorItemId') is not None:
            self.monitor_item_id = m.get('MonitorItemId')
        if m.get('MonitorItemName') is not None:
            self.monitor_item_name = m.get('MonitorItemName')
        self.personalized_alarm_rule_list = []
        if m.get('PersonalizedAlarmRuleList') is not None:
            for k in m.get('PersonalizedAlarmRuleList'):
                temp_model = GetMonitorItemResponseBodyMonitorItemPersonalizedAlarmRuleList()
                self.personalized_alarm_rule_list.append(temp_model.from_map(k))
        if m.get('SecurityDomain') is not None:
            self.security_domain = m.get('SecurityDomain')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        return self


class GetMonitorItemResponseBody(TeaModel):
    def __init__(self, monitor_item=None, request_id=None):
        self.monitor_item = monitor_item  # type: GetMonitorItemResponseBodyMonitorItem
        # Id of the request
        self.request_id = request_id  # type: str

    def validate(self):
        if self.monitor_item:
            self.monitor_item.validate()

    def to_map(self):
        _map = super(GetMonitorItemResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.monitor_item is not None:
            result['MonitorItem'] = self.monitor_item.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('MonitorItem') is not None:
            temp_model = GetMonitorItemResponseBodyMonitorItem()
            self.monitor_item = temp_model.from_map(m['MonitorItem'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class GetMonitorItemResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetMonitorItemResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetMonitorItemResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetMonitorItemResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetOsDownloadPathRequest(TeaModel):
    def __init__(self, instance_id=None, os_version_id=None):
        self.instance_id = instance_id  # type: str
        self.os_version_id = os_version_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetOsDownloadPathRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.os_version_id is not None:
            result['OsVersionId'] = self.os_version_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('OsVersionId') is not None:
            self.os_version_id = m.get('OsVersionId')
        return self


class GetOsDownloadPathResponseBodyOsVersion(TeaModel):
    def __init__(self, download_path=None):
        self.download_path = download_path  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetOsDownloadPathResponseBodyOsVersion, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.download_path is not None:
            result['DownloadPath'] = self.download_path
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DownloadPath') is not None:
            self.download_path = m.get('DownloadPath')
        return self


class GetOsDownloadPathResponseBody(TeaModel):
    def __init__(self, os_version=None, request_id=None):
        self.os_version = os_version  # type: GetOsDownloadPathResponseBodyOsVersion
        # Id of the request
        self.request_id = request_id  # type: str

    def validate(self):
        if self.os_version:
            self.os_version.validate()

    def to_map(self):
        _map = super(GetOsDownloadPathResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.os_version is not None:
            result['OsVersion'] = self.os_version.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OsVersion') is not None:
            temp_model = GetOsDownloadPathResponseBodyOsVersion()
            self.os_version = temp_model.from_map(m['OsVersion'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class GetOsDownloadPathResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetOsDownloadPathResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetOsDownloadPathResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetOsDownloadPathResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetOsVersionRequest(TeaModel):
    def __init__(self, instance_id=None, os_version_id=None):
        self.instance_id = instance_id  # type: str
        self.os_version_id = os_version_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetOsVersionRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.os_version_id is not None:
            result['OsVersionId'] = self.os_version_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('OsVersionId') is not None:
            self.os_version_id = m.get('OsVersionId')
        return self


class GetOsVersionResponseBodyOsVersion(TeaModel):
    def __init__(self, download_path=None):
        # 系统版本
        self.download_path = download_path  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetOsVersionResponseBodyOsVersion, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.download_path is not None:
            result['DownloadPath'] = self.download_path
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DownloadPath') is not None:
            self.download_path = m.get('DownloadPath')
        return self


class GetOsVersionResponseBody(TeaModel):
    def __init__(self, os_version=None, request_id=None):
        self.os_version = os_version  # type: list[GetOsVersionResponseBodyOsVersion]
        self.request_id = request_id  # type: str

    def validate(self):
        if self.os_version:
            for k in self.os_version:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetOsVersionResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['OsVersion'] = []
        if self.os_version is not None:
            for k in self.os_version:
                result['OsVersion'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.os_version = []
        if m.get('OsVersion') is not None:
            for k in m.get('OsVersion'):
                temp_model = GetOsVersionResponseBodyOsVersion()
                self.os_version.append(temp_model.from_map(k))
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class GetOsVersionResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetOsVersionResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetOsVersionResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetOsVersionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetOssPolicyRequest(TeaModel):
    def __init__(self, instance_id=None, name=None):
        self.instance_id = instance_id  # type: str
        self.name = name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetOssPolicyRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.name is not None:
            result['Name'] = self.name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        return self


class GetOssPolicyResponseBodyOssPolicy(TeaModel):
    def __init__(self, access_id=None, directory=None, expire_time=None, host=None, policy=None, signature=None):
        # 通行id
        self.access_id = access_id  # type: str
        # 目录
        self.directory = directory  # type: str
        # 过期时间
        self.expire_time = expire_time  # type: str
        # 主机名
        self.host = host  # type: str
        # 通行规则
        self.policy = policy  # type: str
        # 签名
        self.signature = signature  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetOssPolicyResponseBodyOssPolicy, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.access_id is not None:
            result['AccessId'] = self.access_id
        if self.directory is not None:
            result['Directory'] = self.directory
        if self.expire_time is not None:
            result['ExpireTime'] = self.expire_time
        if self.host is not None:
            result['Host'] = self.host
        if self.policy is not None:
            result['Policy'] = self.policy
        if self.signature is not None:
            result['Signature'] = self.signature
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AccessId') is not None:
            self.access_id = m.get('AccessId')
        if m.get('Directory') is not None:
            self.directory = m.get('Directory')
        if m.get('ExpireTime') is not None:
            self.expire_time = m.get('ExpireTime')
        if m.get('Host') is not None:
            self.host = m.get('Host')
        if m.get('Policy') is not None:
            self.policy = m.get('Policy')
        if m.get('Signature') is not None:
            self.signature = m.get('Signature')
        return self


class GetOssPolicyResponseBody(TeaModel):
    def __init__(self, oss_policy=None, request_id=None):
        # 资源上传规则
        self.oss_policy = oss_policy  # type: GetOssPolicyResponseBodyOssPolicy
        self.request_id = request_id  # type: str

    def validate(self):
        if self.oss_policy:
            self.oss_policy.validate()

    def to_map(self):
        _map = super(GetOssPolicyResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.oss_policy is not None:
            result['OssPolicy'] = self.oss_policy.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('OssPolicy') is not None:
            temp_model = GetOssPolicyResponseBodyOssPolicy()
            self.oss_policy = temp_model.from_map(m['OssPolicy'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class GetOssPolicyResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetOssPolicyResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetOssPolicyResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetOssPolicyResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetPhysicalSpaceRequest(TeaModel):
    def __init__(self, instance_id=None, physical_space_id=None):
        self.instance_id = instance_id  # type: str
        self.physical_space_id = physical_space_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetPhysicalSpaceRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.physical_space_id is not None:
            result['PhysicalSpaceId'] = self.physical_space_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PhysicalSpaceId') is not None:
            self.physical_space_id = m.get('PhysicalSpaceId')
        return self


class GetPhysicalSpaceResponseBodyPhysicalSpace(TeaModel):
    def __init__(self, address=None, city=None, country=None, owner=None, physical_space_id=None,
                 physical_space_name=None, province=None, remark=None, security_domain_list=None, space_abbreviation=None,
                 space_type=None):
        self.address = address  # type: str
        self.city = city  # type: str
        self.country = country  # type: str
        self.owner = owner  # type: str
        self.physical_space_id = physical_space_id  # type: str
        self.physical_space_name = physical_space_name  # type: str
        self.province = province  # type: str
        self.remark = remark  # type: str
        self.security_domain_list = security_domain_list  # type: list[str]
        self.space_abbreviation = space_abbreviation  # type: str
        self.space_type = space_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetPhysicalSpaceResponseBodyPhysicalSpace, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.address is not None:
            result['Address'] = self.address
        if self.city is not None:
            result['City'] = self.city
        if self.country is not None:
            result['Country'] = self.country
        if self.owner is not None:
            result['Owner'] = self.owner
        if self.physical_space_id is not None:
            result['PhysicalSpaceId'] = self.physical_space_id
        if self.physical_space_name is not None:
            result['PhysicalSpaceName'] = self.physical_space_name
        if self.province is not None:
            result['Province'] = self.province
        if self.remark is not None:
            result['Remark'] = self.remark
        if self.security_domain_list is not None:
            result['SecurityDomainList'] = self.security_domain_list
        if self.space_abbreviation is not None:
            result['SpaceAbbreviation'] = self.space_abbreviation
        if self.space_type is not None:
            result['SpaceType'] = self.space_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Address') is not None:
            self.address = m.get('Address')
        if m.get('City') is not None:
            self.city = m.get('City')
        if m.get('Country') is not None:
            self.country = m.get('Country')
        if m.get('Owner') is not None:
            self.owner = m.get('Owner')
        if m.get('PhysicalSpaceId') is not None:
            self.physical_space_id = m.get('PhysicalSpaceId')
        if m.get('PhysicalSpaceName') is not None:
            self.physical_space_name = m.get('PhysicalSpaceName')
        if m.get('Province') is not None:
            self.province = m.get('Province')
        if m.get('Remark') is not None:
            self.remark = m.get('Remark')
        if m.get('SecurityDomainList') is not None:
            self.security_domain_list = m.get('SecurityDomainList')
        if m.get('SpaceAbbreviation') is not None:
            self.space_abbreviation = m.get('SpaceAbbreviation')
        if m.get('SpaceType') is not None:
            self.space_type = m.get('SpaceType')
        return self


class GetPhysicalSpaceResponseBody(TeaModel):
    def __init__(self, physical_space=None, request_id=None):
        self.physical_space = physical_space  # type: GetPhysicalSpaceResponseBodyPhysicalSpace
        self.request_id = request_id  # type: str

    def validate(self):
        if self.physical_space:
            self.physical_space.validate()

    def to_map(self):
        _map = super(GetPhysicalSpaceResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.physical_space is not None:
            result['PhysicalSpace'] = self.physical_space.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('PhysicalSpace') is not None:
            temp_model = GetPhysicalSpaceResponseBodyPhysicalSpace()
            self.physical_space = temp_model.from_map(m['PhysicalSpace'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class GetPhysicalSpaceResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetPhysicalSpaceResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetPhysicalSpaceResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetPhysicalSpaceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetPhysicalSpaceTopoRequest(TeaModel):
    def __init__(self, instance_id=None, physical_space_id=None, topo_type=None):
        self.instance_id = instance_id  # type: str
        self.physical_space_id = physical_space_id  # type: str
        self.topo_type = topo_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetPhysicalSpaceTopoRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.physical_space_id is not None:
            result['PhysicalSpaceId'] = self.physical_space_id
        if self.topo_type is not None:
            result['TopoType'] = self.topo_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PhysicalSpaceId') is not None:
            self.physical_space_id = m.get('PhysicalSpaceId')
        if m.get('TopoType') is not None:
            self.topo_type = m.get('TopoType')
        return self


class GetPhysicalSpaceTopoResponseBodyTopoDataDevices(TeaModel):
    def __init__(self, device_id=None, device_role=None, host_name=None, ip=None):
        self.device_id = device_id  # type: str
        self.device_role = device_role  # type: str
        self.host_name = host_name  # type: str
        self.ip = ip  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetPhysicalSpaceTopoResponseBodyTopoDataDevices, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.device_role is not None:
            result['DeviceRole'] = self.device_role
        if self.host_name is not None:
            result['HostName'] = self.host_name
        if self.ip is not None:
            result['Ip'] = self.ip
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('DeviceRole') is not None:
            self.device_role = m.get('DeviceRole')
        if m.get('HostName') is not None:
            self.host_name = m.get('HostName')
        if m.get('Ip') is not None:
            self.ip = m.get('Ip')
        return self


class GetPhysicalSpaceTopoResponseBodyTopoDataLinks(TeaModel):
    def __init__(self, source_device_id=None, source_device_name=None, source_port=None, target_device_id=None,
                 target_device_name=None, target_port=None):
        self.source_device_id = source_device_id  # type: str
        self.source_device_name = source_device_name  # type: str
        self.source_port = source_port  # type: str
        self.target_device_id = target_device_id  # type: str
        self.target_device_name = target_device_name  # type: str
        self.target_port = target_port  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetPhysicalSpaceTopoResponseBodyTopoDataLinks, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.source_device_id is not None:
            result['SourceDeviceId'] = self.source_device_id
        if self.source_device_name is not None:
            result['SourceDeviceName'] = self.source_device_name
        if self.source_port is not None:
            result['SourcePort'] = self.source_port
        if self.target_device_id is not None:
            result['TargetDeviceId'] = self.target_device_id
        if self.target_device_name is not None:
            result['TargetDeviceName'] = self.target_device_name
        if self.target_port is not None:
            result['TargetPort'] = self.target_port
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('SourceDeviceId') is not None:
            self.source_device_id = m.get('SourceDeviceId')
        if m.get('SourceDeviceName') is not None:
            self.source_device_name = m.get('SourceDeviceName')
        if m.get('SourcePort') is not None:
            self.source_port = m.get('SourcePort')
        if m.get('TargetDeviceId') is not None:
            self.target_device_id = m.get('TargetDeviceId')
        if m.get('TargetDeviceName') is not None:
            self.target_device_name = m.get('TargetDeviceName')
        if m.get('TargetPort') is not None:
            self.target_port = m.get('TargetPort')
        return self


class GetPhysicalSpaceTopoResponseBodyTopoData(TeaModel):
    def __init__(self, devices=None, links=None, update_time=None):
        self.devices = devices  # type: list[GetPhysicalSpaceTopoResponseBodyTopoDataDevices]
        self.links = links  # type: list[GetPhysicalSpaceTopoResponseBodyTopoDataLinks]
        self.update_time = update_time  # type: str

    def validate(self):
        if self.devices:
            for k in self.devices:
                if k:
                    k.validate()
        if self.links:
            for k in self.links:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetPhysicalSpaceTopoResponseBodyTopoData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Devices'] = []
        if self.devices is not None:
            for k in self.devices:
                result['Devices'].append(k.to_map() if k else None)
        result['Links'] = []
        if self.links is not None:
            for k in self.links:
                result['Links'].append(k.to_map() if k else None)
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.devices = []
        if m.get('Devices') is not None:
            for k in m.get('Devices'):
                temp_model = GetPhysicalSpaceTopoResponseBodyTopoDataDevices()
                self.devices.append(temp_model.from_map(k))
        self.links = []
        if m.get('Links') is not None:
            for k in m.get('Links'):
                temp_model = GetPhysicalSpaceTopoResponseBodyTopoDataLinks()
                self.links.append(temp_model.from_map(k))
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        return self


class GetPhysicalSpaceTopoResponseBody(TeaModel):
    def __init__(self, request_id=None, topo_data=None):
        self.request_id = request_id  # type: str
        self.topo_data = topo_data  # type: GetPhysicalSpaceTopoResponseBodyTopoData

    def validate(self):
        if self.topo_data:
            self.topo_data.validate()

    def to_map(self):
        _map = super(GetPhysicalSpaceTopoResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.topo_data is not None:
            result['TopoData'] = self.topo_data.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('TopoData') is not None:
            temp_model = GetPhysicalSpaceTopoResponseBodyTopoData()
            self.topo_data = temp_model.from_map(m['TopoData'])
        return self


class GetPhysicalSpaceTopoResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetPhysicalSpaceTopoResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetPhysicalSpaceTopoResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetPhysicalSpaceTopoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetRealtimeTaskRequest(TeaModel):
    def __init__(self, instance_id=None, task_id=None):
        # 实例ID
        self.instance_id = instance_id  # type: str
        self.task_id = task_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetRealtimeTaskRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class GetRealtimeTaskResponseBodyInspectionTask(TeaModel):
    def __init__(self, error_code=None, inspection_message=None, inspection_result=None, task_status=None):
        self.error_code = error_code  # type: str
        self.inspection_message = inspection_message  # type: str
        self.inspection_result = inspection_result  # type: str
        self.task_status = task_status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetRealtimeTaskResponseBodyInspectionTask, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.inspection_message is not None:
            result['InspectionMessage'] = self.inspection_message
        if self.inspection_result is not None:
            result['InspectionResult'] = self.inspection_result
        if self.task_status is not None:
            result['TaskStatus'] = self.task_status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('InspectionMessage') is not None:
            self.inspection_message = m.get('InspectionMessage')
        if m.get('InspectionResult') is not None:
            self.inspection_result = m.get('InspectionResult')
        if m.get('TaskStatus') is not None:
            self.task_status = m.get('TaskStatus')
        return self


class GetRealtimeTaskResponseBody(TeaModel):
    def __init__(self, inspection_task=None, request_id=None):
        self.inspection_task = inspection_task  # type: GetRealtimeTaskResponseBodyInspectionTask
        self.request_id = request_id  # type: str

    def validate(self):
        if self.inspection_task:
            self.inspection_task.validate()

    def to_map(self):
        _map = super(GetRealtimeTaskResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.inspection_task is not None:
            result['InspectionTask'] = self.inspection_task.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InspectionTask') is not None:
            temp_model = GetRealtimeTaskResponseBodyInspectionTask()
            self.inspection_task = temp_model.from_map(m['InspectionTask'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class GetRealtimeTaskResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetRealtimeTaskResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetRealtimeTaskResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetRealtimeTaskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetScheduleWorkerRequest(TeaModel):
    def __init__(self, instance_id=None, schedule_worker_id=None):
        self.instance_id = instance_id  # type: str
        self.schedule_worker_id = schedule_worker_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetScheduleWorkerRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.schedule_worker_id is not None:
            result['ScheduleWorkerId'] = self.schedule_worker_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScheduleWorkerId') is not None:
            self.schedule_worker_id = m.get('ScheduleWorkerId')
        return self


class GetScheduleWorkerResponseBodyScheduleWorker(TeaModel):
    def __init__(self, create_time=None, schedule_worker_id=None, update_time=None, worker_contact=None,
                 worker_id=None, worker_name=None):
        # 代表创建时间的资源属性字段
        self.create_time = create_time  # type: str
        # 代表资源一级ID的资源属性字段
        self.schedule_worker_id = schedule_worker_id  # type: str
        # 更新时间
        self.update_time = update_time  # type: str
        self.worker_contact = worker_contact  # type: str
        # 值班人员工号
        self.worker_id = worker_id  # type: str
        # 值班人员姓名
        self.worker_name = worker_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetScheduleWorkerResponseBodyScheduleWorker, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.schedule_worker_id is not None:
            result['ScheduleWorkerId'] = self.schedule_worker_id
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        if self.worker_contact is not None:
            result['WorkerContact'] = self.worker_contact
        if self.worker_id is not None:
            result['WorkerId'] = self.worker_id
        if self.worker_name is not None:
            result['WorkerName'] = self.worker_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('ScheduleWorkerId') is not None:
            self.schedule_worker_id = m.get('ScheduleWorkerId')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        if m.get('WorkerContact') is not None:
            self.worker_contact = m.get('WorkerContact')
        if m.get('WorkerId') is not None:
            self.worker_id = m.get('WorkerId')
        if m.get('WorkerName') is not None:
            self.worker_name = m.get('WorkerName')
        return self


class GetScheduleWorkerResponseBody(TeaModel):
    def __init__(self, request_id=None, schedule_worker=None):
        self.request_id = request_id  # type: str
        self.schedule_worker = schedule_worker  # type: GetScheduleWorkerResponseBodyScheduleWorker

    def validate(self):
        if self.schedule_worker:
            self.schedule_worker.validate()

    def to_map(self):
        _map = super(GetScheduleWorkerResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.schedule_worker is not None:
            result['ScheduleWorker'] = self.schedule_worker.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ScheduleWorker') is not None:
            temp_model = GetScheduleWorkerResponseBodyScheduleWorker()
            self.schedule_worker = temp_model.from_map(m['ScheduleWorker'])
        return self


class GetScheduleWorkerResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetScheduleWorkerResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetScheduleWorkerResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetScheduleWorkerResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetSetupProjectRequest(TeaModel):
    def __init__(self, instance_id=None, setup_project_id=None):
        self.instance_id = instance_id  # type: str
        self.setup_project_id = setup_project_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetSetupProjectRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.setup_project_id is not None:
            result['SetupProjectId'] = self.setup_project_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('SetupProjectId') is not None:
            self.setup_project_id = m.get('SetupProjectId')
        return self


class GetSetupProjectResponseBodySetupProjectPackages(TeaModel):
    def __init__(self, device_number=None, model=None, role=None, vendor=None):
        # 设备号
        self.device_number = device_number  # type: str
        # 型号
        self.model = model  # type: str
        # 角色
        self.role = role  # type: str
        # 厂商
        self.vendor = vendor  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetSetupProjectResponseBodySetupProjectPackages, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_number is not None:
            result['DeviceNumber'] = self.device_number
        if self.model is not None:
            result['Model'] = self.model
        if self.role is not None:
            result['Role'] = self.role
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeviceNumber') is not None:
            self.device_number = m.get('DeviceNumber')
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        return self


class GetSetupProjectResponseBodySetupProject(TeaModel):
    def __init__(self, create_time=None, delivery_time=None, nodes=None, packages=None, progress=None,
                 setup_project_id=None, space_id=None, space_name=None, space_type=None):
        # 代表创建时间的资源属性字段
        self.create_time = create_time  # type: str
        # 预计交付时间
        self.delivery_time = delivery_time  # type: str
        # 节点
        self.nodes = nodes  # type: str
        # 套餐
        self.packages = packages  # type: list[GetSetupProjectResponseBodySetupProjectPackages]
        self.progress = progress  # type: str
        # 代表资源一级ID的资源属性字段
        self.setup_project_id = setup_project_id  # type: str
        # 物理空间uId
        self.space_id = space_id  # type: str
        self.space_name = space_name  # type: str
        self.space_type = space_type  # type: str

    def validate(self):
        if self.packages:
            for k in self.packages:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetSetupProjectResponseBodySetupProject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.delivery_time is not None:
            result['DeliveryTime'] = self.delivery_time
        if self.nodes is not None:
            result['Nodes'] = self.nodes
        result['Packages'] = []
        if self.packages is not None:
            for k in self.packages:
                result['Packages'].append(k.to_map() if k else None)
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.setup_project_id is not None:
            result['SetupProjectId'] = self.setup_project_id
        if self.space_id is not None:
            result['SpaceId'] = self.space_id
        if self.space_name is not None:
            result['SpaceName'] = self.space_name
        if self.space_type is not None:
            result['SpaceType'] = self.space_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('DeliveryTime') is not None:
            self.delivery_time = m.get('DeliveryTime')
        if m.get('Nodes') is not None:
            self.nodes = m.get('Nodes')
        self.packages = []
        if m.get('Packages') is not None:
            for k in m.get('Packages'):
                temp_model = GetSetupProjectResponseBodySetupProjectPackages()
                self.packages.append(temp_model.from_map(k))
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('SetupProjectId') is not None:
            self.setup_project_id = m.get('SetupProjectId')
        if m.get('SpaceId') is not None:
            self.space_id = m.get('SpaceId')
        if m.get('SpaceName') is not None:
            self.space_name = m.get('SpaceName')
        if m.get('SpaceType') is not None:
            self.space_type = m.get('SpaceType')
        return self


class GetSetupProjectResponseBody(TeaModel):
    def __init__(self, request_id=None, setup_project=None):
        self.request_id = request_id  # type: str
        self.setup_project = setup_project  # type: GetSetupProjectResponseBodySetupProject

    def validate(self):
        if self.setup_project:
            self.setup_project.validate()

    def to_map(self):
        _map = super(GetSetupProjectResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.setup_project is not None:
            result['SetupProject'] = self.setup_project.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('SetupProject') is not None:
            temp_model = GetSetupProjectResponseBodySetupProject()
            self.setup_project = temp_model.from_map(m['SetupProject'])
        return self


class GetSetupProjectResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetSetupProjectResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetSetupProjectResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetSetupProjectResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetSpaceModelRequest(TeaModel):
    def __init__(self, instance_id=None, space_model_id=None):
        self.instance_id = instance_id  # type: str
        self.space_model_id = space_model_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetSpaceModelRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.space_model_id is not None:
            result['SpaceModelId'] = self.space_model_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('SpaceModelId') is not None:
            self.space_model_id = m.get('SpaceModelId')
        return self


class GetSpaceModelResponseBodySpaceModelSort(TeaModel):
    def __init__(self, level=None, level_name=None):
        self.level = level  # type: long
        self.level_name = level_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetSpaceModelResponseBodySpaceModelSort, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.level is not None:
            result['Level'] = self.level
        if self.level_name is not None:
            result['LevelName'] = self.level_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Level') is not None:
            self.level = m.get('Level')
        if m.get('LevelName') is not None:
            self.level_name = m.get('LevelName')
        return self


class GetSpaceModelResponseBodySpaceModel(TeaModel):
    def __init__(self, create_time=None, sort=None, space_model_id=None, space_type=None, status=None,
                 update_time=None):
        # 创建时间
        self.create_time = create_time  # type: str
        # 模型实例
        self.sort = sort  # type: list[GetSpaceModelResponseBodySpaceModelSort]
        # 物理空间模型id
        self.space_model_id = space_model_id  # type: str
        # 物理空间类型
        self.space_type = space_type  # type: str
        # 模型状态
        self.status = status  # type: str
        # 更新时间
        self.update_time = update_time  # type: str

    def validate(self):
        if self.sort:
            for k in self.sort:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetSpaceModelResponseBodySpaceModel, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        result['Sort'] = []
        if self.sort is not None:
            for k in self.sort:
                result['Sort'].append(k.to_map() if k else None)
        if self.space_model_id is not None:
            result['SpaceModelId'] = self.space_model_id
        if self.space_type is not None:
            result['SpaceType'] = self.space_type
        if self.status is not None:
            result['Status'] = self.status
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        self.sort = []
        if m.get('Sort') is not None:
            for k in m.get('Sort'):
                temp_model = GetSpaceModelResponseBodySpaceModelSort()
                self.sort.append(temp_model.from_map(k))
        if m.get('SpaceModelId') is not None:
            self.space_model_id = m.get('SpaceModelId')
        if m.get('SpaceType') is not None:
            self.space_type = m.get('SpaceType')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        return self


class GetSpaceModelResponseBody(TeaModel):
    def __init__(self, request_id=None, space_model=None):
        self.request_id = request_id  # type: str
        # 物理空间模型
        self.space_model = space_model  # type: GetSpaceModelResponseBodySpaceModel

    def validate(self):
        if self.space_model:
            self.space_model.validate()

    def to_map(self):
        _map = super(GetSpaceModelResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.space_model is not None:
            result['SpaceModel'] = self.space_model.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('SpaceModel') is not None:
            temp_model = GetSpaceModelResponseBodySpaceModel()
            self.space_model = temp_model.from_map(m['SpaceModel'])
        return self


class GetSpaceModelResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetSpaceModelResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetSpaceModelResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetSpaceModelResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetSpaceModelInstanceRequest(TeaModel):
    def __init__(self, instance_id=None, operate_type=None, space_id=None, space_type=None):
        self.instance_id = instance_id  # type: str
        self.operate_type = operate_type  # type: str
        self.space_id = space_id  # type: str
        self.space_type = space_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetSpaceModelInstanceRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.operate_type is not None:
            result['OperateType'] = self.operate_type
        if self.space_id is not None:
            result['SpaceId'] = self.space_id
        if self.space_type is not None:
            result['SpaceType'] = self.space_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('OperateType') is not None:
            self.operate_type = m.get('OperateType')
        if m.get('SpaceId') is not None:
            self.space_id = m.get('SpaceId')
        if m.get('SpaceType') is not None:
            self.space_type = m.get('SpaceType')
        return self


class GetSpaceModelInstanceResponseBodySpaceModel(TeaModel):
    def __init__(self, instance=None):
        self.instance = instance  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetSpaceModelInstanceResponseBodySpaceModel, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance is not None:
            result['Instance'] = self.instance
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Instance') is not None:
            self.instance = m.get('Instance')
        return self


class GetSpaceModelInstanceResponseBody(TeaModel):
    def __init__(self, request_id=None, space_model=None):
        self.request_id = request_id  # type: str
        self.space_model = space_model  # type: GetSpaceModelInstanceResponseBodySpaceModel

    def validate(self):
        if self.space_model:
            self.space_model.validate()

    def to_map(self):
        _map = super(GetSpaceModelInstanceResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.space_model is not None:
            result['SpaceModel'] = self.space_model.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('SpaceModel') is not None:
            temp_model = GetSpaceModelInstanceResponseBodySpaceModel()
            self.space_model = temp_model.from_map(m['SpaceModel'])
        return self


class GetSpaceModelInstanceResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetSpaceModelInstanceResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetSpaceModelInstanceResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetSpaceModelInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetSpaceModelSortRequest(TeaModel):
    def __init__(self, instance_id=None, operate_type=None, space_type=None):
        self.instance_id = instance_id  # type: str
        self.operate_type = operate_type  # type: str
        self.space_type = space_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetSpaceModelSortRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.operate_type is not None:
            result['OperateType'] = self.operate_type
        if self.space_type is not None:
            result['SpaceType'] = self.space_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('OperateType') is not None:
            self.operate_type = m.get('OperateType')
        if m.get('SpaceType') is not None:
            self.space_type = m.get('SpaceType')
        return self


class GetSpaceModelSortResponseBodySpaceModel(TeaModel):
    def __init__(self, level=None, level_name=None):
        self.level = level  # type: long
        self.level_name = level_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetSpaceModelSortResponseBodySpaceModel, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.level is not None:
            result['Level'] = self.level
        if self.level_name is not None:
            result['LevelName'] = self.level_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Level') is not None:
            self.level = m.get('Level')
        if m.get('LevelName') is not None:
            self.level_name = m.get('LevelName')
        return self


class GetSpaceModelSortResponseBody(TeaModel):
    def __init__(self, request_id=None, space_model=None):
        self.request_id = request_id  # type: str
        self.space_model = space_model  # type: list[GetSpaceModelSortResponseBodySpaceModel]

    def validate(self):
        if self.space_model:
            for k in self.space_model:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GetSpaceModelSortResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['SpaceModel'] = []
        if self.space_model is not None:
            for k in self.space_model:
                result['SpaceModel'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.space_model = []
        if m.get('SpaceModel') is not None:
            for k in m.get('SpaceModel'):
                temp_model = GetSpaceModelSortResponseBodySpaceModel()
                self.space_model.append(temp_model.from_map(k))
        return self


class GetSpaceModelSortResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetSpaceModelSortResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetSpaceModelSortResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetSpaceModelSortResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetTaskRequest(TeaModel):
    def __init__(self, instance_id=None, task_id=None):
        self.instance_id = instance_id  # type: str
        self.task_id = task_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetTaskRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class GetTaskResponseBodyTask(TeaModel):
    def __init__(self, category=None, create_time=None, params=None, response_code=None, result=None, status=None,
                 task_id=None, template_id=None, template_name=None, update_time=None):
        self.category = category  # type: str
        self.create_time = create_time  # type: str
        self.params = params  # type: str
        self.response_code = response_code  # type: str
        self.result = result  # type: str
        self.status = status  # type: str
        self.task_id = task_id  # type: str
        self.template_id = template_id  # type: str
        self.template_name = template_name  # type: str
        self.update_time = update_time  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GetTaskResponseBodyTask, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['Category'] = self.category
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.params is not None:
            result['Params'] = self.params
        if self.response_code is not None:
            result['ResponseCode'] = self.response_code
        if self.result is not None:
            result['Result'] = self.result
        if self.status is not None:
            result['Status'] = self.status
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.template_id is not None:
            result['TemplateId'] = self.template_id
        if self.template_name is not None:
            result['TemplateName'] = self.template_name
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Params') is not None:
            self.params = m.get('Params')
        if m.get('ResponseCode') is not None:
            self.response_code = m.get('ResponseCode')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('TemplateId') is not None:
            self.template_id = m.get('TemplateId')
        if m.get('TemplateName') is not None:
            self.template_name = m.get('TemplateName')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        return self


class GetTaskResponseBody(TeaModel):
    def __init__(self, request_id=None, task=None):
        self.request_id = request_id  # type: str
        self.task = task  # type: GetTaskResponseBodyTask

    def validate(self):
        if self.task:
            self.task.validate()

    def to_map(self):
        _map = super(GetTaskResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.task is not None:
            result['Task'] = self.task.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Task') is not None:
            temp_model = GetTaskResponseBodyTask()
            self.task = temp_model.from_map(m['Task'])
        return self


class GetTaskResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GetTaskResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GetTaskResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetTaskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListAlarmStatusRequest(TeaModel):
    def __init__(self, aggregate_data_name=None, city=None, country=None, dedicated_line_id=None,
                 dedicated_line_name=None, device_form=None, device_id=None, domain=None, host_name=None, instance_id=None,
                 manufacturer=None, max_results=None, model=None, monitor_item_id=None, next_token=None, physical_space_id=None,
                 port_collection_id=None, port_collection_name=None, province=None, region=None, role=None, security_domain=None,
                 service_status=None, space=None, space_type=None, status=None, type=None, unique_key=None):
        self.aggregate_data_name = aggregate_data_name  # type: str
        self.city = city  # type: str
        self.country = country  # type: str
        self.dedicated_line_id = dedicated_line_id  # type: str
        self.dedicated_line_name = dedicated_line_name  # type: str
        self.device_form = device_form  # type: str
        self.device_id = device_id  # type: str
        self.domain = domain  # type: str
        self.host_name = host_name  # type: str
        self.instance_id = instance_id  # type: str
        self.manufacturer = manufacturer  # type: str
        self.max_results = max_results  # type: int
        self.model = model  # type: str
        self.monitor_item_id = monitor_item_id  # type: str
        self.next_token = next_token  # type: str
        self.physical_space_id = physical_space_id  # type: str
        self.port_collection_id = port_collection_id  # type: str
        self.port_collection_name = port_collection_name  # type: str
        self.province = province  # type: str
        self.region = region  # type: str
        self.role = role  # type: str
        self.security_domain = security_domain  # type: str
        self.service_status = service_status  # type: str
        self.space = space  # type: str
        self.space_type = space_type  # type: str
        self.status = status  # type: str
        self.type = type  # type: str
        self.unique_key = unique_key  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListAlarmStatusRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aggregate_data_name is not None:
            result['AggregateDataName'] = self.aggregate_data_name
        if self.city is not None:
            result['City'] = self.city
        if self.country is not None:
            result['Country'] = self.country
        if self.dedicated_line_id is not None:
            result['DedicatedLineId'] = self.dedicated_line_id
        if self.dedicated_line_name is not None:
            result['DedicatedLineName'] = self.dedicated_line_name
        if self.device_form is not None:
            result['DeviceForm'] = self.device_form
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.domain is not None:
            result['Domain'] = self.domain
        if self.host_name is not None:
            result['HostName'] = self.host_name
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.manufacturer is not None:
            result['Manufacturer'] = self.manufacturer
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.model is not None:
            result['Model'] = self.model
        if self.monitor_item_id is not None:
            result['MonitorItemId'] = self.monitor_item_id
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.physical_space_id is not None:
            result['PhysicalSpaceId'] = self.physical_space_id
        if self.port_collection_id is not None:
            result['PortCollectionId'] = self.port_collection_id
        if self.port_collection_name is not None:
            result['PortCollectionName'] = self.port_collection_name
        if self.province is not None:
            result['Province'] = self.province
        if self.region is not None:
            result['Region'] = self.region
        if self.role is not None:
            result['Role'] = self.role
        if self.security_domain is not None:
            result['SecurityDomain'] = self.security_domain
        if self.service_status is not None:
            result['ServiceStatus'] = self.service_status
        if self.space is not None:
            result['Space'] = self.space
        if self.space_type is not None:
            result['SpaceType'] = self.space_type
        if self.status is not None:
            result['Status'] = self.status
        if self.type is not None:
            result['Type'] = self.type
        if self.unique_key is not None:
            result['UniqueKey'] = self.unique_key
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AggregateDataName') is not None:
            self.aggregate_data_name = m.get('AggregateDataName')
        if m.get('City') is not None:
            self.city = m.get('City')
        if m.get('Country') is not None:
            self.country = m.get('Country')
        if m.get('DedicatedLineId') is not None:
            self.dedicated_line_id = m.get('DedicatedLineId')
        if m.get('DedicatedLineName') is not None:
            self.dedicated_line_name = m.get('DedicatedLineName')
        if m.get('DeviceForm') is not None:
            self.device_form = m.get('DeviceForm')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('Domain') is not None:
            self.domain = m.get('Domain')
        if m.get('HostName') is not None:
            self.host_name = m.get('HostName')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Manufacturer') is not None:
            self.manufacturer = m.get('Manufacturer')
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('MonitorItemId') is not None:
            self.monitor_item_id = m.get('MonitorItemId')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('PhysicalSpaceId') is not None:
            self.physical_space_id = m.get('PhysicalSpaceId')
        if m.get('PortCollectionId') is not None:
            self.port_collection_id = m.get('PortCollectionId')
        if m.get('PortCollectionName') is not None:
            self.port_collection_name = m.get('PortCollectionName')
        if m.get('Province') is not None:
            self.province = m.get('Province')
        if m.get('Region') is not None:
            self.region = m.get('Region')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('SecurityDomain') is not None:
            self.security_domain = m.get('SecurityDomain')
        if m.get('ServiceStatus') is not None:
            self.service_status = m.get('ServiceStatus')
        if m.get('Space') is not None:
            self.space = m.get('Space')
        if m.get('SpaceType') is not None:
            self.space_type = m.get('SpaceType')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('UniqueKey') is not None:
            self.unique_key = m.get('UniqueKey')
        return self


class ListAlarmStatusResponseBodyAlarmStatusAggregateData(TeaModel):
    def __init__(self, aggregate_data_name=None, data_item=None):
        self.aggregate_data_name = aggregate_data_name  # type: str
        self.data_item = data_item  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListAlarmStatusResponseBodyAlarmStatusAggregateData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aggregate_data_name is not None:
            result['AggregateDataName'] = self.aggregate_data_name
        if self.data_item is not None:
            result['DataItem'] = self.data_item
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AggregateDataName') is not None:
            self.aggregate_data_name = m.get('AggregateDataName')
        if m.get('DataItem') is not None:
            self.data_item = m.get('DataItem')
        return self


class ListAlarmStatusResponseBodyAlarmStatusDedicatedLine(TeaModel):
    def __init__(self, dedicated_line_name=None, physical_space=None):
        self.dedicated_line_name = dedicated_line_name  # type: str
        self.physical_space = physical_space  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListAlarmStatusResponseBodyAlarmStatusDedicatedLine, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dedicated_line_name is not None:
            result['DedicatedLineName'] = self.dedicated_line_name
        if self.physical_space is not None:
            result['PhysicalSpace'] = self.physical_space
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DedicatedLineName') is not None:
            self.dedicated_line_name = m.get('DedicatedLineName')
        if m.get('PhysicalSpace') is not None:
            self.physical_space = m.get('PhysicalSpace')
        return self


class ListAlarmStatusResponseBodyAlarmStatusMonitorItem(TeaModel):
    def __init__(self, collection_type=None, monitor_item_description=None, monitor_item_name=None):
        self.collection_type = collection_type  # type: str
        self.monitor_item_description = monitor_item_description  # type: str
        self.monitor_item_name = monitor_item_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListAlarmStatusResponseBodyAlarmStatusMonitorItem, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.collection_type is not None:
            result['CollectionType'] = self.collection_type
        if self.monitor_item_description is not None:
            result['MonitorItemDescription'] = self.monitor_item_description
        if self.monitor_item_name is not None:
            result['MonitorItemName'] = self.monitor_item_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CollectionType') is not None:
            self.collection_type = m.get('CollectionType')
        if m.get('MonitorItemDescription') is not None:
            self.monitor_item_description = m.get('MonitorItemDescription')
        if m.get('MonitorItemName') is not None:
            self.monitor_item_name = m.get('MonitorItemName')
        return self


class ListAlarmStatusResponseBodyAlarmStatusNotificationSwitch(TeaModel):
    def __init__(self, expiry_time=None, reason=None):
        self.expiry_time = expiry_time  # type: str
        self.reason = reason  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListAlarmStatusResponseBodyAlarmStatusNotificationSwitch, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.expiry_time is not None:
            result['ExpiryTime'] = self.expiry_time
        if self.reason is not None:
            result['Reason'] = self.reason
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ExpiryTime') is not None:
            self.expiry_time = m.get('ExpiryTime')
        if m.get('Reason') is not None:
            self.reason = m.get('Reason')
        return self


class ListAlarmStatusResponseBodyAlarmStatusPortCollection(TeaModel):
    def __init__(self, port_collection_name=None):
        self.port_collection_name = port_collection_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListAlarmStatusResponseBodyAlarmStatusPortCollection, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.port_collection_name is not None:
            result['PortCollectionName'] = self.port_collection_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('PortCollectionName') is not None:
            self.port_collection_name = m.get('PortCollectionName')
        return self


class ListAlarmStatusResponseBodyAlarmStatusResourceApp(TeaModel):
    def __init__(self, app_id=None, domain=None, port=None, security_domain=None, type=None):
        self.app_id = app_id  # type: str
        self.domain = domain  # type: str
        self.port = port  # type: str
        self.security_domain = security_domain  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListAlarmStatusResponseBodyAlarmStatusResourceApp, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.domain is not None:
            result['Domain'] = self.domain
        if self.port is not None:
            result['Port'] = self.port
        if self.security_domain is not None:
            result['SecurityDomain'] = self.security_domain
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('Domain') is not None:
            self.domain = m.get('Domain')
        if m.get('Port') is not None:
            self.port = m.get('Port')
        if m.get('SecurityDomain') is not None:
            self.security_domain = m.get('SecurityDomain')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class ListAlarmStatusResponseBodyAlarmStatusResourceDevice(TeaModel):
    def __init__(self, city=None, device_form=None, host_name=None, physical_space=None):
        self.city = city  # type: str
        self.device_form = device_form  # type: str
        self.host_name = host_name  # type: str
        self.physical_space = physical_space  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListAlarmStatusResponseBodyAlarmStatusResourceDevice, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.city is not None:
            result['City'] = self.city
        if self.device_form is not None:
            result['DeviceForm'] = self.device_form
        if self.host_name is not None:
            result['HostName'] = self.host_name
        if self.physical_space is not None:
            result['PhysicalSpace'] = self.physical_space
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('City') is not None:
            self.city = m.get('City')
        if m.get('DeviceForm') is not None:
            self.device_form = m.get('DeviceForm')
        if m.get('HostName') is not None:
            self.host_name = m.get('HostName')
        if m.get('PhysicalSpace') is not None:
            self.physical_space = m.get('PhysicalSpace')
        return self


class ListAlarmStatusResponseBodyAlarmStatus(TeaModel):
    def __init__(self, abnormal_data_item=None, agent_ip=None, aggregate_data=None, aggregate_data_id=None,
                 alarm_rule=None, alarm_status=None, app_id=None, collection_time=None, dedicated_line=None,
                 dedicated_line_id=None, device_id=None, first_abnormal_time=None, monitor_item=None, monitor_item_id=None,
                 notification_switch=None, port_collection=None, port_collection_id=None, receive_time=None, resource_app=None,
                 resource_device=None, response_code=None, result=None, unique_key=None):
        self.abnormal_data_item = abnormal_data_item  # type: str
        self.agent_ip = agent_ip  # type: str
        self.aggregate_data = aggregate_data  # type: ListAlarmStatusResponseBodyAlarmStatusAggregateData
        self.aggregate_data_id = aggregate_data_id  # type: str
        self.alarm_rule = alarm_rule  # type: str
        self.alarm_status = alarm_status  # type: str
        self.app_id = app_id  # type: str
        self.collection_time = collection_time  # type: str
        self.dedicated_line = dedicated_line  # type: ListAlarmStatusResponseBodyAlarmStatusDedicatedLine
        self.dedicated_line_id = dedicated_line_id  # type: str
        self.device_id = device_id  # type: str
        self.first_abnormal_time = first_abnormal_time  # type: str
        self.monitor_item = monitor_item  # type: ListAlarmStatusResponseBodyAlarmStatusMonitorItem
        self.monitor_item_id = monitor_item_id  # type: str
        self.notification_switch = notification_switch  # type: ListAlarmStatusResponseBodyAlarmStatusNotificationSwitch
        self.port_collection = port_collection  # type: ListAlarmStatusResponseBodyAlarmStatusPortCollection
        self.port_collection_id = port_collection_id  # type: str
        self.receive_time = receive_time  # type: str
        self.resource_app = resource_app  # type: ListAlarmStatusResponseBodyAlarmStatusResourceApp
        self.resource_device = resource_device  # type: ListAlarmStatusResponseBodyAlarmStatusResourceDevice
        self.response_code = response_code  # type: str
        self.result = result  # type: str
        self.unique_key = unique_key  # type: str

    def validate(self):
        if self.aggregate_data:
            self.aggregate_data.validate()
        if self.dedicated_line:
            self.dedicated_line.validate()
        if self.monitor_item:
            self.monitor_item.validate()
        if self.notification_switch:
            self.notification_switch.validate()
        if self.port_collection:
            self.port_collection.validate()
        if self.resource_app:
            self.resource_app.validate()
        if self.resource_device:
            self.resource_device.validate()

    def to_map(self):
        _map = super(ListAlarmStatusResponseBodyAlarmStatus, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.abnormal_data_item is not None:
            result['AbnormalDataItem'] = self.abnormal_data_item
        if self.agent_ip is not None:
            result['AgentIp'] = self.agent_ip
        if self.aggregate_data is not None:
            result['AggregateData'] = self.aggregate_data.to_map()
        if self.aggregate_data_id is not None:
            result['AggregateDataId'] = self.aggregate_data_id
        if self.alarm_rule is not None:
            result['AlarmRule'] = self.alarm_rule
        if self.alarm_status is not None:
            result['AlarmStatus'] = self.alarm_status
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.collection_time is not None:
            result['CollectionTime'] = self.collection_time
        if self.dedicated_line is not None:
            result['DedicatedLine'] = self.dedicated_line.to_map()
        if self.dedicated_line_id is not None:
            result['DedicatedLineId'] = self.dedicated_line_id
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.first_abnormal_time is not None:
            result['FirstAbnormalTime'] = self.first_abnormal_time
        if self.monitor_item is not None:
            result['MonitorItem'] = self.monitor_item.to_map()
        if self.monitor_item_id is not None:
            result['MonitorItemId'] = self.monitor_item_id
        if self.notification_switch is not None:
            result['NotificationSwitch'] = self.notification_switch.to_map()
        if self.port_collection is not None:
            result['PortCollection'] = self.port_collection.to_map()
        if self.port_collection_id is not None:
            result['PortCollectionId'] = self.port_collection_id
        if self.receive_time is not None:
            result['ReceiveTime'] = self.receive_time
        if self.resource_app is not None:
            result['ResourceApp'] = self.resource_app.to_map()
        if self.resource_device is not None:
            result['ResourceDevice'] = self.resource_device.to_map()
        if self.response_code is not None:
            result['ResponseCode'] = self.response_code
        if self.result is not None:
            result['Result'] = self.result
        if self.unique_key is not None:
            result['UniqueKey'] = self.unique_key
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AbnormalDataItem') is not None:
            self.abnormal_data_item = m.get('AbnormalDataItem')
        if m.get('AgentIp') is not None:
            self.agent_ip = m.get('AgentIp')
        if m.get('AggregateData') is not None:
            temp_model = ListAlarmStatusResponseBodyAlarmStatusAggregateData()
            self.aggregate_data = temp_model.from_map(m['AggregateData'])
        if m.get('AggregateDataId') is not None:
            self.aggregate_data_id = m.get('AggregateDataId')
        if m.get('AlarmRule') is not None:
            self.alarm_rule = m.get('AlarmRule')
        if m.get('AlarmStatus') is not None:
            self.alarm_status = m.get('AlarmStatus')
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('CollectionTime') is not None:
            self.collection_time = m.get('CollectionTime')
        if m.get('DedicatedLine') is not None:
            temp_model = ListAlarmStatusResponseBodyAlarmStatusDedicatedLine()
            self.dedicated_line = temp_model.from_map(m['DedicatedLine'])
        if m.get('DedicatedLineId') is not None:
            self.dedicated_line_id = m.get('DedicatedLineId')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('FirstAbnormalTime') is not None:
            self.first_abnormal_time = m.get('FirstAbnormalTime')
        if m.get('MonitorItem') is not None:
            temp_model = ListAlarmStatusResponseBodyAlarmStatusMonitorItem()
            self.monitor_item = temp_model.from_map(m['MonitorItem'])
        if m.get('MonitorItemId') is not None:
            self.monitor_item_id = m.get('MonitorItemId')
        if m.get('NotificationSwitch') is not None:
            temp_model = ListAlarmStatusResponseBodyAlarmStatusNotificationSwitch()
            self.notification_switch = temp_model.from_map(m['NotificationSwitch'])
        if m.get('PortCollection') is not None:
            temp_model = ListAlarmStatusResponseBodyAlarmStatusPortCollection()
            self.port_collection = temp_model.from_map(m['PortCollection'])
        if m.get('PortCollectionId') is not None:
            self.port_collection_id = m.get('PortCollectionId')
        if m.get('ReceiveTime') is not None:
            self.receive_time = m.get('ReceiveTime')
        if m.get('ResourceApp') is not None:
            temp_model = ListAlarmStatusResponseBodyAlarmStatusResourceApp()
            self.resource_app = temp_model.from_map(m['ResourceApp'])
        if m.get('ResourceDevice') is not None:
            temp_model = ListAlarmStatusResponseBodyAlarmStatusResourceDevice()
            self.resource_device = temp_model.from_map(m['ResourceDevice'])
        if m.get('ResponseCode') is not None:
            self.response_code = m.get('ResponseCode')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        if m.get('UniqueKey') is not None:
            self.unique_key = m.get('UniqueKey')
        return self


class ListAlarmStatusResponseBodyStatistics(TeaModel):
    def __init__(self, count=None, status=None):
        self.count = count  # type: long
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListAlarmStatusResponseBodyStatistics, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.count is not None:
            result['Count'] = self.count
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Count') is not None:
            self.count = m.get('Count')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class ListAlarmStatusResponseBody(TeaModel):
    def __init__(self, alarm_status=None, max_results=None, next_token=None, request_id=None, statistics=None,
                 total_count=None):
        self.alarm_status = alarm_status  # type: list[ListAlarmStatusResponseBodyAlarmStatus]
        self.max_results = max_results  # type: int
        self.next_token = next_token  # type: str
        self.request_id = request_id  # type: str
        self.statistics = statistics  # type: list[ListAlarmStatusResponseBodyStatistics]
        self.total_count = total_count  # type: int

    def validate(self):
        if self.alarm_status:
            for k in self.alarm_status:
                if k:
                    k.validate()
        if self.statistics:
            for k in self.statistics:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListAlarmStatusResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AlarmStatus'] = []
        if self.alarm_status is not None:
            for k in self.alarm_status:
                result['AlarmStatus'].append(k.to_map() if k else None)
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Statistics'] = []
        if self.statistics is not None:
            for k in self.statistics:
                result['Statistics'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.alarm_status = []
        if m.get('AlarmStatus') is not None:
            for k in m.get('AlarmStatus'):
                temp_model = ListAlarmStatusResponseBodyAlarmStatus()
                self.alarm_status.append(temp_model.from_map(k))
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.statistics = []
        if m.get('Statistics') is not None:
            for k in m.get('Statistics'):
                temp_model = ListAlarmStatusResponseBodyStatistics()
                self.statistics.append(temp_model.from_map(k))
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListAlarmStatusResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListAlarmStatusResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListAlarmStatusResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListAlarmStatusResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListAlarmStatusHistoriesRequest(TeaModel):
    def __init__(self, aggregate_data_id=None, app_id=None, dedicated_line_id=None, device_id=None, end=None,
                 instance_id=None, monitor_item_id=None, port_collection_id=None, start=None, type=None):
        self.aggregate_data_id = aggregate_data_id  # type: str
        self.app_id = app_id  # type: str
        self.dedicated_line_id = dedicated_line_id  # type: str
        self.device_id = device_id  # type: str
        self.end = end  # type: long
        self.instance_id = instance_id  # type: str
        self.monitor_item_id = monitor_item_id  # type: str
        self.port_collection_id = port_collection_id  # type: str
        self.start = start  # type: long
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListAlarmStatusHistoriesRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aggregate_data_id is not None:
            result['AggregateDataId'] = self.aggregate_data_id
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.dedicated_line_id is not None:
            result['DedicatedLineId'] = self.dedicated_line_id
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.end is not None:
            result['End'] = self.end
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.monitor_item_id is not None:
            result['MonitorItemId'] = self.monitor_item_id
        if self.port_collection_id is not None:
            result['PortCollectionId'] = self.port_collection_id
        if self.start is not None:
            result['Start'] = self.start
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AggregateDataId') is not None:
            self.aggregate_data_id = m.get('AggregateDataId')
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('DedicatedLineId') is not None:
            self.dedicated_line_id = m.get('DedicatedLineId')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('End') is not None:
            self.end = m.get('End')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('MonitorItemId') is not None:
            self.monitor_item_id = m.get('MonitorItemId')
        if m.get('PortCollectionId') is not None:
            self.port_collection_id = m.get('PortCollectionId')
        if m.get('Start') is not None:
            self.start = m.get('Start')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class ListAlarmStatusHistoriesResponseBodyAlarmStatusHistories(TeaModel):
    def __init__(self, timestamp=None, value=None):
        self.timestamp = timestamp  # type: long
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListAlarmStatusHistoriesResponseBodyAlarmStatusHistories, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.timestamp is not None:
            result['Timestamp'] = self.timestamp
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Timestamp') is not None:
            self.timestamp = m.get('Timestamp')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListAlarmStatusHistoriesResponseBody(TeaModel):
    def __init__(self, alarm_status_histories=None, request_id=None):
        self.alarm_status_histories = alarm_status_histories  # type: list[ListAlarmStatusHistoriesResponseBodyAlarmStatusHistories]
        self.request_id = request_id  # type: str

    def validate(self):
        if self.alarm_status_histories:
            for k in self.alarm_status_histories:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListAlarmStatusHistoriesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['AlarmStatusHistories'] = []
        if self.alarm_status_histories is not None:
            for k in self.alarm_status_histories:
                result['AlarmStatusHistories'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.alarm_status_histories = []
        if m.get('AlarmStatusHistories') is not None:
            for k in m.get('AlarmStatusHistories'):
                temp_model = ListAlarmStatusHistoriesResponseBodyAlarmStatusHistories()
                self.alarm_status_histories.append(temp_model.from_map(k))
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class ListAlarmStatusHistoriesResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListAlarmStatusHistoriesResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListAlarmStatusHistoriesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListAlarmStatusHistoriesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListAlarmStatusStatisticsRequest(TeaModel):
    def __init__(self, alarm_status=None, instance_id=None, max_results=None, next_token=None,
                 physical_space_id=None, security_domain=None, type=None):
        self.alarm_status = alarm_status  # type: str
        self.instance_id = instance_id  # type: str
        self.max_results = max_results  # type: int
        self.next_token = next_token  # type: str
        self.physical_space_id = physical_space_id  # type: str
        self.security_domain = security_domain  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListAlarmStatusStatisticsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alarm_status is not None:
            result['AlarmStatus'] = self.alarm_status
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.physical_space_id is not None:
            result['PhysicalSpaceId'] = self.physical_space_id
        if self.security_domain is not None:
            result['SecurityDomain'] = self.security_domain
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AlarmStatus') is not None:
            self.alarm_status = m.get('AlarmStatus')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('PhysicalSpaceId') is not None:
            self.physical_space_id = m.get('PhysicalSpaceId')
        if m.get('SecurityDomain') is not None:
            self.security_domain = m.get('SecurityDomain')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class ListAlarmStatusStatisticsResponseBodyStatistics(TeaModel):
    def __init__(self, count=None, name=None, resource_id=None):
        self.count = count  # type: long
        self.name = name  # type: str
        self.resource_id = resource_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListAlarmStatusStatisticsResponseBodyStatistics, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.count is not None:
            result['Count'] = self.count
        if self.name is not None:
            result['Name'] = self.name
        if self.resource_id is not None:
            result['ResourceId'] = self.resource_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Count') is not None:
            self.count = m.get('Count')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('ResourceId') is not None:
            self.resource_id = m.get('ResourceId')
        return self


class ListAlarmStatusStatisticsResponseBody(TeaModel):
    def __init__(self, max_results=None, next_token=None, request_id=None, statistics=None, total_count=None):
        self.max_results = max_results  # type: int
        self.next_token = next_token  # type: str
        self.request_id = request_id  # type: str
        self.statistics = statistics  # type: list[ListAlarmStatusStatisticsResponseBodyStatistics]
        self.total_count = total_count  # type: int

    def validate(self):
        if self.statistics:
            for k in self.statistics:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListAlarmStatusStatisticsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Statistics'] = []
        if self.statistics is not None:
            for k in self.statistics:
                result['Statistics'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.statistics = []
        if m.get('Statistics') is not None:
            for k in m.get('Statistics'):
                temp_model = ListAlarmStatusStatisticsResponseBodyStatistics()
                self.statistics.append(temp_model.from_map(k))
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListAlarmStatusStatisticsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListAlarmStatusStatisticsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListAlarmStatusStatisticsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListAlarmStatusStatisticsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListArchitectureAttributeRequest(TeaModel):
    def __init__(self, architecture_id=None, instance_id=None, role=None, vendor=None):
        self.architecture_id = architecture_id  # type: str
        self.instance_id = instance_id  # type: str
        self.role = role  # type: str
        self.vendor = vendor  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListArchitectureAttributeRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.architecture_id is not None:
            result['ArchitectureId'] = self.architecture_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.role is not None:
            result['Role'] = self.role
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ArchitectureId') is not None:
            self.architecture_id = m.get('ArchitectureId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        return self


class ListArchitectureAttributeResponseBodyArchitecture(TeaModel):
    def __init__(self, model=None, role=None, vendor=None):
        self.model = model  # type: list[str]
        self.role = role  # type: list[str]
        self.vendor = vendor  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListArchitectureAttributeResponseBodyArchitecture, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.model is not None:
            result['Model'] = self.model
        if self.role is not None:
            result['Role'] = self.role
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        return self


class ListArchitectureAttributeResponseBody(TeaModel):
    def __init__(self, architecture=None, request_id=None):
        self.architecture = architecture  # type: list[ListArchitectureAttributeResponseBodyArchitecture]
        self.request_id = request_id  # type: str

    def validate(self):
        if self.architecture:
            for k in self.architecture:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListArchitectureAttributeResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Architecture'] = []
        if self.architecture is not None:
            for k in self.architecture:
                result['Architecture'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.architecture = []
        if m.get('Architecture') is not None:
            for k in m.get('Architecture'):
                temp_model = ListArchitectureAttributeResponseBodyArchitecture()
                self.architecture.append(temp_model.from_map(k))
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class ListArchitectureAttributeResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListArchitectureAttributeResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListArchitectureAttributeResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListArchitectureAttributeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListConfigurationSpecificationsRequest(TeaModel):
    def __init__(self, architecture=None, instance_id=None, max_results=None, model=None, next_token=None, role=None,
                 specification_name=None, vendor=None):
        self.architecture = architecture  # type: str
        self.instance_id = instance_id  # type: str
        self.max_results = max_results  # type: int
        self.model = model  # type: str
        self.next_token = next_token  # type: str
        self.role = role  # type: str
        self.specification_name = specification_name  # type: str
        self.vendor = vendor  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListConfigurationSpecificationsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.architecture is not None:
            result['Architecture'] = self.architecture
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.model is not None:
            result['Model'] = self.model
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.role is not None:
            result['Role'] = self.role
        if self.specification_name is not None:
            result['SpecificationName'] = self.specification_name
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Architecture') is not None:
            self.architecture = m.get('Architecture')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('SpecificationName') is not None:
            self.specification_name = m.get('SpecificationName')
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        return self


class ListConfigurationSpecificationsResponseBodyConfigurationSpecification(TeaModel):
    def __init__(self, architecture=None, configuration_specification_id=None, create_time=None, model=None,
                 related_variate=None, role=None, specification_content=None, specification_name=None, update_time=None,
                 vendor=None):
        self.architecture = architecture  # type: str
        self.configuration_specification_id = configuration_specification_id  # type: str
        # 代表创建时间的资源属性字段
        self.create_time = create_time  # type: str
        self.model = model  # type: str
        self.related_variate = related_variate  # type: list[str]
        self.role = role  # type: str
        self.specification_content = specification_content  # type: str
        self.specification_name = specification_name  # type: str
        self.update_time = update_time  # type: str
        self.vendor = vendor  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListConfigurationSpecificationsResponseBodyConfigurationSpecification, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.architecture is not None:
            result['Architecture'] = self.architecture
        if self.configuration_specification_id is not None:
            result['ConfigurationSpecificationId'] = self.configuration_specification_id
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.model is not None:
            result['Model'] = self.model
        if self.related_variate is not None:
            result['RelatedVariate'] = self.related_variate
        if self.role is not None:
            result['Role'] = self.role
        if self.specification_content is not None:
            result['SpecificationContent'] = self.specification_content
        if self.specification_name is not None:
            result['SpecificationName'] = self.specification_name
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Architecture') is not None:
            self.architecture = m.get('Architecture')
        if m.get('ConfigurationSpecificationId') is not None:
            self.configuration_specification_id = m.get('ConfigurationSpecificationId')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('RelatedVariate') is not None:
            self.related_variate = m.get('RelatedVariate')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('SpecificationContent') is not None:
            self.specification_content = m.get('SpecificationContent')
        if m.get('SpecificationName') is not None:
            self.specification_name = m.get('SpecificationName')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        return self


class ListConfigurationSpecificationsResponseBody(TeaModel):
    def __init__(self, configuration_specification=None, max_results=None, next_token=None, request_id=None,
                 total_count=None):
        self.configuration_specification = configuration_specification  # type: list[ListConfigurationSpecificationsResponseBodyConfigurationSpecification]
        self.max_results = max_results  # type: long
        self.next_token = next_token  # type: int
        self.request_id = request_id  # type: str
        self.total_count = total_count  # type: int

    def validate(self):
        if self.configuration_specification:
            for k in self.configuration_specification:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListConfigurationSpecificationsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['ConfigurationSpecification'] = []
        if self.configuration_specification is not None:
            for k in self.configuration_specification:
                result['ConfigurationSpecification'].append(k.to_map() if k else None)
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.configuration_specification = []
        if m.get('ConfigurationSpecification') is not None:
            for k in m.get('ConfigurationSpecification'):
                temp_model = ListConfigurationSpecificationsResponseBodyConfigurationSpecification()
                self.configuration_specification.append(temp_model.from_map(k))
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListConfigurationSpecificationsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListConfigurationSpecificationsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListConfigurationSpecificationsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListConfigurationSpecificationsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListConfigurationVariateRequest(TeaModel):
    def __init__(self, instance_id=None, max_results=None, next_token=None, variate_name=None):
        self.instance_id = instance_id  # type: str
        self.max_results = max_results  # type: int
        self.next_token = next_token  # type: str
        self.variate_name = variate_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListConfigurationVariateRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.variate_name is not None:
            result['VariateName'] = self.variate_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('VariateName') is not None:
            self.variate_name = m.get('VariateName')
        return self


class ListConfigurationVariateResponseBodyConfigurationVariate(TeaModel):
    def __init__(self, comment=None, configuration_variate_id=None, create_time=None, format_function=None,
                 update_time=None, variate_name=None):
        self.comment = comment  # type: str
        self.configuration_variate_id = configuration_variate_id  # type: str
        # 代表创建时间的资源属性字段
        self.create_time = create_time  # type: str
        self.format_function = format_function  # type: str
        self.update_time = update_time  # type: str
        self.variate_name = variate_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListConfigurationVariateResponseBodyConfigurationVariate, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.comment is not None:
            result['Comment'] = self.comment
        if self.configuration_variate_id is not None:
            result['ConfigurationVariateId'] = self.configuration_variate_id
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.format_function is not None:
            result['FormatFunction'] = self.format_function
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        if self.variate_name is not None:
            result['VariateName'] = self.variate_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Comment') is not None:
            self.comment = m.get('Comment')
        if m.get('ConfigurationVariateId') is not None:
            self.configuration_variate_id = m.get('ConfigurationVariateId')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('FormatFunction') is not None:
            self.format_function = m.get('FormatFunction')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        if m.get('VariateName') is not None:
            self.variate_name = m.get('VariateName')
        return self


class ListConfigurationVariateResponseBody(TeaModel):
    def __init__(self, configuration_variate=None, max_results=None, next_token=None, request_id=None,
                 total_count=None):
        self.configuration_variate = configuration_variate  # type: list[ListConfigurationVariateResponseBodyConfigurationVariate]
        self.max_results = max_results  # type: long
        self.next_token = next_token  # type: int
        self.request_id = request_id  # type: str
        self.total_count = total_count  # type: int

    def validate(self):
        if self.configuration_variate:
            for k in self.configuration_variate:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListConfigurationVariateResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['ConfigurationVariate'] = []
        if self.configuration_variate is not None:
            for k in self.configuration_variate:
                result['ConfigurationVariate'].append(k.to_map() if k else None)
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.configuration_variate = []
        if m.get('ConfigurationVariate') is not None:
            for k in m.get('ConfigurationVariate'):
                temp_model = ListConfigurationVariateResponseBodyConfigurationVariate()
                self.configuration_variate.append(temp_model.from_map(k))
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListConfigurationVariateResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListConfigurationVariateResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListConfigurationVariateResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListConfigurationVariateResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListConnectionPoliciesRequest(TeaModel):
    def __init__(self, architecture_iteration_id=None, connection_policy_id=None,
                 downlink_architecture_device_id=None, downlink_architecture_module_id=None, instance_id=None, max_results=None, next_token=None,
                 uplink_architecture_device_id=None, uplink_architecture_module_id=None):
        # 架构迭代uid
        self.architecture_iteration_id = architecture_iteration_id  # type: str
        # 连接策略名字
        self.connection_policy_id = connection_policy_id  # type: str
        # 下联设备uid
        self.downlink_architecture_device_id = downlink_architecture_device_id  # type: str
        # 下联模块uid
        self.downlink_architecture_module_id = downlink_architecture_module_id  # type: str
        self.instance_id = instance_id  # type: str
        self.max_results = max_results  # type: int
        self.next_token = next_token  # type: str
        # 上联设备uid
        self.uplink_architecture_device_id = uplink_architecture_device_id  # type: str
        # 上联模块uid
        self.uplink_architecture_module_id = uplink_architecture_module_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListConnectionPoliciesRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.architecture_iteration_id is not None:
            result['ArchitectureIterationId'] = self.architecture_iteration_id
        if self.connection_policy_id is not None:
            result['ConnectionPolicyId'] = self.connection_policy_id
        if self.downlink_architecture_device_id is not None:
            result['DownlinkArchitectureDeviceId'] = self.downlink_architecture_device_id
        if self.downlink_architecture_module_id is not None:
            result['DownlinkArchitectureModuleId'] = self.downlink_architecture_module_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.uplink_architecture_device_id is not None:
            result['UplinkArchitectureDeviceId'] = self.uplink_architecture_device_id
        if self.uplink_architecture_module_id is not None:
            result['UplinkArchitectureModuleId'] = self.uplink_architecture_module_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ArchitectureIterationId') is not None:
            self.architecture_iteration_id = m.get('ArchitectureIterationId')
        if m.get('ConnectionPolicyId') is not None:
            self.connection_policy_id = m.get('ConnectionPolicyId')
        if m.get('DownlinkArchitectureDeviceId') is not None:
            self.downlink_architecture_device_id = m.get('DownlinkArchitectureDeviceId')
        if m.get('DownlinkArchitectureModuleId') is not None:
            self.downlink_architecture_module_id = m.get('DownlinkArchitectureModuleId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('UplinkArchitectureDeviceId') is not None:
            self.uplink_architecture_device_id = m.get('UplinkArchitectureDeviceId')
        if m.get('UplinkArchitectureModuleId') is not None:
            self.uplink_architecture_module_id = m.get('UplinkArchitectureModuleId')
        return self


class ListConnectionPoliciesResponseBodyConnectionPolicy(TeaModel):
    def __init__(self, algorithm=None, architecture_iteration_id=None, create_time=None,
                 downlink_architecture_device_id=None, downlink_architecture_module_id=None, id=None, link_count=None, name=None, update_time=None,
                 uplink_architecture_device_id=None, uplink_architecture_module_id=None):
        self.algorithm = algorithm  # type: str
        self.architecture_iteration_id = architecture_iteration_id  # type: str
        self.create_time = create_time  # type: str
        # 上联设备uid
        self.downlink_architecture_device_id = downlink_architecture_device_id  # type: str
        # 下联设备uid
        self.downlink_architecture_module_id = downlink_architecture_module_id  # type: str
        self.id = id  # type: str
        self.link_count = link_count  # type: int
        self.name = name  # type: str
        self.update_time = update_time  # type: str
        # 上联模块uid
        self.uplink_architecture_device_id = uplink_architecture_device_id  # type: str
        # 下联模块uid
        self.uplink_architecture_module_id = uplink_architecture_module_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListConnectionPoliciesResponseBodyConnectionPolicy, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.algorithm is not None:
            result['Algorithm'] = self.algorithm
        if self.architecture_iteration_id is not None:
            result['ArchitectureIterationId'] = self.architecture_iteration_id
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.downlink_architecture_device_id is not None:
            result['DownlinkArchitectureDeviceId'] = self.downlink_architecture_device_id
        if self.downlink_architecture_module_id is not None:
            result['DownlinkArchitectureModuleId'] = self.downlink_architecture_module_id
        if self.id is not None:
            result['Id'] = self.id
        if self.link_count is not None:
            result['LinkCount'] = self.link_count
        if self.name is not None:
            result['Name'] = self.name
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        if self.uplink_architecture_device_id is not None:
            result['UplinkArchitectureDeviceId'] = self.uplink_architecture_device_id
        if self.uplink_architecture_module_id is not None:
            result['UplinkArchitectureModuleId'] = self.uplink_architecture_module_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Algorithm') is not None:
            self.algorithm = m.get('Algorithm')
        if m.get('ArchitectureIterationId') is not None:
            self.architecture_iteration_id = m.get('ArchitectureIterationId')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('DownlinkArchitectureDeviceId') is not None:
            self.downlink_architecture_device_id = m.get('DownlinkArchitectureDeviceId')
        if m.get('DownlinkArchitectureModuleId') is not None:
            self.downlink_architecture_module_id = m.get('DownlinkArchitectureModuleId')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('LinkCount') is not None:
            self.link_count = m.get('LinkCount')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        if m.get('UplinkArchitectureDeviceId') is not None:
            self.uplink_architecture_device_id = m.get('UplinkArchitectureDeviceId')
        if m.get('UplinkArchitectureModuleId') is not None:
            self.uplink_architecture_module_id = m.get('UplinkArchitectureModuleId')
        return self


class ListConnectionPoliciesResponseBody(TeaModel):
    def __init__(self, connection_policy=None, max_results=None, next_token=None, request_id=None, total_count=None):
        self.connection_policy = connection_policy  # type: list[ListConnectionPoliciesResponseBodyConnectionPolicy]
        self.max_results = max_results  # type: long
        self.next_token = next_token  # type: int
        self.request_id = request_id  # type: str
        self.total_count = total_count  # type: int

    def validate(self):
        if self.connection_policy:
            for k in self.connection_policy:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListConnectionPoliciesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['ConnectionPolicy'] = []
        if self.connection_policy is not None:
            for k in self.connection_policy:
                result['ConnectionPolicy'].append(k.to_map() if k else None)
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.connection_policy = []
        if m.get('ConnectionPolicy') is not None:
            for k in m.get('ConnectionPolicy'):
                temp_model = ListConnectionPoliciesResponseBodyConnectionPolicy()
                self.connection_policy.append(temp_model.from_map(k))
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListConnectionPoliciesResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListConnectionPoliciesResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListConnectionPoliciesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListConnectionPoliciesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListDedicatedLinesRequest(TeaModel):
    def __init__(self, bandwidth=None, dedicated_line_gateway=None, dedicated_line_ip=None,
                 dedicated_line_role=None, description=None, device_id=None, device_name=None, device_port=None, expiration_date=None,
                 ext_attributes=None, instance_id=None, isp=None, isp_form_id=None, isp_id=None, keyword=None, keywords=None,
                 max_results=None, next_token=None, online_date=None, physical_space_id=None, space_name=None):
        self.bandwidth = bandwidth  # type: int
        self.dedicated_line_gateway = dedicated_line_gateway  # type: str
        self.dedicated_line_ip = dedicated_line_ip  # type: str
        self.dedicated_line_role = dedicated_line_role  # type: str
        self.description = description  # type: str
        self.device_id = device_id  # type: str
        self.device_name = device_name  # type: str
        self.device_port = device_port  # type: str
        self.expiration_date = expiration_date  # type: str
        self.ext_attributes = ext_attributes  # type: str
        self.instance_id = instance_id  # type: str
        self.isp = isp  # type: str
        self.isp_form_id = isp_form_id  # type: str
        self.isp_id = isp_id  # type: str
        self.keyword = keyword  # type: str
        self.keywords = keywords  # type: str
        self.max_results = max_results  # type: int
        self.next_token = next_token  # type: str
        self.online_date = online_date  # type: str
        self.physical_space_id = physical_space_id  # type: str
        self.space_name = space_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDedicatedLinesRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bandwidth is not None:
            result['Bandwidth'] = self.bandwidth
        if self.dedicated_line_gateway is not None:
            result['DedicatedLineGateway'] = self.dedicated_line_gateway
        if self.dedicated_line_ip is not None:
            result['DedicatedLineIp'] = self.dedicated_line_ip
        if self.dedicated_line_role is not None:
            result['DedicatedLineRole'] = self.dedicated_line_role
        if self.description is not None:
            result['Description'] = self.description
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.device_name is not None:
            result['DeviceName'] = self.device_name
        if self.device_port is not None:
            result['DevicePort'] = self.device_port
        if self.expiration_date is not None:
            result['ExpirationDate'] = self.expiration_date
        if self.ext_attributes is not None:
            result['ExtAttributes'] = self.ext_attributes
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.isp is not None:
            result['Isp'] = self.isp
        if self.isp_form_id is not None:
            result['IspFormId'] = self.isp_form_id
        if self.isp_id is not None:
            result['IspId'] = self.isp_id
        if self.keyword is not None:
            result['Keyword'] = self.keyword
        if self.keywords is not None:
            result['Keywords'] = self.keywords
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.online_date is not None:
            result['OnlineDate'] = self.online_date
        if self.physical_space_id is not None:
            result['PhysicalSpaceId'] = self.physical_space_id
        if self.space_name is not None:
            result['SpaceName'] = self.space_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Bandwidth') is not None:
            self.bandwidth = m.get('Bandwidth')
        if m.get('DedicatedLineGateway') is not None:
            self.dedicated_line_gateway = m.get('DedicatedLineGateway')
        if m.get('DedicatedLineIp') is not None:
            self.dedicated_line_ip = m.get('DedicatedLineIp')
        if m.get('DedicatedLineRole') is not None:
            self.dedicated_line_role = m.get('DedicatedLineRole')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('DeviceName') is not None:
            self.device_name = m.get('DeviceName')
        if m.get('DevicePort') is not None:
            self.device_port = m.get('DevicePort')
        if m.get('ExpirationDate') is not None:
            self.expiration_date = m.get('ExpirationDate')
        if m.get('ExtAttributes') is not None:
            self.ext_attributes = m.get('ExtAttributes')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Isp') is not None:
            self.isp = m.get('Isp')
        if m.get('IspFormId') is not None:
            self.isp_form_id = m.get('IspFormId')
        if m.get('IspId') is not None:
            self.isp_id = m.get('IspId')
        if m.get('Keyword') is not None:
            self.keyword = m.get('Keyword')
        if m.get('Keywords') is not None:
            self.keywords = m.get('Keywords')
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('OnlineDate') is not None:
            self.online_date = m.get('OnlineDate')
        if m.get('PhysicalSpaceId') is not None:
            self.physical_space_id = m.get('PhysicalSpaceId')
        if m.get('SpaceName') is not None:
            self.space_name = m.get('SpaceName')
        return self


class ListDedicatedLinesResponseBodyDedicatedLinesContact(TeaModel):
    def __init__(self, description=None, email=None, name=None, phone=None):
        self.description = description  # type: str
        self.email = email  # type: str
        self.name = name  # type: str
        self.phone = phone  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDedicatedLinesResponseBodyDedicatedLinesContact, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.description is not None:
            result['Description'] = self.description
        if self.email is not None:
            result['Email'] = self.email
        if self.name is not None:
            result['Name'] = self.name
        if self.phone is not None:
            result['Phone'] = self.phone
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Email') is not None:
            self.email = m.get('Email')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Phone') is not None:
            self.phone = m.get('Phone')
        return self


class ListDedicatedLinesResponseBodyDedicatedLines(TeaModel):
    def __init__(self, bandwidth=None, contact=None, dedicated_line_gateway=None, dedicated_line_id=None,
                 dedicated_line_ip=None, dedicated_line_role=None, description=None, device_id=None, device_name=None,
                 device_port=None, expiration_date=None, ext=None, isp=None, isp_form_id=None, isp_form_name=None, isp_id=None,
                 keyword=None, online_date=None, phone=None, physical_space_id=None, space_name=None):
        self.bandwidth = bandwidth  # type: int
        self.contact = contact  # type: list[ListDedicatedLinesResponseBodyDedicatedLinesContact]
        self.dedicated_line_gateway = dedicated_line_gateway  # type: str
        self.dedicated_line_id = dedicated_line_id  # type: str
        self.dedicated_line_ip = dedicated_line_ip  # type: str
        self.dedicated_line_role = dedicated_line_role  # type: str
        self.description = description  # type: str
        self.device_id = device_id  # type: str
        self.device_name = device_name  # type: str
        self.device_port = device_port  # type: str
        self.expiration_date = expiration_date  # type: str
        self.ext = ext  # type: str
        self.isp = isp  # type: str
        self.isp_form_id = isp_form_id  # type: str
        self.isp_form_name = isp_form_name  # type: str
        self.isp_id = isp_id  # type: str
        self.keyword = keyword  # type: str
        self.online_date = online_date  # type: str
        self.phone = phone  # type: str
        self.physical_space_id = physical_space_id  # type: str
        self.space_name = space_name  # type: str

    def validate(self):
        if self.contact:
            for k in self.contact:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListDedicatedLinesResponseBodyDedicatedLines, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bandwidth is not None:
            result['Bandwidth'] = self.bandwidth
        result['Contact'] = []
        if self.contact is not None:
            for k in self.contact:
                result['Contact'].append(k.to_map() if k else None)
        if self.dedicated_line_gateway is not None:
            result['DedicatedLineGateway'] = self.dedicated_line_gateway
        if self.dedicated_line_id is not None:
            result['DedicatedLineId'] = self.dedicated_line_id
        if self.dedicated_line_ip is not None:
            result['DedicatedLineIp'] = self.dedicated_line_ip
        if self.dedicated_line_role is not None:
            result['DedicatedLineRole'] = self.dedicated_line_role
        if self.description is not None:
            result['Description'] = self.description
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.device_name is not None:
            result['DeviceName'] = self.device_name
        if self.device_port is not None:
            result['DevicePort'] = self.device_port
        if self.expiration_date is not None:
            result['ExpirationDate'] = self.expiration_date
        if self.ext is not None:
            result['Ext'] = self.ext
        if self.isp is not None:
            result['Isp'] = self.isp
        if self.isp_form_id is not None:
            result['IspFormId'] = self.isp_form_id
        if self.isp_form_name is not None:
            result['IspFormName'] = self.isp_form_name
        if self.isp_id is not None:
            result['IspId'] = self.isp_id
        if self.keyword is not None:
            result['Keyword'] = self.keyword
        if self.online_date is not None:
            result['OnlineDate'] = self.online_date
        if self.phone is not None:
            result['Phone'] = self.phone
        if self.physical_space_id is not None:
            result['PhysicalSpaceId'] = self.physical_space_id
        if self.space_name is not None:
            result['SpaceName'] = self.space_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Bandwidth') is not None:
            self.bandwidth = m.get('Bandwidth')
        self.contact = []
        if m.get('Contact') is not None:
            for k in m.get('Contact'):
                temp_model = ListDedicatedLinesResponseBodyDedicatedLinesContact()
                self.contact.append(temp_model.from_map(k))
        if m.get('DedicatedLineGateway') is not None:
            self.dedicated_line_gateway = m.get('DedicatedLineGateway')
        if m.get('DedicatedLineId') is not None:
            self.dedicated_line_id = m.get('DedicatedLineId')
        if m.get('DedicatedLineIp') is not None:
            self.dedicated_line_ip = m.get('DedicatedLineIp')
        if m.get('DedicatedLineRole') is not None:
            self.dedicated_line_role = m.get('DedicatedLineRole')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('DeviceName') is not None:
            self.device_name = m.get('DeviceName')
        if m.get('DevicePort') is not None:
            self.device_port = m.get('DevicePort')
        if m.get('ExpirationDate') is not None:
            self.expiration_date = m.get('ExpirationDate')
        if m.get('Ext') is not None:
            self.ext = m.get('Ext')
        if m.get('Isp') is not None:
            self.isp = m.get('Isp')
        if m.get('IspFormId') is not None:
            self.isp_form_id = m.get('IspFormId')
        if m.get('IspFormName') is not None:
            self.isp_form_name = m.get('IspFormName')
        if m.get('IspId') is not None:
            self.isp_id = m.get('IspId')
        if m.get('Keyword') is not None:
            self.keyword = m.get('Keyword')
        if m.get('OnlineDate') is not None:
            self.online_date = m.get('OnlineDate')
        if m.get('Phone') is not None:
            self.phone = m.get('Phone')
        if m.get('PhysicalSpaceId') is not None:
            self.physical_space_id = m.get('PhysicalSpaceId')
        if m.get('SpaceName') is not None:
            self.space_name = m.get('SpaceName')
        return self


class ListDedicatedLinesResponseBody(TeaModel):
    def __init__(self, dedicated_lines=None, max_results=None, next_token=None, request_id=None, total_count=None):
        self.dedicated_lines = dedicated_lines  # type: list[ListDedicatedLinesResponseBodyDedicatedLines]
        self.max_results = max_results  # type: int
        self.next_token = next_token  # type: int
        self.request_id = request_id  # type: str
        self.total_count = total_count  # type: int

    def validate(self):
        if self.dedicated_lines:
            for k in self.dedicated_lines:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListDedicatedLinesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['DedicatedLines'] = []
        if self.dedicated_lines is not None:
            for k in self.dedicated_lines:
                result['DedicatedLines'].append(k.to_map() if k else None)
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.dedicated_lines = []
        if m.get('DedicatedLines') is not None:
            for k in m.get('DedicatedLines'):
                temp_model = ListDedicatedLinesResponseBodyDedicatedLines()
                self.dedicated_lines.append(temp_model.from_map(k))
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListDedicatedLinesResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListDedicatedLinesResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListDedicatedLinesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListDedicatedLinesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListDeviceFormsRequest(TeaModel):
    def __init__(self, instance_id=None, max_results=None, next_token=None):
        self.instance_id = instance_id  # type: str
        self.max_results = max_results  # type: int
        self.next_token = next_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDeviceFormsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        return self


class ListDeviceFormsResponseBodyDeviceFormsAttributeList(TeaModel):
    def __init__(self, attribute_built_in=None, attribute_content=None, attribute_format=None,
                 attribute_fuzzy_query=None, attribute_key=None, attribute_name=None, attribute_placeholder=None, attribute_query=None,
                 attribute_reference=None, attribute_requirement=None, attribute_sequence=None, attribute_table_display=None,
                 attribute_type=None, attribute_uniqueness=None):
        # 内置属性不可修改和删除
        self.attribute_built_in = attribute_built_in  # type: bool
        self.attribute_content = attribute_content  # type: str
        # 设备形态属性值格式
        self.attribute_format = attribute_format  # type: str
        # 前端查询控件是否支持模糊搜索
        self.attribute_fuzzy_query = attribute_fuzzy_query  # type: bool
        # 设备形态属性主键
        self.attribute_key = attribute_key  # type: str
        # 设备形态属性名称
        self.attribute_name = attribute_name  # type: str
        # 前端查询控件占位符
        self.attribute_placeholder = attribute_placeholder  # type: str
        # 前端是否展示对应的查询控件
        self.attribute_query = attribute_query  # type: bool
        # 设备形态属性关联对象
        self.attribute_reference = attribute_reference  # type: str
        # 设备形态属性是否必填
        self.attribute_requirement = attribute_requirement  # type: bool
        self.attribute_sequence = attribute_sequence  # type: int
        # 设备形态属性是否表格可见
        self.attribute_table_display = attribute_table_display  # type: bool
        # 设备形态属性值类型
        self.attribute_type = attribute_type  # type: str
        # 设备形态属性是否唯一
        self.attribute_uniqueness = attribute_uniqueness  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDeviceFormsResponseBodyDeviceFormsAttributeList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.attribute_built_in is not None:
            result['AttributeBuiltIn'] = self.attribute_built_in
        if self.attribute_content is not None:
            result['AttributeContent'] = self.attribute_content
        if self.attribute_format is not None:
            result['AttributeFormat'] = self.attribute_format
        if self.attribute_fuzzy_query is not None:
            result['AttributeFuzzyQuery'] = self.attribute_fuzzy_query
        if self.attribute_key is not None:
            result['AttributeKey'] = self.attribute_key
        if self.attribute_name is not None:
            result['AttributeName'] = self.attribute_name
        if self.attribute_placeholder is not None:
            result['AttributePlaceholder'] = self.attribute_placeholder
        if self.attribute_query is not None:
            result['AttributeQuery'] = self.attribute_query
        if self.attribute_reference is not None:
            result['AttributeReference'] = self.attribute_reference
        if self.attribute_requirement is not None:
            result['AttributeRequirement'] = self.attribute_requirement
        if self.attribute_sequence is not None:
            result['AttributeSequence'] = self.attribute_sequence
        if self.attribute_table_display is not None:
            result['AttributeTableDisplay'] = self.attribute_table_display
        if self.attribute_type is not None:
            result['AttributeType'] = self.attribute_type
        if self.attribute_uniqueness is not None:
            result['AttributeUniqueness'] = self.attribute_uniqueness
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AttributeBuiltIn') is not None:
            self.attribute_built_in = m.get('AttributeBuiltIn')
        if m.get('AttributeContent') is not None:
            self.attribute_content = m.get('AttributeContent')
        if m.get('AttributeFormat') is not None:
            self.attribute_format = m.get('AttributeFormat')
        if m.get('AttributeFuzzyQuery') is not None:
            self.attribute_fuzzy_query = m.get('AttributeFuzzyQuery')
        if m.get('AttributeKey') is not None:
            self.attribute_key = m.get('AttributeKey')
        if m.get('AttributeName') is not None:
            self.attribute_name = m.get('AttributeName')
        if m.get('AttributePlaceholder') is not None:
            self.attribute_placeholder = m.get('AttributePlaceholder')
        if m.get('AttributeQuery') is not None:
            self.attribute_query = m.get('AttributeQuery')
        if m.get('AttributeReference') is not None:
            self.attribute_reference = m.get('AttributeReference')
        if m.get('AttributeRequirement') is not None:
            self.attribute_requirement = m.get('AttributeRequirement')
        if m.get('AttributeSequence') is not None:
            self.attribute_sequence = m.get('AttributeSequence')
        if m.get('AttributeTableDisplay') is not None:
            self.attribute_table_display = m.get('AttributeTableDisplay')
        if m.get('AttributeType') is not None:
            self.attribute_type = m.get('AttributeType')
        if m.get('AttributeUniqueness') is not None:
            self.attribute_uniqueness = m.get('AttributeUniqueness')
        return self


class ListDeviceFormsResponseBodyDeviceForms(TeaModel):
    def __init__(self, account_config=None, attribute_list=None, config_compare=None, detail_display=None,
                 device_form_id=None, device_form_name=None, form_built_in=None, related_device_form_id=None, resource_use=None,
                 script=None, unique_key=None):
        # 是否需要账号配置
        self.account_config = account_config  # type: bool
        # 设备形态属性列表
        self.attribute_list = attribute_list  # type: list[ListDeviceFormsResponseBodyDeviceFormsAttributeList]
        # 是否支持配置生成
        self.config_compare = config_compare  # type: bool
        self.detail_display = detail_display  # type: bool
        self.device_form_id = device_form_id  # type: str
        self.device_form_name = device_form_name  # type: str
        # 内置形态不可修改和删除
        self.form_built_in = form_built_in  # type: bool
        self.related_device_form_id = related_device_form_id  # type: str
        self.resource_use = resource_use  # type: str
        self.script = script  # type: str
        self.unique_key = unique_key  # type: str

    def validate(self):
        if self.attribute_list:
            for k in self.attribute_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListDeviceFormsResponseBodyDeviceForms, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_config is not None:
            result['AccountConfig'] = self.account_config
        result['AttributeList'] = []
        if self.attribute_list is not None:
            for k in self.attribute_list:
                result['AttributeList'].append(k.to_map() if k else None)
        if self.config_compare is not None:
            result['ConfigCompare'] = self.config_compare
        if self.detail_display is not None:
            result['DetailDisplay'] = self.detail_display
        if self.device_form_id is not None:
            result['DeviceFormId'] = self.device_form_id
        if self.device_form_name is not None:
            result['DeviceFormName'] = self.device_form_name
        if self.form_built_in is not None:
            result['FormBuiltIn'] = self.form_built_in
        if self.related_device_form_id is not None:
            result['RelatedDeviceFormId'] = self.related_device_form_id
        if self.resource_use is not None:
            result['ResourceUse'] = self.resource_use
        if self.script is not None:
            result['Script'] = self.script
        if self.unique_key is not None:
            result['UniqueKey'] = self.unique_key
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AccountConfig') is not None:
            self.account_config = m.get('AccountConfig')
        self.attribute_list = []
        if m.get('AttributeList') is not None:
            for k in m.get('AttributeList'):
                temp_model = ListDeviceFormsResponseBodyDeviceFormsAttributeList()
                self.attribute_list.append(temp_model.from_map(k))
        if m.get('ConfigCompare') is not None:
            self.config_compare = m.get('ConfigCompare')
        if m.get('DetailDisplay') is not None:
            self.detail_display = m.get('DetailDisplay')
        if m.get('DeviceFormId') is not None:
            self.device_form_id = m.get('DeviceFormId')
        if m.get('DeviceFormName') is not None:
            self.device_form_name = m.get('DeviceFormName')
        if m.get('FormBuiltIn') is not None:
            self.form_built_in = m.get('FormBuiltIn')
        if m.get('RelatedDeviceFormId') is not None:
            self.related_device_form_id = m.get('RelatedDeviceFormId')
        if m.get('ResourceUse') is not None:
            self.resource_use = m.get('ResourceUse')
        if m.get('Script') is not None:
            self.script = m.get('Script')
        if m.get('UniqueKey') is not None:
            self.unique_key = m.get('UniqueKey')
        return self


class ListDeviceFormsResponseBody(TeaModel):
    def __init__(self, device_forms=None, max_results=None, next_token=None, request_id=None, total_count=None):
        self.device_forms = device_forms  # type: list[ListDeviceFormsResponseBodyDeviceForms]
        self.max_results = max_results  # type: int
        self.next_token = next_token  # type: int
        self.request_id = request_id  # type: str
        self.total_count = total_count  # type: int

    def validate(self):
        if self.device_forms:
            for k in self.device_forms:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListDeviceFormsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['DeviceForms'] = []
        if self.device_forms is not None:
            for k in self.device_forms:
                result['DeviceForms'].append(k.to_map() if k else None)
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.device_forms = []
        if m.get('DeviceForms') is not None:
            for k in m.get('DeviceForms'):
                temp_model = ListDeviceFormsResponseBodyDeviceForms()
                self.device_forms.append(temp_model.from_map(k))
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListDeviceFormsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListDeviceFormsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListDeviceFormsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListDeviceFormsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListDevicePropertiesRequest(TeaModel):
    def __init__(self, device_form_id=None, instance_id=None, max_results=None, next_token=None):
        self.device_form_id = device_form_id  # type: str
        # 实例ID
        self.instance_id = instance_id  # type: str
        self.max_results = max_results  # type: int
        self.next_token = next_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDevicePropertiesRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_form_id is not None:
            result['DeviceFormId'] = self.device_form_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeviceFormId') is not None:
            self.device_form_id = m.get('DeviceFormId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        return self


class ListDevicePropertiesResponseBodyDeviceProperties(TeaModel):
    def __init__(self, built_in=None, device_form_id=None, device_form_name=None, device_property_id=None,
                 property_content=None, property_format=None, property_key=None, property_name=None):
        self.built_in = built_in  # type: bool
        self.device_form_id = device_form_id  # type: str
        self.device_form_name = device_form_name  # type: str
        self.device_property_id = device_property_id  # type: str
        self.property_content = property_content  # type: str
        self.property_format = property_format  # type: str
        self.property_key = property_key  # type: str
        self.property_name = property_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDevicePropertiesResponseBodyDeviceProperties, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.built_in is not None:
            result['BuiltIn'] = self.built_in
        if self.device_form_id is not None:
            result['DeviceFormId'] = self.device_form_id
        if self.device_form_name is not None:
            result['DeviceFormName'] = self.device_form_name
        if self.device_property_id is not None:
            result['DevicePropertyId'] = self.device_property_id
        if self.property_content is not None:
            result['PropertyContent'] = self.property_content
        if self.property_format is not None:
            result['PropertyFormat'] = self.property_format
        if self.property_key is not None:
            result['PropertyKey'] = self.property_key
        if self.property_name is not None:
            result['PropertyName'] = self.property_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BuiltIn') is not None:
            self.built_in = m.get('BuiltIn')
        if m.get('DeviceFormId') is not None:
            self.device_form_id = m.get('DeviceFormId')
        if m.get('DeviceFormName') is not None:
            self.device_form_name = m.get('DeviceFormName')
        if m.get('DevicePropertyId') is not None:
            self.device_property_id = m.get('DevicePropertyId')
        if m.get('PropertyContent') is not None:
            self.property_content = m.get('PropertyContent')
        if m.get('PropertyFormat') is not None:
            self.property_format = m.get('PropertyFormat')
        if m.get('PropertyKey') is not None:
            self.property_key = m.get('PropertyKey')
        if m.get('PropertyName') is not None:
            self.property_name = m.get('PropertyName')
        return self


class ListDevicePropertiesResponseBody(TeaModel):
    def __init__(self, device_properties=None, max_results=None, next_token=None, request_id=None, total_count=None):
        self.device_properties = device_properties  # type: list[ListDevicePropertiesResponseBodyDeviceProperties]
        self.max_results = max_results  # type: int
        self.next_token = next_token  # type: int
        # Id of the request
        self.request_id = request_id  # type: str
        self.total_count = total_count  # type: int

    def validate(self):
        if self.device_properties:
            for k in self.device_properties:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListDevicePropertiesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['DeviceProperties'] = []
        if self.device_properties is not None:
            for k in self.device_properties:
                result['DeviceProperties'].append(k.to_map() if k else None)
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.device_properties = []
        if m.get('DeviceProperties') is not None:
            for k in m.get('DeviceProperties'):
                temp_model = ListDevicePropertiesResponseBodyDeviceProperties()
                self.device_properties.append(temp_model.from_map(k))
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListDevicePropertiesResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListDevicePropertiesResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListDevicePropertiesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListDevicePropertiesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListDeviceResourcesRequest(TeaModel):
    def __init__(self, business_type=None, instance_id=None, list_type=None, max_results=None, next_token=None,
                 setup_project_id=None):
        self.business_type = business_type  # type: str
        self.instance_id = instance_id  # type: str
        self.list_type = list_type  # type: str
        self.max_results = max_results  # type: int
        self.next_token = next_token  # type: str
        self.setup_project_id = setup_project_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDeviceResourcesRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.business_type is not None:
            result['BusinessType'] = self.business_type
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.list_type is not None:
            result['ListType'] = self.list_type
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.setup_project_id is not None:
            result['SetupProjectId'] = self.setup_project_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BusinessType') is not None:
            self.business_type = m.get('BusinessType')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ListType') is not None:
            self.list_type = m.get('ListType')
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('SetupProjectId') is not None:
            self.setup_project_id = m.get('SetupProjectId')
        return self


class ListDeviceResourcesResponseBodyDeviceResource(TeaModel):
    def __init__(self, block_number=None, business=None, config=None, config_task_id=None, config_task_status=None,
                 delivery_ip=None, device_number=None, device_resource_id=None, generate_config=None, host_name=None,
                 inter_connection=None, location=None, loopback=None, manager_ip=None, model=None, params=None, role=None,
                 setup_project_id=None, sn=None, specification=None, stack=None, vendor=None):
        self.block_number = block_number  # type: str
        self.business = business  # type: str
        self.config = config  # type: str
        self.config_task_id = config_task_id  # type: str
        self.config_task_status = config_task_status  # type: str
        self.delivery_ip = delivery_ip  # type: str
        self.device_number = device_number  # type: str
        # 代表资源一级ID的资源属性字段
        self.device_resource_id = device_resource_id  # type: str
        self.generate_config = generate_config  # type: str
        self.host_name = host_name  # type: str
        self.inter_connection = inter_connection  # type: str
        self.location = location  # type: str
        self.loopback = loopback  # type: str
        self.manager_ip = manager_ip  # type: str
        self.model = model  # type: str
        self.params = params  # type: str
        self.role = role  # type: str
        # 建设项目id
        self.setup_project_id = setup_project_id  # type: str
        self.sn = sn  # type: str
        self.specification = specification  # type: str
        self.stack = stack  # type: bool
        self.vendor = vendor  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDeviceResourcesResponseBodyDeviceResource, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.block_number is not None:
            result['BlockNumber'] = self.block_number
        if self.business is not None:
            result['Business'] = self.business
        if self.config is not None:
            result['Config'] = self.config
        if self.config_task_id is not None:
            result['ConfigTaskId'] = self.config_task_id
        if self.config_task_status is not None:
            result['ConfigTaskStatus'] = self.config_task_status
        if self.delivery_ip is not None:
            result['DeliveryIp'] = self.delivery_ip
        if self.device_number is not None:
            result['DeviceNumber'] = self.device_number
        if self.device_resource_id is not None:
            result['DeviceResourceId'] = self.device_resource_id
        if self.generate_config is not None:
            result['GenerateConfig'] = self.generate_config
        if self.host_name is not None:
            result['HostName'] = self.host_name
        if self.inter_connection is not None:
            result['InterConnection'] = self.inter_connection
        if self.location is not None:
            result['Location'] = self.location
        if self.loopback is not None:
            result['Loopback'] = self.loopback
        if self.manager_ip is not None:
            result['ManagerIp'] = self.manager_ip
        if self.model is not None:
            result['Model'] = self.model
        if self.params is not None:
            result['Params'] = self.params
        if self.role is not None:
            result['Role'] = self.role
        if self.setup_project_id is not None:
            result['SetupProjectId'] = self.setup_project_id
        if self.sn is not None:
            result['Sn'] = self.sn
        if self.specification is not None:
            result['Specification'] = self.specification
        if self.stack is not None:
            result['Stack'] = self.stack
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BlockNumber') is not None:
            self.block_number = m.get('BlockNumber')
        if m.get('Business') is not None:
            self.business = m.get('Business')
        if m.get('Config') is not None:
            self.config = m.get('Config')
        if m.get('ConfigTaskId') is not None:
            self.config_task_id = m.get('ConfigTaskId')
        if m.get('ConfigTaskStatus') is not None:
            self.config_task_status = m.get('ConfigTaskStatus')
        if m.get('DeliveryIp') is not None:
            self.delivery_ip = m.get('DeliveryIp')
        if m.get('DeviceNumber') is not None:
            self.device_number = m.get('DeviceNumber')
        if m.get('DeviceResourceId') is not None:
            self.device_resource_id = m.get('DeviceResourceId')
        if m.get('GenerateConfig') is not None:
            self.generate_config = m.get('GenerateConfig')
        if m.get('HostName') is not None:
            self.host_name = m.get('HostName')
        if m.get('InterConnection') is not None:
            self.inter_connection = m.get('InterConnection')
        if m.get('Location') is not None:
            self.location = m.get('Location')
        if m.get('Loopback') is not None:
            self.loopback = m.get('Loopback')
        if m.get('ManagerIp') is not None:
            self.manager_ip = m.get('ManagerIp')
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('Params') is not None:
            self.params = m.get('Params')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('SetupProjectId') is not None:
            self.setup_project_id = m.get('SetupProjectId')
        if m.get('Sn') is not None:
            self.sn = m.get('Sn')
        if m.get('Specification') is not None:
            self.specification = m.get('Specification')
        if m.get('Stack') is not None:
            self.stack = m.get('Stack')
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        return self


class ListDeviceResourcesResponseBody(TeaModel):
    def __init__(self, device_resource=None, max_results=None, next_token=None, request_id=None, total_count=None):
        self.device_resource = device_resource  # type: list[ListDeviceResourcesResponseBodyDeviceResource]
        self.max_results = max_results  # type: long
        self.next_token = next_token  # type: int
        self.request_id = request_id  # type: str
        self.total_count = total_count  # type: int

    def validate(self):
        if self.device_resource:
            for k in self.device_resource:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListDeviceResourcesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['DeviceResource'] = []
        if self.device_resource is not None:
            for k in self.device_resource:
                result['DeviceResource'].append(k.to_map() if k else None)
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.device_resource = []
        if m.get('DeviceResource') is not None:
            for k in m.get('DeviceResource'):
                temp_model = ListDeviceResourcesResponseBodyDeviceResource()
                self.device_resource.append(temp_model.from_map(k))
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListDeviceResourcesResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListDeviceResourcesResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListDeviceResourcesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListDeviceResourcesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListDeviceValuesRequest(TeaModel):
    def __init__(self, attribute_group=None, attribute_keyword=None, device_form_id=None, device_form_name=None,
                 instance_id=None):
        self.attribute_group = attribute_group  # type: str
        self.attribute_keyword = attribute_keyword  # type: str
        self.device_form_id = device_form_id  # type: str
        self.device_form_name = device_form_name  # type: str
        # 实例ID
        self.instance_id = instance_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDeviceValuesRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.attribute_group is not None:
            result['AttributeGroup'] = self.attribute_group
        if self.attribute_keyword is not None:
            result['AttributeKeyword'] = self.attribute_keyword
        if self.device_form_id is not None:
            result['DeviceFormId'] = self.device_form_id
        if self.device_form_name is not None:
            result['DeviceFormName'] = self.device_form_name
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AttributeGroup') is not None:
            self.attribute_group = m.get('AttributeGroup')
        if m.get('AttributeKeyword') is not None:
            self.attribute_keyword = m.get('AttributeKeyword')
        if m.get('DeviceFormId') is not None:
            self.device_form_id = m.get('DeviceFormId')
        if m.get('DeviceFormName') is not None:
            self.device_form_name = m.get('DeviceFormName')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class ListDeviceValuesResponseBody(TeaModel):
    def __init__(self, device_values=None, request_id=None):
        self.device_values = device_values  # type: list[str]
        # Id of the request
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDeviceValuesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_values is not None:
            result['DeviceValues'] = self.device_values
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeviceValues') is not None:
            self.device_values = m.get('DeviceValues')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class ListDeviceValuesResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListDeviceValuesResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListDeviceValuesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListDeviceValuesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListDevicesRequest(TeaModel):
    def __init__(self, calculate_amount=None, device_form_id=None, device_form_name=None, device_ids=None,
                 ext_attributes=None, host_name=None, instance_id=None, ip=None, keyword=None, mac=None, max_results=None,
                 model=None, next_token=None, physical_space_id=None, physical_space_ids=None, security_domain=None,
                 service_status=None, sn=None, vendor=None):
        self.calculate_amount = calculate_amount  # type: bool
        self.device_form_id = device_form_id  # type: str
        self.device_form_name = device_form_name  # type: str
        self.device_ids = device_ids  # type: list[str]
        self.ext_attributes = ext_attributes  # type: str
        self.host_name = host_name  # type: list[str]
        self.instance_id = instance_id  # type: str
        self.ip = ip  # type: list[str]
        self.keyword = keyword  # type: str
        self.mac = mac  # type: list[str]
        self.max_results = max_results  # type: int
        self.model = model  # type: list[str]
        self.next_token = next_token  # type: str
        self.physical_space_id = physical_space_id  # type: str
        self.physical_space_ids = physical_space_ids  # type: list[str]
        self.security_domain = security_domain  # type: list[str]
        self.service_status = service_status  # type: list[str]
        self.sn = sn  # type: list[str]
        self.vendor = vendor  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDevicesRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calculate_amount is not None:
            result['CalculateAmount'] = self.calculate_amount
        if self.device_form_id is not None:
            result['DeviceFormId'] = self.device_form_id
        if self.device_form_name is not None:
            result['DeviceFormName'] = self.device_form_name
        if self.device_ids is not None:
            result['DeviceIds'] = self.device_ids
        if self.ext_attributes is not None:
            result['ExtAttributes'] = self.ext_attributes
        if self.host_name is not None:
            result['HostName'] = self.host_name
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.ip is not None:
            result['Ip'] = self.ip
        if self.keyword is not None:
            result['Keyword'] = self.keyword
        if self.mac is not None:
            result['Mac'] = self.mac
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.model is not None:
            result['Model'] = self.model
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.physical_space_id is not None:
            result['PhysicalSpaceId'] = self.physical_space_id
        if self.physical_space_ids is not None:
            result['PhysicalSpaceIds'] = self.physical_space_ids
        if self.security_domain is not None:
            result['SecurityDomain'] = self.security_domain
        if self.service_status is not None:
            result['ServiceStatus'] = self.service_status
        if self.sn is not None:
            result['Sn'] = self.sn
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CalculateAmount') is not None:
            self.calculate_amount = m.get('CalculateAmount')
        if m.get('DeviceFormId') is not None:
            self.device_form_id = m.get('DeviceFormId')
        if m.get('DeviceFormName') is not None:
            self.device_form_name = m.get('DeviceFormName')
        if m.get('DeviceIds') is not None:
            self.device_ids = m.get('DeviceIds')
        if m.get('ExtAttributes') is not None:
            self.ext_attributes = m.get('ExtAttributes')
        if m.get('HostName') is not None:
            self.host_name = m.get('HostName')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Ip') is not None:
            self.ip = m.get('Ip')
        if m.get('Keyword') is not None:
            self.keyword = m.get('Keyword')
        if m.get('Mac') is not None:
            self.mac = m.get('Mac')
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('PhysicalSpaceId') is not None:
            self.physical_space_id = m.get('PhysicalSpaceId')
        if m.get('PhysicalSpaceIds') is not None:
            self.physical_space_ids = m.get('PhysicalSpaceIds')
        if m.get('SecurityDomain') is not None:
            self.security_domain = m.get('SecurityDomain')
        if m.get('ServiceStatus') is not None:
            self.service_status = m.get('ServiceStatus')
        if m.get('Sn') is not None:
            self.sn = m.get('Sn')
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        return self


class ListDevicesShrinkRequest(TeaModel):
    def __init__(self, calculate_amount=None, device_form_id=None, device_form_name=None, device_ids_shrink=None,
                 ext_attributes=None, host_name_shrink=None, instance_id=None, ip_shrink=None, keyword=None, mac_shrink=None,
                 max_results=None, model_shrink=None, next_token=None, physical_space_id=None, physical_space_ids_shrink=None,
                 security_domain_shrink=None, service_status_shrink=None, sn_shrink=None, vendor_shrink=None):
        self.calculate_amount = calculate_amount  # type: bool
        self.device_form_id = device_form_id  # type: str
        self.device_form_name = device_form_name  # type: str
        self.device_ids_shrink = device_ids_shrink  # type: str
        self.ext_attributes = ext_attributes  # type: str
        self.host_name_shrink = host_name_shrink  # type: str
        self.instance_id = instance_id  # type: str
        self.ip_shrink = ip_shrink  # type: str
        self.keyword = keyword  # type: str
        self.mac_shrink = mac_shrink  # type: str
        self.max_results = max_results  # type: int
        self.model_shrink = model_shrink  # type: str
        self.next_token = next_token  # type: str
        self.physical_space_id = physical_space_id  # type: str
        self.physical_space_ids_shrink = physical_space_ids_shrink  # type: str
        self.security_domain_shrink = security_domain_shrink  # type: str
        self.service_status_shrink = service_status_shrink  # type: str
        self.sn_shrink = sn_shrink  # type: str
        self.vendor_shrink = vendor_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDevicesShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.calculate_amount is not None:
            result['CalculateAmount'] = self.calculate_amount
        if self.device_form_id is not None:
            result['DeviceFormId'] = self.device_form_id
        if self.device_form_name is not None:
            result['DeviceFormName'] = self.device_form_name
        if self.device_ids_shrink is not None:
            result['DeviceIds'] = self.device_ids_shrink
        if self.ext_attributes is not None:
            result['ExtAttributes'] = self.ext_attributes
        if self.host_name_shrink is not None:
            result['HostName'] = self.host_name_shrink
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.ip_shrink is not None:
            result['Ip'] = self.ip_shrink
        if self.keyword is not None:
            result['Keyword'] = self.keyword
        if self.mac_shrink is not None:
            result['Mac'] = self.mac_shrink
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.model_shrink is not None:
            result['Model'] = self.model_shrink
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.physical_space_id is not None:
            result['PhysicalSpaceId'] = self.physical_space_id
        if self.physical_space_ids_shrink is not None:
            result['PhysicalSpaceIds'] = self.physical_space_ids_shrink
        if self.security_domain_shrink is not None:
            result['SecurityDomain'] = self.security_domain_shrink
        if self.service_status_shrink is not None:
            result['ServiceStatus'] = self.service_status_shrink
        if self.sn_shrink is not None:
            result['Sn'] = self.sn_shrink
        if self.vendor_shrink is not None:
            result['Vendor'] = self.vendor_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CalculateAmount') is not None:
            self.calculate_amount = m.get('CalculateAmount')
        if m.get('DeviceFormId') is not None:
            self.device_form_id = m.get('DeviceFormId')
        if m.get('DeviceFormName') is not None:
            self.device_form_name = m.get('DeviceFormName')
        if m.get('DeviceIds') is not None:
            self.device_ids_shrink = m.get('DeviceIds')
        if m.get('ExtAttributes') is not None:
            self.ext_attributes = m.get('ExtAttributes')
        if m.get('HostName') is not None:
            self.host_name_shrink = m.get('HostName')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Ip') is not None:
            self.ip_shrink = m.get('Ip')
        if m.get('Keyword') is not None:
            self.keyword = m.get('Keyword')
        if m.get('Mac') is not None:
            self.mac_shrink = m.get('Mac')
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('Model') is not None:
            self.model_shrink = m.get('Model')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('PhysicalSpaceId') is not None:
            self.physical_space_id = m.get('PhysicalSpaceId')
        if m.get('PhysicalSpaceIds') is not None:
            self.physical_space_ids_shrink = m.get('PhysicalSpaceIds')
        if m.get('SecurityDomain') is not None:
            self.security_domain_shrink = m.get('SecurityDomain')
        if m.get('ServiceStatus') is not None:
            self.service_status_shrink = m.get('ServiceStatus')
        if m.get('Sn') is not None:
            self.sn_shrink = m.get('Sn')
        if m.get('Vendor') is not None:
            self.vendor_shrink = m.get('Vendor')
        return self


class ListDevicesResponseBodyDevices(TeaModel):
    def __init__(self, device_form_id=None, device_form_name=None, device_id=None, enable_password=None,
                 ext_attributes=None, gmt_create=None, gmt_modified=None, host_name=None, ip=None, login_password=None,
                 login_type=None, login_username=None, mac=None, model=None, physical_space_id=None, physical_space_name=None,
                 security_domain=None, service_status=None, sn=None, snmp_account_type=None, snmp_account_version=None,
                 snmp_auth_passphrase=None, snmp_auth_protocol=None, snmp_community=None, snmp_privacy_passphrase=None,
                 snmp_privacy_protocol=None, snmp_security_level=None, snmp_username=None, vendor=None):
        self.device_form_id = device_form_id  # type: str
        self.device_form_name = device_form_name  # type: str
        # 设备ID
        self.device_id = device_id  # type: str
        self.enable_password = enable_password  # type: str
        # 设备额外属性(JSON)
        self.ext_attributes = ext_attributes  # type: str
        self.gmt_create = gmt_create  # type: str
        self.gmt_modified = gmt_modified  # type: str
        # 主机名
        self.host_name = host_name  # type: str
        # 设备IP
        self.ip = ip  # type: str
        # 登录账号
        self.login_password = login_password  # type: str
        # 登录类型，SSH或者TELNET
        self.login_type = login_type  # type: str
        # 登录账号
        self.login_username = login_username  # type: str
        # 设备MAC地址
        self.mac = mac  # type: str
        # 设备型号
        self.model = model  # type: str
        # 物理空间ID
        self.physical_space_id = physical_space_id  # type: str
        # 物理空间名称
        self.physical_space_name = physical_space_name  # type: str
        # 设备安全域
        self.security_domain = security_domain  # type: str
        # 设备状态
        self.service_status = service_status  # type: str
        # 设备SN
        self.sn = sn  # type: str
        # SNMP 账号类型
        self.snmp_account_type = snmp_account_type  # type: str
        # SNMP版本号
        self.snmp_account_version = snmp_account_version  # type: str
        # SNMP Auth PassPhrase
        self.snmp_auth_passphrase = snmp_auth_passphrase  # type: str
        # SNMP Auth Protocol
        self.snmp_auth_protocol = snmp_auth_protocol  # type: str
        # SNMP Community
        self.snmp_community = snmp_community  # type: str
        # SNMP Privacy Passphrase
        self.snmp_privacy_passphrase = snmp_privacy_passphrase  # type: str
        # SNMP Privacy Protocol
        self.snmp_privacy_protocol = snmp_privacy_protocol  # type: str
        # SNMP 安全级别
        self.snmp_security_level = snmp_security_level  # type: str
        # SNMP 用户名
        self.snmp_username = snmp_username  # type: str
        # 设备厂商
        self.vendor = vendor  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListDevicesResponseBodyDevices, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_form_id is not None:
            result['DeviceFormId'] = self.device_form_id
        if self.device_form_name is not None:
            result['DeviceFormName'] = self.device_form_name
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.enable_password is not None:
            result['EnablePassword'] = self.enable_password
        if self.ext_attributes is not None:
            result['ExtAttributes'] = self.ext_attributes
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.host_name is not None:
            result['HostName'] = self.host_name
        if self.ip is not None:
            result['Ip'] = self.ip
        if self.login_password is not None:
            result['LoginPassword'] = self.login_password
        if self.login_type is not None:
            result['LoginType'] = self.login_type
        if self.login_username is not None:
            result['LoginUsername'] = self.login_username
        if self.mac is not None:
            result['Mac'] = self.mac
        if self.model is not None:
            result['Model'] = self.model
        if self.physical_space_id is not None:
            result['PhysicalSpaceId'] = self.physical_space_id
        if self.physical_space_name is not None:
            result['PhysicalSpaceName'] = self.physical_space_name
        if self.security_domain is not None:
            result['SecurityDomain'] = self.security_domain
        if self.service_status is not None:
            result['ServiceStatus'] = self.service_status
        if self.sn is not None:
            result['Sn'] = self.sn
        if self.snmp_account_type is not None:
            result['SnmpAccountType'] = self.snmp_account_type
        if self.snmp_account_version is not None:
            result['SnmpAccountVersion'] = self.snmp_account_version
        if self.snmp_auth_passphrase is not None:
            result['SnmpAuthPassphrase'] = self.snmp_auth_passphrase
        if self.snmp_auth_protocol is not None:
            result['SnmpAuthProtocol'] = self.snmp_auth_protocol
        if self.snmp_community is not None:
            result['SnmpCommunity'] = self.snmp_community
        if self.snmp_privacy_passphrase is not None:
            result['SnmpPrivacyPassphrase'] = self.snmp_privacy_passphrase
        if self.snmp_privacy_protocol is not None:
            result['SnmpPrivacyProtocol'] = self.snmp_privacy_protocol
        if self.snmp_security_level is not None:
            result['SnmpSecurityLevel'] = self.snmp_security_level
        if self.snmp_username is not None:
            result['SnmpUsername'] = self.snmp_username
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeviceFormId') is not None:
            self.device_form_id = m.get('DeviceFormId')
        if m.get('DeviceFormName') is not None:
            self.device_form_name = m.get('DeviceFormName')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('EnablePassword') is not None:
            self.enable_password = m.get('EnablePassword')
        if m.get('ExtAttributes') is not None:
            self.ext_attributes = m.get('ExtAttributes')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('HostName') is not None:
            self.host_name = m.get('HostName')
        if m.get('Ip') is not None:
            self.ip = m.get('Ip')
        if m.get('LoginPassword') is not None:
            self.login_password = m.get('LoginPassword')
        if m.get('LoginType') is not None:
            self.login_type = m.get('LoginType')
        if m.get('LoginUsername') is not None:
            self.login_username = m.get('LoginUsername')
        if m.get('Mac') is not None:
            self.mac = m.get('Mac')
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('PhysicalSpaceId') is not None:
            self.physical_space_id = m.get('PhysicalSpaceId')
        if m.get('PhysicalSpaceName') is not None:
            self.physical_space_name = m.get('PhysicalSpaceName')
        if m.get('SecurityDomain') is not None:
            self.security_domain = m.get('SecurityDomain')
        if m.get('ServiceStatus') is not None:
            self.service_status = m.get('ServiceStatus')
        if m.get('Sn') is not None:
            self.sn = m.get('Sn')
        if m.get('SnmpAccountType') is not None:
            self.snmp_account_type = m.get('SnmpAccountType')
        if m.get('SnmpAccountVersion') is not None:
            self.snmp_account_version = m.get('SnmpAccountVersion')
        if m.get('SnmpAuthPassphrase') is not None:
            self.snmp_auth_passphrase = m.get('SnmpAuthPassphrase')
        if m.get('SnmpAuthProtocol') is not None:
            self.snmp_auth_protocol = m.get('SnmpAuthProtocol')
        if m.get('SnmpCommunity') is not None:
            self.snmp_community = m.get('SnmpCommunity')
        if m.get('SnmpPrivacyPassphrase') is not None:
            self.snmp_privacy_passphrase = m.get('SnmpPrivacyPassphrase')
        if m.get('SnmpPrivacyProtocol') is not None:
            self.snmp_privacy_protocol = m.get('SnmpPrivacyProtocol')
        if m.get('SnmpSecurityLevel') is not None:
            self.snmp_security_level = m.get('SnmpSecurityLevel')
        if m.get('SnmpUsername') is not None:
            self.snmp_username = m.get('SnmpUsername')
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        return self


class ListDevicesResponseBody(TeaModel):
    def __init__(self, amount_detail=None, amount_used=None, devices=None, iot_coefficient=None, max_results=None,
                 network_coefficient=None, network_maintenance_coefficient=None, next_token=None, other_coefficient=None,
                 request_id=None, server_coefficient=None, server_maintenance_coefficient=None, total_count=None):
        self.amount_detail = amount_detail  # type: str
        self.amount_used = amount_used  # type: int
        self.devices = devices  # type: list[ListDevicesResponseBodyDevices]
        self.iot_coefficient = iot_coefficient  # type: int
        self.max_results = max_results  # type: int
        self.network_coefficient = network_coefficient  # type: int
        self.network_maintenance_coefficient = network_maintenance_coefficient  # type: int
        self.next_token = next_token  # type: int
        self.other_coefficient = other_coefficient  # type: int
        self.request_id = request_id  # type: str
        self.server_coefficient = server_coefficient  # type: int
        self.server_maintenance_coefficient = server_maintenance_coefficient  # type: int
        self.total_count = total_count  # type: int

    def validate(self):
        if self.devices:
            for k in self.devices:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListDevicesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.amount_detail is not None:
            result['AmountDetail'] = self.amount_detail
        if self.amount_used is not None:
            result['AmountUsed'] = self.amount_used
        result['Devices'] = []
        if self.devices is not None:
            for k in self.devices:
                result['Devices'].append(k.to_map() if k else None)
        if self.iot_coefficient is not None:
            result['IotCoefficient'] = self.iot_coefficient
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.network_coefficient is not None:
            result['NetworkCoefficient'] = self.network_coefficient
        if self.network_maintenance_coefficient is not None:
            result['NetworkMaintenanceCoefficient'] = self.network_maintenance_coefficient
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.other_coefficient is not None:
            result['OtherCoefficient'] = self.other_coefficient
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.server_coefficient is not None:
            result['ServerCoefficient'] = self.server_coefficient
        if self.server_maintenance_coefficient is not None:
            result['ServerMaintenanceCoefficient'] = self.server_maintenance_coefficient
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AmountDetail') is not None:
            self.amount_detail = m.get('AmountDetail')
        if m.get('AmountUsed') is not None:
            self.amount_used = m.get('AmountUsed')
        self.devices = []
        if m.get('Devices') is not None:
            for k in m.get('Devices'):
                temp_model = ListDevicesResponseBodyDevices()
                self.devices.append(temp_model.from_map(k))
        if m.get('IotCoefficient') is not None:
            self.iot_coefficient = m.get('IotCoefficient')
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NetworkCoefficient') is not None:
            self.network_coefficient = m.get('NetworkCoefficient')
        if m.get('NetworkMaintenanceCoefficient') is not None:
            self.network_maintenance_coefficient = m.get('NetworkMaintenanceCoefficient')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('OtherCoefficient') is not None:
            self.other_coefficient = m.get('OtherCoefficient')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ServerCoefficient') is not None:
            self.server_coefficient = m.get('ServerCoefficient')
        if m.get('ServerMaintenanceCoefficient') is not None:
            self.server_maintenance_coefficient = m.get('ServerMaintenanceCoefficient')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListDevicesResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListDevicesResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListDevicesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListDevicesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListEventDefinitionsRequest(TeaModel):
    def __init__(self, event_id=None, event_name=None, event_type=None, instance_id=None, max_results=None,
                 next_token=None):
        self.event_id = event_id  # type: str
        self.event_name = event_name  # type: str
        self.event_type = event_type  # type: str
        self.instance_id = instance_id  # type: str
        self.max_results = max_results  # type: int
        self.next_token = next_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListEventDefinitionsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.event_id is not None:
            result['EventId'] = self.event_id
        if self.event_name is not None:
            result['EventName'] = self.event_name
        if self.event_type is not None:
            result['EventType'] = self.event_type
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EventId') is not None:
            self.event_id = m.get('EventId')
        if m.get('EventName') is not None:
            self.event_name = m.get('EventName')
        if m.get('EventType') is not None:
            self.event_type = m.get('EventType')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        return self


class ListEventDefinitionsResponseBody(TeaModel):
    def __init__(self, event_definitions=None, max_results=None, next_token=None, request_id=None, total_count=None):
        self.event_definitions = event_definitions  # type: list[EventDefinition]
        self.max_results = max_results  # type: int
        self.next_token = next_token  # type: str
        # Id of the request
        self.request_id = request_id  # type: str
        self.total_count = total_count  # type: int

    def validate(self):
        if self.event_definitions:
            for k in self.event_definitions:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListEventDefinitionsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['EventDefinitions'] = []
        if self.event_definitions is not None:
            for k in self.event_definitions:
                result['EventDefinitions'].append(k.to_map() if k else None)
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.event_definitions = []
        if m.get('EventDefinitions') is not None:
            for k in m.get('EventDefinitions'):
                temp_model = EventDefinition()
                self.event_definitions.append(temp_model.from_map(k))
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListEventDefinitionsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListEventDefinitionsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListEventDefinitionsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListEventDefinitionsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListEventsRequest(TeaModel):
    def __init__(self, alarm_status=None, device_id=None, event_type=None, instance_id=None, max_results=None,
                 next_token=None, physical_space_id=None):
        self.alarm_status = alarm_status  # type: str
        self.device_id = device_id  # type: str
        self.event_type = event_type  # type: str
        self.instance_id = instance_id  # type: str
        self.max_results = max_results  # type: int
        self.next_token = next_token  # type: str
        self.physical_space_id = physical_space_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListEventsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alarm_status is not None:
            result['AlarmStatus'] = self.alarm_status
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.event_type is not None:
            result['EventType'] = self.event_type
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.physical_space_id is not None:
            result['PhysicalSpaceId'] = self.physical_space_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AlarmStatus') is not None:
            self.alarm_status = m.get('AlarmStatus')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('EventType') is not None:
            self.event_type = m.get('EventType')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('PhysicalSpaceId') is not None:
            self.physical_space_id = m.get('PhysicalSpaceId')
        return self


class ListEventsResponseBodyStatistics(TeaModel):
    def __init__(self, count=None, status=None):
        self.count = count  # type: int
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListEventsResponseBodyStatistics, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.count is not None:
            result['Count'] = self.count
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Count') is not None:
            self.count = m.get('Count')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class ListEventsResponseBody(TeaModel):
    def __init__(self, events=None, max_results=None, next_token=None, request_id=None, statistics=None,
                 total_count=None):
        self.events = events  # type: list[Event]
        self.max_results = max_results  # type: int
        self.next_token = next_token  # type: str
        # Id of the request
        self.request_id = request_id  # type: str
        self.statistics = statistics  # type: list[ListEventsResponseBodyStatistics]
        self.total_count = total_count  # type: int

    def validate(self):
        if self.events:
            for k in self.events:
                if k:
                    k.validate()
        if self.statistics:
            for k in self.statistics:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListEventsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Events'] = []
        if self.events is not None:
            for k in self.events:
                result['Events'].append(k.to_map() if k else None)
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Statistics'] = []
        if self.statistics is not None:
            for k in self.statistics:
                result['Statistics'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.events = []
        if m.get('Events') is not None:
            for k in m.get('Events'):
                temp_model = Event()
                self.events.append(temp_model.from_map(k))
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.statistics = []
        if m.get('Statistics') is not None:
            for k in m.get('Statistics'):
                temp_model = ListEventsResponseBodyStatistics()
                self.statistics.append(temp_model.from_map(k))
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListEventsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListEventsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListEventsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListEventsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListInspectionDevicesRequest(TeaModel):
    def __init__(self, app_state=None, instance_id=None, model=None, role=None, space=None, vendor=None):
        self.app_state = app_state  # type: str
        self.instance_id = instance_id  # type: str
        self.model = model  # type: list[str]
        self.role = role  # type: str
        self.space = space  # type: str
        self.vendor = vendor  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListInspectionDevicesRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_state is not None:
            result['AppState'] = self.app_state
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.model is not None:
            result['Model'] = self.model
        if self.role is not None:
            result['Role'] = self.role
        if self.space is not None:
            result['Space'] = self.space
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppState') is not None:
            self.app_state = m.get('AppState')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('Space') is not None:
            self.space = m.get('Space')
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        return self


class ListInspectionDevicesShrinkRequest(TeaModel):
    def __init__(self, app_state=None, instance_id=None, model_shrink=None, role=None, space=None, vendor=None):
        self.app_state = app_state  # type: str
        self.instance_id = instance_id  # type: str
        self.model_shrink = model_shrink  # type: str
        self.role = role  # type: str
        self.space = space  # type: str
        self.vendor = vendor  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListInspectionDevicesShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_state is not None:
            result['AppState'] = self.app_state
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.model_shrink is not None:
            result['Model'] = self.model_shrink
        if self.role is not None:
            result['Role'] = self.role
        if self.space is not None:
            result['Space'] = self.space
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppState') is not None:
            self.app_state = m.get('AppState')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Model') is not None:
            self.model_shrink = m.get('Model')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('Space') is not None:
            self.space = m.get('Space')
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        return self


class ListInspectionDevicesResponseBodyInspectionScripts(TeaModel):
    def __init__(self, app_state=None, device_id=None, device_state=None, host_name=None, manage_ip=None, model=None,
                 role=None, space=None, vendor=None):
        self.app_state = app_state  # type: str
        self.device_id = device_id  # type: str
        self.device_state = device_state  # type: str
        self.host_name = host_name  # type: str
        self.manage_ip = manage_ip  # type: str
        self.model = model  # type: str
        self.role = role  # type: str
        self.space = space  # type: str
        self.vendor = vendor  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListInspectionDevicesResponseBodyInspectionScripts, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_state is not None:
            result['AppState'] = self.app_state
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.device_state is not None:
            result['DeviceState'] = self.device_state
        if self.host_name is not None:
            result['HostName'] = self.host_name
        if self.manage_ip is not None:
            result['ManageIp'] = self.manage_ip
        if self.model is not None:
            result['Model'] = self.model
        if self.role is not None:
            result['Role'] = self.role
        if self.space is not None:
            result['Space'] = self.space
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AppState') is not None:
            self.app_state = m.get('AppState')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('DeviceState') is not None:
            self.device_state = m.get('DeviceState')
        if m.get('HostName') is not None:
            self.host_name = m.get('HostName')
        if m.get('ManageIp') is not None:
            self.manage_ip = m.get('ManageIp')
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('Space') is not None:
            self.space = m.get('Space')
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        return self


class ListInspectionDevicesResponseBody(TeaModel):
    def __init__(self, inspection_scripts=None, request_id=None):
        # content
        self.inspection_scripts = inspection_scripts  # type: list[ListInspectionDevicesResponseBodyInspectionScripts]
        # Id of the request
        self.request_id = request_id  # type: str

    def validate(self):
        if self.inspection_scripts:
            for k in self.inspection_scripts:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListInspectionDevicesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['InspectionScripts'] = []
        if self.inspection_scripts is not None:
            for k in self.inspection_scripts:
                result['InspectionScripts'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.inspection_scripts = []
        if m.get('InspectionScripts') is not None:
            for k in m.get('InspectionScripts'):
                temp_model = ListInspectionDevicesResponseBodyInspectionScripts()
                self.inspection_scripts.append(temp_model.from_map(k))
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class ListInspectionDevicesResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListInspectionDevicesResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListInspectionDevicesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListInspectionDevicesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListInspectionTaskReportsRequest(TeaModel):
    def __init__(self, inspection_item_id=None, instance_id=None, vendor=None):
        self.inspection_item_id = inspection_item_id  # type: str
        self.instance_id = instance_id  # type: str
        self.vendor = vendor  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListInspectionTaskReportsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.inspection_item_id is not None:
            result['InspectionItemId'] = self.inspection_item_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InspectionItemId') is not None:
            self.inspection_item_id = m.get('InspectionItemId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        return self


class ListInspectionTaskReportsResponseBodyInspectionTaskAlarmStatistic(TeaModel):
    def __init__(self, critical_number=None, inspection_item=None, model=None, vendor=None, warning_number=None):
        self.critical_number = critical_number  # type: long
        self.inspection_item = inspection_item  # type: str
        self.model = model  # type: str
        self.vendor = vendor  # type: str
        self.warning_number = warning_number  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListInspectionTaskReportsResponseBodyInspectionTaskAlarmStatistic, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.critical_number is not None:
            result['CriticalNumber'] = self.critical_number
        if self.inspection_item is not None:
            result['InspectionItem'] = self.inspection_item
        if self.model is not None:
            result['Model'] = self.model
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        if self.warning_number is not None:
            result['WarningNumber'] = self.warning_number
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CriticalNumber') is not None:
            self.critical_number = m.get('CriticalNumber')
        if m.get('InspectionItem') is not None:
            self.inspection_item = m.get('InspectionItem')
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        if m.get('WarningNumber') is not None:
            self.warning_number = m.get('WarningNumber')
        return self


class ListInspectionTaskReportsResponseBodyInspectionTask(TeaModel):
    def __init__(self, actual_device_number=None, alarm_number=None, alarm_statistic=None, critical_number=None,
                 critical_rate=None, device_rate=None, failure_statistic=None, failure_task_number=None, failure_task_rate=None,
                 normal_number=None, normal_rate=None, running_task_number=None, running_task_rate=None,
                 success_task_number=None, success_task_rate=None, task_number=None, total_device_number=None, warning_number=None,
                 warning_rate=None):
        self.actual_device_number = actual_device_number  # type: long
        self.alarm_number = alarm_number  # type: long
        self.alarm_statistic = alarm_statistic  # type: list[ListInspectionTaskReportsResponseBodyInspectionTaskAlarmStatistic]
        self.critical_number = critical_number  # type: long
        self.critical_rate = critical_rate  # type: str
        self.device_rate = device_rate  # type: str
        self.failure_statistic = failure_statistic  # type: str
        self.failure_task_number = failure_task_number  # type: long
        self.failure_task_rate = failure_task_rate  # type: str
        self.normal_number = normal_number  # type: long
        self.normal_rate = normal_rate  # type: str
        self.running_task_number = running_task_number  # type: long
        self.running_task_rate = running_task_rate  # type: str
        self.success_task_number = success_task_number  # type: long
        self.success_task_rate = success_task_rate  # type: str
        self.task_number = task_number  # type: long
        self.total_device_number = total_device_number  # type: long
        self.warning_number = warning_number  # type: long
        self.warning_rate = warning_rate  # type: str

    def validate(self):
        if self.alarm_statistic:
            for k in self.alarm_statistic:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListInspectionTaskReportsResponseBodyInspectionTask, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.actual_device_number is not None:
            result['ActualDeviceNumber'] = self.actual_device_number
        if self.alarm_number is not None:
            result['AlarmNumber'] = self.alarm_number
        result['AlarmStatistic'] = []
        if self.alarm_statistic is not None:
            for k in self.alarm_statistic:
                result['AlarmStatistic'].append(k.to_map() if k else None)
        if self.critical_number is not None:
            result['CriticalNumber'] = self.critical_number
        if self.critical_rate is not None:
            result['CriticalRate'] = self.critical_rate
        if self.device_rate is not None:
            result['DeviceRate'] = self.device_rate
        if self.failure_statistic is not None:
            result['FailureStatistic'] = self.failure_statistic
        if self.failure_task_number is not None:
            result['FailureTaskNumber'] = self.failure_task_number
        if self.failure_task_rate is not None:
            result['FailureTaskRate'] = self.failure_task_rate
        if self.normal_number is not None:
            result['NormalNumber'] = self.normal_number
        if self.normal_rate is not None:
            result['NormalRate'] = self.normal_rate
        if self.running_task_number is not None:
            result['RunningTaskNumber'] = self.running_task_number
        if self.running_task_rate is not None:
            result['RunningTaskRate'] = self.running_task_rate
        if self.success_task_number is not None:
            result['SuccessTaskNumber'] = self.success_task_number
        if self.success_task_rate is not None:
            result['SuccessTaskRate'] = self.success_task_rate
        if self.task_number is not None:
            result['TaskNumber'] = self.task_number
        if self.total_device_number is not None:
            result['TotalDeviceNumber'] = self.total_device_number
        if self.warning_number is not None:
            result['WarningNumber'] = self.warning_number
        if self.warning_rate is not None:
            result['WarningRate'] = self.warning_rate
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ActualDeviceNumber') is not None:
            self.actual_device_number = m.get('ActualDeviceNumber')
        if m.get('AlarmNumber') is not None:
            self.alarm_number = m.get('AlarmNumber')
        self.alarm_statistic = []
        if m.get('AlarmStatistic') is not None:
            for k in m.get('AlarmStatistic'):
                temp_model = ListInspectionTaskReportsResponseBodyInspectionTaskAlarmStatistic()
                self.alarm_statistic.append(temp_model.from_map(k))
        if m.get('CriticalNumber') is not None:
            self.critical_number = m.get('CriticalNumber')
        if m.get('CriticalRate') is not None:
            self.critical_rate = m.get('CriticalRate')
        if m.get('DeviceRate') is not None:
            self.device_rate = m.get('DeviceRate')
        if m.get('FailureStatistic') is not None:
            self.failure_statistic = m.get('FailureStatistic')
        if m.get('FailureTaskNumber') is not None:
            self.failure_task_number = m.get('FailureTaskNumber')
        if m.get('FailureTaskRate') is not None:
            self.failure_task_rate = m.get('FailureTaskRate')
        if m.get('NormalNumber') is not None:
            self.normal_number = m.get('NormalNumber')
        if m.get('NormalRate') is not None:
            self.normal_rate = m.get('NormalRate')
        if m.get('RunningTaskNumber') is not None:
            self.running_task_number = m.get('RunningTaskNumber')
        if m.get('RunningTaskRate') is not None:
            self.running_task_rate = m.get('RunningTaskRate')
        if m.get('SuccessTaskNumber') is not None:
            self.success_task_number = m.get('SuccessTaskNumber')
        if m.get('SuccessTaskRate') is not None:
            self.success_task_rate = m.get('SuccessTaskRate')
        if m.get('TaskNumber') is not None:
            self.task_number = m.get('TaskNumber')
        if m.get('TotalDeviceNumber') is not None:
            self.total_device_number = m.get('TotalDeviceNumber')
        if m.get('WarningNumber') is not None:
            self.warning_number = m.get('WarningNumber')
        if m.get('WarningRate') is not None:
            self.warning_rate = m.get('WarningRate')
        return self


class ListInspectionTaskReportsResponseBody(TeaModel):
    def __init__(self, inspection_task=None, request_id=None):
        self.inspection_task = inspection_task  # type: list[ListInspectionTaskReportsResponseBodyInspectionTask]
        self.request_id = request_id  # type: str

    def validate(self):
        if self.inspection_task:
            for k in self.inspection_task:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListInspectionTaskReportsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['InspectionTask'] = []
        if self.inspection_task is not None:
            for k in self.inspection_task:
                result['InspectionTask'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.inspection_task = []
        if m.get('InspectionTask') is not None:
            for k in m.get('InspectionTask'):
                temp_model = ListInspectionTaskReportsResponseBodyInspectionTask()
                self.inspection_task.append(temp_model.from_map(k))
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class ListInspectionTaskReportsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListInspectionTaskReportsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListInspectionTaskReportsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListInspectionTaskReportsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListInspectionTasksRequest(TeaModel):
    def __init__(self, alarm_status=None, device_type=None, host_name=None, ip=None, instance_id=None, item_id=None,
                 max_results=None, model=None, next_token=None, role=None, space=None, task_status=None, vendor=None):
        self.alarm_status = alarm_status  # type: list[str]
        self.device_type = device_type  # type: str
        self.host_name = host_name  # type: str
        self.ip = ip  # type: str
        self.instance_id = instance_id  # type: str
        self.item_id = item_id  # type: str
        self.max_results = max_results  # type: int
        self.model = model  # type: str
        self.next_token = next_token  # type: str
        self.role = role  # type: str
        self.space = space  # type: str
        self.task_status = task_status  # type: str
        self.vendor = vendor  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListInspectionTasksRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alarm_status is not None:
            result['AlarmStatus'] = self.alarm_status
        if self.device_type is not None:
            result['DeviceType'] = self.device_type
        if self.host_name is not None:
            result['HostName'] = self.host_name
        if self.ip is not None:
            result['IP'] = self.ip
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.item_id is not None:
            result['ItemId'] = self.item_id
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.model is not None:
            result['Model'] = self.model
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.role is not None:
            result['Role'] = self.role
        if self.space is not None:
            result['Space'] = self.space
        if self.task_status is not None:
            result['TaskStatus'] = self.task_status
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AlarmStatus') is not None:
            self.alarm_status = m.get('AlarmStatus')
        if m.get('DeviceType') is not None:
            self.device_type = m.get('DeviceType')
        if m.get('HostName') is not None:
            self.host_name = m.get('HostName')
        if m.get('IP') is not None:
            self.ip = m.get('IP')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ItemId') is not None:
            self.item_id = m.get('ItemId')
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('Space') is not None:
            self.space = m.get('Space')
        if m.get('TaskStatus') is not None:
            self.task_status = m.get('TaskStatus')
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        return self


class ListInspectionTasksShrinkRequest(TeaModel):
    def __init__(self, alarm_status_shrink=None, device_type=None, host_name=None, ip=None, instance_id=None,
                 item_id=None, max_results=None, model=None, next_token=None, role=None, space=None, task_status=None,
                 vendor=None):
        self.alarm_status_shrink = alarm_status_shrink  # type: str
        self.device_type = device_type  # type: str
        self.host_name = host_name  # type: str
        self.ip = ip  # type: str
        self.instance_id = instance_id  # type: str
        self.item_id = item_id  # type: str
        self.max_results = max_results  # type: int
        self.model = model  # type: str
        self.next_token = next_token  # type: str
        self.role = role  # type: str
        self.space = space  # type: str
        self.task_status = task_status  # type: str
        self.vendor = vendor  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListInspectionTasksShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alarm_status_shrink is not None:
            result['AlarmStatus'] = self.alarm_status_shrink
        if self.device_type is not None:
            result['DeviceType'] = self.device_type
        if self.host_name is not None:
            result['HostName'] = self.host_name
        if self.ip is not None:
            result['IP'] = self.ip
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.item_id is not None:
            result['ItemId'] = self.item_id
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.model is not None:
            result['Model'] = self.model
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.role is not None:
            result['Role'] = self.role
        if self.space is not None:
            result['Space'] = self.space
        if self.task_status is not None:
            result['TaskStatus'] = self.task_status
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AlarmStatus') is not None:
            self.alarm_status_shrink = m.get('AlarmStatus')
        if m.get('DeviceType') is not None:
            self.device_type = m.get('DeviceType')
        if m.get('HostName') is not None:
            self.host_name = m.get('HostName')
        if m.get('IP') is not None:
            self.ip = m.get('IP')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ItemId') is not None:
            self.item_id = m.get('ItemId')
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('Space') is not None:
            self.space = m.get('Space')
        if m.get('TaskStatus') is not None:
            self.task_status = m.get('TaskStatus')
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        return self


class ListInspectionTasksResponseBodyInspectionTasksInspectionAlarmRules(TeaModel):
    def __init__(self, actual_value=None, alarm_expression=None, alarm_level=None, alarm_operator=None,
                 alarm_value=None):
        self.actual_value = actual_value  # type: str
        self.alarm_expression = alarm_expression  # type: str
        self.alarm_level = alarm_level  # type: str
        self.alarm_operator = alarm_operator  # type: str
        self.alarm_value = alarm_value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListInspectionTasksResponseBodyInspectionTasksInspectionAlarmRules, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.actual_value is not None:
            result['ActualValue'] = self.actual_value
        if self.alarm_expression is not None:
            result['AlarmExpression'] = self.alarm_expression
        if self.alarm_level is not None:
            result['AlarmLevel'] = self.alarm_level
        if self.alarm_operator is not None:
            result['AlarmOperator'] = self.alarm_operator
        if self.alarm_value is not None:
            result['AlarmValue'] = self.alarm_value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ActualValue') is not None:
            self.actual_value = m.get('ActualValue')
        if m.get('AlarmExpression') is not None:
            self.alarm_expression = m.get('AlarmExpression')
        if m.get('AlarmLevel') is not None:
            self.alarm_level = m.get('AlarmLevel')
        if m.get('AlarmOperator') is not None:
            self.alarm_operator = m.get('AlarmOperator')
        if m.get('AlarmValue') is not None:
            self.alarm_value = m.get('AlarmValue')
        return self


class ListInspectionTasksResponseBodyInspectionTasks(TeaModel):
    def __init__(self, alarm_status=None, device_id=None, device_type=None, error_code=None,
                 execution_begin_time=None, execution_end_time=None, host_name=None, ip=None, inspection_alarm_rules=None,
                 inspection_message=None, inspection_result=None, is_inspection_result_truncation=None, item_id=None, item_name=None,
                 model=None, role=None, script_id=None, space=None, task_id=None, task_status=None, vendor=None):
        self.alarm_status = alarm_status  # type: str
        self.device_id = device_id  # type: str
        self.device_type = device_type  # type: str
        self.error_code = error_code  # type: str
        self.execution_begin_time = execution_begin_time  # type: str
        self.execution_end_time = execution_end_time  # type: str
        self.host_name = host_name  # type: str
        self.ip = ip  # type: str
        self.inspection_alarm_rules = inspection_alarm_rules  # type: list[ListInspectionTasksResponseBodyInspectionTasksInspectionAlarmRules]
        self.inspection_message = inspection_message  # type: str
        self.inspection_result = inspection_result  # type: str
        self.is_inspection_result_truncation = is_inspection_result_truncation  # type: bool
        self.item_id = item_id  # type: str
        self.item_name = item_name  # type: str
        self.model = model  # type: list[str]
        self.role = role  # type: str
        self.script_id = script_id  # type: str
        self.space = space  # type: str
        self.task_id = task_id  # type: str
        self.task_status = task_status  # type: str
        self.vendor = vendor  # type: str

    def validate(self):
        if self.inspection_alarm_rules:
            for k in self.inspection_alarm_rules:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListInspectionTasksResponseBodyInspectionTasks, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alarm_status is not None:
            result['AlarmStatus'] = self.alarm_status
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.device_type is not None:
            result['DeviceType'] = self.device_type
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.execution_begin_time is not None:
            result['ExecutionBeginTime'] = self.execution_begin_time
        if self.execution_end_time is not None:
            result['ExecutionEndTime'] = self.execution_end_time
        if self.host_name is not None:
            result['HostName'] = self.host_name
        if self.ip is not None:
            result['IP'] = self.ip
        result['InspectionAlarmRules'] = []
        if self.inspection_alarm_rules is not None:
            for k in self.inspection_alarm_rules:
                result['InspectionAlarmRules'].append(k.to_map() if k else None)
        if self.inspection_message is not None:
            result['InspectionMessage'] = self.inspection_message
        if self.inspection_result is not None:
            result['InspectionResult'] = self.inspection_result
        if self.is_inspection_result_truncation is not None:
            result['IsInspectionResultTruncation'] = self.is_inspection_result_truncation
        if self.item_id is not None:
            result['ItemId'] = self.item_id
        if self.item_name is not None:
            result['ItemName'] = self.item_name
        if self.model is not None:
            result['Model'] = self.model
        if self.role is not None:
            result['Role'] = self.role
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        if self.space is not None:
            result['Space'] = self.space
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.task_status is not None:
            result['TaskStatus'] = self.task_status
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AlarmStatus') is not None:
            self.alarm_status = m.get('AlarmStatus')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('DeviceType') is not None:
            self.device_type = m.get('DeviceType')
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('ExecutionBeginTime') is not None:
            self.execution_begin_time = m.get('ExecutionBeginTime')
        if m.get('ExecutionEndTime') is not None:
            self.execution_end_time = m.get('ExecutionEndTime')
        if m.get('HostName') is not None:
            self.host_name = m.get('HostName')
        if m.get('IP') is not None:
            self.ip = m.get('IP')
        self.inspection_alarm_rules = []
        if m.get('InspectionAlarmRules') is not None:
            for k in m.get('InspectionAlarmRules'):
                temp_model = ListInspectionTasksResponseBodyInspectionTasksInspectionAlarmRules()
                self.inspection_alarm_rules.append(temp_model.from_map(k))
        if m.get('InspectionMessage') is not None:
            self.inspection_message = m.get('InspectionMessage')
        if m.get('InspectionResult') is not None:
            self.inspection_result = m.get('InspectionResult')
        if m.get('IsInspectionResultTruncation') is not None:
            self.is_inspection_result_truncation = m.get('IsInspectionResultTruncation')
        if m.get('ItemId') is not None:
            self.item_id = m.get('ItemId')
        if m.get('ItemName') is not None:
            self.item_name = m.get('ItemName')
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        if m.get('Space') is not None:
            self.space = m.get('Space')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('TaskStatus') is not None:
            self.task_status = m.get('TaskStatus')
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        return self


class ListInspectionTasksResponseBody(TeaModel):
    def __init__(self, inspection_tasks=None, next_token=None, request_id=None, total_count=None):
        self.inspection_tasks = inspection_tasks  # type: list[ListInspectionTasksResponseBodyInspectionTasks]
        self.next_token = next_token  # type: int
        self.request_id = request_id  # type: str
        self.total_count = total_count  # type: int

    def validate(self):
        if self.inspection_tasks:
            for k in self.inspection_tasks:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListInspectionTasksResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['InspectionTasks'] = []
        if self.inspection_tasks is not None:
            for k in self.inspection_tasks:
                result['InspectionTasks'].append(k.to_map() if k else None)
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.inspection_tasks = []
        if m.get('InspectionTasks') is not None:
            for k in m.get('InspectionTasks'):
                temp_model = ListInspectionTasksResponseBodyInspectionTasks()
                self.inspection_tasks.append(temp_model.from_map(k))
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListInspectionTasksResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListInspectionTasksResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListInspectionTasksResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListInspectionTasksResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListInstancesResponseBodyInstances(TeaModel):
    def __init__(self, instance_device_max_count=None, instance_end_date=None, instance_id=None,
                 instance_name=None, instance_open_date=None, instance_spec=None, instance_status=None):
        self.instance_device_max_count = instance_device_max_count  # type: str
        self.instance_end_date = instance_end_date  # type: str
        self.instance_id = instance_id  # type: str
        self.instance_name = instance_name  # type: str
        self.instance_open_date = instance_open_date  # type: str
        self.instance_spec = instance_spec  # type: str
        self.instance_status = instance_status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListInstancesResponseBodyInstances, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_device_max_count is not None:
            result['InstanceDeviceMaxCount'] = self.instance_device_max_count
        if self.instance_end_date is not None:
            result['InstanceEndDate'] = self.instance_end_date
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.instance_name is not None:
            result['InstanceName'] = self.instance_name
        if self.instance_open_date is not None:
            result['InstanceOpenDate'] = self.instance_open_date
        if self.instance_spec is not None:
            result['InstanceSpec'] = self.instance_spec
        if self.instance_status is not None:
            result['InstanceStatus'] = self.instance_status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceDeviceMaxCount') is not None:
            self.instance_device_max_count = m.get('InstanceDeviceMaxCount')
        if m.get('InstanceEndDate') is not None:
            self.instance_end_date = m.get('InstanceEndDate')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InstanceName') is not None:
            self.instance_name = m.get('InstanceName')
        if m.get('InstanceOpenDate') is not None:
            self.instance_open_date = m.get('InstanceOpenDate')
        if m.get('InstanceSpec') is not None:
            self.instance_spec = m.get('InstanceSpec')
        if m.get('InstanceStatus') is not None:
            self.instance_status = m.get('InstanceStatus')
        return self


class ListInstancesResponseBody(TeaModel):
    def __init__(self, instances=None, request_id=None):
        self.instances = instances  # type: list[ListInstancesResponseBodyInstances]
        # Id of the request
        self.request_id = request_id  # type: str

    def validate(self):
        if self.instances:
            for k in self.instances:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListInstancesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Instances'] = []
        if self.instances is not None:
            for k in self.instances:
                result['Instances'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.instances = []
        if m.get('Instances') is not None:
            for k in m.get('Instances'):
                temp_model = ListInstancesResponseBodyInstances()
                self.instances.append(temp_model.from_map(k))
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class ListInstancesResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListInstancesResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListInstancesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListInstancesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListIpBlocksRequest(TeaModel):
    def __init__(self, bottom_node=None, category=None, ext_attributes=None, instance_id=None, ip=None,
                 ip_block_code=None, ip_list=None, leaf_node=None, max_results=None, net_business=None, net_type=None,
                 next_token=None, parent_uid=None, status=None, sub_net_business=None, top_parent=None, tree_type=None,
                 zone_name=None):
        self.bottom_node = bottom_node  # type: bool
        self.category = category  # type: str
        self.ext_attributes = ext_attributes  # type: dict[str, any]
        self.instance_id = instance_id  # type: str
        self.ip = ip  # type: str
        self.ip_block_code = ip_block_code  # type: str
        self.ip_list = ip_list  # type: list[str]
        self.leaf_node = leaf_node  # type: bool
        self.max_results = max_results  # type: int
        self.net_business = net_business  # type: str
        self.net_type = net_type  # type: str
        self.next_token = next_token  # type: str
        self.parent_uid = parent_uid  # type: str
        self.status = status  # type: str
        self.sub_net_business = sub_net_business  # type: str
        self.top_parent = top_parent  # type: bool
        self.tree_type = tree_type  # type: bool
        self.zone_name = zone_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListIpBlocksRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bottom_node is not None:
            result['BottomNode'] = self.bottom_node
        if self.category is not None:
            result['Category'] = self.category
        if self.ext_attributes is not None:
            result['ExtAttributes'] = self.ext_attributes
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.ip is not None:
            result['Ip'] = self.ip
        if self.ip_block_code is not None:
            result['IpBlockCode'] = self.ip_block_code
        if self.ip_list is not None:
            result['IpList'] = self.ip_list
        if self.leaf_node is not None:
            result['LeafNode'] = self.leaf_node
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.net_business is not None:
            result['NetBusiness'] = self.net_business
        if self.net_type is not None:
            result['NetType'] = self.net_type
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.parent_uid is not None:
            result['ParentUid'] = self.parent_uid
        if self.status is not None:
            result['Status'] = self.status
        if self.sub_net_business is not None:
            result['SubNetBusiness'] = self.sub_net_business
        if self.top_parent is not None:
            result['TopParent'] = self.top_parent
        if self.tree_type is not None:
            result['TreeType'] = self.tree_type
        if self.zone_name is not None:
            result['ZoneName'] = self.zone_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BottomNode') is not None:
            self.bottom_node = m.get('BottomNode')
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('ExtAttributes') is not None:
            self.ext_attributes = m.get('ExtAttributes')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Ip') is not None:
            self.ip = m.get('Ip')
        if m.get('IpBlockCode') is not None:
            self.ip_block_code = m.get('IpBlockCode')
        if m.get('IpList') is not None:
            self.ip_list = m.get('IpList')
        if m.get('LeafNode') is not None:
            self.leaf_node = m.get('LeafNode')
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NetBusiness') is not None:
            self.net_business = m.get('NetBusiness')
        if m.get('NetType') is not None:
            self.net_type = m.get('NetType')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('ParentUid') is not None:
            self.parent_uid = m.get('ParentUid')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('SubNetBusiness') is not None:
            self.sub_net_business = m.get('SubNetBusiness')
        if m.get('TopParent') is not None:
            self.top_parent = m.get('TopParent')
        if m.get('TreeType') is not None:
            self.tree_type = m.get('TreeType')
        if m.get('ZoneName') is not None:
            self.zone_name = m.get('ZoneName')
        return self


class ListIpBlocksShrinkRequest(TeaModel):
    def __init__(self, bottom_node=None, category=None, ext_attributes_shrink=None, instance_id=None, ip=None,
                 ip_block_code=None, ip_list_shrink=None, leaf_node=None, max_results=None, net_business=None, net_type=None,
                 next_token=None, parent_uid=None, status=None, sub_net_business=None, top_parent=None, tree_type=None,
                 zone_name=None):
        self.bottom_node = bottom_node  # type: bool
        self.category = category  # type: str
        self.ext_attributes_shrink = ext_attributes_shrink  # type: str
        self.instance_id = instance_id  # type: str
        self.ip = ip  # type: str
        self.ip_block_code = ip_block_code  # type: str
        self.ip_list_shrink = ip_list_shrink  # type: str
        self.leaf_node = leaf_node  # type: bool
        self.max_results = max_results  # type: int
        self.net_business = net_business  # type: str
        self.net_type = net_type  # type: str
        self.next_token = next_token  # type: str
        self.parent_uid = parent_uid  # type: str
        self.status = status  # type: str
        self.sub_net_business = sub_net_business  # type: str
        self.top_parent = top_parent  # type: bool
        self.tree_type = tree_type  # type: bool
        self.zone_name = zone_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListIpBlocksShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bottom_node is not None:
            result['BottomNode'] = self.bottom_node
        if self.category is not None:
            result['Category'] = self.category
        if self.ext_attributes_shrink is not None:
            result['ExtAttributes'] = self.ext_attributes_shrink
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.ip is not None:
            result['Ip'] = self.ip
        if self.ip_block_code is not None:
            result['IpBlockCode'] = self.ip_block_code
        if self.ip_list_shrink is not None:
            result['IpList'] = self.ip_list_shrink
        if self.leaf_node is not None:
            result['LeafNode'] = self.leaf_node
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.net_business is not None:
            result['NetBusiness'] = self.net_business
        if self.net_type is not None:
            result['NetType'] = self.net_type
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.parent_uid is not None:
            result['ParentUid'] = self.parent_uid
        if self.status is not None:
            result['Status'] = self.status
        if self.sub_net_business is not None:
            result['SubNetBusiness'] = self.sub_net_business
        if self.top_parent is not None:
            result['TopParent'] = self.top_parent
        if self.tree_type is not None:
            result['TreeType'] = self.tree_type
        if self.zone_name is not None:
            result['ZoneName'] = self.zone_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BottomNode') is not None:
            self.bottom_node = m.get('BottomNode')
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('ExtAttributes') is not None:
            self.ext_attributes_shrink = m.get('ExtAttributes')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Ip') is not None:
            self.ip = m.get('Ip')
        if m.get('IpBlockCode') is not None:
            self.ip_block_code = m.get('IpBlockCode')
        if m.get('IpList') is not None:
            self.ip_list_shrink = m.get('IpList')
        if m.get('LeafNode') is not None:
            self.leaf_node = m.get('LeafNode')
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NetBusiness') is not None:
            self.net_business = m.get('NetBusiness')
        if m.get('NetType') is not None:
            self.net_type = m.get('NetType')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('ParentUid') is not None:
            self.parent_uid = m.get('ParentUid')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('SubNetBusiness') is not None:
            self.sub_net_business = m.get('SubNetBusiness')
        if m.get('TopParent') is not None:
            self.top_parent = m.get('TopParent')
        if m.get('TreeType') is not None:
            self.tree_type = m.get('TreeType')
        if m.get('ZoneName') is not None:
            self.zone_name = m.get('ZoneName')
        return self


class ListIpBlocksResponseBodyIpBlockTasksIpList(TeaModel):
    def __init__(self, dev_id=None, dev_name=None, ip=None, origin=None, ping=None):
        self.dev_id = dev_id  # type: str
        self.dev_name = dev_name  # type: str
        self.ip = ip  # type: str
        self.origin = origin  # type: str
        self.ping = ping  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListIpBlocksResponseBodyIpBlockTasksIpList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dev_id is not None:
            result['DevId'] = self.dev_id
        if self.dev_name is not None:
            result['DevName'] = self.dev_name
        if self.ip is not None:
            result['Ip'] = self.ip
        if self.origin is not None:
            result['Origin'] = self.origin
        if self.ping is not None:
            result['Ping'] = self.ping
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DevId') is not None:
            self.dev_id = m.get('DevId')
        if m.get('DevName') is not None:
            self.dev_name = m.get('DevName')
        if m.get('Ip') is not None:
            self.ip = m.get('Ip')
        if m.get('Origin') is not None:
            self.origin = m.get('Origin')
        if m.get('Ping') is not None:
            self.ping = m.get('Ping')
        return self


class ListIpBlocksResponseBodyIpBlockTasks(TeaModel):
    def __init__(self, domain=None, gmt_create_time=None, gmt_modified_time=None, ip=None, ip_list=None, msg=None,
                 status=None, task_id=None, total_ip_count=None):
        self.domain = domain  # type: str
        self.gmt_create_time = gmt_create_time  # type: str
        self.gmt_modified_time = gmt_modified_time  # type: str
        self.ip = ip  # type: str
        self.ip_list = ip_list  # type: list[ListIpBlocksResponseBodyIpBlockTasksIpList]
        self.msg = msg  # type: str
        self.status = status  # type: str
        self.task_id = task_id  # type: str
        self.total_ip_count = total_ip_count  # type: long

    def validate(self):
        if self.ip_list:
            for k in self.ip_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListIpBlocksResponseBodyIpBlockTasks, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.domain is not None:
            result['Domain'] = self.domain
        if self.gmt_create_time is not None:
            result['GmtCreateTime'] = self.gmt_create_time
        if self.gmt_modified_time is not None:
            result['GmtModifiedTime'] = self.gmt_modified_time
        if self.ip is not None:
            result['Ip'] = self.ip
        result['IpList'] = []
        if self.ip_list is not None:
            for k in self.ip_list:
                result['IpList'].append(k.to_map() if k else None)
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.status is not None:
            result['Status'] = self.status
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.total_ip_count is not None:
            result['TotalIpCount'] = self.total_ip_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Domain') is not None:
            self.domain = m.get('Domain')
        if m.get('GmtCreateTime') is not None:
            self.gmt_create_time = m.get('GmtCreateTime')
        if m.get('GmtModifiedTime') is not None:
            self.gmt_modified_time = m.get('GmtModifiedTime')
        if m.get('Ip') is not None:
            self.ip = m.get('Ip')
        self.ip_list = []
        if m.get('IpList') is not None:
            for k in m.get('IpList'):
                temp_model = ListIpBlocksResponseBodyIpBlockTasksIpList()
                self.ip_list.append(temp_model.from_map(k))
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('TotalIpCount') is not None:
            self.total_ip_count = m.get('TotalIpCount')
        return self


class ListIpBlocksResponseBodyIpBlockZoneLayer(TeaModel):
    def __init__(self, name=None, value=None):
        # 园区层级名称
        self.name = name  # type: str
        # 园区层级值
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListIpBlocksResponseBodyIpBlockZoneLayer, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.name is not None:
            result['Name'] = self.name
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListIpBlocksResponseBodyIpBlock(TeaModel):
    def __init__(self, abbr=None, application=None, backup_device_name=None, business_type_id=None,
                 business_type_name=None, category=None, description=None, device_name=None, ext_attributes=None, ip_block_code=None,
                 ip_block_id=None, ip_blocks=None, is_lock=None, limit_zone_types=None, net_business=None, net_type=None,
                 ownership=None, parent_id=None, query_ip_list=None, split_rate=None, status=None,
                 sub_business_type_name=None, tasks=None, zone_layer=None, zone_name=None):
        self.abbr = abbr  # type: str
        # IP用途
        self.application = application  # type: str
        # 备份设备名称
        self.backup_device_name = backup_device_name  # type: str
        # 业务类型UID
        self.business_type_id = business_type_id  # type: str
        self.business_type_name = business_type_name  # type: str
        self.category = category  # type: str
        # 备注
        self.description = description  # type: str
        # 设备名称
        self.device_name = device_name  # type: str
        self.ext_attributes = ext_attributes  # type: dict[str, any]
        self.ip_block_code = ip_block_code  # type: str
        self.ip_block_id = ip_block_id  # type: str
        self.ip_blocks = ip_blocks  # type: list[str]
        self.is_lock = is_lock  # type: long
        self.limit_zone_types = limit_zone_types  # type: str
        # 公网地址类型 INC GUEST VIP
        self.net_business = net_business  # type: str
        # 公网私网标志 PUBLIC PRIVATE
        self.net_type = net_type  # type: str
        # IP归属
        self.ownership = ownership  # type: str
        self.parent_id = parent_id  # type: str
        self.query_ip_list = query_ip_list  # type: list[str]
        self.split_rate = split_rate  # type: float
        self.status = status  # type: str
        self.sub_business_type_name = sub_business_type_name  # type: str
        self.tasks = tasks  # type: list[ListIpBlocksResponseBodyIpBlockTasks]
        # 园区层级
        self.zone_layer = zone_layer  # type: list[ListIpBlocksResponseBodyIpBlockZoneLayer]
        self.zone_name = zone_name  # type: str

    def validate(self):
        if self.tasks:
            for k in self.tasks:
                if k:
                    k.validate()
        if self.zone_layer:
            for k in self.zone_layer:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListIpBlocksResponseBodyIpBlock, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.abbr is not None:
            result['Abbr'] = self.abbr
        if self.application is not None:
            result['Application'] = self.application
        if self.backup_device_name is not None:
            result['BackupDeviceName'] = self.backup_device_name
        if self.business_type_id is not None:
            result['BusinessTypeId'] = self.business_type_id
        if self.business_type_name is not None:
            result['BusinessTypeName'] = self.business_type_name
        if self.category is not None:
            result['Category'] = self.category
        if self.description is not None:
            result['Description'] = self.description
        if self.device_name is not None:
            result['DeviceName'] = self.device_name
        if self.ext_attributes is not None:
            result['ExtAttributes'] = self.ext_attributes
        if self.ip_block_code is not None:
            result['IpBlockCode'] = self.ip_block_code
        if self.ip_block_id is not None:
            result['IpBlockId'] = self.ip_block_id
        if self.ip_blocks is not None:
            result['IpBlocks'] = self.ip_blocks
        if self.is_lock is not None:
            result['IsLock'] = self.is_lock
        if self.limit_zone_types is not None:
            result['LimitZoneTypes'] = self.limit_zone_types
        if self.net_business is not None:
            result['NetBusiness'] = self.net_business
        if self.net_type is not None:
            result['NetType'] = self.net_type
        if self.ownership is not None:
            result['Ownership'] = self.ownership
        if self.parent_id is not None:
            result['ParentId'] = self.parent_id
        if self.query_ip_list is not None:
            result['QueryIpList'] = self.query_ip_list
        if self.split_rate is not None:
            result['SplitRate'] = self.split_rate
        if self.status is not None:
            result['Status'] = self.status
        if self.sub_business_type_name is not None:
            result['SubBusinessTypeName'] = self.sub_business_type_name
        result['Tasks'] = []
        if self.tasks is not None:
            for k in self.tasks:
                result['Tasks'].append(k.to_map() if k else None)
        result['ZoneLayer'] = []
        if self.zone_layer is not None:
            for k in self.zone_layer:
                result['ZoneLayer'].append(k.to_map() if k else None)
        if self.zone_name is not None:
            result['ZoneName'] = self.zone_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Abbr') is not None:
            self.abbr = m.get('Abbr')
        if m.get('Application') is not None:
            self.application = m.get('Application')
        if m.get('BackupDeviceName') is not None:
            self.backup_device_name = m.get('BackupDeviceName')
        if m.get('BusinessTypeId') is not None:
            self.business_type_id = m.get('BusinessTypeId')
        if m.get('BusinessTypeName') is not None:
            self.business_type_name = m.get('BusinessTypeName')
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('DeviceName') is not None:
            self.device_name = m.get('DeviceName')
        if m.get('ExtAttributes') is not None:
            self.ext_attributes = m.get('ExtAttributes')
        if m.get('IpBlockCode') is not None:
            self.ip_block_code = m.get('IpBlockCode')
        if m.get('IpBlockId') is not None:
            self.ip_block_id = m.get('IpBlockId')
        if m.get('IpBlocks') is not None:
            self.ip_blocks = m.get('IpBlocks')
        if m.get('IsLock') is not None:
            self.is_lock = m.get('IsLock')
        if m.get('LimitZoneTypes') is not None:
            self.limit_zone_types = m.get('LimitZoneTypes')
        if m.get('NetBusiness') is not None:
            self.net_business = m.get('NetBusiness')
        if m.get('NetType') is not None:
            self.net_type = m.get('NetType')
        if m.get('Ownership') is not None:
            self.ownership = m.get('Ownership')
        if m.get('ParentId') is not None:
            self.parent_id = m.get('ParentId')
        if m.get('QueryIpList') is not None:
            self.query_ip_list = m.get('QueryIpList')
        if m.get('SplitRate') is not None:
            self.split_rate = m.get('SplitRate')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('SubBusinessTypeName') is not None:
            self.sub_business_type_name = m.get('SubBusinessTypeName')
        self.tasks = []
        if m.get('Tasks') is not None:
            for k in m.get('Tasks'):
                temp_model = ListIpBlocksResponseBodyIpBlockTasks()
                self.tasks.append(temp_model.from_map(k))
        self.zone_layer = []
        if m.get('ZoneLayer') is not None:
            for k in m.get('ZoneLayer'):
                temp_model = ListIpBlocksResponseBodyIpBlockZoneLayer()
                self.zone_layer.append(temp_model.from_map(k))
        if m.get('ZoneName') is not None:
            self.zone_name = m.get('ZoneName')
        return self


class ListIpBlocksResponseBody(TeaModel):
    def __init__(self, ip_block=None, max_results=None, next_token=None, request_id=None, total_count=None):
        self.ip_block = ip_block  # type: list[ListIpBlocksResponseBodyIpBlock]
        self.max_results = max_results  # type: int
        self.next_token = next_token  # type: int
        self.request_id = request_id  # type: str
        self.total_count = total_count  # type: int

    def validate(self):
        if self.ip_block:
            for k in self.ip_block:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListIpBlocksResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['IpBlock'] = []
        if self.ip_block is not None:
            for k in self.ip_block:
                result['IpBlock'].append(k.to_map() if k else None)
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.ip_block = []
        if m.get('IpBlock') is not None:
            for k in m.get('IpBlock'):
                temp_model = ListIpBlocksResponseBodyIpBlock()
                self.ip_block.append(temp_model.from_map(k))
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListIpBlocksResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListIpBlocksResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListIpBlocksResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListIpBlocksResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListLinksRequest(TeaModel):
    def __init__(self, device_name_a=None, device_name_b=None, ip_a=None, ip_b=None, link_name=None, link_no=None,
                 link_status=None, link_type=None, max_results=None, next_token=None, port_a=None, port_b=None):
        self.device_name_a = device_name_a  # type: str
        self.device_name_b = device_name_b  # type: str
        self.ip_a = ip_a  # type: str
        self.ip_b = ip_b  # type: str
        self.link_name = link_name  # type: str
        self.link_no = link_no  # type: str
        self.link_status = link_status  # type: str
        self.link_type = link_type  # type: str
        self.max_results = max_results  # type: int
        self.next_token = next_token  # type: str
        self.port_a = port_a  # type: str
        self.port_b = port_b  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListLinksRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_name_a is not None:
            result['DeviceNameA'] = self.device_name_a
        if self.device_name_b is not None:
            result['DeviceNameB'] = self.device_name_b
        if self.ip_a is not None:
            result['IpA'] = self.ip_a
        if self.ip_b is not None:
            result['IpB'] = self.ip_b
        if self.link_name is not None:
            result['LinkName'] = self.link_name
        if self.link_no is not None:
            result['LinkNo'] = self.link_no
        if self.link_status is not None:
            result['LinkStatus'] = self.link_status
        if self.link_type is not None:
            result['LinkType'] = self.link_type
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.port_a is not None:
            result['PortA'] = self.port_a
        if self.port_b is not None:
            result['PortB'] = self.port_b
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeviceNameA') is not None:
            self.device_name_a = m.get('DeviceNameA')
        if m.get('DeviceNameB') is not None:
            self.device_name_b = m.get('DeviceNameB')
        if m.get('IpA') is not None:
            self.ip_a = m.get('IpA')
        if m.get('IpB') is not None:
            self.ip_b = m.get('IpB')
        if m.get('LinkName') is not None:
            self.link_name = m.get('LinkName')
        if m.get('LinkNo') is not None:
            self.link_no = m.get('LinkNo')
        if m.get('LinkStatus') is not None:
            self.link_status = m.get('LinkStatus')
        if m.get('LinkType') is not None:
            self.link_type = m.get('LinkType')
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('PortA') is not None:
            self.port_a = m.get('PortA')
        if m.get('PortB') is not None:
            self.port_b = m.get('PortB')
        return self


class ListLinksResponseBodyContent(TeaModel):
    def __init__(self, device_name_a=None, device_name_b=None, gmt_create=None, gmt_modified=None, idx_a=None,
                 idx_b=None, ip_a=None, ip_b=None, job_id=None, link_name=None, link_no=None, link_status=None,
                 link_type=None, message=None, port_a=None, port_b=None, port_desc_a=None, port_desc_b=None,
                 port_status_a=None, port_status_b=None, port_type_a=None, port_type_b=None, region_id=None):
        # A端设备名
        self.device_name_a = device_name_a  # type: str
        # B端设备名
        self.device_name_b = device_name_b  # type: str
        # 创建时间
        self.gmt_create = gmt_create  # type: str
        # 修改时间
        self.gmt_modified = gmt_modified  # type: str
        # A端端口索引
        self.idx_a = idx_a  # type: str
        # B端端口索引
        self.idx_b = idx_b  # type: str
        # A端IP
        self.ip_a = ip_a  # type: str
        # B端IP
        self.ip_b = ip_b  # type: str
        # 链路发现任务
        self.job_id = job_id  # type: str
        # 链路名称
        self.link_name = link_name  # type: str
        # 链路编号
        self.link_no = link_no  # type: str
        # 链路状态
        self.link_status = link_status  # type: str
        # 链路类型（单端、双端）
        self.link_type = link_type  # type: str
        # 报错信息或者日志
        self.message = message  # type: str
        # A端端口名
        self.port_a = port_a  # type: str
        # B端端口名
        self.port_b = port_b  # type: str
        self.port_desc_a = port_desc_a  # type: str
        self.port_desc_b = port_desc_b  # type: str
        # A端端口状态
        self.port_status_a = port_status_a  # type: str
        # B端端口状态
        self.port_status_b = port_status_b  # type: str
        # A端端口类型
        self.port_type_a = port_type_a  # type: str
        # B端端口类型
        self.port_type_b = port_type_b  # type: str
        # 代表region的资源属性字段
        self.region_id = region_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListLinksResponseBodyContent, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_name_a is not None:
            result['DeviceNameA'] = self.device_name_a
        if self.device_name_b is not None:
            result['DeviceNameB'] = self.device_name_b
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.idx_a is not None:
            result['IdxA'] = self.idx_a
        if self.idx_b is not None:
            result['IdxB'] = self.idx_b
        if self.ip_a is not None:
            result['IpA'] = self.ip_a
        if self.ip_b is not None:
            result['IpB'] = self.ip_b
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.link_name is not None:
            result['LinkName'] = self.link_name
        if self.link_no is not None:
            result['LinkNo'] = self.link_no
        if self.link_status is not None:
            result['LinkStatus'] = self.link_status
        if self.link_type is not None:
            result['LinkType'] = self.link_type
        if self.message is not None:
            result['Message'] = self.message
        if self.port_a is not None:
            result['PortA'] = self.port_a
        if self.port_b is not None:
            result['PortB'] = self.port_b
        if self.port_desc_a is not None:
            result['PortDescA'] = self.port_desc_a
        if self.port_desc_b is not None:
            result['PortDescB'] = self.port_desc_b
        if self.port_status_a is not None:
            result['PortStatusA'] = self.port_status_a
        if self.port_status_b is not None:
            result['PortStatusB'] = self.port_status_b
        if self.port_type_a is not None:
            result['PortTypeA'] = self.port_type_a
        if self.port_type_b is not None:
            result['PortTypeB'] = self.port_type_b
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeviceNameA') is not None:
            self.device_name_a = m.get('DeviceNameA')
        if m.get('DeviceNameB') is not None:
            self.device_name_b = m.get('DeviceNameB')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('IdxA') is not None:
            self.idx_a = m.get('IdxA')
        if m.get('IdxB') is not None:
            self.idx_b = m.get('IdxB')
        if m.get('IpA') is not None:
            self.ip_a = m.get('IpA')
        if m.get('IpB') is not None:
            self.ip_b = m.get('IpB')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('LinkName') is not None:
            self.link_name = m.get('LinkName')
        if m.get('LinkNo') is not None:
            self.link_no = m.get('LinkNo')
        if m.get('LinkStatus') is not None:
            self.link_status = m.get('LinkStatus')
        if m.get('LinkType') is not None:
            self.link_type = m.get('LinkType')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('PortA') is not None:
            self.port_a = m.get('PortA')
        if m.get('PortB') is not None:
            self.port_b = m.get('PortB')
        if m.get('PortDescA') is not None:
            self.port_desc_a = m.get('PortDescA')
        if m.get('PortDescB') is not None:
            self.port_desc_b = m.get('PortDescB')
        if m.get('PortStatusA') is not None:
            self.port_status_a = m.get('PortStatusA')
        if m.get('PortStatusB') is not None:
            self.port_status_b = m.get('PortStatusB')
        if m.get('PortTypeA') is not None:
            self.port_type_a = m.get('PortTypeA')
        if m.get('PortTypeB') is not None:
            self.port_type_b = m.get('PortTypeB')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        return self


class ListLinksResponseBody(TeaModel):
    def __init__(self, content=None, next_token=None, request_id=None, total_count=None):
        self.content = content  # type: list[ListLinksResponseBodyContent]
        self.next_token = next_token  # type: int
        self.request_id = request_id  # type: str
        self.total_count = total_count  # type: int

    def validate(self):
        if self.content:
            for k in self.content:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListLinksResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Content'] = []
        if self.content is not None:
            for k in self.content:
                result['Content'].append(k.to_map() if k else None)
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.content = []
        if m.get('Content') is not None:
            for k in m.get('Content'):
                temp_model = ListLinksResponseBodyContent()
                self.content.append(temp_model.from_map(k))
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListLinksResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListLinksResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListLinksResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListLinksResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListLogsRequest(TeaModel):
    def __init__(self, alarm_status=None, content=None, device_id=None, end=None, instance_id=None, log_type=None,
                 max_results=None, next_token=None, sort=None, start=None):
        self.alarm_status = alarm_status  # type: str
        self.content = content  # type: str
        self.device_id = device_id  # type: str
        self.end = end  # type: long
        self.instance_id = instance_id  # type: str
        self.log_type = log_type  # type: str
        self.max_results = max_results  # type: int
        self.next_token = next_token  # type: str
        self.sort = sort  # type: str
        self.start = start  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListLogsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alarm_status is not None:
            result['AlarmStatus'] = self.alarm_status
        if self.content is not None:
            result['Content'] = self.content
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.end is not None:
            result['End'] = self.end
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.log_type is not None:
            result['LogType'] = self.log_type
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.sort is not None:
            result['Sort'] = self.sort
        if self.start is not None:
            result['Start'] = self.start
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AlarmStatus') is not None:
            self.alarm_status = m.get('AlarmStatus')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('End') is not None:
            self.end = m.get('End')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('LogType') is not None:
            self.log_type = m.get('LogType')
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('Sort') is not None:
            self.sort = m.get('Sort')
        if m.get('Start') is not None:
            self.start = m.get('Start')
        return self


class ListLogsResponseBodyLogsResourceDevice(TeaModel):
    def __init__(self, host_name=None, physical_space=None):
        self.host_name = host_name  # type: str
        self.physical_space = physical_space  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListLogsResponseBodyLogsResourceDevice, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.host_name is not None:
            result['HostName'] = self.host_name
        if self.physical_space is not None:
            result['PhysicalSpace'] = self.physical_space
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('HostName') is not None:
            self.host_name = m.get('HostName')
        if m.get('PhysicalSpace') is not None:
            self.physical_space = m.get('PhysicalSpace')
        return self


class ListLogsResponseBodyLogs(TeaModel):
    def __init__(self, alarm_object=None, alarm_status=None, alarm_type=None, device_id=None, log=None,
                 receive_time=None, resource_device=None, time=None):
        self.alarm_object = alarm_object  # type: str
        self.alarm_status = alarm_status  # type: str
        self.alarm_type = alarm_type  # type: str
        self.device_id = device_id  # type: str
        self.log = log  # type: str
        self.receive_time = receive_time  # type: str
        self.resource_device = resource_device  # type: ListLogsResponseBodyLogsResourceDevice
        self.time = time  # type: str

    def validate(self):
        if self.resource_device:
            self.resource_device.validate()

    def to_map(self):
        _map = super(ListLogsResponseBodyLogs, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alarm_object is not None:
            result['AlarmObject'] = self.alarm_object
        if self.alarm_status is not None:
            result['AlarmStatus'] = self.alarm_status
        if self.alarm_type is not None:
            result['AlarmType'] = self.alarm_type
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.log is not None:
            result['Log'] = self.log
        if self.receive_time is not None:
            result['ReceiveTime'] = self.receive_time
        if self.resource_device is not None:
            result['ResourceDevice'] = self.resource_device.to_map()
        if self.time is not None:
            result['Time'] = self.time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AlarmObject') is not None:
            self.alarm_object = m.get('AlarmObject')
        if m.get('AlarmStatus') is not None:
            self.alarm_status = m.get('AlarmStatus')
        if m.get('AlarmType') is not None:
            self.alarm_type = m.get('AlarmType')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('Log') is not None:
            self.log = m.get('Log')
        if m.get('ReceiveTime') is not None:
            self.receive_time = m.get('ReceiveTime')
        if m.get('ResourceDevice') is not None:
            temp_model = ListLogsResponseBodyLogsResourceDevice()
            self.resource_device = temp_model.from_map(m['ResourceDevice'])
        if m.get('Time') is not None:
            self.time = m.get('Time')
        return self


class ListLogsResponseBody(TeaModel):
    def __init__(self, logs=None, max_results=None, next_token=None, request_id=None, total_count=None):
        self.logs = logs  # type: list[ListLogsResponseBodyLogs]
        self.max_results = max_results  # type: int
        self.next_token = next_token  # type: str
        self.request_id = request_id  # type: str
        self.total_count = total_count  # type: int

    def validate(self):
        if self.logs:
            for k in self.logs:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListLogsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Logs'] = []
        if self.logs is not None:
            for k in self.logs:
                result['Logs'].append(k.to_map() if k else None)
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.logs = []
        if m.get('Logs') is not None:
            for k in m.get('Logs'):
                temp_model = ListLogsResponseBodyLogs()
                self.logs.append(temp_model.from_map(k))
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListLogsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListLogsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListLogsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListLogsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListMonitorDataRequest(TeaModel):
    def __init__(self, aggregate_data_id=None, aggregation_type=None, app_id=None, data_item=None, data_type=None,
                 dedicated_line_id=None, device_id=None, end=None, instance_id=None, key=None, monitor_item_id=None,
                 port_collection_id=None, start=None):
        self.aggregate_data_id = aggregate_data_id  # type: str
        self.aggregation_type = aggregation_type  # type: str
        self.app_id = app_id  # type: str
        self.data_item = data_item  # type: str
        self.data_type = data_type  # type: str
        self.dedicated_line_id = dedicated_line_id  # type: str
        self.device_id = device_id  # type: str
        self.end = end  # type: long
        self.instance_id = instance_id  # type: str
        self.key = key  # type: str
        self.monitor_item_id = monitor_item_id  # type: str
        self.port_collection_id = port_collection_id  # type: str
        self.start = start  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListMonitorDataRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aggregate_data_id is not None:
            result['AggregateDataId'] = self.aggregate_data_id
        if self.aggregation_type is not None:
            result['AggregationType'] = self.aggregation_type
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.data_item is not None:
            result['DataItem'] = self.data_item
        if self.data_type is not None:
            result['DataType'] = self.data_type
        if self.dedicated_line_id is not None:
            result['DedicatedLineId'] = self.dedicated_line_id
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.end is not None:
            result['End'] = self.end
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.key is not None:
            result['Key'] = self.key
        if self.monitor_item_id is not None:
            result['MonitorItemId'] = self.monitor_item_id
        if self.port_collection_id is not None:
            result['PortCollectionId'] = self.port_collection_id
        if self.start is not None:
            result['Start'] = self.start
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AggregateDataId') is not None:
            self.aggregate_data_id = m.get('AggregateDataId')
        if m.get('AggregationType') is not None:
            self.aggregation_type = m.get('AggregationType')
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('DataItem') is not None:
            self.data_item = m.get('DataItem')
        if m.get('DataType') is not None:
            self.data_type = m.get('DataType')
        if m.get('DedicatedLineId') is not None:
            self.dedicated_line_id = m.get('DedicatedLineId')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('End') is not None:
            self.end = m.get('End')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('MonitorItemId') is not None:
            self.monitor_item_id = m.get('MonitorItemId')
        if m.get('PortCollectionId') is not None:
            self.port_collection_id = m.get('PortCollectionId')
        if m.get('Start') is not None:
            self.start = m.get('Start')
        return self


class ListMonitorDataResponseBodyMonitorData(TeaModel):
    def __init__(self, data_item=None, key=None, timestamp=None, value=None):
        self.data_item = data_item  # type: str
        self.key = key  # type: str
        self.timestamp = timestamp  # type: long
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListMonitorDataResponseBodyMonitorData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data_item is not None:
            result['DataItem'] = self.data_item
        if self.key is not None:
            result['Key'] = self.key
        if self.timestamp is not None:
            result['Timestamp'] = self.timestamp
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DataItem') is not None:
            self.data_item = m.get('DataItem')
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Timestamp') is not None:
            self.timestamp = m.get('Timestamp')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListMonitorDataResponseBody(TeaModel):
    def __init__(self, monitor_data=None, request_id=None):
        self.monitor_data = monitor_data  # type: list[ListMonitorDataResponseBodyMonitorData]
        self.request_id = request_id  # type: str

    def validate(self):
        if self.monitor_data:
            for k in self.monitor_data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListMonitorDataResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['MonitorData'] = []
        if self.monitor_data is not None:
            for k in self.monitor_data:
                result['MonitorData'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.monitor_data = []
        if m.get('MonitorData') is not None:
            for k in m.get('MonitorData'):
                temp_model = ListMonitorDataResponseBodyMonitorData()
                self.monitor_data.append(temp_model.from_map(k))
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class ListMonitorDataResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListMonitorDataResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListMonitorDataResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListMonitorDataResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListNotificationHistoriesRequest(TeaModel):
    def __init__(self, aggregate_data_id=None, alarm_status=None, app_id=None, dedicated_line_id=None,
                 device_id=None, end=None, event_item_id=None, instance_id=None, max_results=None, message=None,
                 monitor_item_id=None, next_token=None, notification_group_id=None, notification_mode=None, physical_space_id=None,
                 port_collection_id=None, start=None, status=None, type=None):
        self.aggregate_data_id = aggregate_data_id  # type: str
        # 监控状态
        self.alarm_status = alarm_status  # type: str
        # 应用ID
        self.app_id = app_id  # type: str
        self.dedicated_line_id = dedicated_line_id  # type: str
        self.device_id = device_id  # type: str
        # 查询结束时间戳
        self.end = end  # type: long
        # 事件id
        self.event_item_id = event_item_id  # type: str
        # 实例ID
        self.instance_id = instance_id  # type: str
        self.max_results = max_results  # type: int
        # 发送内容
        self.message = message  # type: str
        self.monitor_item_id = monitor_item_id  # type: str
        self.next_token = next_token  # type: str
        # 通知组id
        self.notification_group_id = notification_group_id  # type: str
        # 发送方式
        self.notification_mode = notification_mode  # type: str
        # 物理空间ID
        self.physical_space_id = physical_space_id  # type: str
        # 端口集ID
        self.port_collection_id = port_collection_id  # type: str
        # 查询开始时间戳
        self.start = start  # type: long
        # 发送状态
        self.status = status  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListNotificationHistoriesRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aggregate_data_id is not None:
            result['AggregateDataId'] = self.aggregate_data_id
        if self.alarm_status is not None:
            result['AlarmStatus'] = self.alarm_status
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.dedicated_line_id is not None:
            result['DedicatedLineId'] = self.dedicated_line_id
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.end is not None:
            result['End'] = self.end
        if self.event_item_id is not None:
            result['EventItemId'] = self.event_item_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.message is not None:
            result['Message'] = self.message
        if self.monitor_item_id is not None:
            result['MonitorItemId'] = self.monitor_item_id
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.notification_group_id is not None:
            result['NotificationGroupId'] = self.notification_group_id
        if self.notification_mode is not None:
            result['NotificationMode'] = self.notification_mode
        if self.physical_space_id is not None:
            result['PhysicalSpaceId'] = self.physical_space_id
        if self.port_collection_id is not None:
            result['PortCollectionId'] = self.port_collection_id
        if self.start is not None:
            result['Start'] = self.start
        if self.status is not None:
            result['Status'] = self.status
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AggregateDataId') is not None:
            self.aggregate_data_id = m.get('AggregateDataId')
        if m.get('AlarmStatus') is not None:
            self.alarm_status = m.get('AlarmStatus')
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('DedicatedLineId') is not None:
            self.dedicated_line_id = m.get('DedicatedLineId')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('End') is not None:
            self.end = m.get('End')
        if m.get('EventItemId') is not None:
            self.event_item_id = m.get('EventItemId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('MonitorItemId') is not None:
            self.monitor_item_id = m.get('MonitorItemId')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('NotificationGroupId') is not None:
            self.notification_group_id = m.get('NotificationGroupId')
        if m.get('NotificationMode') is not None:
            self.notification_mode = m.get('NotificationMode')
        if m.get('PhysicalSpaceId') is not None:
            self.physical_space_id = m.get('PhysicalSpaceId')
        if m.get('PortCollectionId') is not None:
            self.port_collection_id = m.get('PortCollectionId')
        if m.get('Start') is not None:
            self.start = m.get('Start')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class ListNotificationHistoriesResponseBodyNotificationHistories(TeaModel):
    def __init__(self, aggregate_data_id=None, alarm_status=None, app_id=None, dedicated_line_id=None,
                 device_id=None, message=None, monitor_item_id=None, notification_group_id=None,
                 notification_group_name=None, notification_mode=None, output=None, port_collection_id=None, status=None, time=None):
        self.aggregate_data_id = aggregate_data_id  # type: str
        # 监控状态
        self.alarm_status = alarm_status  # type: str
        # 应用ID
        self.app_id = app_id  # type: str
        self.dedicated_line_id = dedicated_line_id  # type: str
        self.device_id = device_id  # type: str
        self.message = message  # type: str
        self.monitor_item_id = monitor_item_id  # type: str
        self.notification_group_id = notification_group_id  # type: str
        self.notification_group_name = notification_group_name  # type: str
        self.notification_mode = notification_mode  # type: str
        self.output = output  # type: str
        # 端口集ID
        self.port_collection_id = port_collection_id  # type: str
        self.status = status  # type: str
        self.time = time  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListNotificationHistoriesResponseBodyNotificationHistories, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aggregate_data_id is not None:
            result['AggregateDataId'] = self.aggregate_data_id
        if self.alarm_status is not None:
            result['AlarmStatus'] = self.alarm_status
        if self.app_id is not None:
            result['AppId'] = self.app_id
        if self.dedicated_line_id is not None:
            result['DedicatedLineId'] = self.dedicated_line_id
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.message is not None:
            result['Message'] = self.message
        if self.monitor_item_id is not None:
            result['MonitorItemId'] = self.monitor_item_id
        if self.notification_group_id is not None:
            result['NotificationGroupId'] = self.notification_group_id
        if self.notification_group_name is not None:
            result['NotificationGroupName'] = self.notification_group_name
        if self.notification_mode is not None:
            result['NotificationMode'] = self.notification_mode
        if self.output is not None:
            result['Output'] = self.output
        if self.port_collection_id is not None:
            result['PortCollectionId'] = self.port_collection_id
        if self.status is not None:
            result['Status'] = self.status
        if self.time is not None:
            result['Time'] = self.time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AggregateDataId') is not None:
            self.aggregate_data_id = m.get('AggregateDataId')
        if m.get('AlarmStatus') is not None:
            self.alarm_status = m.get('AlarmStatus')
        if m.get('AppId') is not None:
            self.app_id = m.get('AppId')
        if m.get('DedicatedLineId') is not None:
            self.dedicated_line_id = m.get('DedicatedLineId')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('MonitorItemId') is not None:
            self.monitor_item_id = m.get('MonitorItemId')
        if m.get('NotificationGroupId') is not None:
            self.notification_group_id = m.get('NotificationGroupId')
        if m.get('NotificationGroupName') is not None:
            self.notification_group_name = m.get('NotificationGroupName')
        if m.get('NotificationMode') is not None:
            self.notification_mode = m.get('NotificationMode')
        if m.get('Output') is not None:
            self.output = m.get('Output')
        if m.get('PortCollectionId') is not None:
            self.port_collection_id = m.get('PortCollectionId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Time') is not None:
            self.time = m.get('Time')
        return self


class ListNotificationHistoriesResponseBody(TeaModel):
    def __init__(self, max_results=None, next_token=None, notification_histories=None, request_id=None,
                 total_count=None):
        self.max_results = max_results  # type: int
        self.next_token = next_token  # type: str
        self.notification_histories = notification_histories  # type: list[ListNotificationHistoriesResponseBodyNotificationHistories]
        # request Id
        self.request_id = request_id  # type: str
        self.total_count = total_count  # type: int

    def validate(self):
        if self.notification_histories:
            for k in self.notification_histories:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListNotificationHistoriesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        result['NotificationHistories'] = []
        if self.notification_histories is not None:
            for k in self.notification_histories:
                result['NotificationHistories'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        self.notification_histories = []
        if m.get('NotificationHistories') is not None:
            for k in m.get('NotificationHistories'):
                temp_model = ListNotificationHistoriesResponseBodyNotificationHistories()
                self.notification_histories.append(temp_model.from_map(k))
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListNotificationHistoriesResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListNotificationHistoriesResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListNotificationHistoriesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListNotificationHistoriesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListNotificationHistoriesStatisticsRequest(TeaModel):
    def __init__(self, end=None, instance_id=None, is_dedicated_line=None, is_device=None, is_monitor_item=None,
                 is_physical_space=None, max_results=None, next_token=None, physical_space_id=None, start=None, type=None):
        self.end = end  # type: long
        self.instance_id = instance_id  # type: str
        self.is_dedicated_line = is_dedicated_line  # type: bool
        self.is_device = is_device  # type: bool
        self.is_monitor_item = is_monitor_item  # type: bool
        self.is_physical_space = is_physical_space  # type: bool
        self.max_results = max_results  # type: int
        self.next_token = next_token  # type: str
        self.physical_space_id = physical_space_id  # type: str
        self.start = start  # type: long
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListNotificationHistoriesStatisticsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end is not None:
            result['End'] = self.end
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.is_dedicated_line is not None:
            result['IsDedicatedLine'] = self.is_dedicated_line
        if self.is_device is not None:
            result['IsDevice'] = self.is_device
        if self.is_monitor_item is not None:
            result['IsMonitorItem'] = self.is_monitor_item
        if self.is_physical_space is not None:
            result['IsPhysicalSpace'] = self.is_physical_space
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.physical_space_id is not None:
            result['PhysicalSpaceId'] = self.physical_space_id
        if self.start is not None:
            result['Start'] = self.start
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('End') is not None:
            self.end = m.get('End')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('IsDedicatedLine') is not None:
            self.is_dedicated_line = m.get('IsDedicatedLine')
        if m.get('IsDevice') is not None:
            self.is_device = m.get('IsDevice')
        if m.get('IsMonitorItem') is not None:
            self.is_monitor_item = m.get('IsMonitorItem')
        if m.get('IsPhysicalSpace') is not None:
            self.is_physical_space = m.get('IsPhysicalSpace')
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('PhysicalSpaceId') is not None:
            self.physical_space_id = m.get('PhysicalSpaceId')
        if m.get('Start') is not None:
            self.start = m.get('Start')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class ListNotificationHistoriesStatisticsResponseBodyQuota(TeaModel):
    def __init__(self, count=None, mode=None, quota=None):
        self.count = count  # type: str
        self.mode = mode  # type: str
        self.quota = quota  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListNotificationHistoriesStatisticsResponseBodyQuota, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.count is not None:
            result['Count'] = self.count
        if self.mode is not None:
            result['Mode'] = self.mode
        if self.quota is not None:
            result['Quota'] = self.quota
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Count') is not None:
            self.count = m.get('Count')
        if m.get('Mode') is not None:
            self.mode = m.get('Mode')
        if m.get('Quota') is not None:
            self.quota = m.get('Quota')
        return self


class ListNotificationHistoriesStatisticsResponseBodyStatistics(TeaModel):
    def __init__(self, count=None, name=None, resource_id=None):
        self.count = count  # type: str
        self.name = name  # type: str
        self.resource_id = resource_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListNotificationHistoriesStatisticsResponseBodyStatistics, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.count is not None:
            result['Count'] = self.count
        if self.name is not None:
            result['Name'] = self.name
        if self.resource_id is not None:
            result['ResourceId'] = self.resource_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Count') is not None:
            self.count = m.get('Count')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('ResourceId') is not None:
            self.resource_id = m.get('ResourceId')
        return self


class ListNotificationHistoriesStatisticsResponseBody(TeaModel):
    def __init__(self, max_results=None, next_token=None, quota=None, request_id=None, statistics=None,
                 total_count=None):
        self.max_results = max_results  # type: int
        self.next_token = next_token  # type: str
        self.quota = quota  # type: list[ListNotificationHistoriesStatisticsResponseBodyQuota]
        # Id of the request
        self.request_id = request_id  # type: str
        self.statistics = statistics  # type: list[ListNotificationHistoriesStatisticsResponseBodyStatistics]
        self.total_count = total_count  # type: int

    def validate(self):
        if self.quota:
            for k in self.quota:
                if k:
                    k.validate()
        if self.statistics:
            for k in self.statistics:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListNotificationHistoriesStatisticsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        result['Quota'] = []
        if self.quota is not None:
            for k in self.quota:
                result['Quota'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Statistics'] = []
        if self.statistics is not None:
            for k in self.statistics:
                result['Statistics'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        self.quota = []
        if m.get('Quota') is not None:
            for k in m.get('Quota'):
                temp_model = ListNotificationHistoriesStatisticsResponseBodyQuota()
                self.quota.append(temp_model.from_map(k))
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.statistics = []
        if m.get('Statistics') is not None:
            for k in m.get('Statistics'):
                temp_model = ListNotificationHistoriesStatisticsResponseBodyStatistics()
                self.statistics.append(temp_model.from_map(k))
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListNotificationHistoriesStatisticsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListNotificationHistoriesStatisticsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListNotificationHistoriesStatisticsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListNotificationHistoriesStatisticsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListOsVersionsRequest(TeaModel):
    def __init__(self, instance_id=None, max_results=None, next_token=None):
        self.instance_id = instance_id  # type: str
        self.max_results = max_results  # type: int
        self.next_token = next_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListOsVersionsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        return self


class ListOsVersionsResponseBodyOsVersion(TeaModel):
    def __init__(self, boot_patch=None, create_time=None, feature_patch=None, file_name=None, file_path=None,
                 model=None, os_version=None, os_version_id=None, status=None, system_patch=None, update_time=None,
                 vendor=None):
        self.boot_patch = boot_patch  # type: str
        self.create_time = create_time  # type: str
        self.feature_patch = feature_patch  # type: str
        # 文件名
        self.file_name = file_name  # type: str
        # 文件路径
        self.file_path = file_path  # type: str
        # 型号
        self.model = model  # type: str
        # 系统版本
        self.os_version = os_version  # type: str
        self.os_version_id = os_version_id  # type: str
        # 状态
        self.status = status  # type: str
        self.system_patch = system_patch  # type: str
        self.update_time = update_time  # type: str
        # 厂商
        self.vendor = vendor  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListOsVersionsResponseBodyOsVersion, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.boot_patch is not None:
            result['BootPatch'] = self.boot_patch
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.feature_patch is not None:
            result['FeaturePatch'] = self.feature_patch
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.file_path is not None:
            result['FilePath'] = self.file_path
        if self.model is not None:
            result['Model'] = self.model
        if self.os_version is not None:
            result['OsVersion'] = self.os_version
        if self.os_version_id is not None:
            result['OsVersionId'] = self.os_version_id
        if self.status is not None:
            result['Status'] = self.status
        if self.system_patch is not None:
            result['SystemPatch'] = self.system_patch
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BootPatch') is not None:
            self.boot_patch = m.get('BootPatch')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('FeaturePatch') is not None:
            self.feature_patch = m.get('FeaturePatch')
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('FilePath') is not None:
            self.file_path = m.get('FilePath')
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('OsVersion') is not None:
            self.os_version = m.get('OsVersion')
        if m.get('OsVersionId') is not None:
            self.os_version_id = m.get('OsVersionId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('SystemPatch') is not None:
            self.system_patch = m.get('SystemPatch')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        return self


class ListOsVersionsResponseBody(TeaModel):
    def __init__(self, max_results=None, next_token=None, os_version=None, request_id=None, total_count=None):
        self.max_results = max_results  # type: long
        self.next_token = next_token  # type: int
        self.os_version = os_version  # type: list[ListOsVersionsResponseBodyOsVersion]
        self.request_id = request_id  # type: str
        self.total_count = total_count  # type: int

    def validate(self):
        if self.os_version:
            for k in self.os_version:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListOsVersionsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        result['OsVersion'] = []
        if self.os_version is not None:
            for k in self.os_version:
                result['OsVersion'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        self.os_version = []
        if m.get('OsVersion') is not None:
            for k in m.get('OsVersion'):
                temp_model = ListOsVersionsResponseBodyOsVersion()
                self.os_version.append(temp_model.from_map(k))
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListOsVersionsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListOsVersionsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListOsVersionsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListOsVersionsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListPhysicalSpacesRequest(TeaModel):
    def __init__(self, instance_id=None, max_results=None, next_token=None, physical_space_ids=None,
                 physical_space_name=None):
        self.instance_id = instance_id  # type: str
        self.max_results = max_results  # type: int
        self.next_token = next_token  # type: str
        self.physical_space_ids = physical_space_ids  # type: list[str]
        self.physical_space_name = physical_space_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListPhysicalSpacesRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.physical_space_ids is not None:
            result['PhysicalSpaceIds'] = self.physical_space_ids
        if self.physical_space_name is not None:
            result['PhysicalSpaceName'] = self.physical_space_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('PhysicalSpaceIds') is not None:
            self.physical_space_ids = m.get('PhysicalSpaceIds')
        if m.get('PhysicalSpaceName') is not None:
            self.physical_space_name = m.get('PhysicalSpaceName')
        return self


class ListPhysicalSpacesShrinkRequest(TeaModel):
    def __init__(self, instance_id=None, max_results=None, next_token=None, physical_space_ids_shrink=None,
                 physical_space_name=None):
        self.instance_id = instance_id  # type: str
        self.max_results = max_results  # type: int
        self.next_token = next_token  # type: str
        self.physical_space_ids_shrink = physical_space_ids_shrink  # type: str
        self.physical_space_name = physical_space_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListPhysicalSpacesShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.physical_space_ids_shrink is not None:
            result['PhysicalSpaceIds'] = self.physical_space_ids_shrink
        if self.physical_space_name is not None:
            result['PhysicalSpaceName'] = self.physical_space_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('PhysicalSpaceIds') is not None:
            self.physical_space_ids_shrink = m.get('PhysicalSpaceIds')
        if m.get('PhysicalSpaceName') is not None:
            self.physical_space_name = m.get('PhysicalSpaceName')
        return self


class ListPhysicalSpacesResponseBodyPhysicalSpaces(TeaModel):
    def __init__(self, address=None, city=None, country=None, instance=None, owner=None, physical_space_id=None,
                 physical_space_name=None, province=None, remark=None, security_domain_list=None, space_abbreviation=None,
                 space_type=None):
        self.address = address  # type: str
        self.city = city  # type: str
        self.country = country  # type: str
        self.instance = instance  # type: str
        self.owner = owner  # type: str
        self.physical_space_id = physical_space_id  # type: str
        self.physical_space_name = physical_space_name  # type: str
        self.province = province  # type: str
        self.remark = remark  # type: str
        self.security_domain_list = security_domain_list  # type: list[str]
        self.space_abbreviation = space_abbreviation  # type: str
        self.space_type = space_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListPhysicalSpacesResponseBodyPhysicalSpaces, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.address is not None:
            result['Address'] = self.address
        if self.city is not None:
            result['City'] = self.city
        if self.country is not None:
            result['Country'] = self.country
        if self.instance is not None:
            result['Instance'] = self.instance
        if self.owner is not None:
            result['Owner'] = self.owner
        if self.physical_space_id is not None:
            result['PhysicalSpaceId'] = self.physical_space_id
        if self.physical_space_name is not None:
            result['PhysicalSpaceName'] = self.physical_space_name
        if self.province is not None:
            result['Province'] = self.province
        if self.remark is not None:
            result['Remark'] = self.remark
        if self.security_domain_list is not None:
            result['SecurityDomainList'] = self.security_domain_list
        if self.space_abbreviation is not None:
            result['SpaceAbbreviation'] = self.space_abbreviation
        if self.space_type is not None:
            result['SpaceType'] = self.space_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Address') is not None:
            self.address = m.get('Address')
        if m.get('City') is not None:
            self.city = m.get('City')
        if m.get('Country') is not None:
            self.country = m.get('Country')
        if m.get('Instance') is not None:
            self.instance = m.get('Instance')
        if m.get('Owner') is not None:
            self.owner = m.get('Owner')
        if m.get('PhysicalSpaceId') is not None:
            self.physical_space_id = m.get('PhysicalSpaceId')
        if m.get('PhysicalSpaceName') is not None:
            self.physical_space_name = m.get('PhysicalSpaceName')
        if m.get('Province') is not None:
            self.province = m.get('Province')
        if m.get('Remark') is not None:
            self.remark = m.get('Remark')
        if m.get('SecurityDomainList') is not None:
            self.security_domain_list = m.get('SecurityDomainList')
        if m.get('SpaceAbbreviation') is not None:
            self.space_abbreviation = m.get('SpaceAbbreviation')
        if m.get('SpaceType') is not None:
            self.space_type = m.get('SpaceType')
        return self


class ListPhysicalSpacesResponseBody(TeaModel):
    def __init__(self, max_results=None, next_token=None, physical_spaces=None, request_id=None, total_count=None):
        self.max_results = max_results  # type: int
        self.next_token = next_token  # type: int
        self.physical_spaces = physical_spaces  # type: list[ListPhysicalSpacesResponseBodyPhysicalSpaces]
        self.request_id = request_id  # type: str
        self.total_count = total_count  # type: int

    def validate(self):
        if self.physical_spaces:
            for k in self.physical_spaces:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListPhysicalSpacesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        result['PhysicalSpaces'] = []
        if self.physical_spaces is not None:
            for k in self.physical_spaces:
                result['PhysicalSpaces'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        self.physical_spaces = []
        if m.get('PhysicalSpaces') is not None:
            for k in m.get('PhysicalSpaces'):
                temp_model = ListPhysicalSpacesResponseBodyPhysicalSpaces()
                self.physical_spaces.append(temp_model.from_map(k))
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListPhysicalSpacesResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListPhysicalSpacesResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListPhysicalSpacesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListPhysicalSpacesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListRegionsResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, request_id=None, success=None):
        self.code = code  # type: str
        self.data = data  # type: str
        self.message = message  # type: str
        # Id of the request
        self.request_id = request_id  # type: str
        self.success = success  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListRegionsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListRegionsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListRegionsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListRegionsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListRegionsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListResourceInformationsRequest(TeaModel):
    def __init__(self, architecture_id=None, instance_id=None, max_results=None, next_token=None):
        self.architecture_id = architecture_id  # type: str
        self.instance_id = instance_id  # type: str
        self.max_results = max_results  # type: int
        self.next_token = next_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListResourceInformationsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.architecture_id is not None:
            result['ArchitectureId'] = self.architecture_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ArchitectureId') is not None:
            self.architecture_id = m.get('ArchitectureId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        return self


class ListResourceInformationsResponseBodyResourceInformationInformation(TeaModel):
    def __init__(self, key=None, key_action=None, key_attribute=None, key_description=None):
        # 键
        self.key = key  # type: str
        # 键动作
        self.key_action = key_action  # type: str
        # 键属性
        self.key_attribute = key_attribute  # type: str
        # 键描述
        self.key_description = key_description  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListResourceInformationsResponseBodyResourceInformationInformation, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.key_action is not None:
            result['KeyAction'] = self.key_action
        if self.key_attribute is not None:
            result['KeyAttribute'] = self.key_attribute
        if self.key_description is not None:
            result['KeyDescription'] = self.key_description
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('KeyAction') is not None:
            self.key_action = m.get('KeyAction')
        if m.get('KeyAttribute') is not None:
            self.key_attribute = m.get('KeyAttribute')
        if m.get('KeyDescription') is not None:
            self.key_description = m.get('KeyDescription')
        return self


class ListResourceInformationsResponseBodyResourceInformation(TeaModel):
    def __init__(self, information=None, resource_attribute=None, resource_information_id=None, resource_type=None):
        # 信息
        self.information = information  # type: list[ListResourceInformationsResponseBodyResourceInformationInformation]
        # 资源属性
        self.resource_attribute = resource_attribute  # type: str
        # 代表资源一级ID的资源属性字段
        self.resource_information_id = resource_information_id  # type: str
        # 资源类型
        self.resource_type = resource_type  # type: str

    def validate(self):
        if self.information:
            for k in self.information:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListResourceInformationsResponseBodyResourceInformation, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Information'] = []
        if self.information is not None:
            for k in self.information:
                result['Information'].append(k.to_map() if k else None)
        if self.resource_attribute is not None:
            result['ResourceAttribute'] = self.resource_attribute
        if self.resource_information_id is not None:
            result['ResourceInformationId'] = self.resource_information_id
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.information = []
        if m.get('Information') is not None:
            for k in m.get('Information'):
                temp_model = ListResourceInformationsResponseBodyResourceInformationInformation()
                self.information.append(temp_model.from_map(k))
        if m.get('ResourceAttribute') is not None:
            self.resource_attribute = m.get('ResourceAttribute')
        if m.get('ResourceInformationId') is not None:
            self.resource_information_id = m.get('ResourceInformationId')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        return self


class ListResourceInformationsResponseBody(TeaModel):
    def __init__(self, max_results=None, next_token=None, request_id=None, resource_information=None,
                 total_count=None):
        self.max_results = max_results  # type: long
        self.next_token = next_token  # type: int
        self.request_id = request_id  # type: str
        self.resource_information = resource_information  # type: list[ListResourceInformationsResponseBodyResourceInformation]
        self.total_count = total_count  # type: int

    def validate(self):
        if self.resource_information:
            for k in self.resource_information:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListResourceInformationsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['ResourceInformation'] = []
        if self.resource_information is not None:
            for k in self.resource_information:
                result['ResourceInformation'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.resource_information = []
        if m.get('ResourceInformation') is not None:
            for k in m.get('ResourceInformation'):
                temp_model = ListResourceInformationsResponseBodyResourceInformation()
                self.resource_information.append(temp_model.from_map(k))
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListResourceInformationsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListResourceInformationsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListResourceInformationsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListResourceInformationsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListResourceInstancesRequest(TeaModel):
    def __init__(self, instance_id=None, setup_project_id=None):
        self.instance_id = instance_id  # type: str
        self.setup_project_id = setup_project_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListResourceInstancesRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.setup_project_id is not None:
            result['SetupProjectId'] = self.setup_project_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('SetupProjectId') is not None:
            self.setup_project_id = m.get('SetupProjectId')
        return self


class ListResourceInstancesResponseBodyLogicResourceKeyList(TeaModel):
    def __init__(self, key=None, key_action=None, key_attribute=None, key_description=None, value=None):
        self.key = key  # type: str
        self.key_action = key_action  # type: str
        self.key_attribute = key_attribute  # type: str
        self.key_description = key_description  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListResourceInstancesResponseBodyLogicResourceKeyList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.key_action is not None:
            result['KeyAction'] = self.key_action
        if self.key_attribute is not None:
            result['KeyAttribute'] = self.key_attribute
        if self.key_description is not None:
            result['KeyDescription'] = self.key_description
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('KeyAction') is not None:
            self.key_action = m.get('KeyAction')
        if m.get('KeyAttribute') is not None:
            self.key_attribute = m.get('KeyAttribute')
        if m.get('KeyDescription') is not None:
            self.key_description = m.get('KeyDescription')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListResourceInstancesResponseBodyLogicResource(TeaModel):
    def __init__(self, key_list=None, resource_attribute=None, resource_type=None):
        self.key_list = key_list  # type: list[ListResourceInstancesResponseBodyLogicResourceKeyList]
        self.resource_attribute = resource_attribute  # type: str
        self.resource_type = resource_type  # type: str

    def validate(self):
        if self.key_list:
            for k in self.key_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListResourceInstancesResponseBodyLogicResource, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['KeyList'] = []
        if self.key_list is not None:
            for k in self.key_list:
                result['KeyList'].append(k.to_map() if k else None)
        if self.resource_attribute is not None:
            result['ResourceAttribute'] = self.resource_attribute
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.key_list = []
        if m.get('KeyList') is not None:
            for k in m.get('KeyList'):
                temp_model = ListResourceInstancesResponseBodyLogicResourceKeyList()
                self.key_list.append(temp_model.from_map(k))
        if m.get('ResourceAttribute') is not None:
            self.resource_attribute = m.get('ResourceAttribute')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        return self


class ListResourceInstancesResponseBody(TeaModel):
    def __init__(self, logic_resource=None, request_id=None):
        self.logic_resource = logic_resource  # type: list[ListResourceInstancesResponseBodyLogicResource]
        self.request_id = request_id  # type: str

    def validate(self):
        if self.logic_resource:
            for k in self.logic_resource:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListResourceInstancesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['LogicResource'] = []
        if self.logic_resource is not None:
            for k in self.logic_resource:
                result['LogicResource'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.logic_resource = []
        if m.get('LogicResource') is not None:
            for k in m.get('LogicResource'):
                temp_model = ListResourceInstancesResponseBodyLogicResource()
                self.logic_resource.append(temp_model.from_map(k))
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class ListResourceInstancesResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListResourceInstancesResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListResourceInstancesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListResourceInstancesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListResourceTypesResponseBodyResourceType(TeaModel):
    def __init__(self, key=None, resource_type=None, resource_type_name=None):
        self.key = key  # type: str
        self.resource_type = resource_type  # type: str
        self.resource_type_name = resource_type_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListResourceTypesResponseBodyResourceType, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        if self.resource_type_name is not None:
            result['ResourceTypeName'] = self.resource_type_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        if m.get('ResourceTypeName') is not None:
            self.resource_type_name = m.get('ResourceTypeName')
        return self


class ListResourceTypesResponseBody(TeaModel):
    def __init__(self, request_id=None, resource_type=None):
        self.request_id = request_id  # type: str
        self.resource_type = resource_type  # type: list[ListResourceTypesResponseBodyResourceType]

    def validate(self):
        if self.resource_type:
            for k in self.resource_type:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListResourceTypesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['ResourceType'] = []
        if self.resource_type is not None:
            for k in self.resource_type:
                result['ResourceType'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.resource_type = []
        if m.get('ResourceType') is not None:
            for k in m.get('ResourceType'):
                temp_model = ListResourceTypesResponseBodyResourceType()
                self.resource_type.append(temp_model.from_map(k))
        return self


class ListResourceTypesResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListResourceTypesResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListResourceTypesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListResourceTypesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListSetupProjectsRequest(TeaModel):
    def __init__(self, instance_id=None, max_results=None, next_token=None, space_id=None, status=None):
        self.instance_id = instance_id  # type: str
        self.max_results = max_results  # type: int
        self.next_token = next_token  # type: str
        self.space_id = space_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListSetupProjectsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.space_id is not None:
            result['SpaceId'] = self.space_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('SpaceId') is not None:
            self.space_id = m.get('SpaceId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class ListSetupProjectsResponseBodySetupProjectPackages(TeaModel):
    def __init__(self, device_number=None, model=None, role=None, vendor=None):
        # 设备号
        self.device_number = device_number  # type: long
        # 型号
        self.model = model  # type: str
        # 角色
        self.role = role  # type: str
        # 厂商
        self.vendor = vendor  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListSetupProjectsResponseBodySetupProjectPackages, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_number is not None:
            result['DeviceNumber'] = self.device_number
        if self.model is not None:
            result['Model'] = self.model
        if self.role is not None:
            result['Role'] = self.role
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeviceNumber') is not None:
            self.device_number = m.get('DeviceNumber')
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        return self


class ListSetupProjectsResponseBodySetupProject(TeaModel):
    def __init__(self, arch_version=None, architecture_id=None, create_time=None, delivery_time=None,
                 description=None, nodes=None, packages=None, progress=None, setup_project_id=None, space_id=None,
                 space_name=None, space_type=None):
        # 架构id
        self.arch_version = arch_version  # type: str
        self.architecture_id = architecture_id  # type: str
        # 代表创建时间的资源属性字段
        self.create_time = create_time  # type: str
        # 预计交付时间
        self.delivery_time = delivery_time  # type: str
        self.description = description  # type: str
        # 节点
        self.nodes = nodes  # type: str
        # 套餐
        self.packages = packages  # type: list[ListSetupProjectsResponseBodySetupProjectPackages]
        self.progress = progress  # type: str
        # 代表资源一级ID的资源属性字段
        self.setup_project_id = setup_project_id  # type: str
        # 物理空间uId
        self.space_id = space_id  # type: str
        self.space_name = space_name  # type: str
        self.space_type = space_type  # type: str

    def validate(self):
        if self.packages:
            for k in self.packages:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListSetupProjectsResponseBodySetupProject, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arch_version is not None:
            result['ArchVersion'] = self.arch_version
        if self.architecture_id is not None:
            result['ArchitectureId'] = self.architecture_id
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.delivery_time is not None:
            result['DeliveryTime'] = self.delivery_time
        if self.description is not None:
            result['Description'] = self.description
        if self.nodes is not None:
            result['Nodes'] = self.nodes
        result['Packages'] = []
        if self.packages is not None:
            for k in self.packages:
                result['Packages'].append(k.to_map() if k else None)
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.setup_project_id is not None:
            result['SetupProjectId'] = self.setup_project_id
        if self.space_id is not None:
            result['SpaceId'] = self.space_id
        if self.space_name is not None:
            result['SpaceName'] = self.space_name
        if self.space_type is not None:
            result['SpaceType'] = self.space_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ArchVersion') is not None:
            self.arch_version = m.get('ArchVersion')
        if m.get('ArchitectureId') is not None:
            self.architecture_id = m.get('ArchitectureId')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('DeliveryTime') is not None:
            self.delivery_time = m.get('DeliveryTime')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Nodes') is not None:
            self.nodes = m.get('Nodes')
        self.packages = []
        if m.get('Packages') is not None:
            for k in m.get('Packages'):
                temp_model = ListSetupProjectsResponseBodySetupProjectPackages()
                self.packages.append(temp_model.from_map(k))
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('SetupProjectId') is not None:
            self.setup_project_id = m.get('SetupProjectId')
        if m.get('SpaceId') is not None:
            self.space_id = m.get('SpaceId')
        if m.get('SpaceName') is not None:
            self.space_name = m.get('SpaceName')
        if m.get('SpaceType') is not None:
            self.space_type = m.get('SpaceType')
        return self


class ListSetupProjectsResponseBody(TeaModel):
    def __init__(self, max_results=None, next_token=None, request_id=None, setup_project=None, total_count=None):
        self.max_results = max_results  # type: long
        self.next_token = next_token  # type: int
        self.request_id = request_id  # type: str
        self.setup_project = setup_project  # type: list[ListSetupProjectsResponseBodySetupProject]
        self.total_count = total_count  # type: int

    def validate(self):
        if self.setup_project:
            for k in self.setup_project:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListSetupProjectsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['SetupProject'] = []
        if self.setup_project is not None:
            for k in self.setup_project:
                result['SetupProject'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.setup_project = []
        if m.get('SetupProject') is not None:
            for k in m.get('SetupProject'):
                temp_model = ListSetupProjectsResponseBodySetupProject()
                self.setup_project.append(temp_model.from_map(k))
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListSetupProjectsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListSetupProjectsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListSetupProjectsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListSetupProjectsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListSpaceModelsRequest(TeaModel):
    def __init__(self, instance_id=None, max_results=None, next_token=None, space_type=None, status=None):
        self.instance_id = instance_id  # type: str
        self.max_results = max_results  # type: int
        self.next_token = next_token  # type: str
        self.space_type = space_type  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListSpaceModelsRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.space_type is not None:
            result['SpaceType'] = self.space_type
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('SpaceType') is not None:
            self.space_type = m.get('SpaceType')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class ListSpaceModelsResponseBodySpaceModelSort(TeaModel):
    def __init__(self, level=None, level_name=None):
        self.level = level  # type: long
        self.level_name = level_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListSpaceModelsResponseBodySpaceModelSort, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.level is not None:
            result['Level'] = self.level
        if self.level_name is not None:
            result['LevelName'] = self.level_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Level') is not None:
            self.level = m.get('Level')
        if m.get('LevelName') is not None:
            self.level_name = m.get('LevelName')
        return self


class ListSpaceModelsResponseBodySpaceModel(TeaModel):
    def __init__(self, create_time=None, sort=None, space_model_id=None, space_type=None, status=None,
                 update_time=None):
        self.create_time = create_time  # type: str
        # 层级
        self.sort = sort  # type: list[ListSpaceModelsResponseBodySpaceModelSort]
        # 代表资源一级ID的资源属性字段
        self.space_model_id = space_model_id  # type: str
        # 物理空间类型
        self.space_type = space_type  # type: str
        self.status = status  # type: str
        self.update_time = update_time  # type: str

    def validate(self):
        if self.sort:
            for k in self.sort:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListSpaceModelsResponseBodySpaceModel, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        result['Sort'] = []
        if self.sort is not None:
            for k in self.sort:
                result['Sort'].append(k.to_map() if k else None)
        if self.space_model_id is not None:
            result['SpaceModelId'] = self.space_model_id
        if self.space_type is not None:
            result['SpaceType'] = self.space_type
        if self.status is not None:
            result['Status'] = self.status
        if self.update_time is not None:
            result['UpdateTime'] = self.update_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        self.sort = []
        if m.get('Sort') is not None:
            for k in m.get('Sort'):
                temp_model = ListSpaceModelsResponseBodySpaceModelSort()
                self.sort.append(temp_model.from_map(k))
        if m.get('SpaceModelId') is not None:
            self.space_model_id = m.get('SpaceModelId')
        if m.get('SpaceType') is not None:
            self.space_type = m.get('SpaceType')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('UpdateTime') is not None:
            self.update_time = m.get('UpdateTime')
        return self


class ListSpaceModelsResponseBody(TeaModel):
    def __init__(self, max_results=None, next_token=None, request_id=None, space_model=None, total_count=None):
        self.max_results = max_results  # type: long
        self.next_token = next_token  # type: str
        self.request_id = request_id  # type: str
        self.space_model = space_model  # type: list[ListSpaceModelsResponseBodySpaceModel]
        self.total_count = total_count  # type: int

    def validate(self):
        if self.space_model:
            for k in self.space_model:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListSpaceModelsResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['SpaceModel'] = []
        if self.space_model is not None:
            for k in self.space_model:
                result['SpaceModel'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.space_model = []
        if m.get('SpaceModel') is not None:
            for k in m.get('SpaceModel'):
                temp_model = ListSpaceModelsResponseBodySpaceModel()
                self.space_model.append(temp_model.from_map(k))
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListSpaceModelsResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListSpaceModelsResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListSpaceModelsResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListSpaceModelsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListTasksHistoriesRequest(TeaModel):
    def __init__(self, device_id=None, instance_id=None, item_id=None, max_results=None, next_token=None):
        self.device_id = device_id  # type: str
        self.instance_id = instance_id  # type: str
        self.item_id = item_id  # type: str
        self.max_results = max_results  # type: int
        self.next_token = next_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListTasksHistoriesRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.item_id is not None:
            result['ItemId'] = self.item_id
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ItemId') is not None:
            self.item_id = m.get('ItemId')
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        return self


class ListTasksHistoriesResponseBodyInspectionTasksInspectionAlarmRules(TeaModel):
    def __init__(self, actual_value=None, alarm_expression=None, alarm_level=None, alarm_operator=None,
                 alarm_value=None):
        self.actual_value = actual_value  # type: str
        self.alarm_expression = alarm_expression  # type: str
        self.alarm_level = alarm_level  # type: str
        self.alarm_operator = alarm_operator  # type: str
        self.alarm_value = alarm_value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListTasksHistoriesResponseBodyInspectionTasksInspectionAlarmRules, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.actual_value is not None:
            result['ActualValue'] = self.actual_value
        if self.alarm_expression is not None:
            result['AlarmExpression'] = self.alarm_expression
        if self.alarm_level is not None:
            result['AlarmLevel'] = self.alarm_level
        if self.alarm_operator is not None:
            result['AlarmOperator'] = self.alarm_operator
        if self.alarm_value is not None:
            result['AlarmValue'] = self.alarm_value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ActualValue') is not None:
            self.actual_value = m.get('ActualValue')
        if m.get('AlarmExpression') is not None:
            self.alarm_expression = m.get('AlarmExpression')
        if m.get('AlarmLevel') is not None:
            self.alarm_level = m.get('AlarmLevel')
        if m.get('AlarmOperator') is not None:
            self.alarm_operator = m.get('AlarmOperator')
        if m.get('AlarmValue') is not None:
            self.alarm_value = m.get('AlarmValue')
        return self


class ListTasksHistoriesResponseBodyInspectionTasks(TeaModel):
    def __init__(self, device_display=None, error_code=None, execution_begin_time=None, execution_end_time=None,
                 inspection_alarm_rules=None, inspection_result=None, task_id=None):
        self.device_display = device_display  # type: str
        self.error_code = error_code  # type: str
        self.execution_begin_time = execution_begin_time  # type: str
        self.execution_end_time = execution_end_time  # type: str
        self.inspection_alarm_rules = inspection_alarm_rules  # type: list[ListTasksHistoriesResponseBodyInspectionTasksInspectionAlarmRules]
        self.inspection_result = inspection_result  # type: str
        self.task_id = task_id  # type: str

    def validate(self):
        if self.inspection_alarm_rules:
            for k in self.inspection_alarm_rules:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListTasksHistoriesResponseBodyInspectionTasks, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_display is not None:
            result['DeviceDisplay'] = self.device_display
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.execution_begin_time is not None:
            result['ExecutionBeginTime'] = self.execution_begin_time
        if self.execution_end_time is not None:
            result['ExecutionEndTime'] = self.execution_end_time
        result['InspectionAlarmRules'] = []
        if self.inspection_alarm_rules is not None:
            for k in self.inspection_alarm_rules:
                result['InspectionAlarmRules'].append(k.to_map() if k else None)
        if self.inspection_result is not None:
            result['InspectionResult'] = self.inspection_result
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeviceDisplay') is not None:
            self.device_display = m.get('DeviceDisplay')
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('ExecutionBeginTime') is not None:
            self.execution_begin_time = m.get('ExecutionBeginTime')
        if m.get('ExecutionEndTime') is not None:
            self.execution_end_time = m.get('ExecutionEndTime')
        self.inspection_alarm_rules = []
        if m.get('InspectionAlarmRules') is not None:
            for k in m.get('InspectionAlarmRules'):
                temp_model = ListTasksHistoriesResponseBodyInspectionTasksInspectionAlarmRules()
                self.inspection_alarm_rules.append(temp_model.from_map(k))
        if m.get('InspectionResult') is not None:
            self.inspection_result = m.get('InspectionResult')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class ListTasksHistoriesResponseBody(TeaModel):
    def __init__(self, inspection_tasks=None, next_token=None, request_id=None, total_count=None):
        self.inspection_tasks = inspection_tasks  # type: list[ListTasksHistoriesResponseBodyInspectionTasks]
        self.next_token = next_token  # type: int
        self.request_id = request_id  # type: str
        self.total_count = total_count  # type: int

    def validate(self):
        if self.inspection_tasks:
            for k in self.inspection_tasks:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListTasksHistoriesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['InspectionTasks'] = []
        if self.inspection_tasks is not None:
            for k in self.inspection_tasks:
                result['InspectionTasks'].append(k.to_map() if k else None)
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.inspection_tasks = []
        if m.get('InspectionTasks') is not None:
            for k in m.get('InspectionTasks'):
                temp_model = ListTasksHistoriesResponseBodyInspectionTasks()
                self.inspection_tasks.append(temp_model.from_map(k))
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListTasksHistoriesResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListTasksHistoriesResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListTasksHistoriesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListTasksHistoriesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListTreePhysicalSpacesRequest(TeaModel):
    def __init__(self, instance_id=None, max_results=None, next_token=None, physical_space_ids=None,
                 physical_space_name=None, tree=None):
        self.instance_id = instance_id  # type: str
        self.max_results = max_results  # type: str
        self.next_token = next_token  # type: str
        self.physical_space_ids = physical_space_ids  # type: list[str]
        self.physical_space_name = physical_space_name  # type: str
        self.tree = tree  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListTreePhysicalSpacesRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.physical_space_ids is not None:
            result['PhysicalSpaceIds'] = self.physical_space_ids
        if self.physical_space_name is not None:
            result['PhysicalSpaceName'] = self.physical_space_name
        if self.tree is not None:
            result['Tree'] = self.tree
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('PhysicalSpaceIds') is not None:
            self.physical_space_ids = m.get('PhysicalSpaceIds')
        if m.get('PhysicalSpaceName') is not None:
            self.physical_space_name = m.get('PhysicalSpaceName')
        if m.get('Tree') is not None:
            self.tree = m.get('Tree')
        return self


class ListTreePhysicalSpacesShrinkRequest(TeaModel):
    def __init__(self, instance_id=None, max_results=None, next_token=None, physical_space_ids_shrink=None,
                 physical_space_name=None, tree=None):
        self.instance_id = instance_id  # type: str
        self.max_results = max_results  # type: str
        self.next_token = next_token  # type: str
        self.physical_space_ids_shrink = physical_space_ids_shrink  # type: str
        self.physical_space_name = physical_space_name  # type: str
        self.tree = tree  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ListTreePhysicalSpacesShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.physical_space_ids_shrink is not None:
            result['PhysicalSpaceIds'] = self.physical_space_ids_shrink
        if self.physical_space_name is not None:
            result['PhysicalSpaceName'] = self.physical_space_name
        if self.tree is not None:
            result['Tree'] = self.tree
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('PhysicalSpaceIds') is not None:
            self.physical_space_ids_shrink = m.get('PhysicalSpaceIds')
        if m.get('PhysicalSpaceName') is not None:
            self.physical_space_name = m.get('PhysicalSpaceName')
        if m.get('Tree') is not None:
            self.tree = m.get('Tree')
        return self


class ListTreePhysicalSpacesResponseBody(TeaModel):
    def __init__(self, max_results=None, next_token=None, physical_spaces=None, request_id=None, total_count=None):
        self.max_results = max_results  # type: int
        self.next_token = next_token  # type: int
        self.physical_spaces = physical_spaces  # type: list[PhysicalSpaceDto]
        self.request_id = request_id  # type: str
        self.total_count = total_count  # type: int

    def validate(self):
        if self.physical_spaces:
            for k in self.physical_spaces:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ListTreePhysicalSpacesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.max_results is not None:
            result['MaxResults'] = self.max_results
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        result['PhysicalSpaces'] = []
        if self.physical_spaces is not None:
            for k in self.physical_spaces:
                result['PhysicalSpaces'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('MaxResults') is not None:
            self.max_results = m.get('MaxResults')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        self.physical_spaces = []
        if m.get('PhysicalSpaces') is not None:
            for k in m.get('PhysicalSpaces'):
                temp_model = PhysicalSpaceDto()
                self.physical_spaces.append(temp_model.from_map(k))
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListTreePhysicalSpacesResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ListTreePhysicalSpacesResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ListTreePhysicalSpacesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListTreePhysicalSpacesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class LockSpaceModelRequest(TeaModel):
    def __init__(self, instance_id=None, space_model_id=None):
        # instanceId
        self.instance_id = instance_id  # type: str
        self.space_model_id = space_model_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(LockSpaceModelRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.space_model_id is not None:
            result['SpaceModelId'] = self.space_model_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('SpaceModelId') is not None:
            self.space_model_id = m.get('SpaceModelId')
        return self


class LockSpaceModelResponseBody(TeaModel):
    def __init__(self, request_id=None):
        # Id of the request
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(LockSpaceModelResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class LockSpaceModelResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: LockSpaceModelResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(LockSpaceModelResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = LockSpaceModelResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ReleaseIPRequest(TeaModel):
    def __init__(self, device_resource_id=None, device_resource_ids=None, instance_id=None, ip_type=None,
                 setup_project_id=None):
        self.device_resource_id = device_resource_id  # type: str
        self.device_resource_ids = device_resource_ids  # type: list[str]
        self.instance_id = instance_id  # type: str
        self.ip_type = ip_type  # type: str
        self.setup_project_id = setup_project_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ReleaseIPRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_resource_id is not None:
            result['DeviceResourceId'] = self.device_resource_id
        if self.device_resource_ids is not None:
            result['DeviceResourceIds'] = self.device_resource_ids
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.ip_type is not None:
            result['IpType'] = self.ip_type
        if self.setup_project_id is not None:
            result['SetupProjectId'] = self.setup_project_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeviceResourceId') is not None:
            self.device_resource_id = m.get('DeviceResourceId')
        if m.get('DeviceResourceIds') is not None:
            self.device_resource_ids = m.get('DeviceResourceIds')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('IpType') is not None:
            self.ip_type = m.get('IpType')
        if m.get('SetupProjectId') is not None:
            self.setup_project_id = m.get('SetupProjectId')
        return self


class ReleaseIPShrinkRequest(TeaModel):
    def __init__(self, device_resource_id=None, device_resource_ids_shrink=None, instance_id=None, ip_type=None,
                 setup_project_id=None):
        self.device_resource_id = device_resource_id  # type: str
        self.device_resource_ids_shrink = device_resource_ids_shrink  # type: str
        self.instance_id = instance_id  # type: str
        self.ip_type = ip_type  # type: str
        self.setup_project_id = setup_project_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ReleaseIPShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_resource_id is not None:
            result['DeviceResourceId'] = self.device_resource_id
        if self.device_resource_ids_shrink is not None:
            result['DeviceResourceIds'] = self.device_resource_ids_shrink
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.ip_type is not None:
            result['IpType'] = self.ip_type
        if self.setup_project_id is not None:
            result['SetupProjectId'] = self.setup_project_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeviceResourceId') is not None:
            self.device_resource_id = m.get('DeviceResourceId')
        if m.get('DeviceResourceIds') is not None:
            self.device_resource_ids_shrink = m.get('DeviceResourceIds')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('IpType') is not None:
            self.ip_type = m.get('IpType')
        if m.get('SetupProjectId') is not None:
            self.setup_project_id = m.get('SetupProjectId')
        return self


class ReleaseIPResponseBody(TeaModel):
    def __init__(self, request_id=None):
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ReleaseIPResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class ReleaseIPResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ReleaseIPResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ReleaseIPResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ReleaseIPResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class RetryTasksRequestRetryTasks(TeaModel):
    def __init__(self, device_id=None, item_name=None, script_id=None):
        self.device_id = device_id  # type: str
        self.item_name = item_name  # type: str
        self.script_id = script_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(RetryTasksRequestRetryTasks, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.item_name is not None:
            result['ItemName'] = self.item_name
        if self.script_id is not None:
            result['ScriptId'] = self.script_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('ItemName') is not None:
            self.item_name = m.get('ItemName')
        if m.get('ScriptId') is not None:
            self.script_id = m.get('ScriptId')
        return self


class RetryTasksRequest(TeaModel):
    def __init__(self, instance_id=None, retry_tasks=None):
        self.instance_id = instance_id  # type: str
        self.retry_tasks = retry_tasks  # type: list[RetryTasksRequestRetryTasks]

    def validate(self):
        if self.retry_tasks:
            for k in self.retry_tasks:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(RetryTasksRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        result['RetryTasks'] = []
        if self.retry_tasks is not None:
            for k in self.retry_tasks:
                result['RetryTasks'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        self.retry_tasks = []
        if m.get('RetryTasks') is not None:
            for k in m.get('RetryTasks'):
                temp_model = RetryTasksRequestRetryTasks()
                self.retry_tasks.append(temp_model.from_map(k))
        return self


class RetryTasksShrinkRequest(TeaModel):
    def __init__(self, instance_id=None, retry_tasks_shrink=None):
        self.instance_id = instance_id  # type: str
        self.retry_tasks_shrink = retry_tasks_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(RetryTasksShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.retry_tasks_shrink is not None:
            result['RetryTasks'] = self.retry_tasks_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RetryTasks') is not None:
            self.retry_tasks_shrink = m.get('RetryTasks')
        return self


class RetryTasksResponseBody(TeaModel):
    def __init__(self, request_id=None):
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(RetryTasksResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class RetryTasksResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: RetryTasksResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(RetryTasksResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = RetryTasksResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateConfigurationSpecificationRequest(TeaModel):
    def __init__(self, architecture=None, configuration_specification_id=None, instance_id=None, model=None,
                 related_variate=None, role=None, specification_content=None, specification_name=None, vendor=None):
        self.architecture = architecture  # type: str
        self.configuration_specification_id = configuration_specification_id  # type: str
        self.instance_id = instance_id  # type: str
        self.model = model  # type: str
        self.related_variate = related_variate  # type: list[bytes]
        self.role = role  # type: str
        self.specification_content = specification_content  # type: str
        self.specification_name = specification_name  # type: str
        self.vendor = vendor  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateConfigurationSpecificationRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.architecture is not None:
            result['Architecture'] = self.architecture
        if self.configuration_specification_id is not None:
            result['ConfigurationSpecificationId'] = self.configuration_specification_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.model is not None:
            result['Model'] = self.model
        if self.related_variate is not None:
            result['RelatedVariate'] = self.related_variate
        if self.role is not None:
            result['Role'] = self.role
        if self.specification_content is not None:
            result['SpecificationContent'] = self.specification_content
        if self.specification_name is not None:
            result['SpecificationName'] = self.specification_name
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Architecture') is not None:
            self.architecture = m.get('Architecture')
        if m.get('ConfigurationSpecificationId') is not None:
            self.configuration_specification_id = m.get('ConfigurationSpecificationId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('RelatedVariate') is not None:
            self.related_variate = m.get('RelatedVariate')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('SpecificationContent') is not None:
            self.specification_content = m.get('SpecificationContent')
        if m.get('SpecificationName') is not None:
            self.specification_name = m.get('SpecificationName')
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        return self


class UpdateConfigurationSpecificationShrinkRequest(TeaModel):
    def __init__(self, architecture=None, configuration_specification_id=None, instance_id=None, model=None,
                 related_variate_shrink=None, role=None, specification_content=None, specification_name=None, vendor=None):
        self.architecture = architecture  # type: str
        self.configuration_specification_id = configuration_specification_id  # type: str
        self.instance_id = instance_id  # type: str
        self.model = model  # type: str
        self.related_variate_shrink = related_variate_shrink  # type: str
        self.role = role  # type: str
        self.specification_content = specification_content  # type: str
        self.specification_name = specification_name  # type: str
        self.vendor = vendor  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateConfigurationSpecificationShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.architecture is not None:
            result['Architecture'] = self.architecture
        if self.configuration_specification_id is not None:
            result['ConfigurationSpecificationId'] = self.configuration_specification_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.model is not None:
            result['Model'] = self.model
        if self.related_variate_shrink is not None:
            result['RelatedVariate'] = self.related_variate_shrink
        if self.role is not None:
            result['Role'] = self.role
        if self.specification_content is not None:
            result['SpecificationContent'] = self.specification_content
        if self.specification_name is not None:
            result['SpecificationName'] = self.specification_name
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Architecture') is not None:
            self.architecture = m.get('Architecture')
        if m.get('ConfigurationSpecificationId') is not None:
            self.configuration_specification_id = m.get('ConfigurationSpecificationId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('RelatedVariate') is not None:
            self.related_variate_shrink = m.get('RelatedVariate')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('SpecificationContent') is not None:
            self.specification_content = m.get('SpecificationContent')
        if m.get('SpecificationName') is not None:
            self.specification_name = m.get('SpecificationName')
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        return self


class UpdateConfigurationSpecificationResponseBody(TeaModel):
    def __init__(self, request_id=None):
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateConfigurationSpecificationResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class UpdateConfigurationSpecificationResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateConfigurationSpecificationResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateConfigurationSpecificationResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateConfigurationSpecificationResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateConfigurationVariateRequest(TeaModel):
    def __init__(self, comment=None, configuration_variate_id=None, format_function=None, instance_id=None,
                 variate_name=None):
        self.comment = comment  # type: str
        # 代表资源一级ID的资源属性字段
        self.configuration_variate_id = configuration_variate_id  # type: str
        self.format_function = format_function  # type: str
        self.instance_id = instance_id  # type: str
        self.variate_name = variate_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateConfigurationVariateRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.comment is not None:
            result['Comment'] = self.comment
        if self.configuration_variate_id is not None:
            result['ConfigurationVariateId'] = self.configuration_variate_id
        if self.format_function is not None:
            result['FormatFunction'] = self.format_function
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.variate_name is not None:
            result['VariateName'] = self.variate_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Comment') is not None:
            self.comment = m.get('Comment')
        if m.get('ConfigurationVariateId') is not None:
            self.configuration_variate_id = m.get('ConfigurationVariateId')
        if m.get('FormatFunction') is not None:
            self.format_function = m.get('FormatFunction')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('VariateName') is not None:
            self.variate_name = m.get('VariateName')
        return self


class UpdateConfigurationVariateResponseBody(TeaModel):
    def __init__(self, request_id=None):
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateConfigurationVariateResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class UpdateConfigurationVariateResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateConfigurationVariateResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateConfigurationVariateResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateConfigurationVariateResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateDedicatedLineRequest(TeaModel):
    def __init__(self, bandwidth=None, contact=None, dedicated_line_gateway=None, dedicated_line_id=None,
                 dedicated_line_ip=None, dedicated_line_role=None, description=None, device_id=None, device_port=None,
                 expiration_date=None, ext_attributes=None, instance_id=None, isp=None, isp_id=None, keyword=None, online_date=None,
                 phone=None, physical_space_id=None):
        self.bandwidth = bandwidth  # type: int
        self.contact = contact  # type: str
        self.dedicated_line_gateway = dedicated_line_gateway  # type: str
        self.dedicated_line_id = dedicated_line_id  # type: str
        self.dedicated_line_ip = dedicated_line_ip  # type: str
        self.dedicated_line_role = dedicated_line_role  # type: str
        self.description = description  # type: str
        self.device_id = device_id  # type: str
        self.device_port = device_port  # type: str
        self.expiration_date = expiration_date  # type: str
        self.ext_attributes = ext_attributes  # type: str
        self.instance_id = instance_id  # type: str
        self.isp = isp  # type: str
        self.isp_id = isp_id  # type: str
        self.keyword = keyword  # type: str
        self.online_date = online_date  # type: str
        self.phone = phone  # type: str
        self.physical_space_id = physical_space_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateDedicatedLineRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bandwidth is not None:
            result['Bandwidth'] = self.bandwidth
        if self.contact is not None:
            result['Contact'] = self.contact
        if self.dedicated_line_gateway is not None:
            result['DedicatedLineGateway'] = self.dedicated_line_gateway
        if self.dedicated_line_id is not None:
            result['DedicatedLineId'] = self.dedicated_line_id
        if self.dedicated_line_ip is not None:
            result['DedicatedLineIp'] = self.dedicated_line_ip
        if self.dedicated_line_role is not None:
            result['DedicatedLineRole'] = self.dedicated_line_role
        if self.description is not None:
            result['Description'] = self.description
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.device_port is not None:
            result['DevicePort'] = self.device_port
        if self.expiration_date is not None:
            result['ExpirationDate'] = self.expiration_date
        if self.ext_attributes is not None:
            result['ExtAttributes'] = self.ext_attributes
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.isp is not None:
            result['Isp'] = self.isp
        if self.isp_id is not None:
            result['IspId'] = self.isp_id
        if self.keyword is not None:
            result['Keyword'] = self.keyword
        if self.online_date is not None:
            result['OnlineDate'] = self.online_date
        if self.phone is not None:
            result['Phone'] = self.phone
        if self.physical_space_id is not None:
            result['PhysicalSpaceId'] = self.physical_space_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Bandwidth') is not None:
            self.bandwidth = m.get('Bandwidth')
        if m.get('Contact') is not None:
            self.contact = m.get('Contact')
        if m.get('DedicatedLineGateway') is not None:
            self.dedicated_line_gateway = m.get('DedicatedLineGateway')
        if m.get('DedicatedLineId') is not None:
            self.dedicated_line_id = m.get('DedicatedLineId')
        if m.get('DedicatedLineIp') is not None:
            self.dedicated_line_ip = m.get('DedicatedLineIp')
        if m.get('DedicatedLineRole') is not None:
            self.dedicated_line_role = m.get('DedicatedLineRole')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('DevicePort') is not None:
            self.device_port = m.get('DevicePort')
        if m.get('ExpirationDate') is not None:
            self.expiration_date = m.get('ExpirationDate')
        if m.get('ExtAttributes') is not None:
            self.ext_attributes = m.get('ExtAttributes')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Isp') is not None:
            self.isp = m.get('Isp')
        if m.get('IspId') is not None:
            self.isp_id = m.get('IspId')
        if m.get('Keyword') is not None:
            self.keyword = m.get('Keyword')
        if m.get('OnlineDate') is not None:
            self.online_date = m.get('OnlineDate')
        if m.get('Phone') is not None:
            self.phone = m.get('Phone')
        if m.get('PhysicalSpaceId') is not None:
            self.physical_space_id = m.get('PhysicalSpaceId')
        return self


class UpdateDedicatedLineResponseBody(TeaModel):
    def __init__(self, request_id=None):
        # Id of the request
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateDedicatedLineResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class UpdateDedicatedLineResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateDedicatedLineResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateDedicatedLineResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateDedicatedLineResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateDeviceRequest(TeaModel):
    def __init__(self, device_id=None, enable_password=None, ext_attributes=None, host_name=None, instance_id=None,
                 ip=None, login_password=None, login_type=None, login_username=None, mac=None, model=None,
                 physical_space_id=None, security_domain=None, service_status=None, sn=None, snmp_account_type=None,
                 snmp_account_version=None, snmp_auth_passphrase=None, snmp_auth_protocol=None, snmp_community=None,
                 snmp_privacy_passphrase=None, snmp_privacy_protocol=None, snmp_security_level=None, snmp_username=None, vendor=None):
        # 设备ID
        self.device_id = device_id  # type: str
        # enable密码
        self.enable_password = enable_password  # type: str
        # 设备额外属性(JSON)
        self.ext_attributes = ext_attributes  # type: str
        # 主机名
        self.host_name = host_name  # type: str
        # 实例ID
        self.instance_id = instance_id  # type: str
        # 设备IP
        self.ip = ip  # type: str
        # 设备TELNET账号
        self.login_password = login_password  # type: str
        # 设备SSH登录账号
        self.login_type = login_type  # type: str
        # 设备SSH登录密码
        self.login_username = login_username  # type: str
        # 设备MAC地址
        self.mac = mac  # type: str
        # 设备型号
        self.model = model  # type: str
        # 物理空间
        self.physical_space_id = physical_space_id  # type: str
        # 设备安全域
        self.security_domain = security_domain  # type: str
        # 设备状态
        self.service_status = service_status  # type: str
        # 设备SN
        self.sn = sn  # type: str
        # 账号类型
        self.snmp_account_type = snmp_account_type  # type: str
        # SNMP版本号
        self.snmp_account_version = snmp_account_version  # type: str
        # SNMP Auth PassPhrase
        self.snmp_auth_passphrase = snmp_auth_passphrase  # type: str
        # Auth Protocol
        self.snmp_auth_protocol = snmp_auth_protocol  # type: str
        # SNMP Community
        self.snmp_community = snmp_community  # type: str
        # SNMP Privacy Passphrase
        self.snmp_privacy_passphrase = snmp_privacy_passphrase  # type: str
        # Privacy Protocol
        self.snmp_privacy_protocol = snmp_privacy_protocol  # type: str
        # 安全级别
        self.snmp_security_level = snmp_security_level  # type: str
        # 用户名
        self.snmp_username = snmp_username  # type: str
        # 设备厂商
        self.vendor = vendor  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateDeviceRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_id is not None:
            result['DeviceId'] = self.device_id
        if self.enable_password is not None:
            result['EnablePassword'] = self.enable_password
        if self.ext_attributes is not None:
            result['ExtAttributes'] = self.ext_attributes
        if self.host_name is not None:
            result['HostName'] = self.host_name
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.ip is not None:
            result['Ip'] = self.ip
        if self.login_password is not None:
            result['LoginPassword'] = self.login_password
        if self.login_type is not None:
            result['LoginType'] = self.login_type
        if self.login_username is not None:
            result['LoginUsername'] = self.login_username
        if self.mac is not None:
            result['Mac'] = self.mac
        if self.model is not None:
            result['Model'] = self.model
        if self.physical_space_id is not None:
            result['PhysicalSpaceId'] = self.physical_space_id
        if self.security_domain is not None:
            result['SecurityDomain'] = self.security_domain
        if self.service_status is not None:
            result['ServiceStatus'] = self.service_status
        if self.sn is not None:
            result['Sn'] = self.sn
        if self.snmp_account_type is not None:
            result['SnmpAccountType'] = self.snmp_account_type
        if self.snmp_account_version is not None:
            result['SnmpAccountVersion'] = self.snmp_account_version
        if self.snmp_auth_passphrase is not None:
            result['SnmpAuthPassphrase'] = self.snmp_auth_passphrase
        if self.snmp_auth_protocol is not None:
            result['SnmpAuthProtocol'] = self.snmp_auth_protocol
        if self.snmp_community is not None:
            result['SnmpCommunity'] = self.snmp_community
        if self.snmp_privacy_passphrase is not None:
            result['SnmpPrivacyPassphrase'] = self.snmp_privacy_passphrase
        if self.snmp_privacy_protocol is not None:
            result['SnmpPrivacyProtocol'] = self.snmp_privacy_protocol
        if self.snmp_security_level is not None:
            result['SnmpSecurityLevel'] = self.snmp_security_level
        if self.snmp_username is not None:
            result['SnmpUsername'] = self.snmp_username
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeviceId') is not None:
            self.device_id = m.get('DeviceId')
        if m.get('EnablePassword') is not None:
            self.enable_password = m.get('EnablePassword')
        if m.get('ExtAttributes') is not None:
            self.ext_attributes = m.get('ExtAttributes')
        if m.get('HostName') is not None:
            self.host_name = m.get('HostName')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Ip') is not None:
            self.ip = m.get('Ip')
        if m.get('LoginPassword') is not None:
            self.login_password = m.get('LoginPassword')
        if m.get('LoginType') is not None:
            self.login_type = m.get('LoginType')
        if m.get('LoginUsername') is not None:
            self.login_username = m.get('LoginUsername')
        if m.get('Mac') is not None:
            self.mac = m.get('Mac')
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('PhysicalSpaceId') is not None:
            self.physical_space_id = m.get('PhysicalSpaceId')
        if m.get('SecurityDomain') is not None:
            self.security_domain = m.get('SecurityDomain')
        if m.get('ServiceStatus') is not None:
            self.service_status = m.get('ServiceStatus')
        if m.get('Sn') is not None:
            self.sn = m.get('Sn')
        if m.get('SnmpAccountType') is not None:
            self.snmp_account_type = m.get('SnmpAccountType')
        if m.get('SnmpAccountVersion') is not None:
            self.snmp_account_version = m.get('SnmpAccountVersion')
        if m.get('SnmpAuthPassphrase') is not None:
            self.snmp_auth_passphrase = m.get('SnmpAuthPassphrase')
        if m.get('SnmpAuthProtocol') is not None:
            self.snmp_auth_protocol = m.get('SnmpAuthProtocol')
        if m.get('SnmpCommunity') is not None:
            self.snmp_community = m.get('SnmpCommunity')
        if m.get('SnmpPrivacyPassphrase') is not None:
            self.snmp_privacy_passphrase = m.get('SnmpPrivacyPassphrase')
        if m.get('SnmpPrivacyProtocol') is not None:
            self.snmp_privacy_protocol = m.get('SnmpPrivacyProtocol')
        if m.get('SnmpSecurityLevel') is not None:
            self.snmp_security_level = m.get('SnmpSecurityLevel')
        if m.get('SnmpUsername') is not None:
            self.snmp_username = m.get('SnmpUsername')
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        return self


class UpdateDeviceResponseBody(TeaModel):
    def __init__(self, request_id=None):
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateDeviceResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class UpdateDeviceResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateDeviceResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateDeviceResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateDeviceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateDeviceFormRequestAttributeList(TeaModel):
    def __init__(self, attribute_format=None, attribute_fuzzy_query=None, attribute_key=None, attribute_name=None,
                 attribute_placeholder=None, attribute_query=None, attribute_reference=None, attribute_requirement=None,
                 attribute_sequence=None, attribute_table_display=None, attribute_type=None, attribute_uniqueness=None):
        # 设备形态属性值格式
        self.attribute_format = attribute_format  # type: str
        self.attribute_fuzzy_query = attribute_fuzzy_query  # type: bool
        # 设备形态属性主键
        self.attribute_key = attribute_key  # type: str
        # 设备形态属性名称
        self.attribute_name = attribute_name  # type: str
        # 前端查询控件占位符
        self.attribute_placeholder = attribute_placeholder  # type: str
        self.attribute_query = attribute_query  # type: bool
        # 设备形态属性关联对象
        self.attribute_reference = attribute_reference  # type: str
        # 设备形态属性是否必填
        self.attribute_requirement = attribute_requirement  # type: bool
        self.attribute_sequence = attribute_sequence  # type: int
        # 设备形态属性是否表格可见
        self.attribute_table_display = attribute_table_display  # type: bool
        # 设备形态属性值类型
        self.attribute_type = attribute_type  # type: str
        # 设备形态属性是否唯一
        self.attribute_uniqueness = attribute_uniqueness  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateDeviceFormRequestAttributeList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.attribute_format is not None:
            result['AttributeFormat'] = self.attribute_format
        if self.attribute_fuzzy_query is not None:
            result['AttributeFuzzyQuery'] = self.attribute_fuzzy_query
        if self.attribute_key is not None:
            result['AttributeKey'] = self.attribute_key
        if self.attribute_name is not None:
            result['AttributeName'] = self.attribute_name
        if self.attribute_placeholder is not None:
            result['AttributePlaceholder'] = self.attribute_placeholder
        if self.attribute_query is not None:
            result['AttributeQuery'] = self.attribute_query
        if self.attribute_reference is not None:
            result['AttributeReference'] = self.attribute_reference
        if self.attribute_requirement is not None:
            result['AttributeRequirement'] = self.attribute_requirement
        if self.attribute_sequence is not None:
            result['AttributeSequence'] = self.attribute_sequence
        if self.attribute_table_display is not None:
            result['AttributeTableDisplay'] = self.attribute_table_display
        if self.attribute_type is not None:
            result['AttributeType'] = self.attribute_type
        if self.attribute_uniqueness is not None:
            result['AttributeUniqueness'] = self.attribute_uniqueness
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AttributeFormat') is not None:
            self.attribute_format = m.get('AttributeFormat')
        if m.get('AttributeFuzzyQuery') is not None:
            self.attribute_fuzzy_query = m.get('AttributeFuzzyQuery')
        if m.get('AttributeKey') is not None:
            self.attribute_key = m.get('AttributeKey')
        if m.get('AttributeName') is not None:
            self.attribute_name = m.get('AttributeName')
        if m.get('AttributePlaceholder') is not None:
            self.attribute_placeholder = m.get('AttributePlaceholder')
        if m.get('AttributeQuery') is not None:
            self.attribute_query = m.get('AttributeQuery')
        if m.get('AttributeReference') is not None:
            self.attribute_reference = m.get('AttributeReference')
        if m.get('AttributeRequirement') is not None:
            self.attribute_requirement = m.get('AttributeRequirement')
        if m.get('AttributeSequence') is not None:
            self.attribute_sequence = m.get('AttributeSequence')
        if m.get('AttributeTableDisplay') is not None:
            self.attribute_table_display = m.get('AttributeTableDisplay')
        if m.get('AttributeType') is not None:
            self.attribute_type = m.get('AttributeType')
        if m.get('AttributeUniqueness') is not None:
            self.attribute_uniqueness = m.get('AttributeUniqueness')
        return self


class UpdateDeviceFormRequest(TeaModel):
    def __init__(self, account_config=None, attribute_list=None, config_compare=None, detail_display=None,
                 device_form_id=None, instance_id=None, related_device_form_id=None, script=None):
        # 是否需要账号配置
        self.account_config = account_config  # type: bool
        # 设备形态属性列表
        self.attribute_list = attribute_list  # type: list[UpdateDeviceFormRequestAttributeList]
        # 是否支持配置生成
        self.config_compare = config_compare  # type: bool
        self.detail_display = detail_display  # type: bool
        # 设备形态ID
        self.device_form_id = device_form_id  # type: str
        self.instance_id = instance_id  # type: str
        self.related_device_form_id = related_device_form_id  # type: str
        self.script = script  # type: str

    def validate(self):
        if self.attribute_list:
            for k in self.attribute_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(UpdateDeviceFormRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_config is not None:
            result['AccountConfig'] = self.account_config
        result['AttributeList'] = []
        if self.attribute_list is not None:
            for k in self.attribute_list:
                result['AttributeList'].append(k.to_map() if k else None)
        if self.config_compare is not None:
            result['ConfigCompare'] = self.config_compare
        if self.detail_display is not None:
            result['DetailDisplay'] = self.detail_display
        if self.device_form_id is not None:
            result['DeviceFormId'] = self.device_form_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.related_device_form_id is not None:
            result['RelatedDeviceFormId'] = self.related_device_form_id
        if self.script is not None:
            result['Script'] = self.script
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AccountConfig') is not None:
            self.account_config = m.get('AccountConfig')
        self.attribute_list = []
        if m.get('AttributeList') is not None:
            for k in m.get('AttributeList'):
                temp_model = UpdateDeviceFormRequestAttributeList()
                self.attribute_list.append(temp_model.from_map(k))
        if m.get('ConfigCompare') is not None:
            self.config_compare = m.get('ConfigCompare')
        if m.get('DetailDisplay') is not None:
            self.detail_display = m.get('DetailDisplay')
        if m.get('DeviceFormId') is not None:
            self.device_form_id = m.get('DeviceFormId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RelatedDeviceFormId') is not None:
            self.related_device_form_id = m.get('RelatedDeviceFormId')
        if m.get('Script') is not None:
            self.script = m.get('Script')
        return self


class UpdateDeviceFormShrinkRequest(TeaModel):
    def __init__(self, account_config=None, attribute_list_shrink=None, config_compare=None, detail_display=None,
                 device_form_id=None, instance_id=None, related_device_form_id=None, script=None):
        # 是否需要账号配置
        self.account_config = account_config  # type: bool
        # 设备形态属性列表
        self.attribute_list_shrink = attribute_list_shrink  # type: str
        # 是否支持配置生成
        self.config_compare = config_compare  # type: bool
        self.detail_display = detail_display  # type: bool
        # 设备形态ID
        self.device_form_id = device_form_id  # type: str
        self.instance_id = instance_id  # type: str
        self.related_device_form_id = related_device_form_id  # type: str
        self.script = script  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateDeviceFormShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_config is not None:
            result['AccountConfig'] = self.account_config
        if self.attribute_list_shrink is not None:
            result['AttributeList'] = self.attribute_list_shrink
        if self.config_compare is not None:
            result['ConfigCompare'] = self.config_compare
        if self.detail_display is not None:
            result['DetailDisplay'] = self.detail_display
        if self.device_form_id is not None:
            result['DeviceFormId'] = self.device_form_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.related_device_form_id is not None:
            result['RelatedDeviceFormId'] = self.related_device_form_id
        if self.script is not None:
            result['Script'] = self.script
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('AccountConfig') is not None:
            self.account_config = m.get('AccountConfig')
        if m.get('AttributeList') is not None:
            self.attribute_list_shrink = m.get('AttributeList')
        if m.get('ConfigCompare') is not None:
            self.config_compare = m.get('ConfigCompare')
        if m.get('DetailDisplay') is not None:
            self.detail_display = m.get('DetailDisplay')
        if m.get('DeviceFormId') is not None:
            self.device_form_id = m.get('DeviceFormId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RelatedDeviceFormId') is not None:
            self.related_device_form_id = m.get('RelatedDeviceFormId')
        if m.get('Script') is not None:
            self.script = m.get('Script')
        return self


class UpdateDeviceFormResponseBody(TeaModel):
    def __init__(self, request_id=None):
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateDeviceFormResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class UpdateDeviceFormResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateDeviceFormResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateDeviceFormResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateDeviceFormResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateDevicePropertyRequest(TeaModel):
    def __init__(self, device_property_id=None, instance_id=None, property_content=None, property_format=None,
                 property_name=None):
        self.device_property_id = device_property_id  # type: str
        # 实例ID
        self.instance_id = instance_id  # type: str
        self.property_content = property_content  # type: str
        self.property_format = property_format  # type: str
        self.property_name = property_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateDevicePropertyRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_property_id is not None:
            result['DevicePropertyId'] = self.device_property_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.property_content is not None:
            result['PropertyContent'] = self.property_content
        if self.property_format is not None:
            result['PropertyFormat'] = self.property_format
        if self.property_name is not None:
            result['PropertyName'] = self.property_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DevicePropertyId') is not None:
            self.device_property_id = m.get('DevicePropertyId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PropertyContent') is not None:
            self.property_content = m.get('PropertyContent')
        if m.get('PropertyFormat') is not None:
            self.property_format = m.get('PropertyFormat')
        if m.get('PropertyName') is not None:
            self.property_name = m.get('PropertyName')
        return self


class UpdateDevicePropertyResponseBody(TeaModel):
    def __init__(self, request_id=None):
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateDevicePropertyResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class UpdateDevicePropertyResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateDevicePropertyResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateDevicePropertyResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateDevicePropertyResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateDeviceResourceRequest(TeaModel):
    def __init__(self, data=None, device_resource_id=None, device_resource_ids=None, instance_id=None,
                 setup_project_id=None, update_type=None):
        # 更新数据
        self.data = data  # type: str
        self.device_resource_id = device_resource_id  # type: str
        # 代表资源一级ID的资源属性字段
        self.device_resource_ids = device_resource_ids  # type: list[str]
        self.instance_id = instance_id  # type: str
        # 建设项目id
        self.setup_project_id = setup_project_id  # type: str
        # 操作类型
        self.update_type = update_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateDeviceResourceRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data
        if self.device_resource_id is not None:
            result['DeviceResourceId'] = self.device_resource_id
        if self.device_resource_ids is not None:
            result['DeviceResourceIds'] = self.device_resource_ids
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.setup_project_id is not None:
            result['SetupProjectId'] = self.setup_project_id
        if self.update_type is not None:
            result['UpdateType'] = self.update_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('DeviceResourceId') is not None:
            self.device_resource_id = m.get('DeviceResourceId')
        if m.get('DeviceResourceIds') is not None:
            self.device_resource_ids = m.get('DeviceResourceIds')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('SetupProjectId') is not None:
            self.setup_project_id = m.get('SetupProjectId')
        if m.get('UpdateType') is not None:
            self.update_type = m.get('UpdateType')
        return self


class UpdateDeviceResourceShrinkRequest(TeaModel):
    def __init__(self, data=None, device_resource_id=None, device_resource_ids_shrink=None, instance_id=None,
                 setup_project_id=None, update_type=None):
        # 更新数据
        self.data = data  # type: str
        self.device_resource_id = device_resource_id  # type: str
        # 代表资源一级ID的资源属性字段
        self.device_resource_ids_shrink = device_resource_ids_shrink  # type: str
        self.instance_id = instance_id  # type: str
        # 建设项目id
        self.setup_project_id = setup_project_id  # type: str
        # 操作类型
        self.update_type = update_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateDeviceResourceShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.data is not None:
            result['Data'] = self.data
        if self.device_resource_id is not None:
            result['DeviceResourceId'] = self.device_resource_id
        if self.device_resource_ids_shrink is not None:
            result['DeviceResourceIds'] = self.device_resource_ids_shrink
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.setup_project_id is not None:
            result['SetupProjectId'] = self.setup_project_id
        if self.update_type is not None:
            result['UpdateType'] = self.update_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('DeviceResourceId') is not None:
            self.device_resource_id = m.get('DeviceResourceId')
        if m.get('DeviceResourceIds') is not None:
            self.device_resource_ids_shrink = m.get('DeviceResourceIds')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('SetupProjectId') is not None:
            self.setup_project_id = m.get('SetupProjectId')
        if m.get('UpdateType') is not None:
            self.update_type = m.get('UpdateType')
        return self


class UpdateDeviceResourceResponseBody(TeaModel):
    def __init__(self, request_id=None):
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateDeviceResourceResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class UpdateDeviceResourceResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateDeviceResourceResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateDeviceResourceResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateDeviceResourceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateDevicesRequest(TeaModel):
    def __init__(self, device_ids=None, enable_password=None, ext_attributes=None, instance_id=None,
                 login_password=None, login_type=None, login_username=None, model=None, physical_space_id=None,
                 physical_space_name=None, security_domain=None, service_status=None, snmp_account_type=None,
                 snmp_account_version=None, snmp_auth_passphrase=None, snmp_auth_protocol=None, snmp_community=None,
                 snmp_privacy_passphrase=None, snmp_privacy_protocol=None, snmp_security_level=None, snmp_username=None, vendor=None):
        # 设备ID
        self.device_ids = device_ids  # type: list[str]
        self.enable_password = enable_password  # type: str
        self.ext_attributes = ext_attributes  # type: str
        self.instance_id = instance_id  # type: str
        # 设备TELNET账号
        self.login_password = login_password  # type: str
        # 设备SSH登录账号
        self.login_type = login_type  # type: str
        # 设备SSH登录密码
        self.login_username = login_username  # type: str
        self.model = model  # type: str
        self.physical_space_id = physical_space_id  # type: str
        self.physical_space_name = physical_space_name  # type: str
        self.security_domain = security_domain  # type: str
        self.service_status = service_status  # type: str
        # 账号类型
        self.snmp_account_type = snmp_account_type  # type: str
        # SNMP版本号
        self.snmp_account_version = snmp_account_version  # type: str
        # Auth PassPhrase
        self.snmp_auth_passphrase = snmp_auth_passphrase  # type: str
        self.snmp_auth_protocol = snmp_auth_protocol  # type: str
        # Community
        self.snmp_community = snmp_community  # type: str
        # Privacy Passphase
        self.snmp_privacy_passphrase = snmp_privacy_passphrase  # type: str
        # Privacy Protocol
        self.snmp_privacy_protocol = snmp_privacy_protocol  # type: str
        # 安全级别
        self.snmp_security_level = snmp_security_level  # type: str
        # 用户名
        self.snmp_username = snmp_username  # type: str
        self.vendor = vendor  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateDevicesRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_ids is not None:
            result['DeviceIds'] = self.device_ids
        if self.enable_password is not None:
            result['EnablePassword'] = self.enable_password
        if self.ext_attributes is not None:
            result['ExtAttributes'] = self.ext_attributes
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.login_password is not None:
            result['LoginPassword'] = self.login_password
        if self.login_type is not None:
            result['LoginType'] = self.login_type
        if self.login_username is not None:
            result['LoginUsername'] = self.login_username
        if self.model is not None:
            result['Model'] = self.model
        if self.physical_space_id is not None:
            result['PhysicalSpaceId'] = self.physical_space_id
        if self.physical_space_name is not None:
            result['PhysicalSpaceName'] = self.physical_space_name
        if self.security_domain is not None:
            result['SecurityDomain'] = self.security_domain
        if self.service_status is not None:
            result['ServiceStatus'] = self.service_status
        if self.snmp_account_type is not None:
            result['SnmpAccountType'] = self.snmp_account_type
        if self.snmp_account_version is not None:
            result['SnmpAccountVersion'] = self.snmp_account_version
        if self.snmp_auth_passphrase is not None:
            result['SnmpAuthPassphrase'] = self.snmp_auth_passphrase
        if self.snmp_auth_protocol is not None:
            result['SnmpAuthProtocol'] = self.snmp_auth_protocol
        if self.snmp_community is not None:
            result['SnmpCommunity'] = self.snmp_community
        if self.snmp_privacy_passphrase is not None:
            result['SnmpPrivacyPassphrase'] = self.snmp_privacy_passphrase
        if self.snmp_privacy_protocol is not None:
            result['SnmpPrivacyProtocol'] = self.snmp_privacy_protocol
        if self.snmp_security_level is not None:
            result['SnmpSecurityLevel'] = self.snmp_security_level
        if self.snmp_username is not None:
            result['SnmpUsername'] = self.snmp_username
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeviceIds') is not None:
            self.device_ids = m.get('DeviceIds')
        if m.get('EnablePassword') is not None:
            self.enable_password = m.get('EnablePassword')
        if m.get('ExtAttributes') is not None:
            self.ext_attributes = m.get('ExtAttributes')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('LoginPassword') is not None:
            self.login_password = m.get('LoginPassword')
        if m.get('LoginType') is not None:
            self.login_type = m.get('LoginType')
        if m.get('LoginUsername') is not None:
            self.login_username = m.get('LoginUsername')
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('PhysicalSpaceId') is not None:
            self.physical_space_id = m.get('PhysicalSpaceId')
        if m.get('PhysicalSpaceName') is not None:
            self.physical_space_name = m.get('PhysicalSpaceName')
        if m.get('SecurityDomain') is not None:
            self.security_domain = m.get('SecurityDomain')
        if m.get('ServiceStatus') is not None:
            self.service_status = m.get('ServiceStatus')
        if m.get('SnmpAccountType') is not None:
            self.snmp_account_type = m.get('SnmpAccountType')
        if m.get('SnmpAccountVersion') is not None:
            self.snmp_account_version = m.get('SnmpAccountVersion')
        if m.get('SnmpAuthPassphrase') is not None:
            self.snmp_auth_passphrase = m.get('SnmpAuthPassphrase')
        if m.get('SnmpAuthProtocol') is not None:
            self.snmp_auth_protocol = m.get('SnmpAuthProtocol')
        if m.get('SnmpCommunity') is not None:
            self.snmp_community = m.get('SnmpCommunity')
        if m.get('SnmpPrivacyPassphrase') is not None:
            self.snmp_privacy_passphrase = m.get('SnmpPrivacyPassphrase')
        if m.get('SnmpPrivacyProtocol') is not None:
            self.snmp_privacy_protocol = m.get('SnmpPrivacyProtocol')
        if m.get('SnmpSecurityLevel') is not None:
            self.snmp_security_level = m.get('SnmpSecurityLevel')
        if m.get('SnmpUsername') is not None:
            self.snmp_username = m.get('SnmpUsername')
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        return self


class UpdateDevicesShrinkRequest(TeaModel):
    def __init__(self, device_ids_shrink=None, enable_password=None, ext_attributes=None, instance_id=None,
                 login_password=None, login_type=None, login_username=None, model=None, physical_space_id=None,
                 physical_space_name=None, security_domain=None, service_status=None, snmp_account_type=None,
                 snmp_account_version=None, snmp_auth_passphrase=None, snmp_auth_protocol=None, snmp_community=None,
                 snmp_privacy_passphrase=None, snmp_privacy_protocol=None, snmp_security_level=None, snmp_username=None, vendor=None):
        # 设备ID
        self.device_ids_shrink = device_ids_shrink  # type: str
        self.enable_password = enable_password  # type: str
        self.ext_attributes = ext_attributes  # type: str
        self.instance_id = instance_id  # type: str
        # 设备TELNET账号
        self.login_password = login_password  # type: str
        # 设备SSH登录账号
        self.login_type = login_type  # type: str
        # 设备SSH登录密码
        self.login_username = login_username  # type: str
        self.model = model  # type: str
        self.physical_space_id = physical_space_id  # type: str
        self.physical_space_name = physical_space_name  # type: str
        self.security_domain = security_domain  # type: str
        self.service_status = service_status  # type: str
        # 账号类型
        self.snmp_account_type = snmp_account_type  # type: str
        # SNMP版本号
        self.snmp_account_version = snmp_account_version  # type: str
        # Auth PassPhrase
        self.snmp_auth_passphrase = snmp_auth_passphrase  # type: str
        self.snmp_auth_protocol = snmp_auth_protocol  # type: str
        # Community
        self.snmp_community = snmp_community  # type: str
        # Privacy Passphase
        self.snmp_privacy_passphrase = snmp_privacy_passphrase  # type: str
        # Privacy Protocol
        self.snmp_privacy_protocol = snmp_privacy_protocol  # type: str
        # 安全级别
        self.snmp_security_level = snmp_security_level  # type: str
        # 用户名
        self.snmp_username = snmp_username  # type: str
        self.vendor = vendor  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateDevicesShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_ids_shrink is not None:
            result['DeviceIds'] = self.device_ids_shrink
        if self.enable_password is not None:
            result['EnablePassword'] = self.enable_password
        if self.ext_attributes is not None:
            result['ExtAttributes'] = self.ext_attributes
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.login_password is not None:
            result['LoginPassword'] = self.login_password
        if self.login_type is not None:
            result['LoginType'] = self.login_type
        if self.login_username is not None:
            result['LoginUsername'] = self.login_username
        if self.model is not None:
            result['Model'] = self.model
        if self.physical_space_id is not None:
            result['PhysicalSpaceId'] = self.physical_space_id
        if self.physical_space_name is not None:
            result['PhysicalSpaceName'] = self.physical_space_name
        if self.security_domain is not None:
            result['SecurityDomain'] = self.security_domain
        if self.service_status is not None:
            result['ServiceStatus'] = self.service_status
        if self.snmp_account_type is not None:
            result['SnmpAccountType'] = self.snmp_account_type
        if self.snmp_account_version is not None:
            result['SnmpAccountVersion'] = self.snmp_account_version
        if self.snmp_auth_passphrase is not None:
            result['SnmpAuthPassphrase'] = self.snmp_auth_passphrase
        if self.snmp_auth_protocol is not None:
            result['SnmpAuthProtocol'] = self.snmp_auth_protocol
        if self.snmp_community is not None:
            result['SnmpCommunity'] = self.snmp_community
        if self.snmp_privacy_passphrase is not None:
            result['SnmpPrivacyPassphrase'] = self.snmp_privacy_passphrase
        if self.snmp_privacy_protocol is not None:
            result['SnmpPrivacyProtocol'] = self.snmp_privacy_protocol
        if self.snmp_security_level is not None:
            result['SnmpSecurityLevel'] = self.snmp_security_level
        if self.snmp_username is not None:
            result['SnmpUsername'] = self.snmp_username
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeviceIds') is not None:
            self.device_ids_shrink = m.get('DeviceIds')
        if m.get('EnablePassword') is not None:
            self.enable_password = m.get('EnablePassword')
        if m.get('ExtAttributes') is not None:
            self.ext_attributes = m.get('ExtAttributes')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('LoginPassword') is not None:
            self.login_password = m.get('LoginPassword')
        if m.get('LoginType') is not None:
            self.login_type = m.get('LoginType')
        if m.get('LoginUsername') is not None:
            self.login_username = m.get('LoginUsername')
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('PhysicalSpaceId') is not None:
            self.physical_space_id = m.get('PhysicalSpaceId')
        if m.get('PhysicalSpaceName') is not None:
            self.physical_space_name = m.get('PhysicalSpaceName')
        if m.get('SecurityDomain') is not None:
            self.security_domain = m.get('SecurityDomain')
        if m.get('ServiceStatus') is not None:
            self.service_status = m.get('ServiceStatus')
        if m.get('SnmpAccountType') is not None:
            self.snmp_account_type = m.get('SnmpAccountType')
        if m.get('SnmpAccountVersion') is not None:
            self.snmp_account_version = m.get('SnmpAccountVersion')
        if m.get('SnmpAuthPassphrase') is not None:
            self.snmp_auth_passphrase = m.get('SnmpAuthPassphrase')
        if m.get('SnmpAuthProtocol') is not None:
            self.snmp_auth_protocol = m.get('SnmpAuthProtocol')
        if m.get('SnmpCommunity') is not None:
            self.snmp_community = m.get('SnmpCommunity')
        if m.get('SnmpPrivacyPassphrase') is not None:
            self.snmp_privacy_passphrase = m.get('SnmpPrivacyPassphrase')
        if m.get('SnmpPrivacyProtocol') is not None:
            self.snmp_privacy_protocol = m.get('SnmpPrivacyProtocol')
        if m.get('SnmpSecurityLevel') is not None:
            self.snmp_security_level = m.get('SnmpSecurityLevel')
        if m.get('SnmpUsername') is not None:
            self.snmp_username = m.get('SnmpUsername')
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        return self


class UpdateDevicesResponseBody(TeaModel):
    def __init__(self, request_id=None):
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateDevicesResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class UpdateDevicesResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateDevicesResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateDevicesResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateDevicesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateEventDefinitionRequest(TeaModel):
    def __init__(self, event_id=None, event_name=None, event_type=None, instance_id=None, template_id=None):
        self.event_id = event_id  # type: str
        self.event_name = event_name  # type: str
        self.event_type = event_type  # type: str
        self.instance_id = instance_id  # type: str
        self.template_id = template_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateEventDefinitionRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.event_id is not None:
            result['EventId'] = self.event_id
        if self.event_name is not None:
            result['EventName'] = self.event_name
        if self.event_type is not None:
            result['EventType'] = self.event_type
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.template_id is not None:
            result['TemplateId'] = self.template_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('EventId') is not None:
            self.event_id = m.get('EventId')
        if m.get('EventName') is not None:
            self.event_name = m.get('EventName')
        if m.get('EventType') is not None:
            self.event_type = m.get('EventType')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('TemplateId') is not None:
            self.template_id = m.get('TemplateId')
        return self


class UpdateEventDefinitionResponseBody(TeaModel):
    def __init__(self, request_id=None):
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateEventDefinitionResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class UpdateEventDefinitionResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateEventDefinitionResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateEventDefinitionResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateEventDefinitionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateInformationKeyActionRequest(TeaModel):
    def __init__(self, instance_id=None, key=None, key_action=None, resource_information_id=None,
                 setup_project_id=None, value=None):
        self.instance_id = instance_id  # type: str
        self.key = key  # type: str
        self.key_action = key_action  # type: str
        self.resource_information_id = resource_information_id  # type: str
        self.setup_project_id = setup_project_id  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateInformationKeyActionRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.key is not None:
            result['Key'] = self.key
        if self.key_action is not None:
            result['KeyAction'] = self.key_action
        if self.resource_information_id is not None:
            result['ResourceInformationId'] = self.resource_information_id
        if self.setup_project_id is not None:
            result['SetupProjectId'] = self.setup_project_id
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('KeyAction') is not None:
            self.key_action = m.get('KeyAction')
        if m.get('ResourceInformationId') is not None:
            self.resource_information_id = m.get('ResourceInformationId')
        if m.get('SetupProjectId') is not None:
            self.setup_project_id = m.get('SetupProjectId')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class UpdateInformationKeyActionResponseBody(TeaModel):
    def __init__(self, action_message=None, request_id=None):
        self.action_message = action_message  # type: str
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateInformationKeyActionResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.action_message is not None:
            result['ActionMessage'] = self.action_message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ActionMessage') is not None:
            self.action_message = m.get('ActionMessage')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class UpdateInformationKeyActionResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateInformationKeyActionResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateInformationKeyActionResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateInformationKeyActionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateInstanceRequest(TeaModel):
    def __init__(self, instance_id=None, instance_name=None):
        self.instance_id = instance_id  # type: str
        self.instance_name = instance_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateInstanceRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.instance_name is not None:
            result['InstanceName'] = self.instance_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InstanceName') is not None:
            self.instance_name = m.get('InstanceName')
        return self


class UpdateInstanceResponseBody(TeaModel):
    def __init__(self, request_id=None):
        # Id of the request
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateInstanceResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class UpdateInstanceResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateInstanceResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateInstanceResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateOsVersionRequest(TeaModel):
    def __init__(self, boot_patch=None, feature_patch=None, file_name=None, file_path=None, instance_id=None,
                 model=None, os_version=None, os_version_id=None, status=None, system_patch=None, vendor=None):
        self.boot_patch = boot_patch  # type: str
        self.feature_patch = feature_patch  # type: str
        # 文件名
        self.file_name = file_name  # type: str
        # 文件路径
        self.file_path = file_path  # type: str
        self.instance_id = instance_id  # type: str
        # 型号
        self.model = model  # type: str
        # 系统版本
        self.os_version = os_version  # type: str
        self.os_version_id = os_version_id  # type: str
        # 状态
        self.status = status  # type: str
        self.system_patch = system_patch  # type: str
        # 厂商
        self.vendor = vendor  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateOsVersionRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.boot_patch is not None:
            result['BootPatch'] = self.boot_patch
        if self.feature_patch is not None:
            result['FeaturePatch'] = self.feature_patch
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.file_path is not None:
            result['FilePath'] = self.file_path
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.model is not None:
            result['Model'] = self.model
        if self.os_version is not None:
            result['OsVersion'] = self.os_version
        if self.os_version_id is not None:
            result['OsVersionId'] = self.os_version_id
        if self.status is not None:
            result['Status'] = self.status
        if self.system_patch is not None:
            result['SystemPatch'] = self.system_patch
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('BootPatch') is not None:
            self.boot_patch = m.get('BootPatch')
        if m.get('FeaturePatch') is not None:
            self.feature_patch = m.get('FeaturePatch')
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('FilePath') is not None:
            self.file_path = m.get('FilePath')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('OsVersion') is not None:
            self.os_version = m.get('OsVersion')
        if m.get('OsVersionId') is not None:
            self.os_version_id = m.get('OsVersionId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('SystemPatch') is not None:
            self.system_patch = m.get('SystemPatch')
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        return self


class UpdateOsVersionResponseBody(TeaModel):
    def __init__(self, request_id=None):
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateOsVersionResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class UpdateOsVersionResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateOsVersionResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateOsVersionResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateOsVersionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdatePhysicalSpaceRequest(TeaModel):
    def __init__(self, address=None, city=None, country=None, instance_id=None, move_action=None, owner=None,
                 parent_uid=None, physical_space_id=None, physical_space_name=None, province=None, remark=None,
                 security_domain_list=None, space_abbreviation=None, space_type=None, target_uid=None):
        self.address = address  # type: str
        self.city = city  # type: str
        self.country = country  # type: str
        self.instance_id = instance_id  # type: str
        self.move_action = move_action  # type: str
        self.owner = owner  # type: str
        self.parent_uid = parent_uid  # type: str
        self.physical_space_id = physical_space_id  # type: str
        self.physical_space_name = physical_space_name  # type: str
        self.province = province  # type: str
        self.remark = remark  # type: str
        self.security_domain_list = security_domain_list  # type: list[str]
        self.space_abbreviation = space_abbreviation  # type: str
        self.space_type = space_type  # type: str
        self.target_uid = target_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdatePhysicalSpaceRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.address is not None:
            result['Address'] = self.address
        if self.city is not None:
            result['City'] = self.city
        if self.country is not None:
            result['Country'] = self.country
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.move_action is not None:
            result['MoveAction'] = self.move_action
        if self.owner is not None:
            result['Owner'] = self.owner
        if self.parent_uid is not None:
            result['ParentUid'] = self.parent_uid
        if self.physical_space_id is not None:
            result['PhysicalSpaceId'] = self.physical_space_id
        if self.physical_space_name is not None:
            result['PhysicalSpaceName'] = self.physical_space_name
        if self.province is not None:
            result['Province'] = self.province
        if self.remark is not None:
            result['Remark'] = self.remark
        if self.security_domain_list is not None:
            result['SecurityDomainList'] = self.security_domain_list
        if self.space_abbreviation is not None:
            result['SpaceAbbreviation'] = self.space_abbreviation
        if self.space_type is not None:
            result['SpaceType'] = self.space_type
        if self.target_uid is not None:
            result['TargetUid'] = self.target_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Address') is not None:
            self.address = m.get('Address')
        if m.get('City') is not None:
            self.city = m.get('City')
        if m.get('Country') is not None:
            self.country = m.get('Country')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('MoveAction') is not None:
            self.move_action = m.get('MoveAction')
        if m.get('Owner') is not None:
            self.owner = m.get('Owner')
        if m.get('ParentUid') is not None:
            self.parent_uid = m.get('ParentUid')
        if m.get('PhysicalSpaceId') is not None:
            self.physical_space_id = m.get('PhysicalSpaceId')
        if m.get('PhysicalSpaceName') is not None:
            self.physical_space_name = m.get('PhysicalSpaceName')
        if m.get('Province') is not None:
            self.province = m.get('Province')
        if m.get('Remark') is not None:
            self.remark = m.get('Remark')
        if m.get('SecurityDomainList') is not None:
            self.security_domain_list = m.get('SecurityDomainList')
        if m.get('SpaceAbbreviation') is not None:
            self.space_abbreviation = m.get('SpaceAbbreviation')
        if m.get('SpaceType') is not None:
            self.space_type = m.get('SpaceType')
        if m.get('TargetUid') is not None:
            self.target_uid = m.get('TargetUid')
        return self


class UpdatePhysicalSpaceShrinkRequest(TeaModel):
    def __init__(self, address=None, city=None, country=None, instance_id=None, move_action=None, owner=None,
                 parent_uid=None, physical_space_id=None, physical_space_name=None, province=None, remark=None,
                 security_domain_list_shrink=None, space_abbreviation=None, space_type=None, target_uid=None):
        self.address = address  # type: str
        self.city = city  # type: str
        self.country = country  # type: str
        self.instance_id = instance_id  # type: str
        self.move_action = move_action  # type: str
        self.owner = owner  # type: str
        self.parent_uid = parent_uid  # type: str
        self.physical_space_id = physical_space_id  # type: str
        self.physical_space_name = physical_space_name  # type: str
        self.province = province  # type: str
        self.remark = remark  # type: str
        self.security_domain_list_shrink = security_domain_list_shrink  # type: str
        self.space_abbreviation = space_abbreviation  # type: str
        self.space_type = space_type  # type: str
        self.target_uid = target_uid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdatePhysicalSpaceShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.address is not None:
            result['Address'] = self.address
        if self.city is not None:
            result['City'] = self.city
        if self.country is not None:
            result['Country'] = self.country
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.move_action is not None:
            result['MoveAction'] = self.move_action
        if self.owner is not None:
            result['Owner'] = self.owner
        if self.parent_uid is not None:
            result['ParentUid'] = self.parent_uid
        if self.physical_space_id is not None:
            result['PhysicalSpaceId'] = self.physical_space_id
        if self.physical_space_name is not None:
            result['PhysicalSpaceName'] = self.physical_space_name
        if self.province is not None:
            result['Province'] = self.province
        if self.remark is not None:
            result['Remark'] = self.remark
        if self.security_domain_list_shrink is not None:
            result['SecurityDomainList'] = self.security_domain_list_shrink
        if self.space_abbreviation is not None:
            result['SpaceAbbreviation'] = self.space_abbreviation
        if self.space_type is not None:
            result['SpaceType'] = self.space_type
        if self.target_uid is not None:
            result['TargetUid'] = self.target_uid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Address') is not None:
            self.address = m.get('Address')
        if m.get('City') is not None:
            self.city = m.get('City')
        if m.get('Country') is not None:
            self.country = m.get('Country')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('MoveAction') is not None:
            self.move_action = m.get('MoveAction')
        if m.get('Owner') is not None:
            self.owner = m.get('Owner')
        if m.get('ParentUid') is not None:
            self.parent_uid = m.get('ParentUid')
        if m.get('PhysicalSpaceId') is not None:
            self.physical_space_id = m.get('PhysicalSpaceId')
        if m.get('PhysicalSpaceName') is not None:
            self.physical_space_name = m.get('PhysicalSpaceName')
        if m.get('Province') is not None:
            self.province = m.get('Province')
        if m.get('Remark') is not None:
            self.remark = m.get('Remark')
        if m.get('SecurityDomainList') is not None:
            self.security_domain_list_shrink = m.get('SecurityDomainList')
        if m.get('SpaceAbbreviation') is not None:
            self.space_abbreviation = m.get('SpaceAbbreviation')
        if m.get('SpaceType') is not None:
            self.space_type = m.get('SpaceType')
        if m.get('TargetUid') is not None:
            self.target_uid = m.get('TargetUid')
        return self


class UpdatePhysicalSpaceResponseBody(TeaModel):
    def __init__(self, request_id=None):
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdatePhysicalSpaceResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class UpdatePhysicalSpaceResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdatePhysicalSpaceResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdatePhysicalSpaceResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdatePhysicalSpaceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateProjectProgressRequest(TeaModel):
    def __init__(self, instance_id=None, progress=None, setup_project_id=None):
        self.instance_id = instance_id  # type: str
        self.progress = progress  # type: str
        self.setup_project_id = setup_project_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateProjectProgressRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.progress is not None:
            result['Progress'] = self.progress
        if self.setup_project_id is not None:
            result['SetupProjectId'] = self.setup_project_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Progress') is not None:
            self.progress = m.get('Progress')
        if m.get('SetupProjectId') is not None:
            self.setup_project_id = m.get('SetupProjectId')
        return self


class UpdateProjectProgressResponseBody(TeaModel):
    def __init__(self, request_id=None):
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateProjectProgressResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class UpdateProjectProgressResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateProjectProgressResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateProjectProgressResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateProjectProgressResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateResourceInformationRequestInformation(TeaModel):
    def __init__(self, key=None, key_action=None, key_attribute=None, key_description=None, setup_project_id=None):
        # 键
        self.key = key  # type: str
        # 键动作
        self.key_action = key_action  # type: str
        # 键属性
        self.key_attribute = key_attribute  # type: str
        # 键描述
        self.key_description = key_description  # type: str
        # 建设项目id
        self.setup_project_id = setup_project_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateResourceInformationRequestInformation, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.key_action is not None:
            result['KeyAction'] = self.key_action
        if self.key_attribute is not None:
            result['KeyAttribute'] = self.key_attribute
        if self.key_description is not None:
            result['KeyDescription'] = self.key_description
        if self.setup_project_id is not None:
            result['SetupProjectId'] = self.setup_project_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('KeyAction') is not None:
            self.key_action = m.get('KeyAction')
        if m.get('KeyAttribute') is not None:
            self.key_attribute = m.get('KeyAttribute')
        if m.get('KeyDescription') is not None:
            self.key_description = m.get('KeyDescription')
        if m.get('SetupProjectId') is not None:
            self.setup_project_id = m.get('SetupProjectId')
        return self


class UpdateResourceInformationRequest(TeaModel):
    def __init__(self, information=None, instance_id=None, resource_attribute=None, resource_information_id=None,
                 resource_type=None):
        # 信息
        self.information = information  # type: list[UpdateResourceInformationRequestInformation]
        self.instance_id = instance_id  # type: str
        # 资源属性
        self.resource_attribute = resource_attribute  # type: str
        self.resource_information_id = resource_information_id  # type: str
        # 资源类型
        self.resource_type = resource_type  # type: str

    def validate(self):
        if self.information:
            for k in self.information:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(UpdateResourceInformationRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Information'] = []
        if self.information is not None:
            for k in self.information:
                result['Information'].append(k.to_map() if k else None)
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.resource_attribute is not None:
            result['ResourceAttribute'] = self.resource_attribute
        if self.resource_information_id is not None:
            result['ResourceInformationId'] = self.resource_information_id
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.information = []
        if m.get('Information') is not None:
            for k in m.get('Information'):
                temp_model = UpdateResourceInformationRequestInformation()
                self.information.append(temp_model.from_map(k))
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ResourceAttribute') is not None:
            self.resource_attribute = m.get('ResourceAttribute')
        if m.get('ResourceInformationId') is not None:
            self.resource_information_id = m.get('ResourceInformationId')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        return self


class UpdateResourceInformationShrinkRequest(TeaModel):
    def __init__(self, information_shrink=None, instance_id=None, resource_attribute=None,
                 resource_information_id=None, resource_type=None):
        # 信息
        self.information_shrink = information_shrink  # type: str
        self.instance_id = instance_id  # type: str
        # 资源属性
        self.resource_attribute = resource_attribute  # type: str
        self.resource_information_id = resource_information_id  # type: str
        # 资源类型
        self.resource_type = resource_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateResourceInformationShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.information_shrink is not None:
            result['Information'] = self.information_shrink
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.resource_attribute is not None:
            result['ResourceAttribute'] = self.resource_attribute
        if self.resource_information_id is not None:
            result['ResourceInformationId'] = self.resource_information_id
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Information') is not None:
            self.information_shrink = m.get('Information')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ResourceAttribute') is not None:
            self.resource_attribute = m.get('ResourceAttribute')
        if m.get('ResourceInformationId') is not None:
            self.resource_information_id = m.get('ResourceInformationId')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        return self


class UpdateResourceInformationResponseBody(TeaModel):
    def __init__(self, request_id=None):
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateResourceInformationResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class UpdateResourceInformationResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateResourceInformationResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateResourceInformationResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateResourceInformationResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateResourceInstanceRequestResourceInformation(TeaModel):
    def __init__(self, key=None, value=None):
        self.key = key  # type: str
        self.value = value  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateResourceInstanceRequestResourceInformation, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class UpdateResourceInstanceRequest(TeaModel):
    def __init__(self, instance_id=None, resource_information=None, resource_information_id=None,
                 setup_project_id=None):
        self.instance_id = instance_id  # type: str
        self.resource_information = resource_information  # type: list[UpdateResourceInstanceRequestResourceInformation]
        self.resource_information_id = resource_information_id  # type: str
        self.setup_project_id = setup_project_id  # type: str

    def validate(self):
        if self.resource_information:
            for k in self.resource_information:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(UpdateResourceInstanceRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        result['ResourceInformation'] = []
        if self.resource_information is not None:
            for k in self.resource_information:
                result['ResourceInformation'].append(k.to_map() if k else None)
        if self.resource_information_id is not None:
            result['ResourceInformationId'] = self.resource_information_id
        if self.setup_project_id is not None:
            result['SetupProjectId'] = self.setup_project_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        self.resource_information = []
        if m.get('ResourceInformation') is not None:
            for k in m.get('ResourceInformation'):
                temp_model = UpdateResourceInstanceRequestResourceInformation()
                self.resource_information.append(temp_model.from_map(k))
        if m.get('ResourceInformationId') is not None:
            self.resource_information_id = m.get('ResourceInformationId')
        if m.get('SetupProjectId') is not None:
            self.setup_project_id = m.get('SetupProjectId')
        return self


class UpdateResourceInstanceShrinkRequest(TeaModel):
    def __init__(self, instance_id=None, resource_information_shrink=None, resource_information_id=None,
                 setup_project_id=None):
        self.instance_id = instance_id  # type: str
        self.resource_information_shrink = resource_information_shrink  # type: str
        self.resource_information_id = resource_information_id  # type: str
        self.setup_project_id = setup_project_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateResourceInstanceShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.resource_information_shrink is not None:
            result['ResourceInformation'] = self.resource_information_shrink
        if self.resource_information_id is not None:
            result['ResourceInformationId'] = self.resource_information_id
        if self.setup_project_id is not None:
            result['SetupProjectId'] = self.setup_project_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ResourceInformation') is not None:
            self.resource_information_shrink = m.get('ResourceInformation')
        if m.get('ResourceInformationId') is not None:
            self.resource_information_id = m.get('ResourceInformationId')
        if m.get('SetupProjectId') is not None:
            self.setup_project_id = m.get('SetupProjectId')
        return self


class UpdateResourceInstanceResponseBody(TeaModel):
    def __init__(self, request_id=None):
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateResourceInstanceResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class UpdateResourceInstanceResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateResourceInstanceResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateResourceInstanceResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateResourceInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateSetupProjectRequestPackages(TeaModel):
    def __init__(self, device_number=None, model=None, role=None, vendor=None):
        # 设备号
        self.device_number = device_number  # type: long
        # 型号
        self.model = model  # type: str
        # 角色
        self.role = role  # type: str
        # 厂商
        self.vendor = vendor  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateSetupProjectRequestPackages, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.device_number is not None:
            result['DeviceNumber'] = self.device_number
        if self.model is not None:
            result['Model'] = self.model
        if self.role is not None:
            result['Role'] = self.role
        if self.vendor is not None:
            result['Vendor'] = self.vendor
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('DeviceNumber') is not None:
            self.device_number = m.get('DeviceNumber')
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('Vendor') is not None:
            self.vendor = m.get('Vendor')
        return self


class UpdateSetupProjectRequest(TeaModel):
    def __init__(self, architecture_id=None, delivery_time=None, description=None, instance_id=None, nodes=None,
                 packages=None, setup_project_id=None, space_id=None):
        # 架构id
        self.architecture_id = architecture_id  # type: str
        # 预计交付时间
        self.delivery_time = delivery_time  # type: str
        # 描述
        self.description = description  # type: str
        self.instance_id = instance_id  # type: str
        # 节点
        self.nodes = nodes  # type: str
        # 套餐
        self.packages = packages  # type: list[UpdateSetupProjectRequestPackages]
        # 代表资源一级ID的资源属性字段
        self.setup_project_id = setup_project_id  # type: str
        # 物理空间uId
        self.space_id = space_id  # type: str

    def validate(self):
        if self.packages:
            for k in self.packages:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(UpdateSetupProjectRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.architecture_id is not None:
            result['ArchitectureId'] = self.architecture_id
        if self.delivery_time is not None:
            result['DeliveryTime'] = self.delivery_time
        if self.description is not None:
            result['Description'] = self.description
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.nodes is not None:
            result['Nodes'] = self.nodes
        result['Packages'] = []
        if self.packages is not None:
            for k in self.packages:
                result['Packages'].append(k.to_map() if k else None)
        if self.setup_project_id is not None:
            result['SetupProjectId'] = self.setup_project_id
        if self.space_id is not None:
            result['SpaceId'] = self.space_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ArchitectureId') is not None:
            self.architecture_id = m.get('ArchitectureId')
        if m.get('DeliveryTime') is not None:
            self.delivery_time = m.get('DeliveryTime')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Nodes') is not None:
            self.nodes = m.get('Nodes')
        self.packages = []
        if m.get('Packages') is not None:
            for k in m.get('Packages'):
                temp_model = UpdateSetupProjectRequestPackages()
                self.packages.append(temp_model.from_map(k))
        if m.get('SetupProjectId') is not None:
            self.setup_project_id = m.get('SetupProjectId')
        if m.get('SpaceId') is not None:
            self.space_id = m.get('SpaceId')
        return self


class UpdateSetupProjectShrinkRequest(TeaModel):
    def __init__(self, architecture_id=None, delivery_time=None, description=None, instance_id=None, nodes=None,
                 packages_shrink=None, setup_project_id=None, space_id=None):
        # 架构id
        self.architecture_id = architecture_id  # type: str
        # 预计交付时间
        self.delivery_time = delivery_time  # type: str
        # 描述
        self.description = description  # type: str
        self.instance_id = instance_id  # type: str
        # 节点
        self.nodes = nodes  # type: str
        # 套餐
        self.packages_shrink = packages_shrink  # type: str
        # 代表资源一级ID的资源属性字段
        self.setup_project_id = setup_project_id  # type: str
        # 物理空间uId
        self.space_id = space_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateSetupProjectShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.architecture_id is not None:
            result['ArchitectureId'] = self.architecture_id
        if self.delivery_time is not None:
            result['DeliveryTime'] = self.delivery_time
        if self.description is not None:
            result['Description'] = self.description
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.nodes is not None:
            result['Nodes'] = self.nodes
        if self.packages_shrink is not None:
            result['Packages'] = self.packages_shrink
        if self.setup_project_id is not None:
            result['SetupProjectId'] = self.setup_project_id
        if self.space_id is not None:
            result['SpaceId'] = self.space_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ArchitectureId') is not None:
            self.architecture_id = m.get('ArchitectureId')
        if m.get('DeliveryTime') is not None:
            self.delivery_time = m.get('DeliveryTime')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Nodes') is not None:
            self.nodes = m.get('Nodes')
        if m.get('Packages') is not None:
            self.packages_shrink = m.get('Packages')
        if m.get('SetupProjectId') is not None:
            self.setup_project_id = m.get('SetupProjectId')
        if m.get('SpaceId') is not None:
            self.space_id = m.get('SpaceId')
        return self


class UpdateSetupProjectResponseBody(TeaModel):
    def __init__(self, request_id=None, setup_project_id=None, setup_project_name=None,
                 setup_project_specification=None):
        self.request_id = request_id  # type: str
        self.setup_project_id = setup_project_id  # type: str
        self.setup_project_name = setup_project_name  # type: str
        self.setup_project_specification = setup_project_specification  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateSetupProjectResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.setup_project_id is not None:
            result['SetupProjectId'] = self.setup_project_id
        if self.setup_project_name is not None:
            result['SetupProjectName'] = self.setup_project_name
        if self.setup_project_specification is not None:
            result['SetupProjectSpecification'] = self.setup_project_specification
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('SetupProjectId') is not None:
            self.setup_project_id = m.get('SetupProjectId')
        if m.get('SetupProjectName') is not None:
            self.setup_project_name = m.get('SetupProjectName')
        if m.get('SetupProjectSpecification') is not None:
            self.setup_project_specification = m.get('SetupProjectSpecification')
        return self


class UpdateSetupProjectResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateSetupProjectResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateSetupProjectResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateSetupProjectResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateSpaceModelRequestSort(TeaModel):
    def __init__(self, level=None, level_name=None):
        self.level = level  # type: long
        self.level_name = level_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateSpaceModelRequestSort, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.level is not None:
            result['Level'] = self.level
        if self.level_name is not None:
            result['LevelName'] = self.level_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Level') is not None:
            self.level = m.get('Level')
        if m.get('LevelName') is not None:
            self.level_name = m.get('LevelName')
        return self


class UpdateSpaceModelRequest(TeaModel):
    def __init__(self, instance_id=None, sort=None, space_model_id=None, space_type=None):
        self.instance_id = instance_id  # type: str
        # 层级
        self.sort = sort  # type: list[UpdateSpaceModelRequestSort]
        self.space_model_id = space_model_id  # type: str
        self.space_type = space_type  # type: str

    def validate(self):
        if self.sort:
            for k in self.sort:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(UpdateSpaceModelRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        result['Sort'] = []
        if self.sort is not None:
            for k in self.sort:
                result['Sort'].append(k.to_map() if k else None)
        if self.space_model_id is not None:
            result['SpaceModelId'] = self.space_model_id
        if self.space_type is not None:
            result['SpaceType'] = self.space_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        self.sort = []
        if m.get('Sort') is not None:
            for k in m.get('Sort'):
                temp_model = UpdateSpaceModelRequestSort()
                self.sort.append(temp_model.from_map(k))
        if m.get('SpaceModelId') is not None:
            self.space_model_id = m.get('SpaceModelId')
        if m.get('SpaceType') is not None:
            self.space_type = m.get('SpaceType')
        return self


class UpdateSpaceModelShrinkRequest(TeaModel):
    def __init__(self, instance_id=None, sort_shrink=None, space_model_id=None, space_type=None):
        self.instance_id = instance_id  # type: str
        # 层级
        self.sort_shrink = sort_shrink  # type: str
        self.space_model_id = space_model_id  # type: str
        self.space_type = space_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateSpaceModelShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.sort_shrink is not None:
            result['Sort'] = self.sort_shrink
        if self.space_model_id is not None:
            result['SpaceModelId'] = self.space_model_id
        if self.space_type is not None:
            result['SpaceType'] = self.space_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Sort') is not None:
            self.sort_shrink = m.get('Sort')
        if m.get('SpaceModelId') is not None:
            self.space_model_id = m.get('SpaceModelId')
        if m.get('SpaceType') is not None:
            self.space_type = m.get('SpaceType')
        return self


class UpdateSpaceModelResponseBody(TeaModel):
    def __init__(self, request_id=None):
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateSpaceModelResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class UpdateSpaceModelResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateSpaceModelResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateSpaceModelResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateSpaceModelResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateSpaceModelInstanceRequest(TeaModel):
    def __init__(self, instance=None, space_id=None):
        self.instance = instance  # type: str
        self.space_id = space_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateSpaceModelInstanceRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.instance is not None:
            result['Instance'] = self.instance
        if self.space_id is not None:
            result['SpaceId'] = self.space_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('Instance') is not None:
            self.instance = m.get('Instance')
        if m.get('SpaceId') is not None:
            self.space_id = m.get('SpaceId')
        return self


class UpdateSpaceModelInstanceResponseBody(TeaModel):
    def __init__(self, request_id=None):
        self.request_id = request_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UpdateSpaceModelInstanceResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class UpdateSpaceModelInstanceResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UpdateSpaceModelInstanceResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UpdateSpaceModelInstanceResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateSpaceModelInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


