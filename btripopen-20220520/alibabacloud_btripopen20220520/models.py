# -*- coding: utf-8 -*-
# This file is auto-generated, don't edit it. Thanks.
from Tea.model import TeaModel


class ModuleFlightItemListBestPriceItemFlightRuleInfosValue(TeaModel):
    def __init__(self, refund_change_rule_desc=None, baggage_desc=None):
        self.refund_change_rule_desc = refund_change_rule_desc  # type: str
        self.baggage_desc = baggage_desc  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModuleFlightItemListBestPriceItemFlightRuleInfosValue, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.refund_change_rule_desc is not None:
            result['refund_change_rule_desc'] = self.refund_change_rule_desc
        if self.baggage_desc is not None:
            result['baggage_desc'] = self.baggage_desc
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('refund_change_rule_desc') is not None:
            self.refund_change_rule_desc = m.get('refund_change_rule_desc')
        if m.get('baggage_desc') is not None:
            self.baggage_desc = m.get('baggage_desc')
        return self


class ModuleFlightItemListBestPriceItemShoppingItemMapValueSearchPricePriceShowInfo(TeaModel):
    def __init__(self, discount_info=None, discount_num=None, show_ticket_price=None):
        self.discount_info = discount_info  # type: str
        self.discount_num = discount_num  # type: float
        self.show_ticket_price = show_ticket_price  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModuleFlightItemListBestPriceItemShoppingItemMapValueSearchPricePriceShowInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.discount_info is not None:
            result['discount_info'] = self.discount_info
        if self.discount_num is not None:
            result['discount_num'] = self.discount_num
        if self.show_ticket_price is not None:
            result['show_ticket_price'] = self.show_ticket_price
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('discount_info') is not None:
            self.discount_info = m.get('discount_info')
        if m.get('discount_num') is not None:
            self.discount_num = m.get('discount_num')
        if m.get('show_ticket_price') is not None:
            self.show_ticket_price = m.get('show_ticket_price')
        return self


class ModuleFlightItemListBestPriceItemShoppingItemMapValueSearchPrice(TeaModel):
    def __init__(self, floor_price=None, ticket_price=None, sell_price=None, original_sell_price=None,
                 base_total_price=None, before_control_price=None, tax=None, supply_price=None, basic_cabin_price=None,
                 build_price=None, oil_price=None, first_standard_price=None, business_standard_price=None,
                 common_standard_price=None, inter_ticket_price=None, subtracted_price=None, origin_common_price=None,
                 dynamic_promotion_price=None, installment_num=None, installment_price=None, competition_dynamic_price=None,
                 competition_promotion_price=None, min_before_control_price_of_normal=None, price_show_info=None):
        self.floor_price = floor_price  # type: int
        self.ticket_price = ticket_price  # type: int
        self.sell_price = sell_price  # type: int
        self.original_sell_price = original_sell_price  # type: int
        self.base_total_price = base_total_price  # type: int
        self.before_control_price = before_control_price  # type: int
        self.tax = tax  # type: int
        self.supply_price = supply_price  # type: int
        self.basic_cabin_price = basic_cabin_price  # type: int
        self.build_price = build_price  # type: int
        self.oil_price = oil_price  # type: int
        self.first_standard_price = first_standard_price  # type: int
        self.business_standard_price = business_standard_price  # type: int
        self.common_standard_price = common_standard_price  # type: int
        # fdPrice
        self.inter_ticket_price = inter_ticket_price  # type: int
        self.subtracted_price = subtracted_price  # type: int
        self.origin_common_price = origin_common_price  # type: int
        self.dynamic_promotion_price = dynamic_promotion_price  # type: int
        self.installment_num = installment_num  # type: int
        self.installment_price = installment_price  # type: float
        self.competition_dynamic_price = competition_dynamic_price  # type: int
        self.competition_promotion_price = competition_promotion_price  # type: int
        self.min_before_control_price_of_normal = min_before_control_price_of_normal  # type: int
        self.price_show_info = price_show_info  # type: ModuleFlightItemListBestPriceItemShoppingItemMapValueSearchPricePriceShowInfo

    def validate(self):
        if self.price_show_info:
            self.price_show_info.validate()

    def to_map(self):
        _map = super(ModuleFlightItemListBestPriceItemShoppingItemMapValueSearchPrice, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.floor_price is not None:
            result['floor_price'] = self.floor_price
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.sell_price is not None:
            result['sell_price'] = self.sell_price
        if self.original_sell_price is not None:
            result['original_sell_price'] = self.original_sell_price
        if self.base_total_price is not None:
            result['base_total_price'] = self.base_total_price
        if self.before_control_price is not None:
            result['before_control_price'] = self.before_control_price
        if self.tax is not None:
            result['tax'] = self.tax
        if self.supply_price is not None:
            result['supply_price'] = self.supply_price
        if self.basic_cabin_price is not None:
            result['basic_cabin_price'] = self.basic_cabin_price
        if self.build_price is not None:
            result['build_price'] = self.build_price
        if self.oil_price is not None:
            result['oil_price'] = self.oil_price
        if self.first_standard_price is not None:
            result['first_standard_price'] = self.first_standard_price
        if self.business_standard_price is not None:
            result['business_standard_price'] = self.business_standard_price
        if self.common_standard_price is not None:
            result['common_standard_price'] = self.common_standard_price
        if self.inter_ticket_price is not None:
            result['inter_ticket_price'] = self.inter_ticket_price
        if self.subtracted_price is not None:
            result['subtracted_price'] = self.subtracted_price
        if self.origin_common_price is not None:
            result['origin_common_price'] = self.origin_common_price
        if self.dynamic_promotion_price is not None:
            result['dynamic_promotion_price'] = self.dynamic_promotion_price
        if self.installment_num is not None:
            result['installment_num'] = self.installment_num
        if self.installment_price is not None:
            result['installment_price'] = self.installment_price
        if self.competition_dynamic_price is not None:
            result['competition_dynamic_price'] = self.competition_dynamic_price
        if self.competition_promotion_price is not None:
            result['competition_promotion_price'] = self.competition_promotion_price
        if self.min_before_control_price_of_normal is not None:
            result['min_before_control_price_of_normal'] = self.min_before_control_price_of_normal
        if self.price_show_info is not None:
            result['price_show_info'] = self.price_show_info.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('floor_price') is not None:
            self.floor_price = m.get('floor_price')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('sell_price') is not None:
            self.sell_price = m.get('sell_price')
        if m.get('original_sell_price') is not None:
            self.original_sell_price = m.get('original_sell_price')
        if m.get('base_total_price') is not None:
            self.base_total_price = m.get('base_total_price')
        if m.get('before_control_price') is not None:
            self.before_control_price = m.get('before_control_price')
        if m.get('tax') is not None:
            self.tax = m.get('tax')
        if m.get('supply_price') is not None:
            self.supply_price = m.get('supply_price')
        if m.get('basic_cabin_price') is not None:
            self.basic_cabin_price = m.get('basic_cabin_price')
        if m.get('build_price') is not None:
            self.build_price = m.get('build_price')
        if m.get('oil_price') is not None:
            self.oil_price = m.get('oil_price')
        if m.get('first_standard_price') is not None:
            self.first_standard_price = m.get('first_standard_price')
        if m.get('business_standard_price') is not None:
            self.business_standard_price = m.get('business_standard_price')
        if m.get('common_standard_price') is not None:
            self.common_standard_price = m.get('common_standard_price')
        if m.get('inter_ticket_price') is not None:
            self.inter_ticket_price = m.get('inter_ticket_price')
        if m.get('subtracted_price') is not None:
            self.subtracted_price = m.get('subtracted_price')
        if m.get('origin_common_price') is not None:
            self.origin_common_price = m.get('origin_common_price')
        if m.get('dynamic_promotion_price') is not None:
            self.dynamic_promotion_price = m.get('dynamic_promotion_price')
        if m.get('installment_num') is not None:
            self.installment_num = m.get('installment_num')
        if m.get('installment_price') is not None:
            self.installment_price = m.get('installment_price')
        if m.get('competition_dynamic_price') is not None:
            self.competition_dynamic_price = m.get('competition_dynamic_price')
        if m.get('competition_promotion_price') is not None:
            self.competition_promotion_price = m.get('competition_promotion_price')
        if m.get('min_before_control_price_of_normal') is not None:
            self.min_before_control_price_of_normal = m.get('min_before_control_price_of_normal')
        if m.get('price_show_info') is not None:
            temp_model = ModuleFlightItemListBestPriceItemShoppingItemMapValueSearchPricePriceShowInfo()
            self.price_show_info = temp_model.from_map(m['price_show_info'])
        return self


class ModuleFlightItemListBestPriceItemShoppingItemMapValue(TeaModel):
    def __init__(self, id=None, cabin_quantity=None, search_price=None, segment_price=None):
        # id
        self.id = id  # type: str
        self.cabin_quantity = cabin_quantity  # type: dict[str, ModuleFlightItemListBestPriceItemShoppingItemMapValueCabinQuantityValue]
        self.search_price = search_price  # type: ModuleFlightItemListBestPriceItemShoppingItemMapValueSearchPrice
        self.segment_price = segment_price  # type: dict[str, ModuleFlightItemListBestPriceItemShoppingItemMapValueSegmentPriceValue]

    def validate(self):
        if self.cabin_quantity:
            for v in self.cabin_quantity.values():
                if v:
                    v.validate()
        if self.search_price:
            self.search_price.validate()
        if self.segment_price:
            for v in self.segment_price.values():
                if v:
                    v.validate()

    def to_map(self):
        _map = super(ModuleFlightItemListBestPriceItemShoppingItemMapValue, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        result['cabin_quantity'] = {}
        if self.cabin_quantity is not None:
            for k, v in self.cabin_quantity.items():
                result['cabin_quantity'][k] = v.to_map()
        if self.search_price is not None:
            result['search_price'] = self.search_price.to_map()
        result['segment_price'] = {}
        if self.segment_price is not None:
            for k, v in self.segment_price.items():
                result['segment_price'][k] = v.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        self.cabin_quantity = {}
        if m.get('cabin_quantity') is not None:
            for k, v in m.get('cabin_quantity').items():
                temp_model = ModuleFlightItemListBestPriceItemShoppingItemMapValueCabinQuantityValue()
                self.cabin_quantity[k] = temp_model.from_map(v)
        if m.get('search_price') is not None:
            temp_model = ModuleFlightItemListBestPriceItemShoppingItemMapValueSearchPrice()
            self.search_price = temp_model.from_map(m['search_price'])
        self.segment_price = {}
        if m.get('segment_price') is not None:
            for k, v in m.get('segment_price').items():
                temp_model = ModuleFlightItemListBestPriceItemShoppingItemMapValueSegmentPriceValue()
                self.segment_price[k] = temp_model.from_map(v)
        return self


class ModuleFlightItemListBestPriceItemSubItemPositionMapValue(TeaModel):
    def __init__(self, journey_index=None, segment_index=None):
        self.journey_index = journey_index  # type: int
        self.segment_index = segment_index  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModuleFlightItemListBestPriceItemSubItemPositionMapValue, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.journey_index is not None:
            result['journey_index'] = self.journey_index
        if self.segment_index is not None:
            result['segment_index'] = self.segment_index
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('journey_index') is not None:
            self.journey_index = m.get('journey_index')
        if m.get('segment_index') is not None:
            self.segment_index = m.get('segment_index')
        return self


class ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueSearchPricePriceShowInfo(TeaModel):
    def __init__(self, discount_info=None, discount_num=None, show_ticket_price=None):
        self.discount_info = discount_info  # type: str
        self.discount_num = discount_num  # type: float
        self.show_ticket_price = show_ticket_price  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueSearchPricePriceShowInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.discount_info is not None:
            result['discount_info'] = self.discount_info
        if self.discount_num is not None:
            result['discount_num'] = self.discount_num
        if self.show_ticket_price is not None:
            result['show_ticket_price'] = self.show_ticket_price
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('discount_info') is not None:
            self.discount_info = m.get('discount_info')
        if m.get('discount_num') is not None:
            self.discount_num = m.get('discount_num')
        if m.get('show_ticket_price') is not None:
            self.show_ticket_price = m.get('show_ticket_price')
        return self


class ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueSearchPrice(TeaModel):
    def __init__(self, floor_price=None, ticket_price=None, sell_price=None, original_sell_price=None,
                 base_total_price=None, before_control_price=None, tax=None, supply_price=None, basic_cabin_price=None,
                 build_price=None, oil_price=None, first_standard_price=None, business_standard_price=None,
                 common_standard_price=None, inter_ticket_price=None, subtracted_price=None, origin_common_price=None,
                 dynamic_promotion_price=None, installment_num=None, installment_price=None, competition_dynamic_price=None,
                 competition_promotion_price=None, min_before_control_price_of_normal=None, price_show_info=None):
        self.floor_price = floor_price  # type: int
        self.ticket_price = ticket_price  # type: int
        self.sell_price = sell_price  # type: int
        self.original_sell_price = original_sell_price  # type: int
        self.base_total_price = base_total_price  # type: int
        self.before_control_price = before_control_price  # type: int
        self.tax = tax  # type: int
        self.supply_price = supply_price  # type: int
        self.basic_cabin_price = basic_cabin_price  # type: int
        self.build_price = build_price  # type: int
        self.oil_price = oil_price  # type: int
        self.first_standard_price = first_standard_price  # type: int
        self.business_standard_price = business_standard_price  # type: int
        self.common_standard_price = common_standard_price  # type: int
        # fdPrice
        self.inter_ticket_price = inter_ticket_price  # type: int
        self.subtracted_price = subtracted_price  # type: int
        self.origin_common_price = origin_common_price  # type: int
        self.dynamic_promotion_price = dynamic_promotion_price  # type: int
        self.installment_num = installment_num  # type: int
        self.installment_price = installment_price  # type: float
        self.competition_dynamic_price = competition_dynamic_price  # type: int
        self.competition_promotion_price = competition_promotion_price  # type: int
        self.min_before_control_price_of_normal = min_before_control_price_of_normal  # type: int
        self.price_show_info = price_show_info  # type: ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueSearchPricePriceShowInfo

    def validate(self):
        if self.price_show_info:
            self.price_show_info.validate()

    def to_map(self):
        _map = super(ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueSearchPrice, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.floor_price is not None:
            result['floor_price'] = self.floor_price
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.sell_price is not None:
            result['sell_price'] = self.sell_price
        if self.original_sell_price is not None:
            result['original_sell_price'] = self.original_sell_price
        if self.base_total_price is not None:
            result['base_total_price'] = self.base_total_price
        if self.before_control_price is not None:
            result['before_control_price'] = self.before_control_price
        if self.tax is not None:
            result['tax'] = self.tax
        if self.supply_price is not None:
            result['supply_price'] = self.supply_price
        if self.basic_cabin_price is not None:
            result['basic_cabin_price'] = self.basic_cabin_price
        if self.build_price is not None:
            result['build_price'] = self.build_price
        if self.oil_price is not None:
            result['oil_price'] = self.oil_price
        if self.first_standard_price is not None:
            result['first_standard_price'] = self.first_standard_price
        if self.business_standard_price is not None:
            result['business_standard_price'] = self.business_standard_price
        if self.common_standard_price is not None:
            result['common_standard_price'] = self.common_standard_price
        if self.inter_ticket_price is not None:
            result['inter_ticket_price'] = self.inter_ticket_price
        if self.subtracted_price is not None:
            result['subtracted_price'] = self.subtracted_price
        if self.origin_common_price is not None:
            result['origin_common_price'] = self.origin_common_price
        if self.dynamic_promotion_price is not None:
            result['dynamic_promotion_price'] = self.dynamic_promotion_price
        if self.installment_num is not None:
            result['installment_num'] = self.installment_num
        if self.installment_price is not None:
            result['installment_price'] = self.installment_price
        if self.competition_dynamic_price is not None:
            result['competition_dynamic_price'] = self.competition_dynamic_price
        if self.competition_promotion_price is not None:
            result['competition_promotion_price'] = self.competition_promotion_price
        if self.min_before_control_price_of_normal is not None:
            result['min_before_control_price_of_normal'] = self.min_before_control_price_of_normal
        if self.price_show_info is not None:
            result['price_show_info'] = self.price_show_info.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('floor_price') is not None:
            self.floor_price = m.get('floor_price')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('sell_price') is not None:
            self.sell_price = m.get('sell_price')
        if m.get('original_sell_price') is not None:
            self.original_sell_price = m.get('original_sell_price')
        if m.get('base_total_price') is not None:
            self.base_total_price = m.get('base_total_price')
        if m.get('before_control_price') is not None:
            self.before_control_price = m.get('before_control_price')
        if m.get('tax') is not None:
            self.tax = m.get('tax')
        if m.get('supply_price') is not None:
            self.supply_price = m.get('supply_price')
        if m.get('basic_cabin_price') is not None:
            self.basic_cabin_price = m.get('basic_cabin_price')
        if m.get('build_price') is not None:
            self.build_price = m.get('build_price')
        if m.get('oil_price') is not None:
            self.oil_price = m.get('oil_price')
        if m.get('first_standard_price') is not None:
            self.first_standard_price = m.get('first_standard_price')
        if m.get('business_standard_price') is not None:
            self.business_standard_price = m.get('business_standard_price')
        if m.get('common_standard_price') is not None:
            self.common_standard_price = m.get('common_standard_price')
        if m.get('inter_ticket_price') is not None:
            self.inter_ticket_price = m.get('inter_ticket_price')
        if m.get('subtracted_price') is not None:
            self.subtracted_price = m.get('subtracted_price')
        if m.get('origin_common_price') is not None:
            self.origin_common_price = m.get('origin_common_price')
        if m.get('dynamic_promotion_price') is not None:
            self.dynamic_promotion_price = m.get('dynamic_promotion_price')
        if m.get('installment_num') is not None:
            self.installment_num = m.get('installment_num')
        if m.get('installment_price') is not None:
            self.installment_price = m.get('installment_price')
        if m.get('competition_dynamic_price') is not None:
            self.competition_dynamic_price = m.get('competition_dynamic_price')
        if m.get('competition_promotion_price') is not None:
            self.competition_promotion_price = m.get('competition_promotion_price')
        if m.get('min_before_control_price_of_normal') is not None:
            self.min_before_control_price_of_normal = m.get('min_before_control_price_of_normal')
        if m.get('price_show_info') is not None:
            temp_model = ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueSearchPricePriceShowInfo()
            self.price_show_info = temp_model.from_map(m['price_show_info'])
        return self


class ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValue(TeaModel):
    def __init__(self, id=None, cabin_quantity=None, search_price=None, segment_price=None):
        # id
        self.id = id  # type: str
        self.cabin_quantity = cabin_quantity  # type: dict[str, ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueCabinQuantityValue]
        self.search_price = search_price  # type: ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueSearchPrice
        self.segment_price = segment_price  # type: dict[str, ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueSegmentPriceValue]

    def validate(self):
        if self.cabin_quantity:
            for v in self.cabin_quantity.values():
                if v:
                    v.validate()
        if self.search_price:
            self.search_price.validate()
        if self.segment_price:
            for v in self.segment_price.values():
                if v:
                    v.validate()

    def to_map(self):
        _map = super(ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValue, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        result['cabin_quantity'] = {}
        if self.cabin_quantity is not None:
            for k, v in self.cabin_quantity.items():
                result['cabin_quantity'][k] = v.to_map()
        if self.search_price is not None:
            result['search_price'] = self.search_price.to_map()
        result['segment_price'] = {}
        if self.segment_price is not None:
            for k, v in self.segment_price.items():
                result['segment_price'][k] = v.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        self.cabin_quantity = {}
        if m.get('cabin_quantity') is not None:
            for k, v in m.get('cabin_quantity').items():
                temp_model = ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueCabinQuantityValue()
                self.cabin_quantity[k] = temp_model.from_map(v)
        if m.get('search_price') is not None:
            temp_model = ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueSearchPrice()
            self.search_price = temp_model.from_map(m['search_price'])
        self.segment_price = {}
        if m.get('segment_price') is not None:
            for k, v in m.get('segment_price').items():
                temp_model = ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueSegmentPriceValue()
                self.segment_price[k] = temp_model.from_map(v)
        return self


class ModuleFlightItemListItemListFlightRuleInfosValue(TeaModel):
    def __init__(self, refund_change_rule_desc=None, baggage_desc=None):
        self.refund_change_rule_desc = refund_change_rule_desc  # type: str
        self.baggage_desc = baggage_desc  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModuleFlightItemListItemListFlightRuleInfosValue, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.refund_change_rule_desc is not None:
            result['refund_change_rule_desc'] = self.refund_change_rule_desc
        if self.baggage_desc is not None:
            result['baggage_desc'] = self.baggage_desc
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('refund_change_rule_desc') is not None:
            self.refund_change_rule_desc = m.get('refund_change_rule_desc')
        if m.get('baggage_desc') is not None:
            self.baggage_desc = m.get('baggage_desc')
        return self


class ModuleFlightItemListItemListShoppingItemMapValueSearchPricePriceShowInfo(TeaModel):
    def __init__(self, discount_info=None, discount_num=None, show_ticket_price=None):
        self.discount_info = discount_info  # type: str
        self.discount_num = discount_num  # type: float
        self.show_ticket_price = show_ticket_price  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModuleFlightItemListItemListShoppingItemMapValueSearchPricePriceShowInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.discount_info is not None:
            result['discount_info'] = self.discount_info
        if self.discount_num is not None:
            result['discount_num'] = self.discount_num
        if self.show_ticket_price is not None:
            result['show_ticket_price'] = self.show_ticket_price
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('discount_info') is not None:
            self.discount_info = m.get('discount_info')
        if m.get('discount_num') is not None:
            self.discount_num = m.get('discount_num')
        if m.get('show_ticket_price') is not None:
            self.show_ticket_price = m.get('show_ticket_price')
        return self


class ModuleFlightItemListItemListShoppingItemMapValueSearchPrice(TeaModel):
    def __init__(self, floor_price=None, ticket_price=None, sell_price=None, original_sell_price=None,
                 base_total_price=None, before_control_price=None, tax=None, supply_price=None, basic_cabin_price=None,
                 build_price=None, oil_price=None, first_standard_price=None, business_standard_price=None,
                 common_standard_price=None, inter_ticket_price=None, subtracted_price=None, origin_common_price=None,
                 dynamic_promotion_price=None, installment_num=None, installment_price=None, competition_dynamic_price=None,
                 competition_promotion_price=None, min_before_control_price_of_normal=None, price_show_info=None):
        self.floor_price = floor_price  # type: int
        self.ticket_price = ticket_price  # type: int
        self.sell_price = sell_price  # type: int
        self.original_sell_price = original_sell_price  # type: int
        self.base_total_price = base_total_price  # type: int
        self.before_control_price = before_control_price  # type: int
        self.tax = tax  # type: int
        self.supply_price = supply_price  # type: int
        self.basic_cabin_price = basic_cabin_price  # type: int
        self.build_price = build_price  # type: int
        self.oil_price = oil_price  # type: int
        self.first_standard_price = first_standard_price  # type: int
        self.business_standard_price = business_standard_price  # type: int
        self.common_standard_price = common_standard_price  # type: int
        # fdPrice
        self.inter_ticket_price = inter_ticket_price  # type: int
        self.subtracted_price = subtracted_price  # type: int
        self.origin_common_price = origin_common_price  # type: int
        self.dynamic_promotion_price = dynamic_promotion_price  # type: int
        self.installment_num = installment_num  # type: int
        self.installment_price = installment_price  # type: float
        self.competition_dynamic_price = competition_dynamic_price  # type: int
        self.competition_promotion_price = competition_promotion_price  # type: int
        self.min_before_control_price_of_normal = min_before_control_price_of_normal  # type: int
        self.price_show_info = price_show_info  # type: ModuleFlightItemListItemListShoppingItemMapValueSearchPricePriceShowInfo

    def validate(self):
        if self.price_show_info:
            self.price_show_info.validate()

    def to_map(self):
        _map = super(ModuleFlightItemListItemListShoppingItemMapValueSearchPrice, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.floor_price is not None:
            result['floor_price'] = self.floor_price
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.sell_price is not None:
            result['sell_price'] = self.sell_price
        if self.original_sell_price is not None:
            result['original_sell_price'] = self.original_sell_price
        if self.base_total_price is not None:
            result['base_total_price'] = self.base_total_price
        if self.before_control_price is not None:
            result['before_control_price'] = self.before_control_price
        if self.tax is not None:
            result['tax'] = self.tax
        if self.supply_price is not None:
            result['supply_price'] = self.supply_price
        if self.basic_cabin_price is not None:
            result['basic_cabin_price'] = self.basic_cabin_price
        if self.build_price is not None:
            result['build_price'] = self.build_price
        if self.oil_price is not None:
            result['oil_price'] = self.oil_price
        if self.first_standard_price is not None:
            result['first_standard_price'] = self.first_standard_price
        if self.business_standard_price is not None:
            result['business_standard_price'] = self.business_standard_price
        if self.common_standard_price is not None:
            result['common_standard_price'] = self.common_standard_price
        if self.inter_ticket_price is not None:
            result['inter_ticket_price'] = self.inter_ticket_price
        if self.subtracted_price is not None:
            result['subtracted_price'] = self.subtracted_price
        if self.origin_common_price is not None:
            result['origin_common_price'] = self.origin_common_price
        if self.dynamic_promotion_price is not None:
            result['dynamic_promotion_price'] = self.dynamic_promotion_price
        if self.installment_num is not None:
            result['installment_num'] = self.installment_num
        if self.installment_price is not None:
            result['installment_price'] = self.installment_price
        if self.competition_dynamic_price is not None:
            result['competition_dynamic_price'] = self.competition_dynamic_price
        if self.competition_promotion_price is not None:
            result['competition_promotion_price'] = self.competition_promotion_price
        if self.min_before_control_price_of_normal is not None:
            result['min_before_control_price_of_normal'] = self.min_before_control_price_of_normal
        if self.price_show_info is not None:
            result['price_show_info'] = self.price_show_info.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('floor_price') is not None:
            self.floor_price = m.get('floor_price')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('sell_price') is not None:
            self.sell_price = m.get('sell_price')
        if m.get('original_sell_price') is not None:
            self.original_sell_price = m.get('original_sell_price')
        if m.get('base_total_price') is not None:
            self.base_total_price = m.get('base_total_price')
        if m.get('before_control_price') is not None:
            self.before_control_price = m.get('before_control_price')
        if m.get('tax') is not None:
            self.tax = m.get('tax')
        if m.get('supply_price') is not None:
            self.supply_price = m.get('supply_price')
        if m.get('basic_cabin_price') is not None:
            self.basic_cabin_price = m.get('basic_cabin_price')
        if m.get('build_price') is not None:
            self.build_price = m.get('build_price')
        if m.get('oil_price') is not None:
            self.oil_price = m.get('oil_price')
        if m.get('first_standard_price') is not None:
            self.first_standard_price = m.get('first_standard_price')
        if m.get('business_standard_price') is not None:
            self.business_standard_price = m.get('business_standard_price')
        if m.get('common_standard_price') is not None:
            self.common_standard_price = m.get('common_standard_price')
        if m.get('inter_ticket_price') is not None:
            self.inter_ticket_price = m.get('inter_ticket_price')
        if m.get('subtracted_price') is not None:
            self.subtracted_price = m.get('subtracted_price')
        if m.get('origin_common_price') is not None:
            self.origin_common_price = m.get('origin_common_price')
        if m.get('dynamic_promotion_price') is not None:
            self.dynamic_promotion_price = m.get('dynamic_promotion_price')
        if m.get('installment_num') is not None:
            self.installment_num = m.get('installment_num')
        if m.get('installment_price') is not None:
            self.installment_price = m.get('installment_price')
        if m.get('competition_dynamic_price') is not None:
            self.competition_dynamic_price = m.get('competition_dynamic_price')
        if m.get('competition_promotion_price') is not None:
            self.competition_promotion_price = m.get('competition_promotion_price')
        if m.get('min_before_control_price_of_normal') is not None:
            self.min_before_control_price_of_normal = m.get('min_before_control_price_of_normal')
        if m.get('price_show_info') is not None:
            temp_model = ModuleFlightItemListItemListShoppingItemMapValueSearchPricePriceShowInfo()
            self.price_show_info = temp_model.from_map(m['price_show_info'])
        return self


class ModuleFlightItemListItemListShoppingItemMapValue(TeaModel):
    def __init__(self, id=None, cabin_quantity=None, search_price=None, segment_price=None):
        # id
        self.id = id  # type: str
        self.cabin_quantity = cabin_quantity  # type: dict[str, ModuleFlightItemListItemListShoppingItemMapValueCabinQuantityValue]
        self.search_price = search_price  # type: ModuleFlightItemListItemListShoppingItemMapValueSearchPrice
        self.segment_price = segment_price  # type: dict[str, ModuleFlightItemListItemListShoppingItemMapValueSegmentPriceValue]

    def validate(self):
        if self.cabin_quantity:
            for v in self.cabin_quantity.values():
                if v:
                    v.validate()
        if self.search_price:
            self.search_price.validate()
        if self.segment_price:
            for v in self.segment_price.values():
                if v:
                    v.validate()

    def to_map(self):
        _map = super(ModuleFlightItemListItemListShoppingItemMapValue, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        result['cabin_quantity'] = {}
        if self.cabin_quantity is not None:
            for k, v in self.cabin_quantity.items():
                result['cabin_quantity'][k] = v.to_map()
        if self.search_price is not None:
            result['search_price'] = self.search_price.to_map()
        result['segment_price'] = {}
        if self.segment_price is not None:
            for k, v in self.segment_price.items():
                result['segment_price'][k] = v.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        self.cabin_quantity = {}
        if m.get('cabin_quantity') is not None:
            for k, v in m.get('cabin_quantity').items():
                temp_model = ModuleFlightItemListItemListShoppingItemMapValueCabinQuantityValue()
                self.cabin_quantity[k] = temp_model.from_map(v)
        if m.get('search_price') is not None:
            temp_model = ModuleFlightItemListItemListShoppingItemMapValueSearchPrice()
            self.search_price = temp_model.from_map(m['search_price'])
        self.segment_price = {}
        if m.get('segment_price') is not None:
            for k, v in m.get('segment_price').items():
                temp_model = ModuleFlightItemListItemListShoppingItemMapValueSegmentPriceValue()
                self.segment_price[k] = temp_model.from_map(v)
        return self


class ModuleFlightItemListItemListSubItemPositionMapValue(TeaModel):
    def __init__(self, journey_index=None, segment_index=None):
        self.journey_index = journey_index  # type: int
        self.segment_index = segment_index  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModuleFlightItemListItemListSubItemPositionMapValue, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.journey_index is not None:
            result['journey_index'] = self.journey_index
        if self.segment_index is not None:
            result['segment_index'] = self.segment_index
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('journey_index') is not None:
            self.journey_index = m.get('journey_index')
        if m.get('segment_index') is not None:
            self.segment_index = m.get('segment_index')
        return self


class ModuleFlightItemListItemListSubItemsShoppingItemMapValueSearchPricePriceShowInfo(TeaModel):
    def __init__(self, discount_info=None, discount_num=None, show_ticket_price=None):
        self.discount_info = discount_info  # type: str
        self.discount_num = discount_num  # type: float
        self.show_ticket_price = show_ticket_price  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModuleFlightItemListItemListSubItemsShoppingItemMapValueSearchPricePriceShowInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.discount_info is not None:
            result['discount_info'] = self.discount_info
        if self.discount_num is not None:
            result['discount_num'] = self.discount_num
        if self.show_ticket_price is not None:
            result['show_ticket_price'] = self.show_ticket_price
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('discount_info') is not None:
            self.discount_info = m.get('discount_info')
        if m.get('discount_num') is not None:
            self.discount_num = m.get('discount_num')
        if m.get('show_ticket_price') is not None:
            self.show_ticket_price = m.get('show_ticket_price')
        return self


class ModuleFlightItemListItemListSubItemsShoppingItemMapValueSearchPrice(TeaModel):
    def __init__(self, floor_price=None, ticket_price=None, sell_price=None, original_sell_price=None,
                 base_total_price=None, before_control_price=None, tax=None, supply_price=None, basic_cabin_price=None,
                 build_price=None, oil_price=None, first_standard_price=None, business_standard_price=None,
                 common_standard_price=None, inter_ticket_price=None, subtracted_price=None, origin_common_price=None,
                 dynamic_promotion_price=None, installment_num=None, installment_price=None, competition_dynamic_price=None,
                 competition_promotion_price=None, min_before_control_price_of_normal=None, price_show_info=None):
        self.floor_price = floor_price  # type: int
        self.ticket_price = ticket_price  # type: int
        self.sell_price = sell_price  # type: int
        self.original_sell_price = original_sell_price  # type: int
        self.base_total_price = base_total_price  # type: int
        self.before_control_price = before_control_price  # type: int
        self.tax = tax  # type: int
        self.supply_price = supply_price  # type: int
        self.basic_cabin_price = basic_cabin_price  # type: int
        self.build_price = build_price  # type: int
        self.oil_price = oil_price  # type: int
        self.first_standard_price = first_standard_price  # type: int
        self.business_standard_price = business_standard_price  # type: int
        self.common_standard_price = common_standard_price  # type: int
        # fdPrice
        self.inter_ticket_price = inter_ticket_price  # type: int
        self.subtracted_price = subtracted_price  # type: int
        self.origin_common_price = origin_common_price  # type: int
        self.dynamic_promotion_price = dynamic_promotion_price  # type: int
        self.installment_num = installment_num  # type: int
        self.installment_price = installment_price  # type: float
        self.competition_dynamic_price = competition_dynamic_price  # type: int
        self.competition_promotion_price = competition_promotion_price  # type: int
        self.min_before_control_price_of_normal = min_before_control_price_of_normal  # type: int
        self.price_show_info = price_show_info  # type: ModuleFlightItemListItemListSubItemsShoppingItemMapValueSearchPricePriceShowInfo

    def validate(self):
        if self.price_show_info:
            self.price_show_info.validate()

    def to_map(self):
        _map = super(ModuleFlightItemListItemListSubItemsShoppingItemMapValueSearchPrice, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.floor_price is not None:
            result['floor_price'] = self.floor_price
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.sell_price is not None:
            result['sell_price'] = self.sell_price
        if self.original_sell_price is not None:
            result['original_sell_price'] = self.original_sell_price
        if self.base_total_price is not None:
            result['base_total_price'] = self.base_total_price
        if self.before_control_price is not None:
            result['before_control_price'] = self.before_control_price
        if self.tax is not None:
            result['tax'] = self.tax
        if self.supply_price is not None:
            result['supply_price'] = self.supply_price
        if self.basic_cabin_price is not None:
            result['basic_cabin_price'] = self.basic_cabin_price
        if self.build_price is not None:
            result['build_price'] = self.build_price
        if self.oil_price is not None:
            result['oil_price'] = self.oil_price
        if self.first_standard_price is not None:
            result['first_standard_price'] = self.first_standard_price
        if self.business_standard_price is not None:
            result['business_standard_price'] = self.business_standard_price
        if self.common_standard_price is not None:
            result['common_standard_price'] = self.common_standard_price
        if self.inter_ticket_price is not None:
            result['inter_ticket_price'] = self.inter_ticket_price
        if self.subtracted_price is not None:
            result['subtracted_price'] = self.subtracted_price
        if self.origin_common_price is not None:
            result['origin_common_price'] = self.origin_common_price
        if self.dynamic_promotion_price is not None:
            result['dynamic_promotion_price'] = self.dynamic_promotion_price
        if self.installment_num is not None:
            result['installment_num'] = self.installment_num
        if self.installment_price is not None:
            result['installment_price'] = self.installment_price
        if self.competition_dynamic_price is not None:
            result['competition_dynamic_price'] = self.competition_dynamic_price
        if self.competition_promotion_price is not None:
            result['competition_promotion_price'] = self.competition_promotion_price
        if self.min_before_control_price_of_normal is not None:
            result['min_before_control_price_of_normal'] = self.min_before_control_price_of_normal
        if self.price_show_info is not None:
            result['price_show_info'] = self.price_show_info.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('floor_price') is not None:
            self.floor_price = m.get('floor_price')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('sell_price') is not None:
            self.sell_price = m.get('sell_price')
        if m.get('original_sell_price') is not None:
            self.original_sell_price = m.get('original_sell_price')
        if m.get('base_total_price') is not None:
            self.base_total_price = m.get('base_total_price')
        if m.get('before_control_price') is not None:
            self.before_control_price = m.get('before_control_price')
        if m.get('tax') is not None:
            self.tax = m.get('tax')
        if m.get('supply_price') is not None:
            self.supply_price = m.get('supply_price')
        if m.get('basic_cabin_price') is not None:
            self.basic_cabin_price = m.get('basic_cabin_price')
        if m.get('build_price') is not None:
            self.build_price = m.get('build_price')
        if m.get('oil_price') is not None:
            self.oil_price = m.get('oil_price')
        if m.get('first_standard_price') is not None:
            self.first_standard_price = m.get('first_standard_price')
        if m.get('business_standard_price') is not None:
            self.business_standard_price = m.get('business_standard_price')
        if m.get('common_standard_price') is not None:
            self.common_standard_price = m.get('common_standard_price')
        if m.get('inter_ticket_price') is not None:
            self.inter_ticket_price = m.get('inter_ticket_price')
        if m.get('subtracted_price') is not None:
            self.subtracted_price = m.get('subtracted_price')
        if m.get('origin_common_price') is not None:
            self.origin_common_price = m.get('origin_common_price')
        if m.get('dynamic_promotion_price') is not None:
            self.dynamic_promotion_price = m.get('dynamic_promotion_price')
        if m.get('installment_num') is not None:
            self.installment_num = m.get('installment_num')
        if m.get('installment_price') is not None:
            self.installment_price = m.get('installment_price')
        if m.get('competition_dynamic_price') is not None:
            self.competition_dynamic_price = m.get('competition_dynamic_price')
        if m.get('competition_promotion_price') is not None:
            self.competition_promotion_price = m.get('competition_promotion_price')
        if m.get('min_before_control_price_of_normal') is not None:
            self.min_before_control_price_of_normal = m.get('min_before_control_price_of_normal')
        if m.get('price_show_info') is not None:
            temp_model = ModuleFlightItemListItemListSubItemsShoppingItemMapValueSearchPricePriceShowInfo()
            self.price_show_info = temp_model.from_map(m['price_show_info'])
        return self


class ModuleFlightItemListItemListSubItemsShoppingItemMapValue(TeaModel):
    def __init__(self, id=None, cabin_quantity=None, search_price=None, segment_price=None):
        # id
        self.id = id  # type: str
        self.cabin_quantity = cabin_quantity  # type: dict[str, ModuleFlightItemListItemListSubItemsShoppingItemMapValueCabinQuantityValue]
        self.search_price = search_price  # type: ModuleFlightItemListItemListSubItemsShoppingItemMapValueSearchPrice
        self.segment_price = segment_price  # type: dict[str, ModuleFlightItemListItemListSubItemsShoppingItemMapValueSegmentPriceValue]

    def validate(self):
        if self.cabin_quantity:
            for v in self.cabin_quantity.values():
                if v:
                    v.validate()
        if self.search_price:
            self.search_price.validate()
        if self.segment_price:
            for v in self.segment_price.values():
                if v:
                    v.validate()

    def to_map(self):
        _map = super(ModuleFlightItemListItemListSubItemsShoppingItemMapValue, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        result['cabin_quantity'] = {}
        if self.cabin_quantity is not None:
            for k, v in self.cabin_quantity.items():
                result['cabin_quantity'][k] = v.to_map()
        if self.search_price is not None:
            result['search_price'] = self.search_price.to_map()
        result['segment_price'] = {}
        if self.segment_price is not None:
            for k, v in self.segment_price.items():
                result['segment_price'][k] = v.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        self.cabin_quantity = {}
        if m.get('cabin_quantity') is not None:
            for k, v in m.get('cabin_quantity').items():
                temp_model = ModuleFlightItemListItemListSubItemsShoppingItemMapValueCabinQuantityValue()
                self.cabin_quantity[k] = temp_model.from_map(v)
        if m.get('search_price') is not None:
            temp_model = ModuleFlightItemListItemListSubItemsShoppingItemMapValueSearchPrice()
            self.search_price = temp_model.from_map(m['search_price'])
        self.segment_price = {}
        if m.get('segment_price') is not None:
            for k, v in m.get('segment_price').items():
                temp_model = ModuleFlightItemListItemListSubItemsShoppingItemMapValueSegmentPriceValue()
                self.segment_price[k] = temp_model.from_map(v)
        return self


class ModuleAgentInfoAttributeShowInfoMapValue(TeaModel):
    def __init__(self, code=None, name=None, text=None):
        self.code = code  # type: str
        self.name = name  # type: str
        self.text = text  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModuleAgentInfoAttributeShowInfoMapValue, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.name is not None:
            result['name'] = self.name
        if self.text is not None:
            result['text'] = self.text
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('text') is not None:
            self.text = m.get('text')
        return self


class ModuleItemListFlightRuleInfosValue(TeaModel):
    def __init__(self, refund_change_rule_desc=None, baggage_desc=None):
        self.refund_change_rule_desc = refund_change_rule_desc  # type: str
        self.baggage_desc = baggage_desc  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModuleItemListFlightRuleInfosValue, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.refund_change_rule_desc is not None:
            result['refund_change_rule_desc'] = self.refund_change_rule_desc
        if self.baggage_desc is not None:
            result['baggage_desc'] = self.baggage_desc
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('refund_change_rule_desc') is not None:
            self.refund_change_rule_desc = m.get('refund_change_rule_desc')
        if m.get('baggage_desc') is not None:
            self.baggage_desc = m.get('baggage_desc')
        return self


class ModuleItemListShoppingItemMapValueSearchPricePriceShowInfo(TeaModel):
    def __init__(self, discount_info=None, discount_num=None, show_ticket_price=None):
        self.discount_info = discount_info  # type: str
        self.discount_num = discount_num  # type: float
        self.show_ticket_price = show_ticket_price  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModuleItemListShoppingItemMapValueSearchPricePriceShowInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.discount_info is not None:
            result['discount_info'] = self.discount_info
        if self.discount_num is not None:
            result['discount_num'] = self.discount_num
        if self.show_ticket_price is not None:
            result['show_ticket_price'] = self.show_ticket_price
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('discount_info') is not None:
            self.discount_info = m.get('discount_info')
        if m.get('discount_num') is not None:
            self.discount_num = m.get('discount_num')
        if m.get('show_ticket_price') is not None:
            self.show_ticket_price = m.get('show_ticket_price')
        return self


class ModuleItemListShoppingItemMapValueSearchPrice(TeaModel):
    def __init__(self, floor_price=None, ticket_price=None, sell_price=None, original_sell_price=None,
                 base_total_price=None, before_control_price=None, tax=None, supply_price=None, basic_cabin_price=None,
                 build_price=None, oil_price=None, first_standard_price=None, business_standard_price=None,
                 common_standard_price=None, inter_ticket_price=None, subtracted_price=None, origin_common_price=None,
                 dynamic_promotion_price=None, installment_num=None, installment_price=None, competition_dynamic_price=None,
                 competition_promotion_price=None, min_before_control_price_of_normal=None, price_show_info=None):
        self.floor_price = floor_price  # type: int
        self.ticket_price = ticket_price  # type: int
        self.sell_price = sell_price  # type: int
        self.original_sell_price = original_sell_price  # type: int
        self.base_total_price = base_total_price  # type: int
        self.before_control_price = before_control_price  # type: int
        self.tax = tax  # type: int
        self.supply_price = supply_price  # type: int
        self.basic_cabin_price = basic_cabin_price  # type: int
        self.build_price = build_price  # type: int
        self.oil_price = oil_price  # type: int
        self.first_standard_price = first_standard_price  # type: int
        self.business_standard_price = business_standard_price  # type: int
        self.common_standard_price = common_standard_price  # type: int
        # fdPrice
        self.inter_ticket_price = inter_ticket_price  # type: int
        self.subtracted_price = subtracted_price  # type: int
        self.origin_common_price = origin_common_price  # type: int
        self.dynamic_promotion_price = dynamic_promotion_price  # type: int
        self.installment_num = installment_num  # type: int
        self.installment_price = installment_price  # type: float
        self.competition_dynamic_price = competition_dynamic_price  # type: int
        self.competition_promotion_price = competition_promotion_price  # type: int
        self.min_before_control_price_of_normal = min_before_control_price_of_normal  # type: int
        self.price_show_info = price_show_info  # type: ModuleItemListShoppingItemMapValueSearchPricePriceShowInfo

    def validate(self):
        if self.price_show_info:
            self.price_show_info.validate()

    def to_map(self):
        _map = super(ModuleItemListShoppingItemMapValueSearchPrice, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.floor_price is not None:
            result['floor_price'] = self.floor_price
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.sell_price is not None:
            result['sell_price'] = self.sell_price
        if self.original_sell_price is not None:
            result['original_sell_price'] = self.original_sell_price
        if self.base_total_price is not None:
            result['base_total_price'] = self.base_total_price
        if self.before_control_price is not None:
            result['before_control_price'] = self.before_control_price
        if self.tax is not None:
            result['tax'] = self.tax
        if self.supply_price is not None:
            result['supply_price'] = self.supply_price
        if self.basic_cabin_price is not None:
            result['basic_cabin_price'] = self.basic_cabin_price
        if self.build_price is not None:
            result['build_price'] = self.build_price
        if self.oil_price is not None:
            result['oil_price'] = self.oil_price
        if self.first_standard_price is not None:
            result['first_standard_price'] = self.first_standard_price
        if self.business_standard_price is not None:
            result['business_standard_price'] = self.business_standard_price
        if self.common_standard_price is not None:
            result['common_standard_price'] = self.common_standard_price
        if self.inter_ticket_price is not None:
            result['inter_ticket_price'] = self.inter_ticket_price
        if self.subtracted_price is not None:
            result['subtracted_price'] = self.subtracted_price
        if self.origin_common_price is not None:
            result['origin_common_price'] = self.origin_common_price
        if self.dynamic_promotion_price is not None:
            result['dynamic_promotion_price'] = self.dynamic_promotion_price
        if self.installment_num is not None:
            result['installment_num'] = self.installment_num
        if self.installment_price is not None:
            result['installment_price'] = self.installment_price
        if self.competition_dynamic_price is not None:
            result['competition_dynamic_price'] = self.competition_dynamic_price
        if self.competition_promotion_price is not None:
            result['competition_promotion_price'] = self.competition_promotion_price
        if self.min_before_control_price_of_normal is not None:
            result['min_before_control_price_of_normal'] = self.min_before_control_price_of_normal
        if self.price_show_info is not None:
            result['price_show_info'] = self.price_show_info.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('floor_price') is not None:
            self.floor_price = m.get('floor_price')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('sell_price') is not None:
            self.sell_price = m.get('sell_price')
        if m.get('original_sell_price') is not None:
            self.original_sell_price = m.get('original_sell_price')
        if m.get('base_total_price') is not None:
            self.base_total_price = m.get('base_total_price')
        if m.get('before_control_price') is not None:
            self.before_control_price = m.get('before_control_price')
        if m.get('tax') is not None:
            self.tax = m.get('tax')
        if m.get('supply_price') is not None:
            self.supply_price = m.get('supply_price')
        if m.get('basic_cabin_price') is not None:
            self.basic_cabin_price = m.get('basic_cabin_price')
        if m.get('build_price') is not None:
            self.build_price = m.get('build_price')
        if m.get('oil_price') is not None:
            self.oil_price = m.get('oil_price')
        if m.get('first_standard_price') is not None:
            self.first_standard_price = m.get('first_standard_price')
        if m.get('business_standard_price') is not None:
            self.business_standard_price = m.get('business_standard_price')
        if m.get('common_standard_price') is not None:
            self.common_standard_price = m.get('common_standard_price')
        if m.get('inter_ticket_price') is not None:
            self.inter_ticket_price = m.get('inter_ticket_price')
        if m.get('subtracted_price') is not None:
            self.subtracted_price = m.get('subtracted_price')
        if m.get('origin_common_price') is not None:
            self.origin_common_price = m.get('origin_common_price')
        if m.get('dynamic_promotion_price') is not None:
            self.dynamic_promotion_price = m.get('dynamic_promotion_price')
        if m.get('installment_num') is not None:
            self.installment_num = m.get('installment_num')
        if m.get('installment_price') is not None:
            self.installment_price = m.get('installment_price')
        if m.get('competition_dynamic_price') is not None:
            self.competition_dynamic_price = m.get('competition_dynamic_price')
        if m.get('competition_promotion_price') is not None:
            self.competition_promotion_price = m.get('competition_promotion_price')
        if m.get('min_before_control_price_of_normal') is not None:
            self.min_before_control_price_of_normal = m.get('min_before_control_price_of_normal')
        if m.get('price_show_info') is not None:
            temp_model = ModuleItemListShoppingItemMapValueSearchPricePriceShowInfo()
            self.price_show_info = temp_model.from_map(m['price_show_info'])
        return self


class ModuleItemListShoppingItemMapValue(TeaModel):
    def __init__(self, id=None, cabin_quantity=None, search_price=None, segment_price=None):
        # id
        self.id = id  # type: str
        self.cabin_quantity = cabin_quantity  # type: dict[str, ModuleItemListShoppingItemMapValueCabinQuantityValue]
        self.search_price = search_price  # type: ModuleItemListShoppingItemMapValueSearchPrice
        self.segment_price = segment_price  # type: dict[str, ModuleItemListShoppingItemMapValueSegmentPriceValue]

    def validate(self):
        if self.cabin_quantity:
            for v in self.cabin_quantity.values():
                if v:
                    v.validate()
        if self.search_price:
            self.search_price.validate()
        if self.segment_price:
            for v in self.segment_price.values():
                if v:
                    v.validate()

    def to_map(self):
        _map = super(ModuleItemListShoppingItemMapValue, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        result['cabin_quantity'] = {}
        if self.cabin_quantity is not None:
            for k, v in self.cabin_quantity.items():
                result['cabin_quantity'][k] = v.to_map()
        if self.search_price is not None:
            result['search_price'] = self.search_price.to_map()
        result['segment_price'] = {}
        if self.segment_price is not None:
            for k, v in self.segment_price.items():
                result['segment_price'][k] = v.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        self.cabin_quantity = {}
        if m.get('cabin_quantity') is not None:
            for k, v in m.get('cabin_quantity').items():
                temp_model = ModuleItemListShoppingItemMapValueCabinQuantityValue()
                self.cabin_quantity[k] = temp_model.from_map(v)
        if m.get('search_price') is not None:
            temp_model = ModuleItemListShoppingItemMapValueSearchPrice()
            self.search_price = temp_model.from_map(m['search_price'])
        self.segment_price = {}
        if m.get('segment_price') is not None:
            for k, v in m.get('segment_price').items():
                temp_model = ModuleItemListShoppingItemMapValueSegmentPriceValue()
                self.segment_price[k] = temp_model.from_map(v)
        return self


class ModuleItemListSubItemPositionMapValue(TeaModel):
    def __init__(self, journey_index=None, segment_index=None):
        self.journey_index = journey_index  # type: int
        self.segment_index = segment_index  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModuleItemListSubItemPositionMapValue, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.journey_index is not None:
            result['journey_index'] = self.journey_index
        if self.segment_index is not None:
            result['segment_index'] = self.segment_index
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('journey_index') is not None:
            self.journey_index = m.get('journey_index')
        if m.get('segment_index') is not None:
            self.segment_index = m.get('segment_index')
        return self


class ModuleItemListSubItemsShoppingItemMapValueSearchPricePriceShowInfo(TeaModel):
    def __init__(self, discount_info=None, discount_num=None, show_ticket_price=None):
        self.discount_info = discount_info  # type: str
        self.discount_num = discount_num  # type: float
        self.show_ticket_price = show_ticket_price  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModuleItemListSubItemsShoppingItemMapValueSearchPricePriceShowInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.discount_info is not None:
            result['discount_info'] = self.discount_info
        if self.discount_num is not None:
            result['discount_num'] = self.discount_num
        if self.show_ticket_price is not None:
            result['show_ticket_price'] = self.show_ticket_price
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('discount_info') is not None:
            self.discount_info = m.get('discount_info')
        if m.get('discount_num') is not None:
            self.discount_num = m.get('discount_num')
        if m.get('show_ticket_price') is not None:
            self.show_ticket_price = m.get('show_ticket_price')
        return self


class ModuleItemListSubItemsShoppingItemMapValueSearchPrice(TeaModel):
    def __init__(self, floor_price=None, ticket_price=None, sell_price=None, original_sell_price=None,
                 base_total_price=None, before_control_price=None, tax=None, supply_price=None, basic_cabin_price=None,
                 build_price=None, oil_price=None, first_standard_price=None, business_standard_price=None,
                 common_standard_price=None, inter_ticket_price=None, subtracted_price=None, origin_common_price=None,
                 dynamic_promotion_price=None, installment_num=None, installment_price=None, competition_dynamic_price=None,
                 competition_promotion_price=None, min_before_control_price_of_normal=None, price_show_info=None):
        self.floor_price = floor_price  # type: int
        self.ticket_price = ticket_price  # type: int
        self.sell_price = sell_price  # type: int
        self.original_sell_price = original_sell_price  # type: int
        self.base_total_price = base_total_price  # type: int
        self.before_control_price = before_control_price  # type: int
        self.tax = tax  # type: int
        self.supply_price = supply_price  # type: int
        self.basic_cabin_price = basic_cabin_price  # type: int
        self.build_price = build_price  # type: int
        self.oil_price = oil_price  # type: int
        self.first_standard_price = first_standard_price  # type: int
        self.business_standard_price = business_standard_price  # type: int
        self.common_standard_price = common_standard_price  # type: int
        # fdPrice
        self.inter_ticket_price = inter_ticket_price  # type: int
        self.subtracted_price = subtracted_price  # type: int
        self.origin_common_price = origin_common_price  # type: int
        self.dynamic_promotion_price = dynamic_promotion_price  # type: int
        self.installment_num = installment_num  # type: int
        self.installment_price = installment_price  # type: float
        self.competition_dynamic_price = competition_dynamic_price  # type: int
        self.competition_promotion_price = competition_promotion_price  # type: int
        self.min_before_control_price_of_normal = min_before_control_price_of_normal  # type: int
        self.price_show_info = price_show_info  # type: ModuleItemListSubItemsShoppingItemMapValueSearchPricePriceShowInfo

    def validate(self):
        if self.price_show_info:
            self.price_show_info.validate()

    def to_map(self):
        _map = super(ModuleItemListSubItemsShoppingItemMapValueSearchPrice, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.floor_price is not None:
            result['floor_price'] = self.floor_price
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.sell_price is not None:
            result['sell_price'] = self.sell_price
        if self.original_sell_price is not None:
            result['original_sell_price'] = self.original_sell_price
        if self.base_total_price is not None:
            result['base_total_price'] = self.base_total_price
        if self.before_control_price is not None:
            result['before_control_price'] = self.before_control_price
        if self.tax is not None:
            result['tax'] = self.tax
        if self.supply_price is not None:
            result['supply_price'] = self.supply_price
        if self.basic_cabin_price is not None:
            result['basic_cabin_price'] = self.basic_cabin_price
        if self.build_price is not None:
            result['build_price'] = self.build_price
        if self.oil_price is not None:
            result['oil_price'] = self.oil_price
        if self.first_standard_price is not None:
            result['first_standard_price'] = self.first_standard_price
        if self.business_standard_price is not None:
            result['business_standard_price'] = self.business_standard_price
        if self.common_standard_price is not None:
            result['common_standard_price'] = self.common_standard_price
        if self.inter_ticket_price is not None:
            result['inter_ticket_price'] = self.inter_ticket_price
        if self.subtracted_price is not None:
            result['subtracted_price'] = self.subtracted_price
        if self.origin_common_price is not None:
            result['origin_common_price'] = self.origin_common_price
        if self.dynamic_promotion_price is not None:
            result['dynamic_promotion_price'] = self.dynamic_promotion_price
        if self.installment_num is not None:
            result['installment_num'] = self.installment_num
        if self.installment_price is not None:
            result['installment_price'] = self.installment_price
        if self.competition_dynamic_price is not None:
            result['competition_dynamic_price'] = self.competition_dynamic_price
        if self.competition_promotion_price is not None:
            result['competition_promotion_price'] = self.competition_promotion_price
        if self.min_before_control_price_of_normal is not None:
            result['min_before_control_price_of_normal'] = self.min_before_control_price_of_normal
        if self.price_show_info is not None:
            result['price_show_info'] = self.price_show_info.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('floor_price') is not None:
            self.floor_price = m.get('floor_price')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('sell_price') is not None:
            self.sell_price = m.get('sell_price')
        if m.get('original_sell_price') is not None:
            self.original_sell_price = m.get('original_sell_price')
        if m.get('base_total_price') is not None:
            self.base_total_price = m.get('base_total_price')
        if m.get('before_control_price') is not None:
            self.before_control_price = m.get('before_control_price')
        if m.get('tax') is not None:
            self.tax = m.get('tax')
        if m.get('supply_price') is not None:
            self.supply_price = m.get('supply_price')
        if m.get('basic_cabin_price') is not None:
            self.basic_cabin_price = m.get('basic_cabin_price')
        if m.get('build_price') is not None:
            self.build_price = m.get('build_price')
        if m.get('oil_price') is not None:
            self.oil_price = m.get('oil_price')
        if m.get('first_standard_price') is not None:
            self.first_standard_price = m.get('first_standard_price')
        if m.get('business_standard_price') is not None:
            self.business_standard_price = m.get('business_standard_price')
        if m.get('common_standard_price') is not None:
            self.common_standard_price = m.get('common_standard_price')
        if m.get('inter_ticket_price') is not None:
            self.inter_ticket_price = m.get('inter_ticket_price')
        if m.get('subtracted_price') is not None:
            self.subtracted_price = m.get('subtracted_price')
        if m.get('origin_common_price') is not None:
            self.origin_common_price = m.get('origin_common_price')
        if m.get('dynamic_promotion_price') is not None:
            self.dynamic_promotion_price = m.get('dynamic_promotion_price')
        if m.get('installment_num') is not None:
            self.installment_num = m.get('installment_num')
        if m.get('installment_price') is not None:
            self.installment_price = m.get('installment_price')
        if m.get('competition_dynamic_price') is not None:
            self.competition_dynamic_price = m.get('competition_dynamic_price')
        if m.get('competition_promotion_price') is not None:
            self.competition_promotion_price = m.get('competition_promotion_price')
        if m.get('min_before_control_price_of_normal') is not None:
            self.min_before_control_price_of_normal = m.get('min_before_control_price_of_normal')
        if m.get('price_show_info') is not None:
            temp_model = ModuleItemListSubItemsShoppingItemMapValueSearchPricePriceShowInfo()
            self.price_show_info = temp_model.from_map(m['price_show_info'])
        return self


class ModuleItemListSubItemsShoppingItemMapValue(TeaModel):
    def __init__(self, id=None, cabin_quantity=None, search_price=None, segment_price=None):
        # id
        self.id = id  # type: str
        self.cabin_quantity = cabin_quantity  # type: dict[str, ModuleItemListSubItemsShoppingItemMapValueCabinQuantityValue]
        self.search_price = search_price  # type: ModuleItemListSubItemsShoppingItemMapValueSearchPrice
        self.segment_price = segment_price  # type: dict[str, ModuleItemListSubItemsShoppingItemMapValueSegmentPriceValue]

    def validate(self):
        if self.cabin_quantity:
            for v in self.cabin_quantity.values():
                if v:
                    v.validate()
        if self.search_price:
            self.search_price.validate()
        if self.segment_price:
            for v in self.segment_price.values():
                if v:
                    v.validate()

    def to_map(self):
        _map = super(ModuleItemListSubItemsShoppingItemMapValue, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        result['cabin_quantity'] = {}
        if self.cabin_quantity is not None:
            for k, v in self.cabin_quantity.items():
                result['cabin_quantity'][k] = v.to_map()
        if self.search_price is not None:
            result['search_price'] = self.search_price.to_map()
        result['segment_price'] = {}
        if self.segment_price is not None:
            for k, v in self.segment_price.items():
                result['segment_price'][k] = v.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        self.cabin_quantity = {}
        if m.get('cabin_quantity') is not None:
            for k, v in m.get('cabin_quantity').items():
                temp_model = ModuleItemListSubItemsShoppingItemMapValueCabinQuantityValue()
                self.cabin_quantity[k] = temp_model.from_map(v)
        if m.get('search_price') is not None:
            temp_model = ModuleItemListSubItemsShoppingItemMapValueSearchPrice()
            self.search_price = temp_model.from_map(m['search_price'])
        self.segment_price = {}
        if m.get('segment_price') is not None:
            for k, v in m.get('segment_price').items():
                temp_model = ModuleItemListSubItemsShoppingItemMapValueSegmentPriceValue()
                self.segment_price[k] = temp_model.from_map(v)
        return self


class ModuleFlightItemListBestPriceItemShoppingItemMapValueCabinQuantityValue(TeaModel):
    def __init__(self, cabin=None, cabin_class=None, cabin_class_name=None, cabin_class_memo=None,
                 specification=None, quantity=None, link_cabins=None, reshop_change_cabin=None, child_cabin_type=None,
                 infant_basic_cabin=None, inner_cabin_class=None):
        self.cabin = cabin  # type: str
        self.cabin_class = cabin_class  # type: str
        self.cabin_class_name = cabin_class_name  # type: str
        self.cabin_class_memo = cabin_class_memo  # type: str
        self.specification = specification  # type: str
        self.quantity = quantity  # type: str
        self.link_cabins = link_cabins  # type: list[str]
        self.reshop_change_cabin = reshop_change_cabin  # type: bool
        self.child_cabin_type = child_cabin_type  # type: int
        self.infant_basic_cabin = infant_basic_cabin  # type: str
        self.inner_cabin_class = inner_cabin_class  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModuleFlightItemListBestPriceItemShoppingItemMapValueCabinQuantityValue, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cabin is not None:
            result['cabin'] = self.cabin
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.cabin_class_name is not None:
            result['cabin_class_name'] = self.cabin_class_name
        if self.cabin_class_memo is not None:
            result['cabin_class_memo'] = self.cabin_class_memo
        if self.specification is not None:
            result['specification'] = self.specification
        if self.quantity is not None:
            result['quantity'] = self.quantity
        if self.link_cabins is not None:
            result['link_cabins'] = self.link_cabins
        if self.reshop_change_cabin is not None:
            result['reshop_change_cabin'] = self.reshop_change_cabin
        if self.child_cabin_type is not None:
            result['child_cabin_type'] = self.child_cabin_type
        if self.infant_basic_cabin is not None:
            result['infant_basic_cabin'] = self.infant_basic_cabin
        if self.inner_cabin_class is not None:
            result['inner_cabin_class'] = self.inner_cabin_class
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('cabin') is not None:
            self.cabin = m.get('cabin')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('cabin_class_name') is not None:
            self.cabin_class_name = m.get('cabin_class_name')
        if m.get('cabin_class_memo') is not None:
            self.cabin_class_memo = m.get('cabin_class_memo')
        if m.get('specification') is not None:
            self.specification = m.get('specification')
        if m.get('quantity') is not None:
            self.quantity = m.get('quantity')
        if m.get('link_cabins') is not None:
            self.link_cabins = m.get('link_cabins')
        if m.get('reshop_change_cabin') is not None:
            self.reshop_change_cabin = m.get('reshop_change_cabin')
        if m.get('child_cabin_type') is not None:
            self.child_cabin_type = m.get('child_cabin_type')
        if m.get('infant_basic_cabin') is not None:
            self.infant_basic_cabin = m.get('infant_basic_cabin')
        if m.get('inner_cabin_class') is not None:
            self.inner_cabin_class = m.get('inner_cabin_class')
        return self


class ModuleFlightItemListBestPriceItemShoppingItemMapValueSegmentPriceValuePriceShowInfo(TeaModel):
    def __init__(self, discount_info=None, discount_num=None, show_ticket_price=None):
        self.discount_info = discount_info  # type: str
        self.discount_num = discount_num  # type: float
        self.show_ticket_price = show_ticket_price  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModuleFlightItemListBestPriceItemShoppingItemMapValueSegmentPriceValuePriceShowInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.discount_info is not None:
            result['discount_info'] = self.discount_info
        if self.discount_num is not None:
            result['discount_num'] = self.discount_num
        if self.show_ticket_price is not None:
            result['show_ticket_price'] = self.show_ticket_price
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('discount_info') is not None:
            self.discount_info = m.get('discount_info')
        if m.get('discount_num') is not None:
            self.discount_num = m.get('discount_num')
        if m.get('show_ticket_price') is not None:
            self.show_ticket_price = m.get('show_ticket_price')
        return self


class ModuleFlightItemListBestPriceItemShoppingItemMapValueSegmentPriceValue(TeaModel):
    def __init__(self, floor_price=None, ticket_price=None, sell_price=None, original_sell_price=None,
                 base_total_price=None, before_control_price=None, tax=None, supply_price=None, basic_cabin_price=None,
                 build_price=None, oil_price=None, first_standard_price=None, business_standard_price=None,
                 common_standard_price=None, inter_ticket_price=None, subtracted_price=None, origin_common_price=None,
                 dynamic_promotion_price=None, installment_num=None, installment_price=None, competition_dynamic_price=None,
                 competition_promotion_price=None, min_before_control_price_of_normal=None, price_show_info=None):
        self.floor_price = floor_price  # type: int
        self.ticket_price = ticket_price  # type: int
        self.sell_price = sell_price  # type: int
        self.original_sell_price = original_sell_price  # type: int
        self.base_total_price = base_total_price  # type: int
        self.before_control_price = before_control_price  # type: int
        self.tax = tax  # type: int
        self.supply_price = supply_price  # type: int
        self.basic_cabin_price = basic_cabin_price  # type: int
        self.build_price = build_price  # type: int
        self.oil_price = oil_price  # type: int
        self.first_standard_price = first_standard_price  # type: int
        self.business_standard_price = business_standard_price  # type: int
        self.common_standard_price = common_standard_price  # type: int
        # fdPrice
        self.inter_ticket_price = inter_ticket_price  # type: int
        self.subtracted_price = subtracted_price  # type: int
        self.origin_common_price = origin_common_price  # type: int
        self.dynamic_promotion_price = dynamic_promotion_price  # type: int
        self.installment_num = installment_num  # type: int
        self.installment_price = installment_price  # type: float
        self.competition_dynamic_price = competition_dynamic_price  # type: int
        self.competition_promotion_price = competition_promotion_price  # type: int
        self.min_before_control_price_of_normal = min_before_control_price_of_normal  # type: int
        self.price_show_info = price_show_info  # type: ModuleFlightItemListBestPriceItemShoppingItemMapValueSegmentPriceValuePriceShowInfo

    def validate(self):
        if self.price_show_info:
            self.price_show_info.validate()

    def to_map(self):
        _map = super(ModuleFlightItemListBestPriceItemShoppingItemMapValueSegmentPriceValue, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.floor_price is not None:
            result['floor_price'] = self.floor_price
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.sell_price is not None:
            result['sell_price'] = self.sell_price
        if self.original_sell_price is not None:
            result['original_sell_price'] = self.original_sell_price
        if self.base_total_price is not None:
            result['base_total_price'] = self.base_total_price
        if self.before_control_price is not None:
            result['before_control_price'] = self.before_control_price
        if self.tax is not None:
            result['tax'] = self.tax
        if self.supply_price is not None:
            result['supply_price'] = self.supply_price
        if self.basic_cabin_price is not None:
            result['basic_cabin_price'] = self.basic_cabin_price
        if self.build_price is not None:
            result['build_price'] = self.build_price
        if self.oil_price is not None:
            result['oil_price'] = self.oil_price
        if self.first_standard_price is not None:
            result['first_standard_price'] = self.first_standard_price
        if self.business_standard_price is not None:
            result['business_standard_price'] = self.business_standard_price
        if self.common_standard_price is not None:
            result['common_standard_price'] = self.common_standard_price
        if self.inter_ticket_price is not None:
            result['inter_ticket_price'] = self.inter_ticket_price
        if self.subtracted_price is not None:
            result['subtracted_price'] = self.subtracted_price
        if self.origin_common_price is not None:
            result['origin_common_price'] = self.origin_common_price
        if self.dynamic_promotion_price is not None:
            result['dynamic_promotion_price'] = self.dynamic_promotion_price
        if self.installment_num is not None:
            result['installment_num'] = self.installment_num
        if self.installment_price is not None:
            result['installment_price'] = self.installment_price
        if self.competition_dynamic_price is not None:
            result['competition_dynamic_price'] = self.competition_dynamic_price
        if self.competition_promotion_price is not None:
            result['competition_promotion_price'] = self.competition_promotion_price
        if self.min_before_control_price_of_normal is not None:
            result['min_before_control_price_of_normal'] = self.min_before_control_price_of_normal
        if self.price_show_info is not None:
            result['price_show_info'] = self.price_show_info.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('floor_price') is not None:
            self.floor_price = m.get('floor_price')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('sell_price') is not None:
            self.sell_price = m.get('sell_price')
        if m.get('original_sell_price') is not None:
            self.original_sell_price = m.get('original_sell_price')
        if m.get('base_total_price') is not None:
            self.base_total_price = m.get('base_total_price')
        if m.get('before_control_price') is not None:
            self.before_control_price = m.get('before_control_price')
        if m.get('tax') is not None:
            self.tax = m.get('tax')
        if m.get('supply_price') is not None:
            self.supply_price = m.get('supply_price')
        if m.get('basic_cabin_price') is not None:
            self.basic_cabin_price = m.get('basic_cabin_price')
        if m.get('build_price') is not None:
            self.build_price = m.get('build_price')
        if m.get('oil_price') is not None:
            self.oil_price = m.get('oil_price')
        if m.get('first_standard_price') is not None:
            self.first_standard_price = m.get('first_standard_price')
        if m.get('business_standard_price') is not None:
            self.business_standard_price = m.get('business_standard_price')
        if m.get('common_standard_price') is not None:
            self.common_standard_price = m.get('common_standard_price')
        if m.get('inter_ticket_price') is not None:
            self.inter_ticket_price = m.get('inter_ticket_price')
        if m.get('subtracted_price') is not None:
            self.subtracted_price = m.get('subtracted_price')
        if m.get('origin_common_price') is not None:
            self.origin_common_price = m.get('origin_common_price')
        if m.get('dynamic_promotion_price') is not None:
            self.dynamic_promotion_price = m.get('dynamic_promotion_price')
        if m.get('installment_num') is not None:
            self.installment_num = m.get('installment_num')
        if m.get('installment_price') is not None:
            self.installment_price = m.get('installment_price')
        if m.get('competition_dynamic_price') is not None:
            self.competition_dynamic_price = m.get('competition_dynamic_price')
        if m.get('competition_promotion_price') is not None:
            self.competition_promotion_price = m.get('competition_promotion_price')
        if m.get('min_before_control_price_of_normal') is not None:
            self.min_before_control_price_of_normal = m.get('min_before_control_price_of_normal')
        if m.get('price_show_info') is not None:
            temp_model = ModuleFlightItemListBestPriceItemShoppingItemMapValueSegmentPriceValuePriceShowInfo()
            self.price_show_info = temp_model.from_map(m['price_show_info'])
        return self


class ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueCabinQuantityValue(TeaModel):
    def __init__(self, cabin=None, cabin_class=None, cabin_class_name=None, cabin_class_memo=None,
                 specification=None, quantity=None, link_cabins=None, reshop_change_cabin=None, child_cabin_type=None,
                 infant_basic_cabin=None, inner_cabin_class=None):
        self.cabin = cabin  # type: str
        self.cabin_class = cabin_class  # type: str
        self.cabin_class_name = cabin_class_name  # type: str
        self.cabin_class_memo = cabin_class_memo  # type: str
        self.specification = specification  # type: str
        self.quantity = quantity  # type: str
        self.link_cabins = link_cabins  # type: list[str]
        self.reshop_change_cabin = reshop_change_cabin  # type: bool
        self.child_cabin_type = child_cabin_type  # type: int
        self.infant_basic_cabin = infant_basic_cabin  # type: str
        self.inner_cabin_class = inner_cabin_class  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueCabinQuantityValue, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cabin is not None:
            result['cabin'] = self.cabin
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.cabin_class_name is not None:
            result['cabin_class_name'] = self.cabin_class_name
        if self.cabin_class_memo is not None:
            result['cabin_class_memo'] = self.cabin_class_memo
        if self.specification is not None:
            result['specification'] = self.specification
        if self.quantity is not None:
            result['quantity'] = self.quantity
        if self.link_cabins is not None:
            result['link_cabins'] = self.link_cabins
        if self.reshop_change_cabin is not None:
            result['reshop_change_cabin'] = self.reshop_change_cabin
        if self.child_cabin_type is not None:
            result['child_cabin_type'] = self.child_cabin_type
        if self.infant_basic_cabin is not None:
            result['infant_basic_cabin'] = self.infant_basic_cabin
        if self.inner_cabin_class is not None:
            result['inner_cabin_class'] = self.inner_cabin_class
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('cabin') is not None:
            self.cabin = m.get('cabin')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('cabin_class_name') is not None:
            self.cabin_class_name = m.get('cabin_class_name')
        if m.get('cabin_class_memo') is not None:
            self.cabin_class_memo = m.get('cabin_class_memo')
        if m.get('specification') is not None:
            self.specification = m.get('specification')
        if m.get('quantity') is not None:
            self.quantity = m.get('quantity')
        if m.get('link_cabins') is not None:
            self.link_cabins = m.get('link_cabins')
        if m.get('reshop_change_cabin') is not None:
            self.reshop_change_cabin = m.get('reshop_change_cabin')
        if m.get('child_cabin_type') is not None:
            self.child_cabin_type = m.get('child_cabin_type')
        if m.get('infant_basic_cabin') is not None:
            self.infant_basic_cabin = m.get('infant_basic_cabin')
        if m.get('inner_cabin_class') is not None:
            self.inner_cabin_class = m.get('inner_cabin_class')
        return self


class ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueSegmentPriceValuePriceShowInfo(TeaModel):
    def __init__(self, discount_info=None, discount_num=None, show_ticket_price=None):
        self.discount_info = discount_info  # type: str
        self.discount_num = discount_num  # type: float
        self.show_ticket_price = show_ticket_price  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueSegmentPriceValuePriceShowInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.discount_info is not None:
            result['discount_info'] = self.discount_info
        if self.discount_num is not None:
            result['discount_num'] = self.discount_num
        if self.show_ticket_price is not None:
            result['show_ticket_price'] = self.show_ticket_price
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('discount_info') is not None:
            self.discount_info = m.get('discount_info')
        if m.get('discount_num') is not None:
            self.discount_num = m.get('discount_num')
        if m.get('show_ticket_price') is not None:
            self.show_ticket_price = m.get('show_ticket_price')
        return self


class ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueSegmentPriceValue(TeaModel):
    def __init__(self, floor_price=None, ticket_price=None, sell_price=None, original_sell_price=None,
                 base_total_price=None, before_control_price=None, tax=None, supply_price=None, basic_cabin_price=None,
                 build_price=None, oil_price=None, first_standard_price=None, business_standard_price=None,
                 common_standard_price=None, inter_ticket_price=None, subtracted_price=None, origin_common_price=None,
                 dynamic_promotion_price=None, installment_num=None, installment_price=None, competition_dynamic_price=None,
                 competition_promotion_price=None, min_before_control_price_of_normal=None, price_show_info=None):
        self.floor_price = floor_price  # type: int
        self.ticket_price = ticket_price  # type: int
        self.sell_price = sell_price  # type: int
        self.original_sell_price = original_sell_price  # type: int
        self.base_total_price = base_total_price  # type: int
        self.before_control_price = before_control_price  # type: int
        self.tax = tax  # type: int
        self.supply_price = supply_price  # type: int
        self.basic_cabin_price = basic_cabin_price  # type: int
        self.build_price = build_price  # type: int
        self.oil_price = oil_price  # type: int
        self.first_standard_price = first_standard_price  # type: int
        self.business_standard_price = business_standard_price  # type: int
        self.common_standard_price = common_standard_price  # type: int
        # fdPrice
        self.inter_ticket_price = inter_ticket_price  # type: int
        self.subtracted_price = subtracted_price  # type: int
        self.origin_common_price = origin_common_price  # type: int
        self.dynamic_promotion_price = dynamic_promotion_price  # type: int
        self.installment_num = installment_num  # type: int
        self.installment_price = installment_price  # type: float
        self.competition_dynamic_price = competition_dynamic_price  # type: int
        self.competition_promotion_price = competition_promotion_price  # type: int
        self.min_before_control_price_of_normal = min_before_control_price_of_normal  # type: int
        self.price_show_info = price_show_info  # type: ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueSegmentPriceValuePriceShowInfo

    def validate(self):
        if self.price_show_info:
            self.price_show_info.validate()

    def to_map(self):
        _map = super(ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueSegmentPriceValue, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.floor_price is not None:
            result['floor_price'] = self.floor_price
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.sell_price is not None:
            result['sell_price'] = self.sell_price
        if self.original_sell_price is not None:
            result['original_sell_price'] = self.original_sell_price
        if self.base_total_price is not None:
            result['base_total_price'] = self.base_total_price
        if self.before_control_price is not None:
            result['before_control_price'] = self.before_control_price
        if self.tax is not None:
            result['tax'] = self.tax
        if self.supply_price is not None:
            result['supply_price'] = self.supply_price
        if self.basic_cabin_price is not None:
            result['basic_cabin_price'] = self.basic_cabin_price
        if self.build_price is not None:
            result['build_price'] = self.build_price
        if self.oil_price is not None:
            result['oil_price'] = self.oil_price
        if self.first_standard_price is not None:
            result['first_standard_price'] = self.first_standard_price
        if self.business_standard_price is not None:
            result['business_standard_price'] = self.business_standard_price
        if self.common_standard_price is not None:
            result['common_standard_price'] = self.common_standard_price
        if self.inter_ticket_price is not None:
            result['inter_ticket_price'] = self.inter_ticket_price
        if self.subtracted_price is not None:
            result['subtracted_price'] = self.subtracted_price
        if self.origin_common_price is not None:
            result['origin_common_price'] = self.origin_common_price
        if self.dynamic_promotion_price is not None:
            result['dynamic_promotion_price'] = self.dynamic_promotion_price
        if self.installment_num is not None:
            result['installment_num'] = self.installment_num
        if self.installment_price is not None:
            result['installment_price'] = self.installment_price
        if self.competition_dynamic_price is not None:
            result['competition_dynamic_price'] = self.competition_dynamic_price
        if self.competition_promotion_price is not None:
            result['competition_promotion_price'] = self.competition_promotion_price
        if self.min_before_control_price_of_normal is not None:
            result['min_before_control_price_of_normal'] = self.min_before_control_price_of_normal
        if self.price_show_info is not None:
            result['price_show_info'] = self.price_show_info.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('floor_price') is not None:
            self.floor_price = m.get('floor_price')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('sell_price') is not None:
            self.sell_price = m.get('sell_price')
        if m.get('original_sell_price') is not None:
            self.original_sell_price = m.get('original_sell_price')
        if m.get('base_total_price') is not None:
            self.base_total_price = m.get('base_total_price')
        if m.get('before_control_price') is not None:
            self.before_control_price = m.get('before_control_price')
        if m.get('tax') is not None:
            self.tax = m.get('tax')
        if m.get('supply_price') is not None:
            self.supply_price = m.get('supply_price')
        if m.get('basic_cabin_price') is not None:
            self.basic_cabin_price = m.get('basic_cabin_price')
        if m.get('build_price') is not None:
            self.build_price = m.get('build_price')
        if m.get('oil_price') is not None:
            self.oil_price = m.get('oil_price')
        if m.get('first_standard_price') is not None:
            self.first_standard_price = m.get('first_standard_price')
        if m.get('business_standard_price') is not None:
            self.business_standard_price = m.get('business_standard_price')
        if m.get('common_standard_price') is not None:
            self.common_standard_price = m.get('common_standard_price')
        if m.get('inter_ticket_price') is not None:
            self.inter_ticket_price = m.get('inter_ticket_price')
        if m.get('subtracted_price') is not None:
            self.subtracted_price = m.get('subtracted_price')
        if m.get('origin_common_price') is not None:
            self.origin_common_price = m.get('origin_common_price')
        if m.get('dynamic_promotion_price') is not None:
            self.dynamic_promotion_price = m.get('dynamic_promotion_price')
        if m.get('installment_num') is not None:
            self.installment_num = m.get('installment_num')
        if m.get('installment_price') is not None:
            self.installment_price = m.get('installment_price')
        if m.get('competition_dynamic_price') is not None:
            self.competition_dynamic_price = m.get('competition_dynamic_price')
        if m.get('competition_promotion_price') is not None:
            self.competition_promotion_price = m.get('competition_promotion_price')
        if m.get('min_before_control_price_of_normal') is not None:
            self.min_before_control_price_of_normal = m.get('min_before_control_price_of_normal')
        if m.get('price_show_info') is not None:
            temp_model = ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueSegmentPriceValuePriceShowInfo()
            self.price_show_info = temp_model.from_map(m['price_show_info'])
        return self


class ModuleFlightItemListItemListShoppingItemMapValueCabinQuantityValue(TeaModel):
    def __init__(self, cabin=None, cabin_class=None, cabin_class_name=None, cabin_class_memo=None,
                 specification=None, quantity=None, link_cabins=None, reshop_change_cabin=None, child_cabin_type=None,
                 infant_basic_cabin=None, inner_cabin_class=None):
        self.cabin = cabin  # type: str
        self.cabin_class = cabin_class  # type: str
        self.cabin_class_name = cabin_class_name  # type: str
        self.cabin_class_memo = cabin_class_memo  # type: str
        self.specification = specification  # type: str
        self.quantity = quantity  # type: str
        self.link_cabins = link_cabins  # type: list[str]
        self.reshop_change_cabin = reshop_change_cabin  # type: bool
        self.child_cabin_type = child_cabin_type  # type: int
        self.infant_basic_cabin = infant_basic_cabin  # type: str
        self.inner_cabin_class = inner_cabin_class  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModuleFlightItemListItemListShoppingItemMapValueCabinQuantityValue, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cabin is not None:
            result['cabin'] = self.cabin
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.cabin_class_name is not None:
            result['cabin_class_name'] = self.cabin_class_name
        if self.cabin_class_memo is not None:
            result['cabin_class_memo'] = self.cabin_class_memo
        if self.specification is not None:
            result['specification'] = self.specification
        if self.quantity is not None:
            result['quantity'] = self.quantity
        if self.link_cabins is not None:
            result['link_cabins'] = self.link_cabins
        if self.reshop_change_cabin is not None:
            result['reshop_change_cabin'] = self.reshop_change_cabin
        if self.child_cabin_type is not None:
            result['child_cabin_type'] = self.child_cabin_type
        if self.infant_basic_cabin is not None:
            result['infant_basic_cabin'] = self.infant_basic_cabin
        if self.inner_cabin_class is not None:
            result['inner_cabin_class'] = self.inner_cabin_class
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('cabin') is not None:
            self.cabin = m.get('cabin')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('cabin_class_name') is not None:
            self.cabin_class_name = m.get('cabin_class_name')
        if m.get('cabin_class_memo') is not None:
            self.cabin_class_memo = m.get('cabin_class_memo')
        if m.get('specification') is not None:
            self.specification = m.get('specification')
        if m.get('quantity') is not None:
            self.quantity = m.get('quantity')
        if m.get('link_cabins') is not None:
            self.link_cabins = m.get('link_cabins')
        if m.get('reshop_change_cabin') is not None:
            self.reshop_change_cabin = m.get('reshop_change_cabin')
        if m.get('child_cabin_type') is not None:
            self.child_cabin_type = m.get('child_cabin_type')
        if m.get('infant_basic_cabin') is not None:
            self.infant_basic_cabin = m.get('infant_basic_cabin')
        if m.get('inner_cabin_class') is not None:
            self.inner_cabin_class = m.get('inner_cabin_class')
        return self


class ModuleFlightItemListItemListShoppingItemMapValueSegmentPriceValuePriceShowInfo(TeaModel):
    def __init__(self, discount_info=None, discount_num=None, show_ticket_price=None):
        self.discount_info = discount_info  # type: str
        self.discount_num = discount_num  # type: float
        self.show_ticket_price = show_ticket_price  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModuleFlightItemListItemListShoppingItemMapValueSegmentPriceValuePriceShowInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.discount_info is not None:
            result['discount_info'] = self.discount_info
        if self.discount_num is not None:
            result['discount_num'] = self.discount_num
        if self.show_ticket_price is not None:
            result['show_ticket_price'] = self.show_ticket_price
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('discount_info') is not None:
            self.discount_info = m.get('discount_info')
        if m.get('discount_num') is not None:
            self.discount_num = m.get('discount_num')
        if m.get('show_ticket_price') is not None:
            self.show_ticket_price = m.get('show_ticket_price')
        return self


class ModuleFlightItemListItemListShoppingItemMapValueSegmentPriceValue(TeaModel):
    def __init__(self, floor_price=None, ticket_price=None, sell_price=None, original_sell_price=None,
                 base_total_price=None, before_control_price=None, tax=None, supply_price=None, basic_cabin_price=None,
                 build_price=None, oil_price=None, first_standard_price=None, business_standard_price=None,
                 common_standard_price=None, inter_ticket_price=None, subtracted_price=None, origin_common_price=None,
                 dynamic_promotion_price=None, installment_num=None, installment_price=None, competition_dynamic_price=None,
                 competition_promotion_price=None, min_before_control_price_of_normal=None, price_show_info=None):
        self.floor_price = floor_price  # type: int
        self.ticket_price = ticket_price  # type: int
        self.sell_price = sell_price  # type: int
        self.original_sell_price = original_sell_price  # type: int
        self.base_total_price = base_total_price  # type: int
        self.before_control_price = before_control_price  # type: int
        self.tax = tax  # type: int
        self.supply_price = supply_price  # type: int
        self.basic_cabin_price = basic_cabin_price  # type: int
        self.build_price = build_price  # type: int
        self.oil_price = oil_price  # type: int
        self.first_standard_price = first_standard_price  # type: int
        self.business_standard_price = business_standard_price  # type: int
        self.common_standard_price = common_standard_price  # type: int
        # fdPrice
        self.inter_ticket_price = inter_ticket_price  # type: int
        self.subtracted_price = subtracted_price  # type: int
        self.origin_common_price = origin_common_price  # type: int
        self.dynamic_promotion_price = dynamic_promotion_price  # type: int
        self.installment_num = installment_num  # type: int
        self.installment_price = installment_price  # type: float
        self.competition_dynamic_price = competition_dynamic_price  # type: int
        self.competition_promotion_price = competition_promotion_price  # type: int
        self.min_before_control_price_of_normal = min_before_control_price_of_normal  # type: int
        self.price_show_info = price_show_info  # type: ModuleFlightItemListItemListShoppingItemMapValueSegmentPriceValuePriceShowInfo

    def validate(self):
        if self.price_show_info:
            self.price_show_info.validate()

    def to_map(self):
        _map = super(ModuleFlightItemListItemListShoppingItemMapValueSegmentPriceValue, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.floor_price is not None:
            result['floor_price'] = self.floor_price
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.sell_price is not None:
            result['sell_price'] = self.sell_price
        if self.original_sell_price is not None:
            result['original_sell_price'] = self.original_sell_price
        if self.base_total_price is not None:
            result['base_total_price'] = self.base_total_price
        if self.before_control_price is not None:
            result['before_control_price'] = self.before_control_price
        if self.tax is not None:
            result['tax'] = self.tax
        if self.supply_price is not None:
            result['supply_price'] = self.supply_price
        if self.basic_cabin_price is not None:
            result['basic_cabin_price'] = self.basic_cabin_price
        if self.build_price is not None:
            result['build_price'] = self.build_price
        if self.oil_price is not None:
            result['oil_price'] = self.oil_price
        if self.first_standard_price is not None:
            result['first_standard_price'] = self.first_standard_price
        if self.business_standard_price is not None:
            result['business_standard_price'] = self.business_standard_price
        if self.common_standard_price is not None:
            result['common_standard_price'] = self.common_standard_price
        if self.inter_ticket_price is not None:
            result['inter_ticket_price'] = self.inter_ticket_price
        if self.subtracted_price is not None:
            result['subtracted_price'] = self.subtracted_price
        if self.origin_common_price is not None:
            result['origin_common_price'] = self.origin_common_price
        if self.dynamic_promotion_price is not None:
            result['dynamic_promotion_price'] = self.dynamic_promotion_price
        if self.installment_num is not None:
            result['installment_num'] = self.installment_num
        if self.installment_price is not None:
            result['installment_price'] = self.installment_price
        if self.competition_dynamic_price is not None:
            result['competition_dynamic_price'] = self.competition_dynamic_price
        if self.competition_promotion_price is not None:
            result['competition_promotion_price'] = self.competition_promotion_price
        if self.min_before_control_price_of_normal is not None:
            result['min_before_control_price_of_normal'] = self.min_before_control_price_of_normal
        if self.price_show_info is not None:
            result['price_show_info'] = self.price_show_info.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('floor_price') is not None:
            self.floor_price = m.get('floor_price')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('sell_price') is not None:
            self.sell_price = m.get('sell_price')
        if m.get('original_sell_price') is not None:
            self.original_sell_price = m.get('original_sell_price')
        if m.get('base_total_price') is not None:
            self.base_total_price = m.get('base_total_price')
        if m.get('before_control_price') is not None:
            self.before_control_price = m.get('before_control_price')
        if m.get('tax') is not None:
            self.tax = m.get('tax')
        if m.get('supply_price') is not None:
            self.supply_price = m.get('supply_price')
        if m.get('basic_cabin_price') is not None:
            self.basic_cabin_price = m.get('basic_cabin_price')
        if m.get('build_price') is not None:
            self.build_price = m.get('build_price')
        if m.get('oil_price') is not None:
            self.oil_price = m.get('oil_price')
        if m.get('first_standard_price') is not None:
            self.first_standard_price = m.get('first_standard_price')
        if m.get('business_standard_price') is not None:
            self.business_standard_price = m.get('business_standard_price')
        if m.get('common_standard_price') is not None:
            self.common_standard_price = m.get('common_standard_price')
        if m.get('inter_ticket_price') is not None:
            self.inter_ticket_price = m.get('inter_ticket_price')
        if m.get('subtracted_price') is not None:
            self.subtracted_price = m.get('subtracted_price')
        if m.get('origin_common_price') is not None:
            self.origin_common_price = m.get('origin_common_price')
        if m.get('dynamic_promotion_price') is not None:
            self.dynamic_promotion_price = m.get('dynamic_promotion_price')
        if m.get('installment_num') is not None:
            self.installment_num = m.get('installment_num')
        if m.get('installment_price') is not None:
            self.installment_price = m.get('installment_price')
        if m.get('competition_dynamic_price') is not None:
            self.competition_dynamic_price = m.get('competition_dynamic_price')
        if m.get('competition_promotion_price') is not None:
            self.competition_promotion_price = m.get('competition_promotion_price')
        if m.get('min_before_control_price_of_normal') is not None:
            self.min_before_control_price_of_normal = m.get('min_before_control_price_of_normal')
        if m.get('price_show_info') is not None:
            temp_model = ModuleFlightItemListItemListShoppingItemMapValueSegmentPriceValuePriceShowInfo()
            self.price_show_info = temp_model.from_map(m['price_show_info'])
        return self


class ModuleFlightItemListItemListSubItemsShoppingItemMapValueCabinQuantityValue(TeaModel):
    def __init__(self, cabin=None, cabin_class=None, cabin_class_name=None, cabin_class_memo=None,
                 specification=None, quantity=None, link_cabins=None, reshop_change_cabin=None, child_cabin_type=None,
                 infant_basic_cabin=None, inner_cabin_class=None):
        self.cabin = cabin  # type: str
        self.cabin_class = cabin_class  # type: str
        self.cabin_class_name = cabin_class_name  # type: str
        self.cabin_class_memo = cabin_class_memo  # type: str
        self.specification = specification  # type: str
        self.quantity = quantity  # type: str
        self.link_cabins = link_cabins  # type: list[str]
        self.reshop_change_cabin = reshop_change_cabin  # type: bool
        self.child_cabin_type = child_cabin_type  # type: int
        self.infant_basic_cabin = infant_basic_cabin  # type: str
        self.inner_cabin_class = inner_cabin_class  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModuleFlightItemListItemListSubItemsShoppingItemMapValueCabinQuantityValue, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cabin is not None:
            result['cabin'] = self.cabin
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.cabin_class_name is not None:
            result['cabin_class_name'] = self.cabin_class_name
        if self.cabin_class_memo is not None:
            result['cabin_class_memo'] = self.cabin_class_memo
        if self.specification is not None:
            result['specification'] = self.specification
        if self.quantity is not None:
            result['quantity'] = self.quantity
        if self.link_cabins is not None:
            result['link_cabins'] = self.link_cabins
        if self.reshop_change_cabin is not None:
            result['reshop_change_cabin'] = self.reshop_change_cabin
        if self.child_cabin_type is not None:
            result['child_cabin_type'] = self.child_cabin_type
        if self.infant_basic_cabin is not None:
            result['infant_basic_cabin'] = self.infant_basic_cabin
        if self.inner_cabin_class is not None:
            result['inner_cabin_class'] = self.inner_cabin_class
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('cabin') is not None:
            self.cabin = m.get('cabin')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('cabin_class_name') is not None:
            self.cabin_class_name = m.get('cabin_class_name')
        if m.get('cabin_class_memo') is not None:
            self.cabin_class_memo = m.get('cabin_class_memo')
        if m.get('specification') is not None:
            self.specification = m.get('specification')
        if m.get('quantity') is not None:
            self.quantity = m.get('quantity')
        if m.get('link_cabins') is not None:
            self.link_cabins = m.get('link_cabins')
        if m.get('reshop_change_cabin') is not None:
            self.reshop_change_cabin = m.get('reshop_change_cabin')
        if m.get('child_cabin_type') is not None:
            self.child_cabin_type = m.get('child_cabin_type')
        if m.get('infant_basic_cabin') is not None:
            self.infant_basic_cabin = m.get('infant_basic_cabin')
        if m.get('inner_cabin_class') is not None:
            self.inner_cabin_class = m.get('inner_cabin_class')
        return self


class ModuleFlightItemListItemListSubItemsShoppingItemMapValueSegmentPriceValuePriceShowInfo(TeaModel):
    def __init__(self, discount_info=None, discount_num=None, show_ticket_price=None):
        self.discount_info = discount_info  # type: str
        self.discount_num = discount_num  # type: float
        self.show_ticket_price = show_ticket_price  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModuleFlightItemListItemListSubItemsShoppingItemMapValueSegmentPriceValuePriceShowInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.discount_info is not None:
            result['discount_info'] = self.discount_info
        if self.discount_num is not None:
            result['discount_num'] = self.discount_num
        if self.show_ticket_price is not None:
            result['show_ticket_price'] = self.show_ticket_price
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('discount_info') is not None:
            self.discount_info = m.get('discount_info')
        if m.get('discount_num') is not None:
            self.discount_num = m.get('discount_num')
        if m.get('show_ticket_price') is not None:
            self.show_ticket_price = m.get('show_ticket_price')
        return self


class ModuleFlightItemListItemListSubItemsShoppingItemMapValueSegmentPriceValue(TeaModel):
    def __init__(self, floor_price=None, ticket_price=None, sell_price=None, original_sell_price=None,
                 base_total_price=None, before_control_price=None, tax=None, supply_price=None, basic_cabin_price=None,
                 build_price=None, oil_price=None, first_standard_price=None, business_standard_price=None,
                 common_standard_price=None, inter_ticket_price=None, subtracted_price=None, origin_common_price=None,
                 dynamic_promotion_price=None, installment_num=None, installment_price=None, competition_dynamic_price=None,
                 competition_promotion_price=None, min_before_control_price_of_normal=None, price_show_info=None):
        self.floor_price = floor_price  # type: int
        self.ticket_price = ticket_price  # type: int
        self.sell_price = sell_price  # type: int
        self.original_sell_price = original_sell_price  # type: int
        self.base_total_price = base_total_price  # type: int
        self.before_control_price = before_control_price  # type: int
        self.tax = tax  # type: int
        self.supply_price = supply_price  # type: int
        self.basic_cabin_price = basic_cabin_price  # type: int
        self.build_price = build_price  # type: int
        self.oil_price = oil_price  # type: int
        self.first_standard_price = first_standard_price  # type: int
        self.business_standard_price = business_standard_price  # type: int
        self.common_standard_price = common_standard_price  # type: int
        # fdPrice
        self.inter_ticket_price = inter_ticket_price  # type: int
        self.subtracted_price = subtracted_price  # type: int
        self.origin_common_price = origin_common_price  # type: int
        self.dynamic_promotion_price = dynamic_promotion_price  # type: int
        self.installment_num = installment_num  # type: int
        self.installment_price = installment_price  # type: float
        self.competition_dynamic_price = competition_dynamic_price  # type: int
        self.competition_promotion_price = competition_promotion_price  # type: int
        self.min_before_control_price_of_normal = min_before_control_price_of_normal  # type: int
        self.price_show_info = price_show_info  # type: ModuleFlightItemListItemListSubItemsShoppingItemMapValueSegmentPriceValuePriceShowInfo

    def validate(self):
        if self.price_show_info:
            self.price_show_info.validate()

    def to_map(self):
        _map = super(ModuleFlightItemListItemListSubItemsShoppingItemMapValueSegmentPriceValue, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.floor_price is not None:
            result['floor_price'] = self.floor_price
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.sell_price is not None:
            result['sell_price'] = self.sell_price
        if self.original_sell_price is not None:
            result['original_sell_price'] = self.original_sell_price
        if self.base_total_price is not None:
            result['base_total_price'] = self.base_total_price
        if self.before_control_price is not None:
            result['before_control_price'] = self.before_control_price
        if self.tax is not None:
            result['tax'] = self.tax
        if self.supply_price is not None:
            result['supply_price'] = self.supply_price
        if self.basic_cabin_price is not None:
            result['basic_cabin_price'] = self.basic_cabin_price
        if self.build_price is not None:
            result['build_price'] = self.build_price
        if self.oil_price is not None:
            result['oil_price'] = self.oil_price
        if self.first_standard_price is not None:
            result['first_standard_price'] = self.first_standard_price
        if self.business_standard_price is not None:
            result['business_standard_price'] = self.business_standard_price
        if self.common_standard_price is not None:
            result['common_standard_price'] = self.common_standard_price
        if self.inter_ticket_price is not None:
            result['inter_ticket_price'] = self.inter_ticket_price
        if self.subtracted_price is not None:
            result['subtracted_price'] = self.subtracted_price
        if self.origin_common_price is not None:
            result['origin_common_price'] = self.origin_common_price
        if self.dynamic_promotion_price is not None:
            result['dynamic_promotion_price'] = self.dynamic_promotion_price
        if self.installment_num is not None:
            result['installment_num'] = self.installment_num
        if self.installment_price is not None:
            result['installment_price'] = self.installment_price
        if self.competition_dynamic_price is not None:
            result['competition_dynamic_price'] = self.competition_dynamic_price
        if self.competition_promotion_price is not None:
            result['competition_promotion_price'] = self.competition_promotion_price
        if self.min_before_control_price_of_normal is not None:
            result['min_before_control_price_of_normal'] = self.min_before_control_price_of_normal
        if self.price_show_info is not None:
            result['price_show_info'] = self.price_show_info.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('floor_price') is not None:
            self.floor_price = m.get('floor_price')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('sell_price') is not None:
            self.sell_price = m.get('sell_price')
        if m.get('original_sell_price') is not None:
            self.original_sell_price = m.get('original_sell_price')
        if m.get('base_total_price') is not None:
            self.base_total_price = m.get('base_total_price')
        if m.get('before_control_price') is not None:
            self.before_control_price = m.get('before_control_price')
        if m.get('tax') is not None:
            self.tax = m.get('tax')
        if m.get('supply_price') is not None:
            self.supply_price = m.get('supply_price')
        if m.get('basic_cabin_price') is not None:
            self.basic_cabin_price = m.get('basic_cabin_price')
        if m.get('build_price') is not None:
            self.build_price = m.get('build_price')
        if m.get('oil_price') is not None:
            self.oil_price = m.get('oil_price')
        if m.get('first_standard_price') is not None:
            self.first_standard_price = m.get('first_standard_price')
        if m.get('business_standard_price') is not None:
            self.business_standard_price = m.get('business_standard_price')
        if m.get('common_standard_price') is not None:
            self.common_standard_price = m.get('common_standard_price')
        if m.get('inter_ticket_price') is not None:
            self.inter_ticket_price = m.get('inter_ticket_price')
        if m.get('subtracted_price') is not None:
            self.subtracted_price = m.get('subtracted_price')
        if m.get('origin_common_price') is not None:
            self.origin_common_price = m.get('origin_common_price')
        if m.get('dynamic_promotion_price') is not None:
            self.dynamic_promotion_price = m.get('dynamic_promotion_price')
        if m.get('installment_num') is not None:
            self.installment_num = m.get('installment_num')
        if m.get('installment_price') is not None:
            self.installment_price = m.get('installment_price')
        if m.get('competition_dynamic_price') is not None:
            self.competition_dynamic_price = m.get('competition_dynamic_price')
        if m.get('competition_promotion_price') is not None:
            self.competition_promotion_price = m.get('competition_promotion_price')
        if m.get('min_before_control_price_of_normal') is not None:
            self.min_before_control_price_of_normal = m.get('min_before_control_price_of_normal')
        if m.get('price_show_info') is not None:
            temp_model = ModuleFlightItemListItemListSubItemsShoppingItemMapValueSegmentPriceValuePriceShowInfo()
            self.price_show_info = temp_model.from_map(m['price_show_info'])
        return self


class ModuleItemListShoppingItemMapValueCabinQuantityValue(TeaModel):
    def __init__(self, cabin=None, cabin_class=None, cabin_class_name=None, cabin_class_memo=None,
                 specification=None, quantity=None, link_cabins=None, reshop_change_cabin=None, child_cabin_type=None,
                 infant_basic_cabin=None, inner_cabin_class=None):
        self.cabin = cabin  # type: str
        self.cabin_class = cabin_class  # type: str
        self.cabin_class_name = cabin_class_name  # type: str
        self.cabin_class_memo = cabin_class_memo  # type: str
        self.specification = specification  # type: str
        self.quantity = quantity  # type: str
        self.link_cabins = link_cabins  # type: list[str]
        self.reshop_change_cabin = reshop_change_cabin  # type: bool
        self.child_cabin_type = child_cabin_type  # type: int
        self.infant_basic_cabin = infant_basic_cabin  # type: str
        self.inner_cabin_class = inner_cabin_class  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModuleItemListShoppingItemMapValueCabinQuantityValue, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cabin is not None:
            result['cabin'] = self.cabin
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.cabin_class_name is not None:
            result['cabin_class_name'] = self.cabin_class_name
        if self.cabin_class_memo is not None:
            result['cabin_class_memo'] = self.cabin_class_memo
        if self.specification is not None:
            result['specification'] = self.specification
        if self.quantity is not None:
            result['quantity'] = self.quantity
        if self.link_cabins is not None:
            result['link_cabins'] = self.link_cabins
        if self.reshop_change_cabin is not None:
            result['reshop_change_cabin'] = self.reshop_change_cabin
        if self.child_cabin_type is not None:
            result['child_cabin_type'] = self.child_cabin_type
        if self.infant_basic_cabin is not None:
            result['infant_basic_cabin'] = self.infant_basic_cabin
        if self.inner_cabin_class is not None:
            result['inner_cabin_class'] = self.inner_cabin_class
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('cabin') is not None:
            self.cabin = m.get('cabin')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('cabin_class_name') is not None:
            self.cabin_class_name = m.get('cabin_class_name')
        if m.get('cabin_class_memo') is not None:
            self.cabin_class_memo = m.get('cabin_class_memo')
        if m.get('specification') is not None:
            self.specification = m.get('specification')
        if m.get('quantity') is not None:
            self.quantity = m.get('quantity')
        if m.get('link_cabins') is not None:
            self.link_cabins = m.get('link_cabins')
        if m.get('reshop_change_cabin') is not None:
            self.reshop_change_cabin = m.get('reshop_change_cabin')
        if m.get('child_cabin_type') is not None:
            self.child_cabin_type = m.get('child_cabin_type')
        if m.get('infant_basic_cabin') is not None:
            self.infant_basic_cabin = m.get('infant_basic_cabin')
        if m.get('inner_cabin_class') is not None:
            self.inner_cabin_class = m.get('inner_cabin_class')
        return self


class ModuleItemListShoppingItemMapValueSegmentPriceValuePriceShowInfo(TeaModel):
    def __init__(self, discount_info=None, discount_num=None, show_ticket_price=None):
        self.discount_info = discount_info  # type: str
        self.discount_num = discount_num  # type: float
        self.show_ticket_price = show_ticket_price  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModuleItemListShoppingItemMapValueSegmentPriceValuePriceShowInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.discount_info is not None:
            result['discount_info'] = self.discount_info
        if self.discount_num is not None:
            result['discount_num'] = self.discount_num
        if self.show_ticket_price is not None:
            result['show_ticket_price'] = self.show_ticket_price
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('discount_info') is not None:
            self.discount_info = m.get('discount_info')
        if m.get('discount_num') is not None:
            self.discount_num = m.get('discount_num')
        if m.get('show_ticket_price') is not None:
            self.show_ticket_price = m.get('show_ticket_price')
        return self


class ModuleItemListShoppingItemMapValueSegmentPriceValue(TeaModel):
    def __init__(self, floor_price=None, ticket_price=None, sell_price=None, original_sell_price=None,
                 base_total_price=None, before_control_price=None, tax=None, supply_price=None, basic_cabin_price=None,
                 build_price=None, oil_price=None, first_standard_price=None, business_standard_price=None,
                 common_standard_price=None, inter_ticket_price=None, subtracted_price=None, origin_common_price=None,
                 dynamic_promotion_price=None, installment_num=None, installment_price=None, competition_dynamic_price=None,
                 competition_promotion_price=None, min_before_control_price_of_normal=None, price_show_info=None):
        self.floor_price = floor_price  # type: int
        self.ticket_price = ticket_price  # type: int
        self.sell_price = sell_price  # type: int
        self.original_sell_price = original_sell_price  # type: int
        self.base_total_price = base_total_price  # type: int
        self.before_control_price = before_control_price  # type: int
        self.tax = tax  # type: int
        self.supply_price = supply_price  # type: int
        self.basic_cabin_price = basic_cabin_price  # type: int
        self.build_price = build_price  # type: int
        self.oil_price = oil_price  # type: int
        self.first_standard_price = first_standard_price  # type: int
        self.business_standard_price = business_standard_price  # type: int
        self.common_standard_price = common_standard_price  # type: int
        # fdPrice
        self.inter_ticket_price = inter_ticket_price  # type: int
        self.subtracted_price = subtracted_price  # type: int
        self.origin_common_price = origin_common_price  # type: int
        self.dynamic_promotion_price = dynamic_promotion_price  # type: int
        self.installment_num = installment_num  # type: int
        self.installment_price = installment_price  # type: float
        self.competition_dynamic_price = competition_dynamic_price  # type: int
        self.competition_promotion_price = competition_promotion_price  # type: int
        self.min_before_control_price_of_normal = min_before_control_price_of_normal  # type: int
        self.price_show_info = price_show_info  # type: ModuleItemListShoppingItemMapValueSegmentPriceValuePriceShowInfo

    def validate(self):
        if self.price_show_info:
            self.price_show_info.validate()

    def to_map(self):
        _map = super(ModuleItemListShoppingItemMapValueSegmentPriceValue, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.floor_price is not None:
            result['floor_price'] = self.floor_price
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.sell_price is not None:
            result['sell_price'] = self.sell_price
        if self.original_sell_price is not None:
            result['original_sell_price'] = self.original_sell_price
        if self.base_total_price is not None:
            result['base_total_price'] = self.base_total_price
        if self.before_control_price is not None:
            result['before_control_price'] = self.before_control_price
        if self.tax is not None:
            result['tax'] = self.tax
        if self.supply_price is not None:
            result['supply_price'] = self.supply_price
        if self.basic_cabin_price is not None:
            result['basic_cabin_price'] = self.basic_cabin_price
        if self.build_price is not None:
            result['build_price'] = self.build_price
        if self.oil_price is not None:
            result['oil_price'] = self.oil_price
        if self.first_standard_price is not None:
            result['first_standard_price'] = self.first_standard_price
        if self.business_standard_price is not None:
            result['business_standard_price'] = self.business_standard_price
        if self.common_standard_price is not None:
            result['common_standard_price'] = self.common_standard_price
        if self.inter_ticket_price is not None:
            result['inter_ticket_price'] = self.inter_ticket_price
        if self.subtracted_price is not None:
            result['subtracted_price'] = self.subtracted_price
        if self.origin_common_price is not None:
            result['origin_common_price'] = self.origin_common_price
        if self.dynamic_promotion_price is not None:
            result['dynamic_promotion_price'] = self.dynamic_promotion_price
        if self.installment_num is not None:
            result['installment_num'] = self.installment_num
        if self.installment_price is not None:
            result['installment_price'] = self.installment_price
        if self.competition_dynamic_price is not None:
            result['competition_dynamic_price'] = self.competition_dynamic_price
        if self.competition_promotion_price is not None:
            result['competition_promotion_price'] = self.competition_promotion_price
        if self.min_before_control_price_of_normal is not None:
            result['min_before_control_price_of_normal'] = self.min_before_control_price_of_normal
        if self.price_show_info is not None:
            result['price_show_info'] = self.price_show_info.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('floor_price') is not None:
            self.floor_price = m.get('floor_price')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('sell_price') is not None:
            self.sell_price = m.get('sell_price')
        if m.get('original_sell_price') is not None:
            self.original_sell_price = m.get('original_sell_price')
        if m.get('base_total_price') is not None:
            self.base_total_price = m.get('base_total_price')
        if m.get('before_control_price') is not None:
            self.before_control_price = m.get('before_control_price')
        if m.get('tax') is not None:
            self.tax = m.get('tax')
        if m.get('supply_price') is not None:
            self.supply_price = m.get('supply_price')
        if m.get('basic_cabin_price') is not None:
            self.basic_cabin_price = m.get('basic_cabin_price')
        if m.get('build_price') is not None:
            self.build_price = m.get('build_price')
        if m.get('oil_price') is not None:
            self.oil_price = m.get('oil_price')
        if m.get('first_standard_price') is not None:
            self.first_standard_price = m.get('first_standard_price')
        if m.get('business_standard_price') is not None:
            self.business_standard_price = m.get('business_standard_price')
        if m.get('common_standard_price') is not None:
            self.common_standard_price = m.get('common_standard_price')
        if m.get('inter_ticket_price') is not None:
            self.inter_ticket_price = m.get('inter_ticket_price')
        if m.get('subtracted_price') is not None:
            self.subtracted_price = m.get('subtracted_price')
        if m.get('origin_common_price') is not None:
            self.origin_common_price = m.get('origin_common_price')
        if m.get('dynamic_promotion_price') is not None:
            self.dynamic_promotion_price = m.get('dynamic_promotion_price')
        if m.get('installment_num') is not None:
            self.installment_num = m.get('installment_num')
        if m.get('installment_price') is not None:
            self.installment_price = m.get('installment_price')
        if m.get('competition_dynamic_price') is not None:
            self.competition_dynamic_price = m.get('competition_dynamic_price')
        if m.get('competition_promotion_price') is not None:
            self.competition_promotion_price = m.get('competition_promotion_price')
        if m.get('min_before_control_price_of_normal') is not None:
            self.min_before_control_price_of_normal = m.get('min_before_control_price_of_normal')
        if m.get('price_show_info') is not None:
            temp_model = ModuleItemListShoppingItemMapValueSegmentPriceValuePriceShowInfo()
            self.price_show_info = temp_model.from_map(m['price_show_info'])
        return self


class ModuleItemListSubItemsShoppingItemMapValueCabinQuantityValue(TeaModel):
    def __init__(self, cabin=None, cabin_class=None, cabin_class_name=None, cabin_class_memo=None,
                 specification=None, quantity=None, link_cabins=None, reshop_change_cabin=None, child_cabin_type=None,
                 infant_basic_cabin=None, inner_cabin_class=None):
        self.cabin = cabin  # type: str
        self.cabin_class = cabin_class  # type: str
        self.cabin_class_name = cabin_class_name  # type: str
        self.cabin_class_memo = cabin_class_memo  # type: str
        self.specification = specification  # type: str
        self.quantity = quantity  # type: str
        self.link_cabins = link_cabins  # type: list[str]
        self.reshop_change_cabin = reshop_change_cabin  # type: bool
        self.child_cabin_type = child_cabin_type  # type: int
        self.infant_basic_cabin = infant_basic_cabin  # type: str
        self.inner_cabin_class = inner_cabin_class  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModuleItemListSubItemsShoppingItemMapValueCabinQuantityValue, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cabin is not None:
            result['cabin'] = self.cabin
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.cabin_class_name is not None:
            result['cabin_class_name'] = self.cabin_class_name
        if self.cabin_class_memo is not None:
            result['cabin_class_memo'] = self.cabin_class_memo
        if self.specification is not None:
            result['specification'] = self.specification
        if self.quantity is not None:
            result['quantity'] = self.quantity
        if self.link_cabins is not None:
            result['link_cabins'] = self.link_cabins
        if self.reshop_change_cabin is not None:
            result['reshop_change_cabin'] = self.reshop_change_cabin
        if self.child_cabin_type is not None:
            result['child_cabin_type'] = self.child_cabin_type
        if self.infant_basic_cabin is not None:
            result['infant_basic_cabin'] = self.infant_basic_cabin
        if self.inner_cabin_class is not None:
            result['inner_cabin_class'] = self.inner_cabin_class
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('cabin') is not None:
            self.cabin = m.get('cabin')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('cabin_class_name') is not None:
            self.cabin_class_name = m.get('cabin_class_name')
        if m.get('cabin_class_memo') is not None:
            self.cabin_class_memo = m.get('cabin_class_memo')
        if m.get('specification') is not None:
            self.specification = m.get('specification')
        if m.get('quantity') is not None:
            self.quantity = m.get('quantity')
        if m.get('link_cabins') is not None:
            self.link_cabins = m.get('link_cabins')
        if m.get('reshop_change_cabin') is not None:
            self.reshop_change_cabin = m.get('reshop_change_cabin')
        if m.get('child_cabin_type') is not None:
            self.child_cabin_type = m.get('child_cabin_type')
        if m.get('infant_basic_cabin') is not None:
            self.infant_basic_cabin = m.get('infant_basic_cabin')
        if m.get('inner_cabin_class') is not None:
            self.inner_cabin_class = m.get('inner_cabin_class')
        return self


class ModuleItemListSubItemsShoppingItemMapValueSegmentPriceValuePriceShowInfo(TeaModel):
    def __init__(self, discount_info=None, discount_num=None, show_ticket_price=None):
        self.discount_info = discount_info  # type: str
        self.discount_num = discount_num  # type: float
        self.show_ticket_price = show_ticket_price  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(ModuleItemListSubItemsShoppingItemMapValueSegmentPriceValuePriceShowInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.discount_info is not None:
            result['discount_info'] = self.discount_info
        if self.discount_num is not None:
            result['discount_num'] = self.discount_num
        if self.show_ticket_price is not None:
            result['show_ticket_price'] = self.show_ticket_price
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('discount_info') is not None:
            self.discount_info = m.get('discount_info')
        if m.get('discount_num') is not None:
            self.discount_num = m.get('discount_num')
        if m.get('show_ticket_price') is not None:
            self.show_ticket_price = m.get('show_ticket_price')
        return self


class ModuleItemListSubItemsShoppingItemMapValueSegmentPriceValue(TeaModel):
    def __init__(self, floor_price=None, ticket_price=None, sell_price=None, original_sell_price=None,
                 base_total_price=None, before_control_price=None, tax=None, supply_price=None, basic_cabin_price=None,
                 build_price=None, oil_price=None, first_standard_price=None, business_standard_price=None,
                 common_standard_price=None, inter_ticket_price=None, subtracted_price=None, origin_common_price=None,
                 dynamic_promotion_price=None, installment_num=None, installment_price=None, competition_dynamic_price=None,
                 competition_promotion_price=None, min_before_control_price_of_normal=None, price_show_info=None):
        self.floor_price = floor_price  # type: int
        self.ticket_price = ticket_price  # type: int
        self.sell_price = sell_price  # type: int
        self.original_sell_price = original_sell_price  # type: int
        self.base_total_price = base_total_price  # type: int
        self.before_control_price = before_control_price  # type: int
        self.tax = tax  # type: int
        self.supply_price = supply_price  # type: int
        self.basic_cabin_price = basic_cabin_price  # type: int
        self.build_price = build_price  # type: int
        self.oil_price = oil_price  # type: int
        self.first_standard_price = first_standard_price  # type: int
        self.business_standard_price = business_standard_price  # type: int
        self.common_standard_price = common_standard_price  # type: int
        # fdPrice
        self.inter_ticket_price = inter_ticket_price  # type: int
        self.subtracted_price = subtracted_price  # type: int
        self.origin_common_price = origin_common_price  # type: int
        self.dynamic_promotion_price = dynamic_promotion_price  # type: int
        self.installment_num = installment_num  # type: int
        self.installment_price = installment_price  # type: float
        self.competition_dynamic_price = competition_dynamic_price  # type: int
        self.competition_promotion_price = competition_promotion_price  # type: int
        self.min_before_control_price_of_normal = min_before_control_price_of_normal  # type: int
        self.price_show_info = price_show_info  # type: ModuleItemListSubItemsShoppingItemMapValueSegmentPriceValuePriceShowInfo

    def validate(self):
        if self.price_show_info:
            self.price_show_info.validate()

    def to_map(self):
        _map = super(ModuleItemListSubItemsShoppingItemMapValueSegmentPriceValue, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.floor_price is not None:
            result['floor_price'] = self.floor_price
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.sell_price is not None:
            result['sell_price'] = self.sell_price
        if self.original_sell_price is not None:
            result['original_sell_price'] = self.original_sell_price
        if self.base_total_price is not None:
            result['base_total_price'] = self.base_total_price
        if self.before_control_price is not None:
            result['before_control_price'] = self.before_control_price
        if self.tax is not None:
            result['tax'] = self.tax
        if self.supply_price is not None:
            result['supply_price'] = self.supply_price
        if self.basic_cabin_price is not None:
            result['basic_cabin_price'] = self.basic_cabin_price
        if self.build_price is not None:
            result['build_price'] = self.build_price
        if self.oil_price is not None:
            result['oil_price'] = self.oil_price
        if self.first_standard_price is not None:
            result['first_standard_price'] = self.first_standard_price
        if self.business_standard_price is not None:
            result['business_standard_price'] = self.business_standard_price
        if self.common_standard_price is not None:
            result['common_standard_price'] = self.common_standard_price
        if self.inter_ticket_price is not None:
            result['inter_ticket_price'] = self.inter_ticket_price
        if self.subtracted_price is not None:
            result['subtracted_price'] = self.subtracted_price
        if self.origin_common_price is not None:
            result['origin_common_price'] = self.origin_common_price
        if self.dynamic_promotion_price is not None:
            result['dynamic_promotion_price'] = self.dynamic_promotion_price
        if self.installment_num is not None:
            result['installment_num'] = self.installment_num
        if self.installment_price is not None:
            result['installment_price'] = self.installment_price
        if self.competition_dynamic_price is not None:
            result['competition_dynamic_price'] = self.competition_dynamic_price
        if self.competition_promotion_price is not None:
            result['competition_promotion_price'] = self.competition_promotion_price
        if self.min_before_control_price_of_normal is not None:
            result['min_before_control_price_of_normal'] = self.min_before_control_price_of_normal
        if self.price_show_info is not None:
            result['price_show_info'] = self.price_show_info.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('floor_price') is not None:
            self.floor_price = m.get('floor_price')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('sell_price') is not None:
            self.sell_price = m.get('sell_price')
        if m.get('original_sell_price') is not None:
            self.original_sell_price = m.get('original_sell_price')
        if m.get('base_total_price') is not None:
            self.base_total_price = m.get('base_total_price')
        if m.get('before_control_price') is not None:
            self.before_control_price = m.get('before_control_price')
        if m.get('tax') is not None:
            self.tax = m.get('tax')
        if m.get('supply_price') is not None:
            self.supply_price = m.get('supply_price')
        if m.get('basic_cabin_price') is not None:
            self.basic_cabin_price = m.get('basic_cabin_price')
        if m.get('build_price') is not None:
            self.build_price = m.get('build_price')
        if m.get('oil_price') is not None:
            self.oil_price = m.get('oil_price')
        if m.get('first_standard_price') is not None:
            self.first_standard_price = m.get('first_standard_price')
        if m.get('business_standard_price') is not None:
            self.business_standard_price = m.get('business_standard_price')
        if m.get('common_standard_price') is not None:
            self.common_standard_price = m.get('common_standard_price')
        if m.get('inter_ticket_price') is not None:
            self.inter_ticket_price = m.get('inter_ticket_price')
        if m.get('subtracted_price') is not None:
            self.subtracted_price = m.get('subtracted_price')
        if m.get('origin_common_price') is not None:
            self.origin_common_price = m.get('origin_common_price')
        if m.get('dynamic_promotion_price') is not None:
            self.dynamic_promotion_price = m.get('dynamic_promotion_price')
        if m.get('installment_num') is not None:
            self.installment_num = m.get('installment_num')
        if m.get('installment_price') is not None:
            self.installment_price = m.get('installment_price')
        if m.get('competition_dynamic_price') is not None:
            self.competition_dynamic_price = m.get('competition_dynamic_price')
        if m.get('competition_promotion_price') is not None:
            self.competition_promotion_price = m.get('competition_promotion_price')
        if m.get('min_before_control_price_of_normal') is not None:
            self.min_before_control_price_of_normal = m.get('min_before_control_price_of_normal')
        if m.get('price_show_info') is not None:
            temp_model = ModuleItemListSubItemsShoppingItemMapValueSegmentPriceValuePriceShowInfo()
            self.price_show_info = temp_model.from_map(m['price_show_info'])
        return self


class AccessTokenRequest(TeaModel):
    def __init__(self, app_secret=None):
        self.app_secret = app_secret  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AccessTokenRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_secret is not None:
            result['app_secret'] = self.app_secret
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('app_secret') is not None:
            self.app_secret = m.get('app_secret')
        return self


class AccessTokenResponseBodyData(TeaModel):
    def __init__(self, expire=None, token=None):
        self.expire = expire  # type: long
        self.token = token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AccessTokenResponseBodyData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.expire is not None:
            result['expire'] = self.expire
        if self.token is not None:
            result['token'] = self.token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('expire') is not None:
            self.expire = m.get('expire')
        if m.get('token') is not None:
            self.token = m.get('token')
        return self


class AccessTokenResponseBodyModule(TeaModel):
    def __init__(self, expire=None, start=None, token=None):
        self.expire = expire  # type: long
        self.start = start  # type: long
        self.token = token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AccessTokenResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.expire is not None:
            result['expire'] = self.expire
        if self.start is not None:
            result['start'] = self.start
        if self.token is not None:
            result['token'] = self.token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('expire') is not None:
            self.expire = m.get('expire')
        if m.get('start') is not None:
            self.start = m.get('start')
        if m.get('token') is not None:
            self.token = m.get('token')
        return self


class AccessTokenResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.data = data  # type: AccessTokenResponseBodyData
        self.message = message  # type: str
        self.module = module  # type: AccessTokenResponseBodyModule
        self.request_id = request_id  # type: str
        # 成功标识
        self.success = success  # type: bool
        # traceId
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.data:
            self.data.validate()
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(AccessTokenResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data.to_map()
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            temp_model = AccessTokenResponseBodyData()
            self.data = temp_model.from_map(m['data'])
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = AccessTokenResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class AccessTokenResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: AccessTokenResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(AccessTokenResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AccessTokenResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AddInvoiceEntityHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddInvoiceEntityHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class AddInvoiceEntityRequestEntities(TeaModel):
    def __init__(self, entity_id=None, entity_name=None, entity_type=None):
        self.entity_id = entity_id  # type: str
        self.entity_name = entity_name  # type: str
        self.entity_type = entity_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddInvoiceEntityRequestEntities, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.entity_id is not None:
            result['entity_id'] = self.entity_id
        if self.entity_name is not None:
            result['entity_name'] = self.entity_name
        if self.entity_type is not None:
            result['entity_type'] = self.entity_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('entity_id') is not None:
            self.entity_id = m.get('entity_id')
        if m.get('entity_name') is not None:
            self.entity_name = m.get('entity_name')
        if m.get('entity_type') is not None:
            self.entity_type = m.get('entity_type')
        return self


class AddInvoiceEntityRequest(TeaModel):
    def __init__(self, entities=None, third_part_id=None):
        self.entities = entities  # type: list[AddInvoiceEntityRequestEntities]
        self.third_part_id = third_part_id  # type: str

    def validate(self):
        if self.entities:
            for k in self.entities:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(AddInvoiceEntityRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['entities'] = []
        if self.entities is not None:
            for k in self.entities:
                result['entities'].append(k.to_map() if k else None)
        if self.third_part_id is not None:
            result['third_part_id'] = self.third_part_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.entities = []
        if m.get('entities') is not None:
            for k in m.get('entities'):
                temp_model = AddInvoiceEntityRequestEntities()
                self.entities.append(temp_model.from_map(k))
        if m.get('third_part_id') is not None:
            self.third_part_id = m.get('third_part_id')
        return self


class AddInvoiceEntityShrinkRequest(TeaModel):
    def __init__(self, entities_shrink=None, third_part_id=None):
        self.entities_shrink = entities_shrink  # type: str
        self.third_part_id = third_part_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddInvoiceEntityShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.entities_shrink is not None:
            result['entities'] = self.entities_shrink
        if self.third_part_id is not None:
            result['third_part_id'] = self.third_part_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('entities') is not None:
            self.entities_shrink = m.get('entities')
        if m.get('third_part_id') is not None:
            self.third_part_id = m.get('third_part_id')
        return self


class AddInvoiceEntityResponseBodyModule(TeaModel):
    def __init__(self, add_num=None, selected_user_num=None):
        self.add_num = add_num  # type: int
        self.selected_user_num = selected_user_num  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddInvoiceEntityResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.add_num is not None:
            result['add_num'] = self.add_num
        if self.selected_user_num is not None:
            result['selected_user_num'] = self.selected_user_num
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('add_num') is not None:
            self.add_num = m.get('add_num')
        if m.get('selected_user_num') is not None:
            self.selected_user_num = m.get('selected_user_num')
        return self


class AddInvoiceEntityResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: AddInvoiceEntityResponseBodyModule
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        # traceId
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(AddInvoiceEntityResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = AddInvoiceEntityResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class AddInvoiceEntityResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: AddInvoiceEntityResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(AddInvoiceEntityResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AddInvoiceEntityResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AddressGetHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_so_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddressGetHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class AddressGetRequest(TeaModel):
    def __init__(self, action_type=None, arr_city_code=None, arr_city_name=None, car_scenes_code=None,
                 dep_city_code=None, dep_city_name=None, dep_date=None, itinerary_id=None, order_id=None, phone=None,
                 sub_corp_id=None, taobao_callback_url=None, type=None, user_id=None):
        self.action_type = action_type  # type: int
        self.arr_city_code = arr_city_code  # type: str
        self.arr_city_name = arr_city_name  # type: str
        self.car_scenes_code = car_scenes_code  # type: str
        self.dep_city_code = dep_city_code  # type: str
        self.dep_city_name = dep_city_name  # type: str
        self.dep_date = dep_date  # type: str
        self.itinerary_id = itinerary_id  # type: str
        self.order_id = order_id  # type: str
        self.phone = phone  # type: str
        self.sub_corp_id = sub_corp_id  # type: str
        self.taobao_callback_url = taobao_callback_url  # type: str
        self.type = type  # type: int
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddressGetRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.action_type is not None:
            result['action_type'] = self.action_type
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.arr_city_name is not None:
            result['arr_city_name'] = self.arr_city_name
        if self.car_scenes_code is not None:
            result['car_scenes_code'] = self.car_scenes_code
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_city_name is not None:
            result['dep_city_name'] = self.dep_city_name
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        if self.itinerary_id is not None:
            result['itinerary_id'] = self.itinerary_id
        if self.order_id is not None:
            result['order_Id'] = self.order_id
        if self.phone is not None:
            result['phone'] = self.phone
        if self.sub_corp_id is not None:
            result['sub_corp_id'] = self.sub_corp_id
        if self.taobao_callback_url is not None:
            result['taobao_callback_url'] = self.taobao_callback_url
        if self.type is not None:
            result['type'] = self.type
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('action_type') is not None:
            self.action_type = m.get('action_type')
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('arr_city_name') is not None:
            self.arr_city_name = m.get('arr_city_name')
        if m.get('car_scenes_code') is not None:
            self.car_scenes_code = m.get('car_scenes_code')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_city_name') is not None:
            self.dep_city_name = m.get('dep_city_name')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        if m.get('itinerary_id') is not None:
            self.itinerary_id = m.get('itinerary_id')
        if m.get('order_Id') is not None:
            self.order_id = m.get('order_Id')
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        if m.get('sub_corp_id') is not None:
            self.sub_corp_id = m.get('sub_corp_id')
        if m.get('taobao_callback_url') is not None:
            self.taobao_callback_url = m.get('taobao_callback_url')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class AddressGetResponseBodyModule(TeaModel):
    def __init__(self, url=None):
        self.url = url  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AddressGetResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.url is not None:
            result['url'] = self.url
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('url') is not None:
            self.url = m.get('url')
        return self


class AddressGetResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: AddressGetResponseBodyModule
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(AddressGetResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = AddressGetResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class AddressGetResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: AddressGetResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(AddressGetResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AddressGetResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AirportSearchHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_so_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AirportSearchHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class AirportSearchRequest(TeaModel):
    def __init__(self, keyword=None, type=None):
        self.keyword = keyword  # type: str
        self.type = type  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(AirportSearchRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.keyword is not None:
            result['keyword'] = self.keyword
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('keyword') is not None:
            self.keyword = m.get('keyword')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class AirportSearchResponseBodyModuleCities(TeaModel):
    def __init__(self, code=None, distance=None, name=None, travel_name=None):
        self.code = code  # type: str
        self.distance = distance  # type: int
        self.name = name  # type: str
        self.travel_name = travel_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AirportSearchResponseBodyModuleCities, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.distance is not None:
            result['distance'] = self.distance
        if self.name is not None:
            result['name'] = self.name
        if self.travel_name is not None:
            result['travel_name'] = self.travel_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('distance') is not None:
            self.distance = m.get('distance')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('travel_name') is not None:
            self.travel_name = m.get('travel_name')
        return self


class AirportSearchResponseBodyModule(TeaModel):
    def __init__(self, cities=None, nearby=None):
        self.cities = cities  # type: list[AirportSearchResponseBodyModuleCities]
        self.nearby = nearby  # type: bool

    def validate(self):
        if self.cities:
            for k in self.cities:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(AirportSearchResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['cities'] = []
        if self.cities is not None:
            for k in self.cities:
                result['cities'].append(k.to_map() if k else None)
        if self.nearby is not None:
            result['nearby'] = self.nearby
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.cities = []
        if m.get('cities') is not None:
            for k in m.get('cities'):
                temp_model = AirportSearchResponseBodyModuleCities()
                self.cities.append(temp_model.from_map(k))
        if m.get('nearby') is not None:
            self.nearby = m.get('nearby')
        return self


class AirportSearchResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        # module。
        self.module = module  # type: AirportSearchResponseBodyModule
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(AirportSearchResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = AirportSearchResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class AirportSearchResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: AirportSearchResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(AirportSearchResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AirportSearchResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AllBaseCityInfoQueryHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_access_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_access_token = x_acs_btrip_access_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(AllBaseCityInfoQueryHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_access_token is not None:
            result['x-acs-btrip-access-token'] = self.x_acs_btrip_access_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-access-token') is not None:
            self.x_acs_btrip_access_token = m.get('x-acs-btrip-access-token')
        return self


class AllBaseCityInfoQueryResponseBodyModuleAllCityBaseInfoList(TeaModel):
    def __init__(self, adcode=None, city_code=None, city_level=None, city_name=None, cn_name_tree=None, id=None,
                 other_name_list=None):
        self.adcode = adcode  # type: str
        self.city_code = city_code  # type: str
        self.city_level = city_level  # type: str
        self.city_name = city_name  # type: str
        self.cn_name_tree = cn_name_tree  # type: str
        self.id = id  # type: long
        self.other_name_list = other_name_list  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(AllBaseCityInfoQueryResponseBodyModuleAllCityBaseInfoList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.adcode is not None:
            result['adcode'] = self.adcode
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_level is not None:
            result['city_level'] = self.city_level
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.cn_name_tree is not None:
            result['cn_name_tree'] = self.cn_name_tree
        if self.id is not None:
            result['id'] = self.id
        if self.other_name_list is not None:
            result['other_name_list'] = self.other_name_list
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('adcode') is not None:
            self.adcode = m.get('adcode')
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_level') is not None:
            self.city_level = m.get('city_level')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('cn_name_tree') is not None:
            self.cn_name_tree = m.get('cn_name_tree')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('other_name_list') is not None:
            self.other_name_list = m.get('other_name_list')
        return self


class AllBaseCityInfoQueryResponseBodyModule(TeaModel):
    def __init__(self, all_city_base_info_list=None):
        self.all_city_base_info_list = all_city_base_info_list  # type: list[AllBaseCityInfoQueryResponseBodyModuleAllCityBaseInfoList]

    def validate(self):
        if self.all_city_base_info_list:
            for k in self.all_city_base_info_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(AllBaseCityInfoQueryResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['all_city_base_info_list'] = []
        if self.all_city_base_info_list is not None:
            for k in self.all_city_base_info_list:
                result['all_city_base_info_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.all_city_base_info_list = []
        if m.get('all_city_base_info_list') is not None:
            for k in m.get('all_city_base_info_list'):
                temp_model = AllBaseCityInfoQueryResponseBodyModuleAllCityBaseInfoList()
                self.all_city_base_info_list.append(temp_model.from_map(k))
        return self


class AllBaseCityInfoQueryResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: AllBaseCityInfoQueryResponseBodyModule
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        # traceId
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(AllBaseCityInfoQueryResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = AllBaseCityInfoQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class AllBaseCityInfoQueryResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: AllBaseCityInfoQueryResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(AllBaseCityInfoQueryResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AllBaseCityInfoQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ApplyAddHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_so_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ApplyAddHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class ApplyAddRequestExternalTravelerList(TeaModel):
    def __init__(self, user_name=None):
        self.user_name = user_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ApplyAddRequestExternalTravelerList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class ApplyAddRequestExternalTravelerStandardHotelCitys(TeaModel):
    def __init__(self, city_code=None, city_name=None, fee=None):
        self.city_code = city_code  # type: str
        self.city_name = city_name  # type: str
        self.fee = fee  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ApplyAddRequestExternalTravelerStandardHotelCitys, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.fee is not None:
            result['fee'] = self.fee
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('fee') is not None:
            self.fee = m.get('fee')
        return self


class ApplyAddRequestExternalTravelerStandard(TeaModel):
    def __init__(self, business_discount=None, economy_discount=None, first_discount=None, flight_cabins=None,
                 hotel_citys=None, international_flight_cabins=None, premium_economy_discount=None, reserve_type=None,
                 train_seats=None):
        self.business_discount = business_discount  # type: int
        self.economy_discount = economy_discount  # type: int
        self.first_discount = first_discount  # type: int
        self.flight_cabins = flight_cabins  # type: str
        self.hotel_citys = hotel_citys  # type: list[ApplyAddRequestExternalTravelerStandardHotelCitys]
        self.international_flight_cabins = international_flight_cabins  # type: str
        self.premium_economy_discount = premium_economy_discount  # type: int
        self.reserve_type = reserve_type  # type: int
        self.train_seats = train_seats  # type: str

    def validate(self):
        if self.hotel_citys:
            for k in self.hotel_citys:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ApplyAddRequestExternalTravelerStandard, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.business_discount is not None:
            result['business_discount'] = self.business_discount
        if self.economy_discount is not None:
            result['economy_discount'] = self.economy_discount
        if self.first_discount is not None:
            result['first_discount'] = self.first_discount
        if self.flight_cabins is not None:
            result['flight_cabins'] = self.flight_cabins
        result['hotel_citys'] = []
        if self.hotel_citys is not None:
            for k in self.hotel_citys:
                result['hotel_citys'].append(k.to_map() if k else None)
        if self.international_flight_cabins is not None:
            result['international_flight_cabins'] = self.international_flight_cabins
        if self.premium_economy_discount is not None:
            result['premium_economy_discount'] = self.premium_economy_discount
        if self.reserve_type is not None:
            result['reserve_type'] = self.reserve_type
        if self.train_seats is not None:
            result['train_seats'] = self.train_seats
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('business_discount') is not None:
            self.business_discount = m.get('business_discount')
        if m.get('economy_discount') is not None:
            self.economy_discount = m.get('economy_discount')
        if m.get('first_discount') is not None:
            self.first_discount = m.get('first_discount')
        if m.get('flight_cabins') is not None:
            self.flight_cabins = m.get('flight_cabins')
        self.hotel_citys = []
        if m.get('hotel_citys') is not None:
            for k in m.get('hotel_citys'):
                temp_model = ApplyAddRequestExternalTravelerStandardHotelCitys()
                self.hotel_citys.append(temp_model.from_map(k))
        if m.get('international_flight_cabins') is not None:
            self.international_flight_cabins = m.get('international_flight_cabins')
        if m.get('premium_economy_discount') is not None:
            self.premium_economy_discount = m.get('premium_economy_discount')
        if m.get('reserve_type') is not None:
            self.reserve_type = m.get('reserve_type')
        if m.get('train_seats') is not None:
            self.train_seats = m.get('train_seats')
        return self


class ApplyAddRequestHotelShare(TeaModel):
    def __init__(self, param=None, type=None):
        self.param = param  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ApplyAddRequestHotelShare, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.param is not None:
            result['param'] = self.param
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('param') is not None:
            self.param = m.get('param')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class ApplyAddRequestItineraryListItineraryTravelStandard(TeaModel):
    def __init__(self, hotel_available_nights_per_day=None):
        self.hotel_available_nights_per_day = hotel_available_nights_per_day  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(ApplyAddRequestItineraryListItineraryTravelStandard, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.hotel_available_nights_per_day is not None:
            result['hotel_available_nights_per_day'] = self.hotel_available_nights_per_day
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('hotel_available_nights_per_day') is not None:
            self.hotel_available_nights_per_day = m.get('hotel_available_nights_per_day')
        return self


class ApplyAddRequestItineraryList(TeaModel):
    def __init__(self, arr_city=None, arr_city_code=None, arr_date=None, cost_center_id=None, dep_city=None,
                 dep_city_code=None, dep_date=None, invoice_id=None, itinerary_id=None, itinerary_travel_standard=None,
                 need_hotel=None, need_traffic=None, project_code=None, project_title=None, third_part_invoice_id=None,
                 thirdpart_cost_center_id=None, traffic_type=None, trip_way=None):
        self.arr_city = arr_city  # type: str
        self.arr_city_code = arr_city_code  # type: str
        self.arr_date = arr_date  # type: str
        self.cost_center_id = cost_center_id  # type: long
        self.dep_city = dep_city  # type: str
        self.dep_city_code = dep_city_code  # type: str
        self.dep_date = dep_date  # type: str
        self.invoice_id = invoice_id  # type: long
        self.itinerary_id = itinerary_id  # type: str
        self.itinerary_travel_standard = itinerary_travel_standard  # type: ApplyAddRequestItineraryListItineraryTravelStandard
        self.need_hotel = need_hotel  # type: bool
        self.need_traffic = need_traffic  # type: bool
        self.project_code = project_code  # type: str
        self.project_title = project_title  # type: str
        self.third_part_invoice_id = third_part_invoice_id  # type: str
        self.thirdpart_cost_center_id = thirdpart_cost_center_id  # type: str
        self.traffic_type = traffic_type  # type: int
        self.trip_way = trip_way  # type: int

    def validate(self):
        if self.itinerary_travel_standard:
            self.itinerary_travel_standard.validate()

    def to_map(self):
        _map = super(ApplyAddRequestItineraryList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_city is not None:
            result['arr_city'] = self.arr_city
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.arr_date is not None:
            result['arr_date'] = self.arr_date
        if self.cost_center_id is not None:
            result['cost_center_id'] = self.cost_center_id
        if self.dep_city is not None:
            result['dep_city'] = self.dep_city
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        if self.invoice_id is not None:
            result['invoice_id'] = self.invoice_id
        if self.itinerary_id is not None:
            result['itinerary_id'] = self.itinerary_id
        if self.itinerary_travel_standard is not None:
            result['itinerary_travel_standard'] = self.itinerary_travel_standard.to_map()
        if self.need_hotel is not None:
            result['need_hotel'] = self.need_hotel
        if self.need_traffic is not None:
            result['need_traffic'] = self.need_traffic
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_title is not None:
            result['project_title'] = self.project_title
        if self.third_part_invoice_id is not None:
            result['third_part_invoice_id'] = self.third_part_invoice_id
        if self.thirdpart_cost_center_id is not None:
            result['thirdpart_cost_center_id'] = self.thirdpart_cost_center_id
        if self.traffic_type is not None:
            result['traffic_type'] = self.traffic_type
        if self.trip_way is not None:
            result['trip_way'] = self.trip_way
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('arr_city') is not None:
            self.arr_city = m.get('arr_city')
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('arr_date') is not None:
            self.arr_date = m.get('arr_date')
        if m.get('cost_center_id') is not None:
            self.cost_center_id = m.get('cost_center_id')
        if m.get('dep_city') is not None:
            self.dep_city = m.get('dep_city')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        if m.get('invoice_id') is not None:
            self.invoice_id = m.get('invoice_id')
        if m.get('itinerary_id') is not None:
            self.itinerary_id = m.get('itinerary_id')
        if m.get('itinerary_travel_standard') is not None:
            temp_model = ApplyAddRequestItineraryListItineraryTravelStandard()
            self.itinerary_travel_standard = temp_model.from_map(m['itinerary_travel_standard'])
        if m.get('need_hotel') is not None:
            self.need_hotel = m.get('need_hotel')
        if m.get('need_traffic') is not None:
            self.need_traffic = m.get('need_traffic')
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_title') is not None:
            self.project_title = m.get('project_title')
        if m.get('third_part_invoice_id') is not None:
            self.third_part_invoice_id = m.get('third_part_invoice_id')
        if m.get('thirdpart_cost_center_id') is not None:
            self.thirdpart_cost_center_id = m.get('thirdpart_cost_center_id')
        if m.get('traffic_type') is not None:
            self.traffic_type = m.get('traffic_type')
        if m.get('trip_way') is not None:
            self.trip_way = m.get('trip_way')
        return self


class ApplyAddRequestItinerarySetListItineraryTravelStandard(TeaModel):
    def __init__(self, hotel_available_nights_per_day=None):
        self.hotel_available_nights_per_day = hotel_available_nights_per_day  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(ApplyAddRequestItinerarySetListItineraryTravelStandard, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.hotel_available_nights_per_day is not None:
            result['hotel_available_nights_per_day'] = self.hotel_available_nights_per_day
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('hotel_available_nights_per_day') is not None:
            self.hotel_available_nights_per_day = m.get('hotel_available_nights_per_day')
        return self


class ApplyAddRequestItinerarySetList(TeaModel):
    def __init__(self, arr_date=None, city_code_set=None, city_set=None, cost_center_id=None, dep_date=None,
                 invoice_id=None, itinerary_id=None, itinerary_travel_standard=None, project_code=None, project_title=None,
                 third_part_invoice_id=None, thirdpart_cost_center_id=None, traffic_type=None):
        self.arr_date = arr_date  # type: str
        self.city_code_set = city_code_set  # type: str
        self.city_set = city_set  # type: str
        self.cost_center_id = cost_center_id  # type: long
        self.dep_date = dep_date  # type: str
        self.invoice_id = invoice_id  # type: long
        self.itinerary_id = itinerary_id  # type: str
        self.itinerary_travel_standard = itinerary_travel_standard  # type: ApplyAddRequestItinerarySetListItineraryTravelStandard
        self.project_code = project_code  # type: str
        self.project_title = project_title  # type: str
        self.third_part_invoice_id = third_part_invoice_id  # type: str
        self.thirdpart_cost_center_id = thirdpart_cost_center_id  # type: str
        self.traffic_type = traffic_type  # type: int

    def validate(self):
        if self.itinerary_travel_standard:
            self.itinerary_travel_standard.validate()

    def to_map(self):
        _map = super(ApplyAddRequestItinerarySetList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_date is not None:
            result['arr_date'] = self.arr_date
        if self.city_code_set is not None:
            result['city_code_set'] = self.city_code_set
        if self.city_set is not None:
            result['city_set'] = self.city_set
        if self.cost_center_id is not None:
            result['cost_center_id'] = self.cost_center_id
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        if self.invoice_id is not None:
            result['invoice_id'] = self.invoice_id
        if self.itinerary_id is not None:
            result['itinerary_id'] = self.itinerary_id
        if self.itinerary_travel_standard is not None:
            result['itinerary_travel_standard'] = self.itinerary_travel_standard.to_map()
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_title is not None:
            result['project_title'] = self.project_title
        if self.third_part_invoice_id is not None:
            result['third_part_invoice_id'] = self.third_part_invoice_id
        if self.thirdpart_cost_center_id is not None:
            result['thirdpart_cost_center_id'] = self.thirdpart_cost_center_id
        if self.traffic_type is not None:
            result['traffic_type'] = self.traffic_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('arr_date') is not None:
            self.arr_date = m.get('arr_date')
        if m.get('city_code_set') is not None:
            self.city_code_set = m.get('city_code_set')
        if m.get('city_set') is not None:
            self.city_set = m.get('city_set')
        if m.get('cost_center_id') is not None:
            self.cost_center_id = m.get('cost_center_id')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        if m.get('invoice_id') is not None:
            self.invoice_id = m.get('invoice_id')
        if m.get('itinerary_id') is not None:
            self.itinerary_id = m.get('itinerary_id')
        if m.get('itinerary_travel_standard') is not None:
            temp_model = ApplyAddRequestItinerarySetListItineraryTravelStandard()
            self.itinerary_travel_standard = temp_model.from_map(m['itinerary_travel_standard'])
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_title') is not None:
            self.project_title = m.get('project_title')
        if m.get('third_part_invoice_id') is not None:
            self.third_part_invoice_id = m.get('third_part_invoice_id')
        if m.get('thirdpart_cost_center_id') is not None:
            self.thirdpart_cost_center_id = m.get('thirdpart_cost_center_id')
        if m.get('traffic_type') is not None:
            self.traffic_type = m.get('traffic_type')
        return self


class ApplyAddRequestTravelerList(TeaModel):
    def __init__(self, user_id=None, user_name=None):
        self.user_id = user_id  # type: str
        self.user_name = user_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ApplyAddRequestTravelerList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class ApplyAddRequestTravelerStandardHotelCitys(TeaModel):
    def __init__(self, city_code=None, city_name=None, fee=None):
        self.city_code = city_code  # type: str
        self.city_name = city_name  # type: str
        self.fee = fee  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ApplyAddRequestTravelerStandardHotelCitys, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.fee is not None:
            result['fee'] = self.fee
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('fee') is not None:
            self.fee = m.get('fee')
        return self


class ApplyAddRequestTravelerStandard(TeaModel):
    def __init__(self, business_discount=None, economy_discount=None, first_discount=None, flight_cabins=None,
                 hotel_citys=None, international_flight_cabins=None, premium_economy_discount=None, reserve_type=None,
                 train_seats=None, user_id=None):
        self.business_discount = business_discount  # type: int
        self.economy_discount = economy_discount  # type: int
        self.first_discount = first_discount  # type: int
        self.flight_cabins = flight_cabins  # type: str
        self.hotel_citys = hotel_citys  # type: list[ApplyAddRequestTravelerStandardHotelCitys]
        self.international_flight_cabins = international_flight_cabins  # type: str
        self.premium_economy_discount = premium_economy_discount  # type: int
        self.reserve_type = reserve_type  # type: int
        self.train_seats = train_seats  # type: str
        self.user_id = user_id  # type: str

    def validate(self):
        if self.hotel_citys:
            for k in self.hotel_citys:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ApplyAddRequestTravelerStandard, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.business_discount is not None:
            result['business_discount'] = self.business_discount
        if self.economy_discount is not None:
            result['economy_discount'] = self.economy_discount
        if self.first_discount is not None:
            result['first_discount'] = self.first_discount
        if self.flight_cabins is not None:
            result['flight_cabins'] = self.flight_cabins
        result['hotel_citys'] = []
        if self.hotel_citys is not None:
            for k in self.hotel_citys:
                result['hotel_citys'].append(k.to_map() if k else None)
        if self.international_flight_cabins is not None:
            result['international_flight_cabins'] = self.international_flight_cabins
        if self.premium_economy_discount is not None:
            result['premium_economy_discount'] = self.premium_economy_discount
        if self.reserve_type is not None:
            result['reserve_type'] = self.reserve_type
        if self.train_seats is not None:
            result['train_seats'] = self.train_seats
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('business_discount') is not None:
            self.business_discount = m.get('business_discount')
        if m.get('economy_discount') is not None:
            self.economy_discount = m.get('economy_discount')
        if m.get('first_discount') is not None:
            self.first_discount = m.get('first_discount')
        if m.get('flight_cabins') is not None:
            self.flight_cabins = m.get('flight_cabins')
        self.hotel_citys = []
        if m.get('hotel_citys') is not None:
            for k in m.get('hotel_citys'):
                temp_model = ApplyAddRequestTravelerStandardHotelCitys()
                self.hotel_citys.append(temp_model.from_map(k))
        if m.get('international_flight_cabins') is not None:
            self.international_flight_cabins = m.get('international_flight_cabins')
        if m.get('premium_economy_discount') is not None:
            self.premium_economy_discount = m.get('premium_economy_discount')
        if m.get('reserve_type') is not None:
            self.reserve_type = m.get('reserve_type')
        if m.get('train_seats') is not None:
            self.train_seats = m.get('train_seats')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class ApplyAddRequest(TeaModel):
    def __init__(self, budget=None, budget_merge=None, corp_name=None, depart_id=None, depart_name=None,
                 extend_field=None, external_traveler_list=None, external_traveler_standard=None, flight_budget=None,
                 hotel_budget=None, hotel_share=None, international_flight_cabins=None, itinerary_list=None,
                 itinerary_rule=None, itinerary_set_list=None, limit_traveler=None, status=None, sub_corp_id=None,
                 thirdpart_apply_id=None, thirdpart_business_id=None, thirdpart_depart_id=None, together_book_rule=None,
                 train_budget=None, traveler_list=None, traveler_standard=None, trip_cause=None, trip_day=None, trip_title=None,
                 type=None, union_no=None, user_id=None, user_name=None, vehicle_budget=None):
        self.budget = budget  # type: long
        self.budget_merge = budget_merge  # type: int
        self.corp_name = corp_name  # type: str
        self.depart_id = depart_id  # type: str
        self.depart_name = depart_name  # type: str
        # 可将补充描述传入此字段，账单中将会体现此字段的值。可以用于企业的统计和对账
        self.extend_field = extend_field  # type: str
        self.external_traveler_list = external_traveler_list  # type: list[ApplyAddRequestExternalTravelerList]
        self.external_traveler_standard = external_traveler_standard  # type: ApplyAddRequestExternalTravelerStandard
        self.flight_budget = flight_budget  # type: long
        self.hotel_budget = hotel_budget  # type: long
        self.hotel_share = hotel_share  # type: ApplyAddRequestHotelShare
        self.international_flight_cabins = international_flight_cabins  # type: str
        self.itinerary_list = itinerary_list  # type: list[ApplyAddRequestItineraryList]
        self.itinerary_rule = itinerary_rule  # type: int
        self.itinerary_set_list = itinerary_set_list  # type: list[ApplyAddRequestItinerarySetList]
        self.limit_traveler = limit_traveler  # type: int
        self.status = status  # type: int
        self.sub_corp_id = sub_corp_id  # type: str
        self.thirdpart_apply_id = thirdpart_apply_id  # type: str
        self.thirdpart_business_id = thirdpart_business_id  # type: str
        self.thirdpart_depart_id = thirdpart_depart_id  # type: str
        self.together_book_rule = together_book_rule  # type: int
        self.train_budget = train_budget  # type: long
        self.traveler_list = traveler_list  # type: list[ApplyAddRequestTravelerList]
        self.traveler_standard = traveler_standard  # type: list[ApplyAddRequestTravelerStandard]
        self.trip_cause = trip_cause  # type: str
        self.trip_day = trip_day  # type: int
        self.trip_title = trip_title  # type: str
        self.type = type  # type: int
        self.union_no = union_no  # type: str
        self.user_id = user_id  # type: str
        self.user_name = user_name  # type: str
        self.vehicle_budget = vehicle_budget  # type: long

    def validate(self):
        if self.external_traveler_list:
            for k in self.external_traveler_list:
                if k:
                    k.validate()
        if self.external_traveler_standard:
            self.external_traveler_standard.validate()
        if self.hotel_share:
            self.hotel_share.validate()
        if self.itinerary_list:
            for k in self.itinerary_list:
                if k:
                    k.validate()
        if self.itinerary_set_list:
            for k in self.itinerary_set_list:
                if k:
                    k.validate()
        if self.traveler_list:
            for k in self.traveler_list:
                if k:
                    k.validate()
        if self.traveler_standard:
            for k in self.traveler_standard:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ApplyAddRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.budget is not None:
            result['budget'] = self.budget
        if self.budget_merge is not None:
            result['budget_merge'] = self.budget_merge
        if self.corp_name is not None:
            result['corp_name'] = self.corp_name
        if self.depart_id is not None:
            result['depart_id'] = self.depart_id
        if self.depart_name is not None:
            result['depart_name'] = self.depart_name
        if self.extend_field is not None:
            result['extend_field'] = self.extend_field
        result['external_traveler_list'] = []
        if self.external_traveler_list is not None:
            for k in self.external_traveler_list:
                result['external_traveler_list'].append(k.to_map() if k else None)
        if self.external_traveler_standard is not None:
            result['external_traveler_standard'] = self.external_traveler_standard.to_map()
        if self.flight_budget is not None:
            result['flight_budget'] = self.flight_budget
        if self.hotel_budget is not None:
            result['hotel_budget'] = self.hotel_budget
        if self.hotel_share is not None:
            result['hotel_share'] = self.hotel_share.to_map()
        if self.international_flight_cabins is not None:
            result['international_flight_cabins'] = self.international_flight_cabins
        result['itinerary_list'] = []
        if self.itinerary_list is not None:
            for k in self.itinerary_list:
                result['itinerary_list'].append(k.to_map() if k else None)
        if self.itinerary_rule is not None:
            result['itinerary_rule'] = self.itinerary_rule
        result['itinerary_set_list'] = []
        if self.itinerary_set_list is not None:
            for k in self.itinerary_set_list:
                result['itinerary_set_list'].append(k.to_map() if k else None)
        if self.limit_traveler is not None:
            result['limit_traveler'] = self.limit_traveler
        if self.status is not None:
            result['status'] = self.status
        if self.sub_corp_id is not None:
            result['sub_corp_id'] = self.sub_corp_id
        if self.thirdpart_apply_id is not None:
            result['thirdpart_apply_id'] = self.thirdpart_apply_id
        if self.thirdpart_business_id is not None:
            result['thirdpart_business_id'] = self.thirdpart_business_id
        if self.thirdpart_depart_id is not None:
            result['thirdpart_depart_id'] = self.thirdpart_depart_id
        if self.together_book_rule is not None:
            result['together_book_rule'] = self.together_book_rule
        if self.train_budget is not None:
            result['train_budget'] = self.train_budget
        result['traveler_list'] = []
        if self.traveler_list is not None:
            for k in self.traveler_list:
                result['traveler_list'].append(k.to_map() if k else None)
        result['traveler_standard'] = []
        if self.traveler_standard is not None:
            for k in self.traveler_standard:
                result['traveler_standard'].append(k.to_map() if k else None)
        if self.trip_cause is not None:
            result['trip_cause'] = self.trip_cause
        if self.trip_day is not None:
            result['trip_day'] = self.trip_day
        if self.trip_title is not None:
            result['trip_title'] = self.trip_title
        if self.type is not None:
            result['type'] = self.type
        if self.union_no is not None:
            result['union_no'] = self.union_no
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        if self.vehicle_budget is not None:
            result['vehicle_budget'] = self.vehicle_budget
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('budget') is not None:
            self.budget = m.get('budget')
        if m.get('budget_merge') is not None:
            self.budget_merge = m.get('budget_merge')
        if m.get('corp_name') is not None:
            self.corp_name = m.get('corp_name')
        if m.get('depart_id') is not None:
            self.depart_id = m.get('depart_id')
        if m.get('depart_name') is not None:
            self.depart_name = m.get('depart_name')
        if m.get('extend_field') is not None:
            self.extend_field = m.get('extend_field')
        self.external_traveler_list = []
        if m.get('external_traveler_list') is not None:
            for k in m.get('external_traveler_list'):
                temp_model = ApplyAddRequestExternalTravelerList()
                self.external_traveler_list.append(temp_model.from_map(k))
        if m.get('external_traveler_standard') is not None:
            temp_model = ApplyAddRequestExternalTravelerStandard()
            self.external_traveler_standard = temp_model.from_map(m['external_traveler_standard'])
        if m.get('flight_budget') is not None:
            self.flight_budget = m.get('flight_budget')
        if m.get('hotel_budget') is not None:
            self.hotel_budget = m.get('hotel_budget')
        if m.get('hotel_share') is not None:
            temp_model = ApplyAddRequestHotelShare()
            self.hotel_share = temp_model.from_map(m['hotel_share'])
        if m.get('international_flight_cabins') is not None:
            self.international_flight_cabins = m.get('international_flight_cabins')
        self.itinerary_list = []
        if m.get('itinerary_list') is not None:
            for k in m.get('itinerary_list'):
                temp_model = ApplyAddRequestItineraryList()
                self.itinerary_list.append(temp_model.from_map(k))
        if m.get('itinerary_rule') is not None:
            self.itinerary_rule = m.get('itinerary_rule')
        self.itinerary_set_list = []
        if m.get('itinerary_set_list') is not None:
            for k in m.get('itinerary_set_list'):
                temp_model = ApplyAddRequestItinerarySetList()
                self.itinerary_set_list.append(temp_model.from_map(k))
        if m.get('limit_traveler') is not None:
            self.limit_traveler = m.get('limit_traveler')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('sub_corp_id') is not None:
            self.sub_corp_id = m.get('sub_corp_id')
        if m.get('thirdpart_apply_id') is not None:
            self.thirdpart_apply_id = m.get('thirdpart_apply_id')
        if m.get('thirdpart_business_id') is not None:
            self.thirdpart_business_id = m.get('thirdpart_business_id')
        if m.get('thirdpart_depart_id') is not None:
            self.thirdpart_depart_id = m.get('thirdpart_depart_id')
        if m.get('together_book_rule') is not None:
            self.together_book_rule = m.get('together_book_rule')
        if m.get('train_budget') is not None:
            self.train_budget = m.get('train_budget')
        self.traveler_list = []
        if m.get('traveler_list') is not None:
            for k in m.get('traveler_list'):
                temp_model = ApplyAddRequestTravelerList()
                self.traveler_list.append(temp_model.from_map(k))
        self.traveler_standard = []
        if m.get('traveler_standard') is not None:
            for k in m.get('traveler_standard'):
                temp_model = ApplyAddRequestTravelerStandard()
                self.traveler_standard.append(temp_model.from_map(k))
        if m.get('trip_cause') is not None:
            self.trip_cause = m.get('trip_cause')
        if m.get('trip_day') is not None:
            self.trip_day = m.get('trip_day')
        if m.get('trip_title') is not None:
            self.trip_title = m.get('trip_title')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('union_no') is not None:
            self.union_no = m.get('union_no')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        if m.get('vehicle_budget') is not None:
            self.vehicle_budget = m.get('vehicle_budget')
        return self


class ApplyAddShrinkRequest(TeaModel):
    def __init__(self, budget=None, budget_merge=None, corp_name=None, depart_id=None, depart_name=None,
                 extend_field=None, external_traveler_list_shrink=None, external_traveler_standard_shrink=None,
                 flight_budget=None, hotel_budget=None, hotel_share_shrink=None, international_flight_cabins=None,
                 itinerary_list_shrink=None, itinerary_rule=None, itinerary_set_list_shrink=None, limit_traveler=None, status=None,
                 sub_corp_id=None, thirdpart_apply_id=None, thirdpart_business_id=None, thirdpart_depart_id=None,
                 together_book_rule=None, train_budget=None, traveler_list_shrink=None, traveler_standard_shrink=None,
                 trip_cause=None, trip_day=None, trip_title=None, type=None, union_no=None, user_id=None, user_name=None,
                 vehicle_budget=None):
        self.budget = budget  # type: long
        self.budget_merge = budget_merge  # type: int
        self.corp_name = corp_name  # type: str
        self.depart_id = depart_id  # type: str
        self.depart_name = depart_name  # type: str
        # 可将补充描述传入此字段，账单中将会体现此字段的值。可以用于企业的统计和对账
        self.extend_field = extend_field  # type: str
        self.external_traveler_list_shrink = external_traveler_list_shrink  # type: str
        self.external_traveler_standard_shrink = external_traveler_standard_shrink  # type: str
        self.flight_budget = flight_budget  # type: long
        self.hotel_budget = hotel_budget  # type: long
        self.hotel_share_shrink = hotel_share_shrink  # type: str
        self.international_flight_cabins = international_flight_cabins  # type: str
        self.itinerary_list_shrink = itinerary_list_shrink  # type: str
        self.itinerary_rule = itinerary_rule  # type: int
        self.itinerary_set_list_shrink = itinerary_set_list_shrink  # type: str
        self.limit_traveler = limit_traveler  # type: int
        self.status = status  # type: int
        self.sub_corp_id = sub_corp_id  # type: str
        self.thirdpart_apply_id = thirdpart_apply_id  # type: str
        self.thirdpart_business_id = thirdpart_business_id  # type: str
        self.thirdpart_depart_id = thirdpart_depart_id  # type: str
        self.together_book_rule = together_book_rule  # type: int
        self.train_budget = train_budget  # type: long
        self.traveler_list_shrink = traveler_list_shrink  # type: str
        self.traveler_standard_shrink = traveler_standard_shrink  # type: str
        self.trip_cause = trip_cause  # type: str
        self.trip_day = trip_day  # type: int
        self.trip_title = trip_title  # type: str
        self.type = type  # type: int
        self.union_no = union_no  # type: str
        self.user_id = user_id  # type: str
        self.user_name = user_name  # type: str
        self.vehicle_budget = vehicle_budget  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ApplyAddShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.budget is not None:
            result['budget'] = self.budget
        if self.budget_merge is not None:
            result['budget_merge'] = self.budget_merge
        if self.corp_name is not None:
            result['corp_name'] = self.corp_name
        if self.depart_id is not None:
            result['depart_id'] = self.depart_id
        if self.depart_name is not None:
            result['depart_name'] = self.depart_name
        if self.extend_field is not None:
            result['extend_field'] = self.extend_field
        if self.external_traveler_list_shrink is not None:
            result['external_traveler_list'] = self.external_traveler_list_shrink
        if self.external_traveler_standard_shrink is not None:
            result['external_traveler_standard'] = self.external_traveler_standard_shrink
        if self.flight_budget is not None:
            result['flight_budget'] = self.flight_budget
        if self.hotel_budget is not None:
            result['hotel_budget'] = self.hotel_budget
        if self.hotel_share_shrink is not None:
            result['hotel_share'] = self.hotel_share_shrink
        if self.international_flight_cabins is not None:
            result['international_flight_cabins'] = self.international_flight_cabins
        if self.itinerary_list_shrink is not None:
            result['itinerary_list'] = self.itinerary_list_shrink
        if self.itinerary_rule is not None:
            result['itinerary_rule'] = self.itinerary_rule
        if self.itinerary_set_list_shrink is not None:
            result['itinerary_set_list'] = self.itinerary_set_list_shrink
        if self.limit_traveler is not None:
            result['limit_traveler'] = self.limit_traveler
        if self.status is not None:
            result['status'] = self.status
        if self.sub_corp_id is not None:
            result['sub_corp_id'] = self.sub_corp_id
        if self.thirdpart_apply_id is not None:
            result['thirdpart_apply_id'] = self.thirdpart_apply_id
        if self.thirdpart_business_id is not None:
            result['thirdpart_business_id'] = self.thirdpart_business_id
        if self.thirdpart_depart_id is not None:
            result['thirdpart_depart_id'] = self.thirdpart_depart_id
        if self.together_book_rule is not None:
            result['together_book_rule'] = self.together_book_rule
        if self.train_budget is not None:
            result['train_budget'] = self.train_budget
        if self.traveler_list_shrink is not None:
            result['traveler_list'] = self.traveler_list_shrink
        if self.traveler_standard_shrink is not None:
            result['traveler_standard'] = self.traveler_standard_shrink
        if self.trip_cause is not None:
            result['trip_cause'] = self.trip_cause
        if self.trip_day is not None:
            result['trip_day'] = self.trip_day
        if self.trip_title is not None:
            result['trip_title'] = self.trip_title
        if self.type is not None:
            result['type'] = self.type
        if self.union_no is not None:
            result['union_no'] = self.union_no
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        if self.vehicle_budget is not None:
            result['vehicle_budget'] = self.vehicle_budget
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('budget') is not None:
            self.budget = m.get('budget')
        if m.get('budget_merge') is not None:
            self.budget_merge = m.get('budget_merge')
        if m.get('corp_name') is not None:
            self.corp_name = m.get('corp_name')
        if m.get('depart_id') is not None:
            self.depart_id = m.get('depart_id')
        if m.get('depart_name') is not None:
            self.depart_name = m.get('depart_name')
        if m.get('extend_field') is not None:
            self.extend_field = m.get('extend_field')
        if m.get('external_traveler_list') is not None:
            self.external_traveler_list_shrink = m.get('external_traveler_list')
        if m.get('external_traveler_standard') is not None:
            self.external_traveler_standard_shrink = m.get('external_traveler_standard')
        if m.get('flight_budget') is not None:
            self.flight_budget = m.get('flight_budget')
        if m.get('hotel_budget') is not None:
            self.hotel_budget = m.get('hotel_budget')
        if m.get('hotel_share') is not None:
            self.hotel_share_shrink = m.get('hotel_share')
        if m.get('international_flight_cabins') is not None:
            self.international_flight_cabins = m.get('international_flight_cabins')
        if m.get('itinerary_list') is not None:
            self.itinerary_list_shrink = m.get('itinerary_list')
        if m.get('itinerary_rule') is not None:
            self.itinerary_rule = m.get('itinerary_rule')
        if m.get('itinerary_set_list') is not None:
            self.itinerary_set_list_shrink = m.get('itinerary_set_list')
        if m.get('limit_traveler') is not None:
            self.limit_traveler = m.get('limit_traveler')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('sub_corp_id') is not None:
            self.sub_corp_id = m.get('sub_corp_id')
        if m.get('thirdpart_apply_id') is not None:
            self.thirdpart_apply_id = m.get('thirdpart_apply_id')
        if m.get('thirdpart_business_id') is not None:
            self.thirdpart_business_id = m.get('thirdpart_business_id')
        if m.get('thirdpart_depart_id') is not None:
            self.thirdpart_depart_id = m.get('thirdpart_depart_id')
        if m.get('together_book_rule') is not None:
            self.together_book_rule = m.get('together_book_rule')
        if m.get('train_budget') is not None:
            self.train_budget = m.get('train_budget')
        if m.get('traveler_list') is not None:
            self.traveler_list_shrink = m.get('traveler_list')
        if m.get('traveler_standard') is not None:
            self.traveler_standard_shrink = m.get('traveler_standard')
        if m.get('trip_cause') is not None:
            self.trip_cause = m.get('trip_cause')
        if m.get('trip_day') is not None:
            self.trip_day = m.get('trip_day')
        if m.get('trip_title') is not None:
            self.trip_title = m.get('trip_title')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('union_no') is not None:
            self.union_no = m.get('union_no')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        if m.get('vehicle_budget') is not None:
            self.vehicle_budget = m.get('vehicle_budget')
        return self


class ApplyAddResponseBodyModule(TeaModel):
    def __init__(self, apply_id=None, thirdpart_apply_id=None, thirdpart_business_id=None):
        self.apply_id = apply_id  # type: long
        self.thirdpart_apply_id = thirdpart_apply_id  # type: str
        self.thirdpart_business_id = thirdpart_business_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ApplyAddResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.thirdpart_apply_id is not None:
            result['thirdpart_apply_id'] = self.thirdpart_apply_id
        if self.thirdpart_business_id is not None:
            result['thirdpart_business_id'] = self.thirdpart_business_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('thirdpart_apply_id') is not None:
            self.thirdpart_apply_id = m.get('thirdpart_apply_id')
        if m.get('thirdpart_business_id') is not None:
            self.thirdpart_business_id = m.get('thirdpart_business_id')
        return self


class ApplyAddResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        # module。
        self.module = module  # type: ApplyAddResponseBodyModule
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(ApplyAddResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = ApplyAddResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class ApplyAddResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ApplyAddResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ApplyAddResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ApplyAddResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ApplyApproveHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_so_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ApplyApproveHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class ApplyApproveRequest(TeaModel):
    def __init__(self, apply_id=None, note=None, operate_time=None, status=None, sub_corp_id=None, user_id=None,
                 user_name=None):
        self.apply_id = apply_id  # type: str
        self.note = note  # type: str
        self.operate_time = operate_time  # type: str
        self.status = status  # type: int
        self.sub_corp_id = sub_corp_id  # type: str
        self.user_id = user_id  # type: str
        self.user_name = user_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ApplyApproveRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.note is not None:
            result['note'] = self.note
        if self.operate_time is not None:
            result['operate_time'] = self.operate_time
        if self.status is not None:
            result['status'] = self.status
        if self.sub_corp_id is not None:
            result['sub_corp_id'] = self.sub_corp_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('note') is not None:
            self.note = m.get('note')
        if m.get('operate_time') is not None:
            self.operate_time = m.get('operate_time')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('sub_corp_id') is not None:
            self.sub_corp_id = m.get('sub_corp_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class ApplyApproveResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        # module。
        self.module = module  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ApplyApproveResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            self.module = m.get('module')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class ApplyApproveResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ApplyApproveResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ApplyApproveResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ApplyApproveResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ApplyInvoiceTaskHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_so_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ApplyInvoiceTaskHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class ApplyInvoiceTaskRequestInvoiceTaskList(TeaModel):
    def __init__(self, contact=None, email=None, flight_invoice_fee=None, fu_point_invoice_fee=None,
                 hotel_normal_invoice_fee=None, hotel_special_invoice_fee=None, international_flight_invoice_fee=None,
                 invoice_third_part_id=None, mail_address=None, mail_city=None, mail_full_address=None, mail_province=None,
                 penalty_fee=None, remark=None, service_fee=None, telephone=None, train_invoice_fee=None,
                 vehicle_invoice_fee=None):
        self.contact = contact  # type: str
        self.email = email  # type: str
        self.flight_invoice_fee = flight_invoice_fee  # type: str
        self.fu_point_invoice_fee = fu_point_invoice_fee  # type: str
        self.hotel_normal_invoice_fee = hotel_normal_invoice_fee  # type: str
        self.hotel_special_invoice_fee = hotel_special_invoice_fee  # type: str
        self.international_flight_invoice_fee = international_flight_invoice_fee  # type: str
        self.invoice_third_part_id = invoice_third_part_id  # type: str
        self.mail_address = mail_address  # type: str
        self.mail_city = mail_city  # type: str
        self.mail_full_address = mail_full_address  # type: str
        self.mail_province = mail_province  # type: str
        self.penalty_fee = penalty_fee  # type: str
        self.remark = remark  # type: str
        self.service_fee = service_fee  # type: str
        self.telephone = telephone  # type: str
        self.train_invoice_fee = train_invoice_fee  # type: str
        self.vehicle_invoice_fee = vehicle_invoice_fee  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ApplyInvoiceTaskRequestInvoiceTaskList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact is not None:
            result['contact'] = self.contact
        if self.email is not None:
            result['email'] = self.email
        if self.flight_invoice_fee is not None:
            result['flight_invoice_fee'] = self.flight_invoice_fee
        if self.fu_point_invoice_fee is not None:
            result['fu_point_invoice_fee'] = self.fu_point_invoice_fee
        if self.hotel_normal_invoice_fee is not None:
            result['hotel_normal_invoice_fee'] = self.hotel_normal_invoice_fee
        if self.hotel_special_invoice_fee is not None:
            result['hotel_special_invoice_fee'] = self.hotel_special_invoice_fee
        if self.international_flight_invoice_fee is not None:
            result['international_flight_invoice_fee'] = self.international_flight_invoice_fee
        if self.invoice_third_part_id is not None:
            result['invoice_third_part_id'] = self.invoice_third_part_id
        if self.mail_address is not None:
            result['mail_address'] = self.mail_address
        if self.mail_city is not None:
            result['mail_city'] = self.mail_city
        if self.mail_full_address is not None:
            result['mail_full_address'] = self.mail_full_address
        if self.mail_province is not None:
            result['mail_province'] = self.mail_province
        if self.penalty_fee is not None:
            result['penalty_fee'] = self.penalty_fee
        if self.remark is not None:
            result['remark'] = self.remark
        if self.service_fee is not None:
            result['service_fee'] = self.service_fee
        if self.telephone is not None:
            result['telephone'] = self.telephone
        if self.train_invoice_fee is not None:
            result['train_invoice_fee'] = self.train_invoice_fee
        if self.vehicle_invoice_fee is not None:
            result['vehicle_invoice_fee'] = self.vehicle_invoice_fee
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('contact') is not None:
            self.contact = m.get('contact')
        if m.get('email') is not None:
            self.email = m.get('email')
        if m.get('flight_invoice_fee') is not None:
            self.flight_invoice_fee = m.get('flight_invoice_fee')
        if m.get('fu_point_invoice_fee') is not None:
            self.fu_point_invoice_fee = m.get('fu_point_invoice_fee')
        if m.get('hotel_normal_invoice_fee') is not None:
            self.hotel_normal_invoice_fee = m.get('hotel_normal_invoice_fee')
        if m.get('hotel_special_invoice_fee') is not None:
            self.hotel_special_invoice_fee = m.get('hotel_special_invoice_fee')
        if m.get('international_flight_invoice_fee') is not None:
            self.international_flight_invoice_fee = m.get('international_flight_invoice_fee')
        if m.get('invoice_third_part_id') is not None:
            self.invoice_third_part_id = m.get('invoice_third_part_id')
        if m.get('mail_address') is not None:
            self.mail_address = m.get('mail_address')
        if m.get('mail_city') is not None:
            self.mail_city = m.get('mail_city')
        if m.get('mail_full_address') is not None:
            self.mail_full_address = m.get('mail_full_address')
        if m.get('mail_province') is not None:
            self.mail_province = m.get('mail_province')
        if m.get('penalty_fee') is not None:
            self.penalty_fee = m.get('penalty_fee')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('service_fee') is not None:
            self.service_fee = m.get('service_fee')
        if m.get('telephone') is not None:
            self.telephone = m.get('telephone')
        if m.get('train_invoice_fee') is not None:
            self.train_invoice_fee = m.get('train_invoice_fee')
        if m.get('vehicle_invoice_fee') is not None:
            self.vehicle_invoice_fee = m.get('vehicle_invoice_fee')
        return self


class ApplyInvoiceTaskRequest(TeaModel):
    def __init__(self, bill_date=None, invoice_task_list=None):
        self.bill_date = bill_date  # type: str
        self.invoice_task_list = invoice_task_list  # type: list[ApplyInvoiceTaskRequestInvoiceTaskList]

    def validate(self):
        if self.invoice_task_list:
            for k in self.invoice_task_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ApplyInvoiceTaskRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bill_date is not None:
            result['bill_date'] = self.bill_date
        result['invoice_task_list'] = []
        if self.invoice_task_list is not None:
            for k in self.invoice_task_list:
                result['invoice_task_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('bill_date') is not None:
            self.bill_date = m.get('bill_date')
        self.invoice_task_list = []
        if m.get('invoice_task_list') is not None:
            for k in m.get('invoice_task_list'):
                temp_model = ApplyInvoiceTaskRequestInvoiceTaskList()
                self.invoice_task_list.append(temp_model.from_map(k))
        return self


class ApplyInvoiceTaskShrinkRequest(TeaModel):
    def __init__(self, bill_date=None, invoice_task_list_shrink=None):
        self.bill_date = bill_date  # type: str
        self.invoice_task_list_shrink = invoice_task_list_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ApplyInvoiceTaskShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bill_date is not None:
            result['bill_date'] = self.bill_date
        if self.invoice_task_list_shrink is not None:
            result['invoice_task_list'] = self.invoice_task_list_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('bill_date') is not None:
            self.bill_date = m.get('bill_date')
        if m.get('invoice_task_list') is not None:
            self.invoice_task_list_shrink = m.get('invoice_task_list')
        return self


class ApplyInvoiceTaskResponseBody(TeaModel):
    def __init__(self, code=None, message=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        # requestId
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        # traceId
        self.trace_id = trace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ApplyInvoiceTaskResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class ApplyInvoiceTaskResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ApplyInvoiceTaskResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ApplyInvoiceTaskResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ApplyInvoiceTaskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ApplyListQueryHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_so_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ApplyListQueryHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class ApplyListQueryRequest(TeaModel):
    def __init__(self, all_apply=None, depart_id=None, end_time=None, gmt_modified=None, only_shang_lv_apply=None,
                 page=None, page_size=None, start_time=None, sub_corp_id=None, type=None, union_no=None, user_id=None):
        self.all_apply = all_apply  # type: bool
        self.depart_id = depart_id  # type: str
        self.end_time = end_time  # type: str
        self.gmt_modified = gmt_modified  # type: str
        self.only_shang_lv_apply = only_shang_lv_apply  # type: bool
        self.page = page  # type: int
        self.page_size = page_size  # type: int
        self.start_time = start_time  # type: str
        self.sub_corp_id = sub_corp_id  # type: str
        self.type = type  # type: int
        self.union_no = union_no  # type: str
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ApplyListQueryRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.all_apply is not None:
            result['all_apply'] = self.all_apply
        if self.depart_id is not None:
            result['depart_id'] = self.depart_id
        if self.end_time is not None:
            result['end_time'] = self.end_time
        if self.gmt_modified is not None:
            result['gmt_modified'] = self.gmt_modified
        if self.only_shang_lv_apply is not None:
            result['only_shang_lv_apply'] = self.only_shang_lv_apply
        if self.page is not None:
            result['page'] = self.page
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.start_time is not None:
            result['start_time'] = self.start_time
        if self.sub_corp_id is not None:
            result['sub_corp_id'] = self.sub_corp_id
        if self.type is not None:
            result['type'] = self.type
        if self.union_no is not None:
            result['union_no'] = self.union_no
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('all_apply') is not None:
            self.all_apply = m.get('all_apply')
        if m.get('depart_id') is not None:
            self.depart_id = m.get('depart_id')
        if m.get('end_time') is not None:
            self.end_time = m.get('end_time')
        if m.get('gmt_modified') is not None:
            self.gmt_modified = m.get('gmt_modified')
        if m.get('only_shang_lv_apply') is not None:
            self.only_shang_lv_apply = m.get('only_shang_lv_apply')
        if m.get('page') is not None:
            self.page = m.get('page')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('start_time') is not None:
            self.start_time = m.get('start_time')
        if m.get('sub_corp_id') is not None:
            self.sub_corp_id = m.get('sub_corp_id')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('union_no') is not None:
            self.union_no = m.get('union_no')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class ApplyListQueryResponseBodyModuleListApproverList(TeaModel):
    def __init__(self, note=None, operate_time=None, order=None, status=None, status_desc=None, user_id=None,
                 user_name=None):
        self.note = note  # type: str
        self.operate_time = operate_time  # type: str
        self.order = order  # type: int
        self.status = status  # type: int
        self.status_desc = status_desc  # type: str
        self.user_id = user_id  # type: str
        self.user_name = user_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ApplyListQueryResponseBodyModuleListApproverList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.note is not None:
            result['note'] = self.note
        if self.operate_time is not None:
            result['operate_time'] = self.operate_time
        if self.order is not None:
            result['order'] = self.order
        if self.status is not None:
            result['status'] = self.status
        if self.status_desc is not None:
            result['status_desc'] = self.status_desc
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('note') is not None:
            self.note = m.get('note')
        if m.get('operate_time') is not None:
            self.operate_time = m.get('operate_time')
        if m.get('order') is not None:
            self.order = m.get('order')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('status_desc') is not None:
            self.status_desc = m.get('status_desc')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class ApplyListQueryResponseBodyModuleListExternalTravelerList(TeaModel):
    def __init__(self, user_name=None):
        self.user_name = user_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ApplyListQueryResponseBodyModuleListExternalTravelerList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class ApplyListQueryResponseBodyModuleListItineraryList(TeaModel):
    def __init__(self, arr_city=None, arr_date=None, cost_center_name=None, dep_city=None, dep_date=None,
                 invoice_name=None, itinerary_id=None, project_code=None, project_title=None, thirdpart_itinerary_id=None,
                 traffic_type=None, trip_way=None):
        self.arr_city = arr_city  # type: str
        self.arr_date = arr_date  # type: str
        self.cost_center_name = cost_center_name  # type: str
        self.dep_city = dep_city  # type: str
        self.dep_date = dep_date  # type: str
        self.invoice_name = invoice_name  # type: str
        self.itinerary_id = itinerary_id  # type: str
        self.project_code = project_code  # type: str
        self.project_title = project_title  # type: str
        self.thirdpart_itinerary_id = thirdpart_itinerary_id  # type: str
        self.traffic_type = traffic_type  # type: int
        self.trip_way = trip_way  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(ApplyListQueryResponseBodyModuleListItineraryList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_city is not None:
            result['arr_city'] = self.arr_city
        if self.arr_date is not None:
            result['arr_date'] = self.arr_date
        if self.cost_center_name is not None:
            result['cost_center_name'] = self.cost_center_name
        if self.dep_city is not None:
            result['dep_city'] = self.dep_city
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        if self.invoice_name is not None:
            result['invoice_name'] = self.invoice_name
        if self.itinerary_id is not None:
            result['itinerary_id'] = self.itinerary_id
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_title is not None:
            result['project_title'] = self.project_title
        if self.thirdpart_itinerary_id is not None:
            result['thirdpart_itinerary_id'] = self.thirdpart_itinerary_id
        if self.traffic_type is not None:
            result['traffic_type'] = self.traffic_type
        if self.trip_way is not None:
            result['trip_way'] = self.trip_way
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('arr_city') is not None:
            self.arr_city = m.get('arr_city')
        if m.get('arr_date') is not None:
            self.arr_date = m.get('arr_date')
        if m.get('cost_center_name') is not None:
            self.cost_center_name = m.get('cost_center_name')
        if m.get('dep_city') is not None:
            self.dep_city = m.get('dep_city')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        if m.get('invoice_name') is not None:
            self.invoice_name = m.get('invoice_name')
        if m.get('itinerary_id') is not None:
            self.itinerary_id = m.get('itinerary_id')
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_title') is not None:
            self.project_title = m.get('project_title')
        if m.get('thirdpart_itinerary_id') is not None:
            self.thirdpart_itinerary_id = m.get('thirdpart_itinerary_id')
        if m.get('traffic_type') is not None:
            self.traffic_type = m.get('traffic_type')
        if m.get('trip_way') is not None:
            self.trip_way = m.get('trip_way')
        return self


class ApplyListQueryResponseBodyModuleListItinerarySetList(TeaModel):
    def __init__(self, arr_date=None, city_code_set=None, city_set=None, cost_center_name=None, dep_date=None,
                 invoice_name=None, itinerary_id=None, project_code=None, project_title=None, thirdpart_itinerary_id=None,
                 traffic_type=None):
        self.arr_date = arr_date  # type: str
        self.city_code_set = city_code_set  # type: str
        self.city_set = city_set  # type: str
        self.cost_center_name = cost_center_name  # type: str
        self.dep_date = dep_date  # type: str
        self.invoice_name = invoice_name  # type: str
        self.itinerary_id = itinerary_id  # type: str
        self.project_code = project_code  # type: str
        self.project_title = project_title  # type: str
        self.thirdpart_itinerary_id = thirdpart_itinerary_id  # type: str
        self.traffic_type = traffic_type  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(ApplyListQueryResponseBodyModuleListItinerarySetList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_date is not None:
            result['arr_date'] = self.arr_date
        if self.city_code_set is not None:
            result['city_code_set'] = self.city_code_set
        if self.city_set is not None:
            result['city_set'] = self.city_set
        if self.cost_center_name is not None:
            result['cost_center_name'] = self.cost_center_name
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        if self.invoice_name is not None:
            result['invoice_name'] = self.invoice_name
        if self.itinerary_id is not None:
            result['itinerary_id'] = self.itinerary_id
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_title is not None:
            result['project_title'] = self.project_title
        if self.thirdpart_itinerary_id is not None:
            result['thirdpart_itinerary_id'] = self.thirdpart_itinerary_id
        if self.traffic_type is not None:
            result['traffic_type'] = self.traffic_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('arr_date') is not None:
            self.arr_date = m.get('arr_date')
        if m.get('city_code_set') is not None:
            self.city_code_set = m.get('city_code_set')
        if m.get('city_set') is not None:
            self.city_set = m.get('city_set')
        if m.get('cost_center_name') is not None:
            self.cost_center_name = m.get('cost_center_name')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        if m.get('invoice_name') is not None:
            self.invoice_name = m.get('invoice_name')
        if m.get('itinerary_id') is not None:
            self.itinerary_id = m.get('itinerary_id')
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_title') is not None:
            self.project_title = m.get('project_title')
        if m.get('thirdpart_itinerary_id') is not None:
            self.thirdpart_itinerary_id = m.get('thirdpart_itinerary_id')
        if m.get('traffic_type') is not None:
            self.traffic_type = m.get('traffic_type')
        return self


class ApplyListQueryResponseBodyModuleListTravelerList(TeaModel):
    def __init__(self, job_no=None, user_id=None, user_name=None):
        self.job_no = job_no  # type: str
        self.user_id = user_id  # type: str
        self.user_name = user_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ApplyListQueryResponseBodyModuleListTravelerList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.job_no is not None:
            result['job_no'] = self.job_no
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('job_no') is not None:
            self.job_no = m.get('job_no')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class ApplyListQueryResponseBodyModuleList(TeaModel):
    def __init__(self, apply_show_id=None, approver_list=None, corp_id=None, corp_name=None, depart_id=None,
                 depart_name=None, external_traveler_list=None, flow_code=None, gmt_create=None, gmt_modified=None, id=None,
                 itinerary_list=None, itinerary_rule=None, itinerary_set_list=None, job_no=None, status=None, status_desc=None,
                 thirdpart_business_id=None, thirdpart_id=None, traveler_list=None, trip_cause=None, trip_day=None, trip_title=None,
                 type=None, union_no=None, user_id=None, user_name=None):
        self.apply_show_id = apply_show_id  # type: str
        self.approver_list = approver_list  # type: list[ApplyListQueryResponseBodyModuleListApproverList]
        self.corp_id = corp_id  # type: str
        self.corp_name = corp_name  # type: str
        self.depart_id = depart_id  # type: str
        self.depart_name = depart_name  # type: str
        self.external_traveler_list = external_traveler_list  # type: list[ApplyListQueryResponseBodyModuleListExternalTravelerList]
        self.flow_code = flow_code  # type: str
        self.gmt_create = gmt_create  # type: str
        self.gmt_modified = gmt_modified  # type: str
        self.id = id  # type: long
        self.itinerary_list = itinerary_list  # type: list[ApplyListQueryResponseBodyModuleListItineraryList]
        self.itinerary_rule = itinerary_rule  # type: int
        self.itinerary_set_list = itinerary_set_list  # type: list[ApplyListQueryResponseBodyModuleListItinerarySetList]
        self.job_no = job_no  # type: str
        self.status = status  # type: int
        self.status_desc = status_desc  # type: str
        self.thirdpart_business_id = thirdpart_business_id  # type: str
        self.thirdpart_id = thirdpart_id  # type: str
        self.traveler_list = traveler_list  # type: list[ApplyListQueryResponseBodyModuleListTravelerList]
        self.trip_cause = trip_cause  # type: str
        self.trip_day = trip_day  # type: int
        self.trip_title = trip_title  # type: str
        self.type = type  # type: int
        self.union_no = union_no  # type: str
        self.user_id = user_id  # type: str
        self.user_name = user_name  # type: str

    def validate(self):
        if self.approver_list:
            for k in self.approver_list:
                if k:
                    k.validate()
        if self.external_traveler_list:
            for k in self.external_traveler_list:
                if k:
                    k.validate()
        if self.itinerary_list:
            for k in self.itinerary_list:
                if k:
                    k.validate()
        if self.itinerary_set_list:
            for k in self.itinerary_set_list:
                if k:
                    k.validate()
        if self.traveler_list:
            for k in self.traveler_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ApplyListQueryResponseBodyModuleList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_show_id is not None:
            result['apply_show_id'] = self.apply_show_id
        result['approver_list'] = []
        if self.approver_list is not None:
            for k in self.approver_list:
                result['approver_list'].append(k.to_map() if k else None)
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        if self.corp_name is not None:
            result['corp_name'] = self.corp_name
        if self.depart_id is not None:
            result['depart_id'] = self.depart_id
        if self.depart_name is not None:
            result['depart_name'] = self.depart_name
        result['external_traveler_list'] = []
        if self.external_traveler_list is not None:
            for k in self.external_traveler_list:
                result['external_traveler_list'].append(k.to_map() if k else None)
        if self.flow_code is not None:
            result['flow_code'] = self.flow_code
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.gmt_modified is not None:
            result['gmt_modified'] = self.gmt_modified
        if self.id is not None:
            result['id'] = self.id
        result['itinerary_list'] = []
        if self.itinerary_list is not None:
            for k in self.itinerary_list:
                result['itinerary_list'].append(k.to_map() if k else None)
        if self.itinerary_rule is not None:
            result['itinerary_rule'] = self.itinerary_rule
        result['itinerary_set_list'] = []
        if self.itinerary_set_list is not None:
            for k in self.itinerary_set_list:
                result['itinerary_set_list'].append(k.to_map() if k else None)
        if self.job_no is not None:
            result['job_no'] = self.job_no
        if self.status is not None:
            result['status'] = self.status
        if self.status_desc is not None:
            result['status_desc'] = self.status_desc
        if self.thirdpart_business_id is not None:
            result['thirdpart_business_id'] = self.thirdpart_business_id
        if self.thirdpart_id is not None:
            result['thirdpart_id'] = self.thirdpart_id
        result['traveler_list'] = []
        if self.traveler_list is not None:
            for k in self.traveler_list:
                result['traveler_list'].append(k.to_map() if k else None)
        if self.trip_cause is not None:
            result['trip_cause'] = self.trip_cause
        if self.trip_day is not None:
            result['trip_day'] = self.trip_day
        if self.trip_title is not None:
            result['trip_title'] = self.trip_title
        if self.type is not None:
            result['type'] = self.type
        if self.union_no is not None:
            result['union_no'] = self.union_no
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('apply_show_id') is not None:
            self.apply_show_id = m.get('apply_show_id')
        self.approver_list = []
        if m.get('approver_list') is not None:
            for k in m.get('approver_list'):
                temp_model = ApplyListQueryResponseBodyModuleListApproverList()
                self.approver_list.append(temp_model.from_map(k))
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        if m.get('corp_name') is not None:
            self.corp_name = m.get('corp_name')
        if m.get('depart_id') is not None:
            self.depart_id = m.get('depart_id')
        if m.get('depart_name') is not None:
            self.depart_name = m.get('depart_name')
        self.external_traveler_list = []
        if m.get('external_traveler_list') is not None:
            for k in m.get('external_traveler_list'):
                temp_model = ApplyListQueryResponseBodyModuleListExternalTravelerList()
                self.external_traveler_list.append(temp_model.from_map(k))
        if m.get('flow_code') is not None:
            self.flow_code = m.get('flow_code')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('gmt_modified') is not None:
            self.gmt_modified = m.get('gmt_modified')
        if m.get('id') is not None:
            self.id = m.get('id')
        self.itinerary_list = []
        if m.get('itinerary_list') is not None:
            for k in m.get('itinerary_list'):
                temp_model = ApplyListQueryResponseBodyModuleListItineraryList()
                self.itinerary_list.append(temp_model.from_map(k))
        if m.get('itinerary_rule') is not None:
            self.itinerary_rule = m.get('itinerary_rule')
        self.itinerary_set_list = []
        if m.get('itinerary_set_list') is not None:
            for k in m.get('itinerary_set_list'):
                temp_model = ApplyListQueryResponseBodyModuleListItinerarySetList()
                self.itinerary_set_list.append(temp_model.from_map(k))
        if m.get('job_no') is not None:
            self.job_no = m.get('job_no')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('status_desc') is not None:
            self.status_desc = m.get('status_desc')
        if m.get('thirdpart_business_id') is not None:
            self.thirdpart_business_id = m.get('thirdpart_business_id')
        if m.get('thirdpart_id') is not None:
            self.thirdpart_id = m.get('thirdpart_id')
        self.traveler_list = []
        if m.get('traveler_list') is not None:
            for k in m.get('traveler_list'):
                temp_model = ApplyListQueryResponseBodyModuleListTravelerList()
                self.traveler_list.append(temp_model.from_map(k))
        if m.get('trip_cause') is not None:
            self.trip_cause = m.get('trip_cause')
        if m.get('trip_day') is not None:
            self.trip_day = m.get('trip_day')
        if m.get('trip_title') is not None:
            self.trip_title = m.get('trip_title')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('union_no') is not None:
            self.union_no = m.get('union_no')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class ApplyListQueryResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module_list=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module_list = module_list  # type: list[ApplyListQueryResponseBodyModuleList]
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module_list:
            for k in self.module_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ApplyListQueryResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        result['module_list'] = []
        if self.module_list is not None:
            for k in self.module_list:
                result['module_list'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        self.module_list = []
        if m.get('module_list') is not None:
            for k in m.get('module_list'):
                temp_model = ApplyListQueryResponseBodyModuleList()
                self.module_list.append(temp_model.from_map(k))
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class ApplyListQueryResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ApplyListQueryResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ApplyListQueryResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ApplyListQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ApplyModifyHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_so_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ApplyModifyHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class ApplyModifyRequestExternalTravelerList(TeaModel):
    def __init__(self, user_name=None):
        self.user_name = user_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ApplyModifyRequestExternalTravelerList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class ApplyModifyRequestExternalTravelerStandardHotelCitys(TeaModel):
    def __init__(self, city_code=None, city_name=None, fee=None):
        self.city_code = city_code  # type: str
        self.city_name = city_name  # type: str
        self.fee = fee  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ApplyModifyRequestExternalTravelerStandardHotelCitys, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.fee is not None:
            result['fee'] = self.fee
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('fee') is not None:
            self.fee = m.get('fee')
        return self


class ApplyModifyRequestExternalTravelerStandard(TeaModel):
    def __init__(self, business_discount=None, economy_discount=None, first_discount=None, flight_cabins=None,
                 hotel_citys=None, premium_economy_discount=None, reserve_type=None, train_seats=None):
        self.business_discount = business_discount  # type: int
        self.economy_discount = economy_discount  # type: int
        self.first_discount = first_discount  # type: int
        self.flight_cabins = flight_cabins  # type: str
        self.hotel_citys = hotel_citys  # type: list[ApplyModifyRequestExternalTravelerStandardHotelCitys]
        # 超级经济舱折扣。1到10的整数
        self.premium_economy_discount = premium_economy_discount  # type: int
        self.reserve_type = reserve_type  # type: int
        self.train_seats = train_seats  # type: str

    def validate(self):
        if self.hotel_citys:
            for k in self.hotel_citys:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ApplyModifyRequestExternalTravelerStandard, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.business_discount is not None:
            result['business_discount'] = self.business_discount
        if self.economy_discount is not None:
            result['economy_discount'] = self.economy_discount
        if self.first_discount is not None:
            result['first_discount'] = self.first_discount
        if self.flight_cabins is not None:
            result['flight_cabins'] = self.flight_cabins
        result['hotel_citys'] = []
        if self.hotel_citys is not None:
            for k in self.hotel_citys:
                result['hotel_citys'].append(k.to_map() if k else None)
        if self.premium_economy_discount is not None:
            result['premium_economy_discount'] = self.premium_economy_discount
        if self.reserve_type is not None:
            result['reserve_type'] = self.reserve_type
        if self.train_seats is not None:
            result['train_seats'] = self.train_seats
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('business_discount') is not None:
            self.business_discount = m.get('business_discount')
        if m.get('economy_discount') is not None:
            self.economy_discount = m.get('economy_discount')
        if m.get('first_discount') is not None:
            self.first_discount = m.get('first_discount')
        if m.get('flight_cabins') is not None:
            self.flight_cabins = m.get('flight_cabins')
        self.hotel_citys = []
        if m.get('hotel_citys') is not None:
            for k in m.get('hotel_citys'):
                temp_model = ApplyModifyRequestExternalTravelerStandardHotelCitys()
                self.hotel_citys.append(temp_model.from_map(k))
        if m.get('premium_economy_discount') is not None:
            self.premium_economy_discount = m.get('premium_economy_discount')
        if m.get('reserve_type') is not None:
            self.reserve_type = m.get('reserve_type')
        if m.get('train_seats') is not None:
            self.train_seats = m.get('train_seats')
        return self


class ApplyModifyRequestHotelShare(TeaModel):
    def __init__(self, param=None, type=None):
        self.param = param  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ApplyModifyRequestHotelShare, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.param is not None:
            result['param'] = self.param
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('param') is not None:
            self.param = m.get('param')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class ApplyModifyRequestItineraryListItineraryTravelStandard(TeaModel):
    def __init__(self, hotel_available_nights_per_day=None):
        self.hotel_available_nights_per_day = hotel_available_nights_per_day  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(ApplyModifyRequestItineraryListItineraryTravelStandard, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.hotel_available_nights_per_day is not None:
            result['hotel_available_nights_per_day'] = self.hotel_available_nights_per_day
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('hotel_available_nights_per_day') is not None:
            self.hotel_available_nights_per_day = m.get('hotel_available_nights_per_day')
        return self


class ApplyModifyRequestItineraryList(TeaModel):
    def __init__(self, arr_city=None, arr_city_code=None, arr_date=None, cost_center_id=None, dep_city=None,
                 dep_city_code=None, dep_date=None, invoice_id=None, itinerary_id=None, itinerary_travel_standard=None,
                 need_hotel=None, need_traffic=None, project_code=None, project_title=None, third_part_invoice_id=None,
                 thirdpart_cost_center_id=None, traffic_type=None, trip_way=None):
        self.arr_city = arr_city  # type: str
        self.arr_city_code = arr_city_code  # type: str
        self.arr_date = arr_date  # type: str
        self.cost_center_id = cost_center_id  # type: long
        self.dep_city = dep_city  # type: str
        self.dep_city_code = dep_city_code  # type: str
        self.dep_date = dep_date  # type: str
        self.invoice_id = invoice_id  # type: long
        self.itinerary_id = itinerary_id  # type: str
        self.itinerary_travel_standard = itinerary_travel_standard  # type: ApplyModifyRequestItineraryListItineraryTravelStandard
        self.need_hotel = need_hotel  # type: bool
        self.need_traffic = need_traffic  # type: bool
        self.project_code = project_code  # type: str
        self.project_title = project_title  # type: str
        self.third_part_invoice_id = third_part_invoice_id  # type: str
        self.thirdpart_cost_center_id = thirdpart_cost_center_id  # type: str
        self.traffic_type = traffic_type  # type: int
        self.trip_way = trip_way  # type: int

    def validate(self):
        if self.itinerary_travel_standard:
            self.itinerary_travel_standard.validate()

    def to_map(self):
        _map = super(ApplyModifyRequestItineraryList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_city is not None:
            result['arr_city'] = self.arr_city
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.arr_date is not None:
            result['arr_date'] = self.arr_date
        if self.cost_center_id is not None:
            result['cost_center_id'] = self.cost_center_id
        if self.dep_city is not None:
            result['dep_city'] = self.dep_city
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        if self.invoice_id is not None:
            result['invoice_id'] = self.invoice_id
        if self.itinerary_id is not None:
            result['itinerary_id'] = self.itinerary_id
        if self.itinerary_travel_standard is not None:
            result['itinerary_travel_standard'] = self.itinerary_travel_standard.to_map()
        if self.need_hotel is not None:
            result['need_hotel'] = self.need_hotel
        if self.need_traffic is not None:
            result['need_traffic'] = self.need_traffic
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_title is not None:
            result['project_title'] = self.project_title
        if self.third_part_invoice_id is not None:
            result['third_part_invoice_id'] = self.third_part_invoice_id
        if self.thirdpart_cost_center_id is not None:
            result['thirdpart_cost_center_id'] = self.thirdpart_cost_center_id
        if self.traffic_type is not None:
            result['traffic_type'] = self.traffic_type
        if self.trip_way is not None:
            result['trip_way'] = self.trip_way
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('arr_city') is not None:
            self.arr_city = m.get('arr_city')
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('arr_date') is not None:
            self.arr_date = m.get('arr_date')
        if m.get('cost_center_id') is not None:
            self.cost_center_id = m.get('cost_center_id')
        if m.get('dep_city') is not None:
            self.dep_city = m.get('dep_city')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        if m.get('invoice_id') is not None:
            self.invoice_id = m.get('invoice_id')
        if m.get('itinerary_id') is not None:
            self.itinerary_id = m.get('itinerary_id')
        if m.get('itinerary_travel_standard') is not None:
            temp_model = ApplyModifyRequestItineraryListItineraryTravelStandard()
            self.itinerary_travel_standard = temp_model.from_map(m['itinerary_travel_standard'])
        if m.get('need_hotel') is not None:
            self.need_hotel = m.get('need_hotel')
        if m.get('need_traffic') is not None:
            self.need_traffic = m.get('need_traffic')
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_title') is not None:
            self.project_title = m.get('project_title')
        if m.get('third_part_invoice_id') is not None:
            self.third_part_invoice_id = m.get('third_part_invoice_id')
        if m.get('thirdpart_cost_center_id') is not None:
            self.thirdpart_cost_center_id = m.get('thirdpart_cost_center_id')
        if m.get('traffic_type') is not None:
            self.traffic_type = m.get('traffic_type')
        if m.get('trip_way') is not None:
            self.trip_way = m.get('trip_way')
        return self


class ApplyModifyRequestItinerarySetListItineraryTravelStandard(TeaModel):
    def __init__(self, hotel_available_nights_per_day=None):
        self.hotel_available_nights_per_day = hotel_available_nights_per_day  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(ApplyModifyRequestItinerarySetListItineraryTravelStandard, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.hotel_available_nights_per_day is not None:
            result['hotel_available_nights_per_day'] = self.hotel_available_nights_per_day
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('hotel_available_nights_per_day') is not None:
            self.hotel_available_nights_per_day = m.get('hotel_available_nights_per_day')
        return self


class ApplyModifyRequestItinerarySetList(TeaModel):
    def __init__(self, arr_date=None, city_code_set=None, city_set=None, cost_center_id=None, dep_date=None,
                 invoice_id=None, itinerary_id=None, itinerary_travel_standard=None, project_code=None, project_title=None,
                 third_part_invoice_id=None, thirdpart_cost_center_id=None, traffic_type=None):
        self.arr_date = arr_date  # type: str
        self.city_code_set = city_code_set  # type: str
        self.city_set = city_set  # type: str
        self.cost_center_id = cost_center_id  # type: long
        self.dep_date = dep_date  # type: str
        self.invoice_id = invoice_id  # type: long
        self.itinerary_id = itinerary_id  # type: str
        self.itinerary_travel_standard = itinerary_travel_standard  # type: ApplyModifyRequestItinerarySetListItineraryTravelStandard
        self.project_code = project_code  # type: str
        self.project_title = project_title  # type: str
        self.third_part_invoice_id = third_part_invoice_id  # type: str
        self.thirdpart_cost_center_id = thirdpart_cost_center_id  # type: str
        self.traffic_type = traffic_type  # type: int

    def validate(self):
        if self.itinerary_travel_standard:
            self.itinerary_travel_standard.validate()

    def to_map(self):
        _map = super(ApplyModifyRequestItinerarySetList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_date is not None:
            result['arr_date'] = self.arr_date
        if self.city_code_set is not None:
            result['city_code_set'] = self.city_code_set
        if self.city_set is not None:
            result['city_set'] = self.city_set
        if self.cost_center_id is not None:
            result['cost_center_id'] = self.cost_center_id
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        if self.invoice_id is not None:
            result['invoice_id'] = self.invoice_id
        if self.itinerary_id is not None:
            result['itinerary_id'] = self.itinerary_id
        if self.itinerary_travel_standard is not None:
            result['itinerary_travel_standard'] = self.itinerary_travel_standard.to_map()
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_title is not None:
            result['project_title'] = self.project_title
        if self.third_part_invoice_id is not None:
            result['third_part_invoice_id'] = self.third_part_invoice_id
        if self.thirdpart_cost_center_id is not None:
            result['thirdpart_cost_center_id'] = self.thirdpart_cost_center_id
        if self.traffic_type is not None:
            result['traffic_type'] = self.traffic_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('arr_date') is not None:
            self.arr_date = m.get('arr_date')
        if m.get('city_code_set') is not None:
            self.city_code_set = m.get('city_code_set')
        if m.get('city_set') is not None:
            self.city_set = m.get('city_set')
        if m.get('cost_center_id') is not None:
            self.cost_center_id = m.get('cost_center_id')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        if m.get('invoice_id') is not None:
            self.invoice_id = m.get('invoice_id')
        if m.get('itinerary_id') is not None:
            self.itinerary_id = m.get('itinerary_id')
        if m.get('itinerary_travel_standard') is not None:
            temp_model = ApplyModifyRequestItinerarySetListItineraryTravelStandard()
            self.itinerary_travel_standard = temp_model.from_map(m['itinerary_travel_standard'])
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_title') is not None:
            self.project_title = m.get('project_title')
        if m.get('third_part_invoice_id') is not None:
            self.third_part_invoice_id = m.get('third_part_invoice_id')
        if m.get('thirdpart_cost_center_id') is not None:
            self.thirdpart_cost_center_id = m.get('thirdpart_cost_center_id')
        if m.get('traffic_type') is not None:
            self.traffic_type = m.get('traffic_type')
        return self


class ApplyModifyRequestTravelerList(TeaModel):
    def __init__(self, user_id=None, user_name=None):
        self.user_id = user_id  # type: str
        self.user_name = user_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ApplyModifyRequestTravelerList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class ApplyModifyRequestTravelerStandardHotelCitys(TeaModel):
    def __init__(self, city_code=None, city_name=None, fee=None):
        self.city_code = city_code  # type: str
        self.city_name = city_name  # type: str
        self.fee = fee  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ApplyModifyRequestTravelerStandardHotelCitys, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.fee is not None:
            result['fee'] = self.fee
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('fee') is not None:
            self.fee = m.get('fee')
        return self


class ApplyModifyRequestTravelerStandard(TeaModel):
    def __init__(self, business_discount=None, economy_discount=None, first_discount=None, flight_cabins=None,
                 hotel_citys=None, premium_economy_discount=None, reserve_type=None, train_seats=None, user_id=None):
        self.business_discount = business_discount  # type: int
        self.economy_discount = economy_discount  # type: int
        self.first_discount = first_discount  # type: int
        self.flight_cabins = flight_cabins  # type: str
        self.hotel_citys = hotel_citys  # type: list[ApplyModifyRequestTravelerStandardHotelCitys]
        # 超级经济舱折扣。1到10的整数
        self.premium_economy_discount = premium_economy_discount  # type: int
        self.reserve_type = reserve_type  # type: int
        self.train_seats = train_seats  # type: str
        self.user_id = user_id  # type: str

    def validate(self):
        if self.hotel_citys:
            for k in self.hotel_citys:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ApplyModifyRequestTravelerStandard, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.business_discount is not None:
            result['business_discount'] = self.business_discount
        if self.economy_discount is not None:
            result['economy_discount'] = self.economy_discount
        if self.first_discount is not None:
            result['first_discount'] = self.first_discount
        if self.flight_cabins is not None:
            result['flight_cabins'] = self.flight_cabins
        result['hotel_citys'] = []
        if self.hotel_citys is not None:
            for k in self.hotel_citys:
                result['hotel_citys'].append(k.to_map() if k else None)
        if self.premium_economy_discount is not None:
            result['premium_economy_discount'] = self.premium_economy_discount
        if self.reserve_type is not None:
            result['reserve_type'] = self.reserve_type
        if self.train_seats is not None:
            result['train_seats'] = self.train_seats
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('business_discount') is not None:
            self.business_discount = m.get('business_discount')
        if m.get('economy_discount') is not None:
            self.economy_discount = m.get('economy_discount')
        if m.get('first_discount') is not None:
            self.first_discount = m.get('first_discount')
        if m.get('flight_cabins') is not None:
            self.flight_cabins = m.get('flight_cabins')
        self.hotel_citys = []
        if m.get('hotel_citys') is not None:
            for k in m.get('hotel_citys'):
                temp_model = ApplyModifyRequestTravelerStandardHotelCitys()
                self.hotel_citys.append(temp_model.from_map(k))
        if m.get('premium_economy_discount') is not None:
            self.premium_economy_discount = m.get('premium_economy_discount')
        if m.get('reserve_type') is not None:
            self.reserve_type = m.get('reserve_type')
        if m.get('train_seats') is not None:
            self.train_seats = m.get('train_seats')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class ApplyModifyRequest(TeaModel):
    def __init__(self, budget=None, budget_merge=None, corp_name=None, depart_id=None, depart_name=None,
                 extend_field=None, external_traveler_list=None, external_traveler_standard=None, flight_budget=None,
                 hotel_budget=None, hotel_share=None, itinerary_list=None, itinerary_rule=None, itinerary_set_list=None,
                 limit_traveler=None, status=None, sub_corp_id=None, thirdpart_apply_id=None, thirdpart_business_id=None,
                 thirdpart_depart_id=None, together_book_rule=None, train_budget=None, traveler_list=None, traveler_standard=None,
                 trip_cause=None, trip_day=None, trip_title=None, union_no=None, user_id=None, user_name=None,
                 vehicle_budget=None):
        self.budget = budget  # type: long
        self.budget_merge = budget_merge  # type: int
        self.corp_name = corp_name  # type: str
        self.depart_id = depart_id  # type: str
        self.depart_name = depart_name  # type: str
        # 可将补充描述传入此字段，账单中将会体现此字段的值。可以用于企业的统计和对账
        self.extend_field = extend_field  # type: str
        self.external_traveler_list = external_traveler_list  # type: list[ApplyModifyRequestExternalTravelerList]
        self.external_traveler_standard = external_traveler_standard  # type: ApplyModifyRequestExternalTravelerStandard
        self.flight_budget = flight_budget  # type: long
        self.hotel_budget = hotel_budget  # type: long
        self.hotel_share = hotel_share  # type: ApplyModifyRequestHotelShare
        self.itinerary_list = itinerary_list  # type: list[ApplyModifyRequestItineraryList]
        self.itinerary_rule = itinerary_rule  # type: int
        self.itinerary_set_list = itinerary_set_list  # type: list[ApplyModifyRequestItinerarySetList]
        self.limit_traveler = limit_traveler  # type: int
        self.status = status  # type: int
        # 子企业Id
        self.sub_corp_id = sub_corp_id  # type: str
        self.thirdpart_apply_id = thirdpart_apply_id  # type: str
        self.thirdpart_business_id = thirdpart_business_id  # type: str
        self.thirdpart_depart_id = thirdpart_depart_id  # type: str
        self.together_book_rule = together_book_rule  # type: int
        self.train_budget = train_budget  # type: long
        self.traveler_list = traveler_list  # type: list[ApplyModifyRequestTravelerList]
        self.traveler_standard = traveler_standard  # type: list[ApplyModifyRequestTravelerStandard]
        self.trip_cause = trip_cause  # type: str
        self.trip_day = trip_day  # type: int
        self.trip_title = trip_title  # type: str
        self.union_no = union_no  # type: str
        self.user_id = user_id  # type: str
        self.user_name = user_name  # type: str
        self.vehicle_budget = vehicle_budget  # type: long

    def validate(self):
        if self.external_traveler_list:
            for k in self.external_traveler_list:
                if k:
                    k.validate()
        if self.external_traveler_standard:
            self.external_traveler_standard.validate()
        if self.hotel_share:
            self.hotel_share.validate()
        if self.itinerary_list:
            for k in self.itinerary_list:
                if k:
                    k.validate()
        if self.itinerary_set_list:
            for k in self.itinerary_set_list:
                if k:
                    k.validate()
        if self.traveler_list:
            for k in self.traveler_list:
                if k:
                    k.validate()
        if self.traveler_standard:
            for k in self.traveler_standard:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ApplyModifyRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.budget is not None:
            result['budget'] = self.budget
        if self.budget_merge is not None:
            result['budget_merge'] = self.budget_merge
        if self.corp_name is not None:
            result['corp_name'] = self.corp_name
        if self.depart_id is not None:
            result['depart_id'] = self.depart_id
        if self.depart_name is not None:
            result['depart_name'] = self.depart_name
        if self.extend_field is not None:
            result['extend_field'] = self.extend_field
        result['external_traveler_list'] = []
        if self.external_traveler_list is not None:
            for k in self.external_traveler_list:
                result['external_traveler_list'].append(k.to_map() if k else None)
        if self.external_traveler_standard is not None:
            result['external_traveler_standard'] = self.external_traveler_standard.to_map()
        if self.flight_budget is not None:
            result['flight_budget'] = self.flight_budget
        if self.hotel_budget is not None:
            result['hotel_budget'] = self.hotel_budget
        if self.hotel_share is not None:
            result['hotel_share'] = self.hotel_share.to_map()
        result['itinerary_list'] = []
        if self.itinerary_list is not None:
            for k in self.itinerary_list:
                result['itinerary_list'].append(k.to_map() if k else None)
        if self.itinerary_rule is not None:
            result['itinerary_rule'] = self.itinerary_rule
        result['itinerary_set_list'] = []
        if self.itinerary_set_list is not None:
            for k in self.itinerary_set_list:
                result['itinerary_set_list'].append(k.to_map() if k else None)
        if self.limit_traveler is not None:
            result['limit_traveler'] = self.limit_traveler
        if self.status is not None:
            result['status'] = self.status
        if self.sub_corp_id is not None:
            result['sub_corp_id'] = self.sub_corp_id
        if self.thirdpart_apply_id is not None:
            result['thirdpart_apply_id'] = self.thirdpart_apply_id
        if self.thirdpart_business_id is not None:
            result['thirdpart_business_id'] = self.thirdpart_business_id
        if self.thirdpart_depart_id is not None:
            result['thirdpart_depart_id'] = self.thirdpart_depart_id
        if self.together_book_rule is not None:
            result['together_book_rule'] = self.together_book_rule
        if self.train_budget is not None:
            result['train_budget'] = self.train_budget
        result['traveler_list'] = []
        if self.traveler_list is not None:
            for k in self.traveler_list:
                result['traveler_list'].append(k.to_map() if k else None)
        result['traveler_standard'] = []
        if self.traveler_standard is not None:
            for k in self.traveler_standard:
                result['traveler_standard'].append(k.to_map() if k else None)
        if self.trip_cause is not None:
            result['trip_cause'] = self.trip_cause
        if self.trip_day is not None:
            result['trip_day'] = self.trip_day
        if self.trip_title is not None:
            result['trip_title'] = self.trip_title
        if self.union_no is not None:
            result['union_no'] = self.union_no
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        if self.vehicle_budget is not None:
            result['vehicle_budget'] = self.vehicle_budget
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('budget') is not None:
            self.budget = m.get('budget')
        if m.get('budget_merge') is not None:
            self.budget_merge = m.get('budget_merge')
        if m.get('corp_name') is not None:
            self.corp_name = m.get('corp_name')
        if m.get('depart_id') is not None:
            self.depart_id = m.get('depart_id')
        if m.get('depart_name') is not None:
            self.depart_name = m.get('depart_name')
        if m.get('extend_field') is not None:
            self.extend_field = m.get('extend_field')
        self.external_traveler_list = []
        if m.get('external_traveler_list') is not None:
            for k in m.get('external_traveler_list'):
                temp_model = ApplyModifyRequestExternalTravelerList()
                self.external_traveler_list.append(temp_model.from_map(k))
        if m.get('external_traveler_standard') is not None:
            temp_model = ApplyModifyRequestExternalTravelerStandard()
            self.external_traveler_standard = temp_model.from_map(m['external_traveler_standard'])
        if m.get('flight_budget') is not None:
            self.flight_budget = m.get('flight_budget')
        if m.get('hotel_budget') is not None:
            self.hotel_budget = m.get('hotel_budget')
        if m.get('hotel_share') is not None:
            temp_model = ApplyModifyRequestHotelShare()
            self.hotel_share = temp_model.from_map(m['hotel_share'])
        self.itinerary_list = []
        if m.get('itinerary_list') is not None:
            for k in m.get('itinerary_list'):
                temp_model = ApplyModifyRequestItineraryList()
                self.itinerary_list.append(temp_model.from_map(k))
        if m.get('itinerary_rule') is not None:
            self.itinerary_rule = m.get('itinerary_rule')
        self.itinerary_set_list = []
        if m.get('itinerary_set_list') is not None:
            for k in m.get('itinerary_set_list'):
                temp_model = ApplyModifyRequestItinerarySetList()
                self.itinerary_set_list.append(temp_model.from_map(k))
        if m.get('limit_traveler') is not None:
            self.limit_traveler = m.get('limit_traveler')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('sub_corp_id') is not None:
            self.sub_corp_id = m.get('sub_corp_id')
        if m.get('thirdpart_apply_id') is not None:
            self.thirdpart_apply_id = m.get('thirdpart_apply_id')
        if m.get('thirdpart_business_id') is not None:
            self.thirdpart_business_id = m.get('thirdpart_business_id')
        if m.get('thirdpart_depart_id') is not None:
            self.thirdpart_depart_id = m.get('thirdpart_depart_id')
        if m.get('together_book_rule') is not None:
            self.together_book_rule = m.get('together_book_rule')
        if m.get('train_budget') is not None:
            self.train_budget = m.get('train_budget')
        self.traveler_list = []
        if m.get('traveler_list') is not None:
            for k in m.get('traveler_list'):
                temp_model = ApplyModifyRequestTravelerList()
                self.traveler_list.append(temp_model.from_map(k))
        self.traveler_standard = []
        if m.get('traveler_standard') is not None:
            for k in m.get('traveler_standard'):
                temp_model = ApplyModifyRequestTravelerStandard()
                self.traveler_standard.append(temp_model.from_map(k))
        if m.get('trip_cause') is not None:
            self.trip_cause = m.get('trip_cause')
        if m.get('trip_day') is not None:
            self.trip_day = m.get('trip_day')
        if m.get('trip_title') is not None:
            self.trip_title = m.get('trip_title')
        if m.get('union_no') is not None:
            self.union_no = m.get('union_no')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        if m.get('vehicle_budget') is not None:
            self.vehicle_budget = m.get('vehicle_budget')
        return self


class ApplyModifyShrinkRequest(TeaModel):
    def __init__(self, budget=None, budget_merge=None, corp_name=None, depart_id=None, depart_name=None,
                 extend_field=None, external_traveler_list_shrink=None, external_traveler_standard_shrink=None,
                 flight_budget=None, hotel_budget=None, hotel_share_shrink=None, itinerary_list_shrink=None, itinerary_rule=None,
                 itinerary_set_list_shrink=None, limit_traveler=None, status=None, sub_corp_id=None, thirdpart_apply_id=None,
                 thirdpart_business_id=None, thirdpart_depart_id=None, together_book_rule=None, train_budget=None,
                 traveler_list_shrink=None, traveler_standard_shrink=None, trip_cause=None, trip_day=None, trip_title=None,
                 union_no=None, user_id=None, user_name=None, vehicle_budget=None):
        self.budget = budget  # type: long
        self.budget_merge = budget_merge  # type: int
        self.corp_name = corp_name  # type: str
        self.depart_id = depart_id  # type: str
        self.depart_name = depart_name  # type: str
        # 可将补充描述传入此字段，账单中将会体现此字段的值。可以用于企业的统计和对账
        self.extend_field = extend_field  # type: str
        self.external_traveler_list_shrink = external_traveler_list_shrink  # type: str
        self.external_traveler_standard_shrink = external_traveler_standard_shrink  # type: str
        self.flight_budget = flight_budget  # type: long
        self.hotel_budget = hotel_budget  # type: long
        self.hotel_share_shrink = hotel_share_shrink  # type: str
        self.itinerary_list_shrink = itinerary_list_shrink  # type: str
        self.itinerary_rule = itinerary_rule  # type: int
        self.itinerary_set_list_shrink = itinerary_set_list_shrink  # type: str
        self.limit_traveler = limit_traveler  # type: int
        self.status = status  # type: int
        # 子企业Id
        self.sub_corp_id = sub_corp_id  # type: str
        self.thirdpart_apply_id = thirdpart_apply_id  # type: str
        self.thirdpart_business_id = thirdpart_business_id  # type: str
        self.thirdpart_depart_id = thirdpart_depart_id  # type: str
        self.together_book_rule = together_book_rule  # type: int
        self.train_budget = train_budget  # type: long
        self.traveler_list_shrink = traveler_list_shrink  # type: str
        self.traveler_standard_shrink = traveler_standard_shrink  # type: str
        self.trip_cause = trip_cause  # type: str
        self.trip_day = trip_day  # type: int
        self.trip_title = trip_title  # type: str
        self.union_no = union_no  # type: str
        self.user_id = user_id  # type: str
        self.user_name = user_name  # type: str
        self.vehicle_budget = vehicle_budget  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ApplyModifyShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.budget is not None:
            result['budget'] = self.budget
        if self.budget_merge is not None:
            result['budget_merge'] = self.budget_merge
        if self.corp_name is not None:
            result['corp_name'] = self.corp_name
        if self.depart_id is not None:
            result['depart_id'] = self.depart_id
        if self.depart_name is not None:
            result['depart_name'] = self.depart_name
        if self.extend_field is not None:
            result['extend_field'] = self.extend_field
        if self.external_traveler_list_shrink is not None:
            result['external_traveler_list'] = self.external_traveler_list_shrink
        if self.external_traveler_standard_shrink is not None:
            result['external_traveler_standard'] = self.external_traveler_standard_shrink
        if self.flight_budget is not None:
            result['flight_budget'] = self.flight_budget
        if self.hotel_budget is not None:
            result['hotel_budget'] = self.hotel_budget
        if self.hotel_share_shrink is not None:
            result['hotel_share'] = self.hotel_share_shrink
        if self.itinerary_list_shrink is not None:
            result['itinerary_list'] = self.itinerary_list_shrink
        if self.itinerary_rule is not None:
            result['itinerary_rule'] = self.itinerary_rule
        if self.itinerary_set_list_shrink is not None:
            result['itinerary_set_list'] = self.itinerary_set_list_shrink
        if self.limit_traveler is not None:
            result['limit_traveler'] = self.limit_traveler
        if self.status is not None:
            result['status'] = self.status
        if self.sub_corp_id is not None:
            result['sub_corp_id'] = self.sub_corp_id
        if self.thirdpart_apply_id is not None:
            result['thirdpart_apply_id'] = self.thirdpart_apply_id
        if self.thirdpart_business_id is not None:
            result['thirdpart_business_id'] = self.thirdpart_business_id
        if self.thirdpart_depart_id is not None:
            result['thirdpart_depart_id'] = self.thirdpart_depart_id
        if self.together_book_rule is not None:
            result['together_book_rule'] = self.together_book_rule
        if self.train_budget is not None:
            result['train_budget'] = self.train_budget
        if self.traveler_list_shrink is not None:
            result['traveler_list'] = self.traveler_list_shrink
        if self.traveler_standard_shrink is not None:
            result['traveler_standard'] = self.traveler_standard_shrink
        if self.trip_cause is not None:
            result['trip_cause'] = self.trip_cause
        if self.trip_day is not None:
            result['trip_day'] = self.trip_day
        if self.trip_title is not None:
            result['trip_title'] = self.trip_title
        if self.union_no is not None:
            result['union_no'] = self.union_no
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        if self.vehicle_budget is not None:
            result['vehicle_budget'] = self.vehicle_budget
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('budget') is not None:
            self.budget = m.get('budget')
        if m.get('budget_merge') is not None:
            self.budget_merge = m.get('budget_merge')
        if m.get('corp_name') is not None:
            self.corp_name = m.get('corp_name')
        if m.get('depart_id') is not None:
            self.depart_id = m.get('depart_id')
        if m.get('depart_name') is not None:
            self.depart_name = m.get('depart_name')
        if m.get('extend_field') is not None:
            self.extend_field = m.get('extend_field')
        if m.get('external_traveler_list') is not None:
            self.external_traveler_list_shrink = m.get('external_traveler_list')
        if m.get('external_traveler_standard') is not None:
            self.external_traveler_standard_shrink = m.get('external_traveler_standard')
        if m.get('flight_budget') is not None:
            self.flight_budget = m.get('flight_budget')
        if m.get('hotel_budget') is not None:
            self.hotel_budget = m.get('hotel_budget')
        if m.get('hotel_share') is not None:
            self.hotel_share_shrink = m.get('hotel_share')
        if m.get('itinerary_list') is not None:
            self.itinerary_list_shrink = m.get('itinerary_list')
        if m.get('itinerary_rule') is not None:
            self.itinerary_rule = m.get('itinerary_rule')
        if m.get('itinerary_set_list') is not None:
            self.itinerary_set_list_shrink = m.get('itinerary_set_list')
        if m.get('limit_traveler') is not None:
            self.limit_traveler = m.get('limit_traveler')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('sub_corp_id') is not None:
            self.sub_corp_id = m.get('sub_corp_id')
        if m.get('thirdpart_apply_id') is not None:
            self.thirdpart_apply_id = m.get('thirdpart_apply_id')
        if m.get('thirdpart_business_id') is not None:
            self.thirdpart_business_id = m.get('thirdpart_business_id')
        if m.get('thirdpart_depart_id') is not None:
            self.thirdpart_depart_id = m.get('thirdpart_depart_id')
        if m.get('together_book_rule') is not None:
            self.together_book_rule = m.get('together_book_rule')
        if m.get('train_budget') is not None:
            self.train_budget = m.get('train_budget')
        if m.get('traveler_list') is not None:
            self.traveler_list_shrink = m.get('traveler_list')
        if m.get('traveler_standard') is not None:
            self.traveler_standard_shrink = m.get('traveler_standard')
        if m.get('trip_cause') is not None:
            self.trip_cause = m.get('trip_cause')
        if m.get('trip_day') is not None:
            self.trip_day = m.get('trip_day')
        if m.get('trip_title') is not None:
            self.trip_title = m.get('trip_title')
        if m.get('union_no') is not None:
            self.union_no = m.get('union_no')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        if m.get('vehicle_budget') is not None:
            self.vehicle_budget = m.get('vehicle_budget')
        return self


class ApplyModifyResponseBodyModule(TeaModel):
    def __init__(self, apply_id=None, thirdpart_apply_id=None, thirdpart_business_id=None):
        self.apply_id = apply_id  # type: long
        self.thirdpart_apply_id = thirdpart_apply_id  # type: str
        self.thirdpart_business_id = thirdpart_business_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ApplyModifyResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.thirdpart_apply_id is not None:
            result['thirdpart_apply_id'] = self.thirdpart_apply_id
        if self.thirdpart_business_id is not None:
            result['thirdpart_business_id'] = self.thirdpart_business_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('thirdpart_apply_id') is not None:
            self.thirdpart_apply_id = m.get('thirdpart_apply_id')
        if m.get('thirdpart_business_id') is not None:
            self.thirdpart_business_id = m.get('thirdpart_business_id')
        return self


class ApplyModifyResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        # module。
        self.module = module  # type: ApplyModifyResponseBodyModule
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(ApplyModifyResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = ApplyModifyResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class ApplyModifyResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ApplyModifyResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ApplyModifyResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ApplyModifyResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ApplyQueryHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_so_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ApplyQueryHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class ApplyQueryRequest(TeaModel):
    def __init__(self, apply_id=None, apply_show_id=None, sub_corp_id=None, thirdpart_apply_id=None, type=None):
        self.apply_id = apply_id  # type: int
        self.apply_show_id = apply_show_id  # type: str
        self.sub_corp_id = sub_corp_id  # type: str
        self.thirdpart_apply_id = thirdpart_apply_id  # type: str
        self.type = type  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(ApplyQueryRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.apply_show_id is not None:
            result['apply_show_id'] = self.apply_show_id
        if self.sub_corp_id is not None:
            result['sub_corp_id'] = self.sub_corp_id
        if self.thirdpart_apply_id is not None:
            result['thirdpart_apply_id'] = self.thirdpart_apply_id
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('apply_show_id') is not None:
            self.apply_show_id = m.get('apply_show_id')
        if m.get('sub_corp_id') is not None:
            self.sub_corp_id = m.get('sub_corp_id')
        if m.get('thirdpart_apply_id') is not None:
            self.thirdpart_apply_id = m.get('thirdpart_apply_id')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class ApplyQueryResponseBodyModuleApproverList(TeaModel):
    def __init__(self, note=None, operate_time=None, order=None, status=None, status_desc=None, user_id=None,
                 user_name=None):
        self.note = note  # type: str
        self.operate_time = operate_time  # type: str
        self.order = order  # type: int
        self.status = status  # type: int
        self.status_desc = status_desc  # type: str
        self.user_id = user_id  # type: str
        self.user_name = user_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ApplyQueryResponseBodyModuleApproverList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.note is not None:
            result['note'] = self.note
        if self.operate_time is not None:
            result['operate_time'] = self.operate_time
        if self.order is not None:
            result['order'] = self.order
        if self.status is not None:
            result['status'] = self.status
        if self.status_desc is not None:
            result['status_desc'] = self.status_desc
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('note') is not None:
            self.note = m.get('note')
        if m.get('operate_time') is not None:
            self.operate_time = m.get('operate_time')
        if m.get('order') is not None:
            self.order = m.get('order')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('status_desc') is not None:
            self.status_desc = m.get('status_desc')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class ApplyQueryResponseBodyModuleExternalTravelerListHotelCitys(TeaModel):
    def __init__(self, city_code=None, city_name=None, fee=None):
        self.city_code = city_code  # type: str
        self.city_name = city_name  # type: str
        self.fee = fee  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ApplyQueryResponseBodyModuleExternalTravelerListHotelCitys, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.fee is not None:
            result['fee'] = self.fee
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('fee') is not None:
            self.fee = m.get('fee')
        return self


class ApplyQueryResponseBodyModuleExternalTravelerList(TeaModel):
    def __init__(self, business_discount=None, economy_discount=None, first_discount=None, flight_cabins=None,
                 hotel_citys=None, premium_economy_discount=None, reserve_type=None, train_seats=None, user_name=None):
        self.business_discount = business_discount  # type: int
        self.economy_discount = economy_discount  # type: int
        self.first_discount = first_discount  # type: int
        self.flight_cabins = flight_cabins  # type: str
        self.hotel_citys = hotel_citys  # type: list[ApplyQueryResponseBodyModuleExternalTravelerListHotelCitys]
        self.premium_economy_discount = premium_economy_discount  # type: int
        self.reserve_type = reserve_type  # type: int
        self.train_seats = train_seats  # type: str
        self.user_name = user_name  # type: str

    def validate(self):
        if self.hotel_citys:
            for k in self.hotel_citys:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ApplyQueryResponseBodyModuleExternalTravelerList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.business_discount is not None:
            result['business_discount'] = self.business_discount
        if self.economy_discount is not None:
            result['economy_discount'] = self.economy_discount
        if self.first_discount is not None:
            result['first_discount'] = self.first_discount
        if self.flight_cabins is not None:
            result['flight_cabins'] = self.flight_cabins
        result['hotel_citys'] = []
        if self.hotel_citys is not None:
            for k in self.hotel_citys:
                result['hotel_citys'].append(k.to_map() if k else None)
        if self.premium_economy_discount is not None:
            result['premium_economy_discount'] = self.premium_economy_discount
        if self.reserve_type is not None:
            result['reserve_type'] = self.reserve_type
        if self.train_seats is not None:
            result['train_seats'] = self.train_seats
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('business_discount') is not None:
            self.business_discount = m.get('business_discount')
        if m.get('economy_discount') is not None:
            self.economy_discount = m.get('economy_discount')
        if m.get('first_discount') is not None:
            self.first_discount = m.get('first_discount')
        if m.get('flight_cabins') is not None:
            self.flight_cabins = m.get('flight_cabins')
        self.hotel_citys = []
        if m.get('hotel_citys') is not None:
            for k in m.get('hotel_citys'):
                temp_model = ApplyQueryResponseBodyModuleExternalTravelerListHotelCitys()
                self.hotel_citys.append(temp_model.from_map(k))
        if m.get('premium_economy_discount') is not None:
            self.premium_economy_discount = m.get('premium_economy_discount')
        if m.get('reserve_type') is not None:
            self.reserve_type = m.get('reserve_type')
        if m.get('train_seats') is not None:
            self.train_seats = m.get('train_seats')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class ApplyQueryResponseBodyModuleHotelShare(TeaModel):
    def __init__(self, param=None, type=None):
        self.param = param  # type: str
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ApplyQueryResponseBodyModuleHotelShare, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.param is not None:
            result['param'] = self.param
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('param') is not None:
            self.param = m.get('param')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class ApplyQueryResponseBodyModuleItineraryListItineraryTravelStandard(TeaModel):
    def __init__(self, hotel_available_nights_per_day=None):
        self.hotel_available_nights_per_day = hotel_available_nights_per_day  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(ApplyQueryResponseBodyModuleItineraryListItineraryTravelStandard, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.hotel_available_nights_per_day is not None:
            result['hotel_available_nights_per_day'] = self.hotel_available_nights_per_day
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('hotel_available_nights_per_day') is not None:
            self.hotel_available_nights_per_day = m.get('hotel_available_nights_per_day')
        return self


class ApplyQueryResponseBodyModuleItineraryList(TeaModel):
    def __init__(self, arr_city=None, arr_city_code=None, arr_date=None, cost_center_name=None, dep_city=None,
                 dep_city_code=None, dep_date=None, invoice_name=None, itinerary_id=None, itinerary_travel_standard=None,
                 project_code=None, project_title=None, thirdpart_itinerary_id=None, traffic_type=None, trip_way=None):
        self.arr_city = arr_city  # type: str
        self.arr_city_code = arr_city_code  # type: str
        self.arr_date = arr_date  # type: str
        self.cost_center_name = cost_center_name  # type: str
        self.dep_city = dep_city  # type: str
        self.dep_city_code = dep_city_code  # type: str
        self.dep_date = dep_date  # type: str
        self.invoice_name = invoice_name  # type: str
        self.itinerary_id = itinerary_id  # type: str
        self.itinerary_travel_standard = itinerary_travel_standard  # type: ApplyQueryResponseBodyModuleItineraryListItineraryTravelStandard
        self.project_code = project_code  # type: str
        self.project_title = project_title  # type: str
        self.thirdpart_itinerary_id = thirdpart_itinerary_id  # type: str
        self.traffic_type = traffic_type  # type: int
        self.trip_way = trip_way  # type: int

    def validate(self):
        if self.itinerary_travel_standard:
            self.itinerary_travel_standard.validate()

    def to_map(self):
        _map = super(ApplyQueryResponseBodyModuleItineraryList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_city is not None:
            result['arr_city'] = self.arr_city
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.arr_date is not None:
            result['arr_date'] = self.arr_date
        if self.cost_center_name is not None:
            result['cost_center_name'] = self.cost_center_name
        if self.dep_city is not None:
            result['dep_city'] = self.dep_city
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        if self.invoice_name is not None:
            result['invoice_name'] = self.invoice_name
        if self.itinerary_id is not None:
            result['itinerary_id'] = self.itinerary_id
        if self.itinerary_travel_standard is not None:
            result['itinerary_travel_standard'] = self.itinerary_travel_standard.to_map()
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_title is not None:
            result['project_title'] = self.project_title
        if self.thirdpart_itinerary_id is not None:
            result['thirdpart_itinerary_id'] = self.thirdpart_itinerary_id
        if self.traffic_type is not None:
            result['traffic_type'] = self.traffic_type
        if self.trip_way is not None:
            result['trip_way'] = self.trip_way
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('arr_city') is not None:
            self.arr_city = m.get('arr_city')
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('arr_date') is not None:
            self.arr_date = m.get('arr_date')
        if m.get('cost_center_name') is not None:
            self.cost_center_name = m.get('cost_center_name')
        if m.get('dep_city') is not None:
            self.dep_city = m.get('dep_city')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        if m.get('invoice_name') is not None:
            self.invoice_name = m.get('invoice_name')
        if m.get('itinerary_id') is not None:
            self.itinerary_id = m.get('itinerary_id')
        if m.get('itinerary_travel_standard') is not None:
            temp_model = ApplyQueryResponseBodyModuleItineraryListItineraryTravelStandard()
            self.itinerary_travel_standard = temp_model.from_map(m['itinerary_travel_standard'])
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_title') is not None:
            self.project_title = m.get('project_title')
        if m.get('thirdpart_itinerary_id') is not None:
            self.thirdpart_itinerary_id = m.get('thirdpart_itinerary_id')
        if m.get('traffic_type') is not None:
            self.traffic_type = m.get('traffic_type')
        if m.get('trip_way') is not None:
            self.trip_way = m.get('trip_way')
        return self


class ApplyQueryResponseBodyModuleItinerarySetListItineraryTravelStandard(TeaModel):
    def __init__(self, hotel_available_nights_per_day=None):
        self.hotel_available_nights_per_day = hotel_available_nights_per_day  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(ApplyQueryResponseBodyModuleItinerarySetListItineraryTravelStandard, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.hotel_available_nights_per_day is not None:
            result['hotel_available_nights_per_day'] = self.hotel_available_nights_per_day
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('hotel_available_nights_per_day') is not None:
            self.hotel_available_nights_per_day = m.get('hotel_available_nights_per_day')
        return self


class ApplyQueryResponseBodyModuleItinerarySetList(TeaModel):
    def __init__(self, arr_date=None, city_code_set=None, city_set=None, cost_center_name=None, dep_date=None,
                 invoice_name=None, itinerary_id=None, itinerary_travel_standard=None, project_code=None, project_title=None,
                 thirdpart_itinerary_id=None, traffic_type=None):
        self.arr_date = arr_date  # type: str
        self.city_code_set = city_code_set  # type: str
        self.city_set = city_set  # type: str
        self.cost_center_name = cost_center_name  # type: str
        self.dep_date = dep_date  # type: str
        self.invoice_name = invoice_name  # type: str
        self.itinerary_id = itinerary_id  # type: str
        self.itinerary_travel_standard = itinerary_travel_standard  # type: ApplyQueryResponseBodyModuleItinerarySetListItineraryTravelStandard
        self.project_code = project_code  # type: str
        self.project_title = project_title  # type: str
        self.thirdpart_itinerary_id = thirdpart_itinerary_id  # type: str
        self.traffic_type = traffic_type  # type: int

    def validate(self):
        if self.itinerary_travel_standard:
            self.itinerary_travel_standard.validate()

    def to_map(self):
        _map = super(ApplyQueryResponseBodyModuleItinerarySetList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_date is not None:
            result['arr_date'] = self.arr_date
        if self.city_code_set is not None:
            result['city_code_set'] = self.city_code_set
        if self.city_set is not None:
            result['city_set'] = self.city_set
        if self.cost_center_name is not None:
            result['cost_center_name'] = self.cost_center_name
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        if self.invoice_name is not None:
            result['invoice_name'] = self.invoice_name
        if self.itinerary_id is not None:
            result['itinerary_id'] = self.itinerary_id
        if self.itinerary_travel_standard is not None:
            result['itinerary_travel_standard'] = self.itinerary_travel_standard.to_map()
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_title is not None:
            result['project_title'] = self.project_title
        if self.thirdpart_itinerary_id is not None:
            result['thirdpart_itinerary_id'] = self.thirdpart_itinerary_id
        if self.traffic_type is not None:
            result['traffic_type'] = self.traffic_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('arr_date') is not None:
            self.arr_date = m.get('arr_date')
        if m.get('city_code_set') is not None:
            self.city_code_set = m.get('city_code_set')
        if m.get('city_set') is not None:
            self.city_set = m.get('city_set')
        if m.get('cost_center_name') is not None:
            self.cost_center_name = m.get('cost_center_name')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        if m.get('invoice_name') is not None:
            self.invoice_name = m.get('invoice_name')
        if m.get('itinerary_id') is not None:
            self.itinerary_id = m.get('itinerary_id')
        if m.get('itinerary_travel_standard') is not None:
            temp_model = ApplyQueryResponseBodyModuleItinerarySetListItineraryTravelStandard()
            self.itinerary_travel_standard = temp_model.from_map(m['itinerary_travel_standard'])
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_title') is not None:
            self.project_title = m.get('project_title')
        if m.get('thirdpart_itinerary_id') is not None:
            self.thirdpart_itinerary_id = m.get('thirdpart_itinerary_id')
        if m.get('traffic_type') is not None:
            self.traffic_type = m.get('traffic_type')
        return self


class ApplyQueryResponseBodyModuleTravelerListHotelCitys(TeaModel):
    def __init__(self, city_code=None, city_name=None, fee=None):
        self.city_code = city_code  # type: str
        self.city_name = city_name  # type: str
        self.fee = fee  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(ApplyQueryResponseBodyModuleTravelerListHotelCitys, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.fee is not None:
            result['fee'] = self.fee
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('fee') is not None:
            self.fee = m.get('fee')
        return self


class ApplyQueryResponseBodyModuleTravelerList(TeaModel):
    def __init__(self, business_discount=None, economy_discount=None, first_discount=None, flight_cabins=None,
                 hotel_citys=None, premium_economy_discount=None, reserve_type=None, train_seats=None, user_id=None,
                 user_name=None):
        self.business_discount = business_discount  # type: int
        self.economy_discount = economy_discount  # type: int
        self.first_discount = first_discount  # type: int
        self.flight_cabins = flight_cabins  # type: str
        self.hotel_citys = hotel_citys  # type: list[ApplyQueryResponseBodyModuleTravelerListHotelCitys]
        self.premium_economy_discount = premium_economy_discount  # type: int
        self.reserve_type = reserve_type  # type: int
        self.train_seats = train_seats  # type: str
        self.user_id = user_id  # type: str
        self.user_name = user_name  # type: str

    def validate(self):
        if self.hotel_citys:
            for k in self.hotel_citys:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ApplyQueryResponseBodyModuleTravelerList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.business_discount is not None:
            result['business_discount'] = self.business_discount
        if self.economy_discount is not None:
            result['economy_discount'] = self.economy_discount
        if self.first_discount is not None:
            result['first_discount'] = self.first_discount
        if self.flight_cabins is not None:
            result['flight_cabins'] = self.flight_cabins
        result['hotel_citys'] = []
        if self.hotel_citys is not None:
            for k in self.hotel_citys:
                result['hotel_citys'].append(k.to_map() if k else None)
        if self.premium_economy_discount is not None:
            result['premium_economy_discount'] = self.premium_economy_discount
        if self.reserve_type is not None:
            result['reserve_type'] = self.reserve_type
        if self.train_seats is not None:
            result['train_seats'] = self.train_seats
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('business_discount') is not None:
            self.business_discount = m.get('business_discount')
        if m.get('economy_discount') is not None:
            self.economy_discount = m.get('economy_discount')
        if m.get('first_discount') is not None:
            self.first_discount = m.get('first_discount')
        if m.get('flight_cabins') is not None:
            self.flight_cabins = m.get('flight_cabins')
        self.hotel_citys = []
        if m.get('hotel_citys') is not None:
            for k in m.get('hotel_citys'):
                temp_model = ApplyQueryResponseBodyModuleTravelerListHotelCitys()
                self.hotel_citys.append(temp_model.from_map(k))
        if m.get('premium_economy_discount') is not None:
            self.premium_economy_discount = m.get('premium_economy_discount')
        if m.get('reserve_type') is not None:
            self.reserve_type = m.get('reserve_type')
        if m.get('train_seats') is not None:
            self.train_seats = m.get('train_seats')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class ApplyQueryResponseBodyModule(TeaModel):
    def __init__(self, apply_show_id=None, approver_list=None, budget=None, budget_merge=None, corp_id=None,
                 corp_name=None, depart_id=None, depart_name=None, extend_field=None, external_traveler_list=None,
                 flight_budget=None, gmt_create=None, gmt_modified=None, hotel_budget=None, hotel_share=None, id=None,
                 itinerary_list=None, itinerary_rule=None, itinerary_set_list=None, limit_traveler=None, status=None,
                 status_desc=None, thirdpart_business_id=None, thirdpart_id=None, together_book_rule=None, train_budget=None,
                 traveler_list=None, trip_cause=None, trip_day=None, trip_title=None, type=None, union_no=None, user_id=None,
                 user_name=None, vehicle_budget=None):
        self.apply_show_id = apply_show_id  # type: str
        self.approver_list = approver_list  # type: list[ApplyQueryResponseBodyModuleApproverList]
        self.budget = budget  # type: long
        self.budget_merge = budget_merge  # type: int
        self.corp_id = corp_id  # type: str
        self.corp_name = corp_name  # type: str
        self.depart_id = depart_id  # type: str
        self.depart_name = depart_name  # type: str
        # 补充描述，账单中将会体现此字段的值。可以用于企业的统计和对账
        self.extend_field = extend_field  # type: str
        self.external_traveler_list = external_traveler_list  # type: list[ApplyQueryResponseBodyModuleExternalTravelerList]
        self.flight_budget = flight_budget  # type: long
        self.gmt_create = gmt_create  # type: str
        self.gmt_modified = gmt_modified  # type: str
        self.hotel_budget = hotel_budget  # type: long
        self.hotel_share = hotel_share  # type: ApplyQueryResponseBodyModuleHotelShare
        self.id = id  # type: long
        self.itinerary_list = itinerary_list  # type: list[ApplyQueryResponseBodyModuleItineraryList]
        self.itinerary_rule = itinerary_rule  # type: int
        self.itinerary_set_list = itinerary_set_list  # type: list[ApplyQueryResponseBodyModuleItinerarySetList]
        self.limit_traveler = limit_traveler  # type: int
        self.status = status  # type: int
        self.status_desc = status_desc  # type: str
        self.thirdpart_business_id = thirdpart_business_id  # type: str
        self.thirdpart_id = thirdpart_id  # type: str
        self.together_book_rule = together_book_rule  # type: int
        self.train_budget = train_budget  # type: long
        self.traveler_list = traveler_list  # type: list[ApplyQueryResponseBodyModuleTravelerList]
        self.trip_cause = trip_cause  # type: str
        self.trip_day = trip_day  # type: int
        self.trip_title = trip_title  # type: str
        self.type = type  # type: int
        self.union_no = union_no  # type: str
        self.user_id = user_id  # type: str
        self.user_name = user_name  # type: str
        self.vehicle_budget = vehicle_budget  # type: long

    def validate(self):
        if self.approver_list:
            for k in self.approver_list:
                if k:
                    k.validate()
        if self.external_traveler_list:
            for k in self.external_traveler_list:
                if k:
                    k.validate()
        if self.hotel_share:
            self.hotel_share.validate()
        if self.itinerary_list:
            for k in self.itinerary_list:
                if k:
                    k.validate()
        if self.itinerary_set_list:
            for k in self.itinerary_set_list:
                if k:
                    k.validate()
        if self.traveler_list:
            for k in self.traveler_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(ApplyQueryResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_show_id is not None:
            result['apply_show_id'] = self.apply_show_id
        result['approver_list'] = []
        if self.approver_list is not None:
            for k in self.approver_list:
                result['approver_list'].append(k.to_map() if k else None)
        if self.budget is not None:
            result['budget'] = self.budget
        if self.budget_merge is not None:
            result['budget_merge'] = self.budget_merge
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        if self.corp_name is not None:
            result['corp_name'] = self.corp_name
        if self.depart_id is not None:
            result['depart_id'] = self.depart_id
        if self.depart_name is not None:
            result['depart_name'] = self.depart_name
        if self.extend_field is not None:
            result['extend_field'] = self.extend_field
        result['external_traveler_list'] = []
        if self.external_traveler_list is not None:
            for k in self.external_traveler_list:
                result['external_traveler_list'].append(k.to_map() if k else None)
        if self.flight_budget is not None:
            result['flight_budget'] = self.flight_budget
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.gmt_modified is not None:
            result['gmt_modified'] = self.gmt_modified
        if self.hotel_budget is not None:
            result['hotel_budget'] = self.hotel_budget
        if self.hotel_share is not None:
            result['hotel_share'] = self.hotel_share.to_map()
        if self.id is not None:
            result['id'] = self.id
        result['itinerary_list'] = []
        if self.itinerary_list is not None:
            for k in self.itinerary_list:
                result['itinerary_list'].append(k.to_map() if k else None)
        if self.itinerary_rule is not None:
            result['itinerary_rule'] = self.itinerary_rule
        result['itinerary_set_list'] = []
        if self.itinerary_set_list is not None:
            for k in self.itinerary_set_list:
                result['itinerary_set_list'].append(k.to_map() if k else None)
        if self.limit_traveler is not None:
            result['limit_traveler'] = self.limit_traveler
        if self.status is not None:
            result['status'] = self.status
        if self.status_desc is not None:
            result['status_desc'] = self.status_desc
        if self.thirdpart_business_id is not None:
            result['thirdpart_business_id'] = self.thirdpart_business_id
        if self.thirdpart_id is not None:
            result['thirdpart_id'] = self.thirdpart_id
        if self.together_book_rule is not None:
            result['together_book_rule'] = self.together_book_rule
        if self.train_budget is not None:
            result['train_budget'] = self.train_budget
        result['traveler_list'] = []
        if self.traveler_list is not None:
            for k in self.traveler_list:
                result['traveler_list'].append(k.to_map() if k else None)
        if self.trip_cause is not None:
            result['trip_cause'] = self.trip_cause
        if self.trip_day is not None:
            result['trip_day'] = self.trip_day
        if self.trip_title is not None:
            result['trip_title'] = self.trip_title
        if self.type is not None:
            result['type'] = self.type
        if self.union_no is not None:
            result['union_no'] = self.union_no
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        if self.vehicle_budget is not None:
            result['vehicle_budget'] = self.vehicle_budget
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('apply_show_id') is not None:
            self.apply_show_id = m.get('apply_show_id')
        self.approver_list = []
        if m.get('approver_list') is not None:
            for k in m.get('approver_list'):
                temp_model = ApplyQueryResponseBodyModuleApproverList()
                self.approver_list.append(temp_model.from_map(k))
        if m.get('budget') is not None:
            self.budget = m.get('budget')
        if m.get('budget_merge') is not None:
            self.budget_merge = m.get('budget_merge')
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        if m.get('corp_name') is not None:
            self.corp_name = m.get('corp_name')
        if m.get('depart_id') is not None:
            self.depart_id = m.get('depart_id')
        if m.get('depart_name') is not None:
            self.depart_name = m.get('depart_name')
        if m.get('extend_field') is not None:
            self.extend_field = m.get('extend_field')
        self.external_traveler_list = []
        if m.get('external_traveler_list') is not None:
            for k in m.get('external_traveler_list'):
                temp_model = ApplyQueryResponseBodyModuleExternalTravelerList()
                self.external_traveler_list.append(temp_model.from_map(k))
        if m.get('flight_budget') is not None:
            self.flight_budget = m.get('flight_budget')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('gmt_modified') is not None:
            self.gmt_modified = m.get('gmt_modified')
        if m.get('hotel_budget') is not None:
            self.hotel_budget = m.get('hotel_budget')
        if m.get('hotel_share') is not None:
            temp_model = ApplyQueryResponseBodyModuleHotelShare()
            self.hotel_share = temp_model.from_map(m['hotel_share'])
        if m.get('id') is not None:
            self.id = m.get('id')
        self.itinerary_list = []
        if m.get('itinerary_list') is not None:
            for k in m.get('itinerary_list'):
                temp_model = ApplyQueryResponseBodyModuleItineraryList()
                self.itinerary_list.append(temp_model.from_map(k))
        if m.get('itinerary_rule') is not None:
            self.itinerary_rule = m.get('itinerary_rule')
        self.itinerary_set_list = []
        if m.get('itinerary_set_list') is not None:
            for k in m.get('itinerary_set_list'):
                temp_model = ApplyQueryResponseBodyModuleItinerarySetList()
                self.itinerary_set_list.append(temp_model.from_map(k))
        if m.get('limit_traveler') is not None:
            self.limit_traveler = m.get('limit_traveler')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('status_desc') is not None:
            self.status_desc = m.get('status_desc')
        if m.get('thirdpart_business_id') is not None:
            self.thirdpart_business_id = m.get('thirdpart_business_id')
        if m.get('thirdpart_id') is not None:
            self.thirdpart_id = m.get('thirdpart_id')
        if m.get('together_book_rule') is not None:
            self.together_book_rule = m.get('together_book_rule')
        if m.get('train_budget') is not None:
            self.train_budget = m.get('train_budget')
        self.traveler_list = []
        if m.get('traveler_list') is not None:
            for k in m.get('traveler_list'):
                temp_model = ApplyQueryResponseBodyModuleTravelerList()
                self.traveler_list.append(temp_model.from_map(k))
        if m.get('trip_cause') is not None:
            self.trip_cause = m.get('trip_cause')
        if m.get('trip_day') is not None:
            self.trip_day = m.get('trip_day')
        if m.get('trip_title') is not None:
            self.trip_title = m.get('trip_title')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('union_no') is not None:
            self.union_no = m.get('union_no')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        if m.get('vehicle_budget') is not None:
            self.vehicle_budget = m.get('vehicle_budget')
        return self


class ApplyQueryResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: ApplyQueryResponseBodyModule
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(ApplyQueryResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = ApplyQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class ApplyQueryResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ApplyQueryResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ApplyQueryResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ApplyQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class BtripBillInfoAdjustHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(BtripBillInfoAdjustHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class BtripBillInfoAdjustRequest(TeaModel):
    def __init__(self, primary_id=None, third_part_cost_center_id=None, third_part_department_id=None,
                 third_part_invoice_id=None, third_part_project_id=None, user_id=None):
        self.primary_id = primary_id  # type: long
        self.third_part_cost_center_id = third_part_cost_center_id  # type: str
        self.third_part_department_id = third_part_department_id  # type: str
        self.third_part_invoice_id = third_part_invoice_id  # type: str
        self.third_part_project_id = third_part_project_id  # type: str
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(BtripBillInfoAdjustRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.primary_id is not None:
            result['primary_id'] = self.primary_id
        if self.third_part_cost_center_id is not None:
            result['third_part_cost_center_id'] = self.third_part_cost_center_id
        if self.third_part_department_id is not None:
            result['third_part_department_id'] = self.third_part_department_id
        if self.third_part_invoice_id is not None:
            result['third_part_invoice_id'] = self.third_part_invoice_id
        if self.third_part_project_id is not None:
            result['third_part_project_id'] = self.third_part_project_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('primary_id') is not None:
            self.primary_id = m.get('primary_id')
        if m.get('third_part_cost_center_id') is not None:
            self.third_part_cost_center_id = m.get('third_part_cost_center_id')
        if m.get('third_part_department_id') is not None:
            self.third_part_department_id = m.get('third_part_department_id')
        if m.get('third_part_invoice_id') is not None:
            self.third_part_invoice_id = m.get('third_part_invoice_id')
        if m.get('third_part_project_id') is not None:
            self.third_part_project_id = m.get('third_part_project_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class BtripBillInfoAdjustResponseBody(TeaModel):
    def __init__(self, code=None, message=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(BtripBillInfoAdjustResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class BtripBillInfoAdjustResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: BtripBillInfoAdjustResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(BtripBillInfoAdjustResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = BtripBillInfoAdjustResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CarApplyAddHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_so_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CarApplyAddHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class CarApplyAddRequest(TeaModel):
    def __init__(self, cause=None, city=None, date=None, finished_date=None, project_code=None, project_name=None,
                 status=None, third_part_apply_id=None, third_part_cost_center_id=None, third_part_invoice_id=None,
                 times_total=None, times_type=None, times_used=None, title=None, user_id=None):
        self.cause = cause  # type: str
        self.city = city  # type: str
        self.date = date  # type: str
        self.finished_date = finished_date  # type: str
        self.project_code = project_code  # type: str
        self.project_name = project_name  # type: str
        self.status = status  # type: int
        self.third_part_apply_id = third_part_apply_id  # type: str
        self.third_part_cost_center_id = third_part_cost_center_id  # type: str
        self.third_part_invoice_id = third_part_invoice_id  # type: str
        self.times_total = times_total  # type: int
        self.times_type = times_type  # type: int
        self.times_used = times_used  # type: int
        self.title = title  # type: str
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CarApplyAddRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cause is not None:
            result['cause'] = self.cause
        if self.city is not None:
            result['city'] = self.city
        if self.date is not None:
            result['date'] = self.date
        if self.finished_date is not None:
            result['finished_date'] = self.finished_date
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_name is not None:
            result['project_name'] = self.project_name
        if self.status is not None:
            result['status'] = self.status
        if self.third_part_apply_id is not None:
            result['third_part_apply_id'] = self.third_part_apply_id
        if self.third_part_cost_center_id is not None:
            result['third_part_cost_center_id'] = self.third_part_cost_center_id
        if self.third_part_invoice_id is not None:
            result['third_part_invoice_id'] = self.third_part_invoice_id
        if self.times_total is not None:
            result['times_total'] = self.times_total
        if self.times_type is not None:
            result['times_type'] = self.times_type
        if self.times_used is not None:
            result['times_used'] = self.times_used
        if self.title is not None:
            result['title'] = self.title
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('cause') is not None:
            self.cause = m.get('cause')
        if m.get('city') is not None:
            self.city = m.get('city')
        if m.get('date') is not None:
            self.date = m.get('date')
        if m.get('finished_date') is not None:
            self.finished_date = m.get('finished_date')
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_name') is not None:
            self.project_name = m.get('project_name')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('third_part_apply_id') is not None:
            self.third_part_apply_id = m.get('third_part_apply_id')
        if m.get('third_part_cost_center_id') is not None:
            self.third_part_cost_center_id = m.get('third_part_cost_center_id')
        if m.get('third_part_invoice_id') is not None:
            self.third_part_invoice_id = m.get('third_part_invoice_id')
        if m.get('times_total') is not None:
            self.times_total = m.get('times_total')
        if m.get('times_type') is not None:
            self.times_type = m.get('times_type')
        if m.get('times_used') is not None:
            self.times_used = m.get('times_used')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class CarApplyAddResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: long
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CarApplyAddResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            self.module = m.get('module')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class CarApplyAddResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CarApplyAddResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CarApplyAddResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CarApplyAddResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CarApplyModifyHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_so_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CarApplyModifyHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class CarApplyModifyRequest(TeaModel):
    def __init__(self, operate_time=None, remark=None, status=None, third_part_apply_id=None, user_id=None):
        self.operate_time = operate_time  # type: str
        self.remark = remark  # type: str
        self.status = status  # type: int
        self.third_part_apply_id = third_part_apply_id  # type: str
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CarApplyModifyRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.operate_time is not None:
            result['operate_time'] = self.operate_time
        if self.remark is not None:
            result['remark'] = self.remark
        if self.status is not None:
            result['status'] = self.status
        if self.third_part_apply_id is not None:
            result['third_part_apply_id'] = self.third_part_apply_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('operate_time') is not None:
            self.operate_time = m.get('operate_time')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('third_part_apply_id') is not None:
            self.third_part_apply_id = m.get('third_part_apply_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class CarApplyModifyResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        # module。
        self.module = module  # type: bool
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CarApplyModifyResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            self.module = m.get('module')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class CarApplyModifyResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CarApplyModifyResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CarApplyModifyResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CarApplyModifyResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CarApplyQueryHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_so_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CarApplyQueryHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class CarApplyQueryRequest(TeaModel):
    def __init__(self, created_end_at=None, created_start_at=None, page_number=None, page_size=None,
                 third_part_apply_id=None, user_id=None):
        self.created_end_at = created_end_at  # type: str
        self.created_start_at = created_start_at  # type: str
        self.page_number = page_number  # type: int
        self.page_size = page_size  # type: int
        self.third_part_apply_id = third_part_apply_id  # type: str
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CarApplyQueryRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.created_end_at is not None:
            result['created_end_at'] = self.created_end_at
        if self.created_start_at is not None:
            result['created_start_at'] = self.created_start_at
        if self.page_number is not None:
            result['page_number'] = self.page_number
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.third_part_apply_id is not None:
            result['third_part_apply_id'] = self.third_part_apply_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('created_end_at') is not None:
            self.created_end_at = m.get('created_end_at')
        if m.get('created_start_at') is not None:
            self.created_start_at = m.get('created_start_at')
        if m.get('page_number') is not None:
            self.page_number = m.get('page_number')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('third_part_apply_id') is not None:
            self.third_part_apply_id = m.get('third_part_apply_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class CarApplyQueryResponseBodyApplyListApproverList(TeaModel):
    def __init__(self, note=None, operate_time=None, order=None, status=None, status_desc=None, user_id=None,
                 user_name=None):
        self.note = note  # type: str
        self.operate_time = operate_time  # type: str
        self.order = order  # type: int
        self.status = status  # type: int
        self.status_desc = status_desc  # type: str
        self.user_id = user_id  # type: str
        self.user_name = user_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CarApplyQueryResponseBodyApplyListApproverList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.note is not None:
            result['note'] = self.note
        if self.operate_time is not None:
            result['operate_time'] = self.operate_time
        if self.order is not None:
            result['order'] = self.order
        if self.status is not None:
            result['status'] = self.status
        if self.status_desc is not None:
            result['status_desc'] = self.status_desc
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('note') is not None:
            self.note = m.get('note')
        if m.get('operate_time') is not None:
            self.operate_time = m.get('operate_time')
        if m.get('order') is not None:
            self.order = m.get('order')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('status_desc') is not None:
            self.status_desc = m.get('status_desc')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class CarApplyQueryResponseBodyApplyListItineraryList(TeaModel):
    def __init__(self, arr_city=None, arr_city_code=None, arr_date=None, cost_center_id=None, cost_center_name=None,
                 dep_city=None, dep_city_code=None, dep_date=None, invoice_id=None, invoice_name=None, itinerary_id=None,
                 project_code=None, project_title=None, traffic_type=None):
        self.arr_city = arr_city  # type: str
        self.arr_city_code = arr_city_code  # type: str
        self.arr_date = arr_date  # type: str
        self.cost_center_id = cost_center_id  # type: long
        self.cost_center_name = cost_center_name  # type: str
        self.dep_city = dep_city  # type: str
        self.dep_city_code = dep_city_code  # type: str
        self.dep_date = dep_date  # type: str
        self.invoice_id = invoice_id  # type: long
        self.invoice_name = invoice_name  # type: str
        self.itinerary_id = itinerary_id  # type: str
        self.project_code = project_code  # type: str
        self.project_title = project_title  # type: str
        self.traffic_type = traffic_type  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(CarApplyQueryResponseBodyApplyListItineraryList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_city is not None:
            result['arr_city'] = self.arr_city
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.arr_date is not None:
            result['arr_date'] = self.arr_date
        if self.cost_center_id is not None:
            result['cost_center_id'] = self.cost_center_id
        if self.cost_center_name is not None:
            result['cost_center_name'] = self.cost_center_name
        if self.dep_city is not None:
            result['dep_city'] = self.dep_city
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        if self.invoice_id is not None:
            result['invoice_id'] = self.invoice_id
        if self.invoice_name is not None:
            result['invoice_name'] = self.invoice_name
        if self.itinerary_id is not None:
            result['itinerary_id'] = self.itinerary_id
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_title is not None:
            result['project_title'] = self.project_title
        if self.traffic_type is not None:
            result['traffic_type'] = self.traffic_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('arr_city') is not None:
            self.arr_city = m.get('arr_city')
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('arr_date') is not None:
            self.arr_date = m.get('arr_date')
        if m.get('cost_center_id') is not None:
            self.cost_center_id = m.get('cost_center_id')
        if m.get('cost_center_name') is not None:
            self.cost_center_name = m.get('cost_center_name')
        if m.get('dep_city') is not None:
            self.dep_city = m.get('dep_city')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        if m.get('invoice_id') is not None:
            self.invoice_id = m.get('invoice_id')
        if m.get('invoice_name') is not None:
            self.invoice_name = m.get('invoice_name')
        if m.get('itinerary_id') is not None:
            self.itinerary_id = m.get('itinerary_id')
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_title') is not None:
            self.project_title = m.get('project_title')
        if m.get('traffic_type') is not None:
            self.traffic_type = m.get('traffic_type')
        return self


class CarApplyQueryResponseBodyApplyList(TeaModel):
    def __init__(self, approver_list=None, depart_id=None, depart_name=None, gmt_create=None, gmt_modified=None,
                 itinerary_list=None, status=None, status_desc=None, thirdpart_id=None, trip_cause=None, trip_title=None,
                 user_id=None, user_name=None):
        self.approver_list = approver_list  # type: list[CarApplyQueryResponseBodyApplyListApproverList]
        self.depart_id = depart_id  # type: str
        self.depart_name = depart_name  # type: str
        self.gmt_create = gmt_create  # type: str
        self.gmt_modified = gmt_modified  # type: str
        self.itinerary_list = itinerary_list  # type: list[CarApplyQueryResponseBodyApplyListItineraryList]
        self.status = status  # type: int
        self.status_desc = status_desc  # type: str
        self.thirdpart_id = thirdpart_id  # type: str
        self.trip_cause = trip_cause  # type: str
        self.trip_title = trip_title  # type: str
        self.user_id = user_id  # type: str
        self.user_name = user_name  # type: str

    def validate(self):
        if self.approver_list:
            for k in self.approver_list:
                if k:
                    k.validate()
        if self.itinerary_list:
            for k in self.itinerary_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(CarApplyQueryResponseBodyApplyList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['approver_list'] = []
        if self.approver_list is not None:
            for k in self.approver_list:
                result['approver_list'].append(k.to_map() if k else None)
        if self.depart_id is not None:
            result['depart_id'] = self.depart_id
        if self.depart_name is not None:
            result['depart_name'] = self.depart_name
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.gmt_modified is not None:
            result['gmt_modified'] = self.gmt_modified
        result['itinerary_list'] = []
        if self.itinerary_list is not None:
            for k in self.itinerary_list:
                result['itinerary_list'].append(k.to_map() if k else None)
        if self.status is not None:
            result['status'] = self.status
        if self.status_desc is not None:
            result['status_desc'] = self.status_desc
        if self.thirdpart_id is not None:
            result['thirdpart_id'] = self.thirdpart_id
        if self.trip_cause is not None:
            result['trip_cause'] = self.trip_cause
        if self.trip_title is not None:
            result['trip_title'] = self.trip_title
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.approver_list = []
        if m.get('approver_list') is not None:
            for k in m.get('approver_list'):
                temp_model = CarApplyQueryResponseBodyApplyListApproverList()
                self.approver_list.append(temp_model.from_map(k))
        if m.get('depart_id') is not None:
            self.depart_id = m.get('depart_id')
        if m.get('depart_name') is not None:
            self.depart_name = m.get('depart_name')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('gmt_modified') is not None:
            self.gmt_modified = m.get('gmt_modified')
        self.itinerary_list = []
        if m.get('itinerary_list') is not None:
            for k in m.get('itinerary_list'):
                temp_model = CarApplyQueryResponseBodyApplyListItineraryList()
                self.itinerary_list.append(temp_model.from_map(k))
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('status_desc') is not None:
            self.status_desc = m.get('status_desc')
        if m.get('thirdpart_id') is not None:
            self.thirdpart_id = m.get('thirdpart_id')
        if m.get('trip_cause') is not None:
            self.trip_cause = m.get('trip_cause')
        if m.get('trip_title') is not None:
            self.trip_title = m.get('trip_title')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class CarApplyQueryResponseBody(TeaModel):
    def __init__(self, apply_list=None, code=None, message=None, request_id=None, success=None, total=None,
                 trace_id=None):
        self.apply_list = apply_list  # type: list[CarApplyQueryResponseBodyApplyList]
        self.code = code  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.total = total  # type: int
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.apply_list:
            for k in self.apply_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(CarApplyQueryResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['apply_list'] = []
        if self.apply_list is not None:
            for k in self.apply_list:
                result['apply_list'].append(k.to_map() if k else None)
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.total is not None:
            result['total'] = self.total
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.apply_list = []
        if m.get('apply_list') is not None:
            for k in m.get('apply_list'):
                temp_model = CarApplyQueryResponseBodyApplyList()
                self.apply_list.append(temp_model.from_map(k))
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('total') is not None:
            self.total = m.get('total')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class CarApplyQueryResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CarApplyQueryResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CarApplyQueryResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CarApplyQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CarBillSettlementQueryHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_so_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CarBillSettlementQueryHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class CarBillSettlementQueryRequest(TeaModel):
    def __init__(self, page_no=None, page_size=None, period_end=None, period_start=None):
        self.page_no = page_no  # type: int
        self.page_size = page_size  # type: int
        self.period_end = period_end  # type: str
        self.period_start = period_start  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CarBillSettlementQueryRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_no is not None:
            result['page_no'] = self.page_no
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.period_end is not None:
            result['period_end'] = self.period_end
        if self.period_start is not None:
            result['period_start'] = self.period_start
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('page_no') is not None:
            self.page_no = m.get('page_no')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('period_end') is not None:
            self.period_end = m.get('period_end')
        if m.get('period_start') is not None:
            self.period_start = m.get('period_start')
        return self


class CarBillSettlementQueryResponseBodyModuleDataList(TeaModel):
    def __init__(self, alipay_trade_no=None, apply_arr_city_code=None, apply_arr_city_name=None,
                 apply_dep_city_code=None, apply_dep_city_name=None, apply_extend_field=None, apply_id=None, arr_city=None,
                 arr_city_code=None, arr_date=None, arr_location=None, arr_time=None, bill_record_time=None, book_model=None,
                 book_time=None, booker_id=None, booker_job_no=None, booker_name=None, business_category=None,
                 capital_direction=None, car_level=None, cascade_department=None, cost_center=None, cost_center_number=None,
                 coupon=None, coupon_price=None, dep_city_code=None, department=None, department_id=None, dept_city=None,
                 dept_date=None, dept_location=None, dept_time=None, driver_add_detail=None, driver_add_fee=None,
                 estimate_drive_distance=None, estimate_price=None, fee_type=None, index=None, invoice_title=None, level_name=None,
                 memo=None, order_id=None, order_price=None, over_apply_id=None, person_settle_fee=None, primary_id=None,
                 project_code=None, project_name=None, provider_name=None, real_drive_distance=None, real_from_addr=None,
                 real_to_addr=None, remark=None, service_fee=None, settlement_fee=None, settlement_grant_fee=None,
                 settlement_time=None, settlement_type=None, special_order=None, special_reason=None, status=None,
                 sub_order_id=None, supplement_apply_id=None, tax_rate=None, third_itinerary_id=None, time_type=None,
                 traveler_id=None, traveler_job_no=None, traveler_member_type_name=None, traveler_name=None,
                 user_confirm_desc=None, voucher_type=None):
        self.alipay_trade_no = alipay_trade_no  # type: str
        self.apply_arr_city_code = apply_arr_city_code  # type: str
        self.apply_arr_city_name = apply_arr_city_name  # type: str
        self.apply_dep_city_code = apply_dep_city_code  # type: str
        self.apply_dep_city_name = apply_dep_city_name  # type: str
        # 审批扩展自定义字段
        self.apply_extend_field = apply_extend_field  # type: str
        self.apply_id = apply_id  # type: str
        self.arr_city = arr_city  # type: str
        self.arr_city_code = arr_city_code  # type: str
        self.arr_date = arr_date  # type: str
        self.arr_location = arr_location  # type: str
        self.arr_time = arr_time  # type: str
        self.bill_record_time = bill_record_time  # type: str
        self.book_model = book_model  # type: str
        self.book_time = book_time  # type: str
        self.booker_id = booker_id  # type: str
        self.booker_job_no = booker_job_no  # type: str
        self.booker_name = booker_name  # type: str
        self.business_category = business_category  # type: str
        self.capital_direction = capital_direction  # type: str
        self.car_level = car_level  # type: str
        self.cascade_department = cascade_department  # type: str
        self.cost_center = cost_center  # type: str
        self.cost_center_number = cost_center_number  # type: str
        self.coupon = coupon  # type: float
        self.coupon_price = coupon_price  # type: float
        self.dep_city_code = dep_city_code  # type: str
        self.department = department  # type: str
        self.department_id = department_id  # type: str
        self.dept_city = dept_city  # type: str
        self.dept_date = dept_date  # type: str
        self.dept_location = dept_location  # type: str
        self.dept_time = dept_time  # type: str
        self.driver_add_detail = driver_add_detail  # type: str
        self.driver_add_fee = driver_add_fee  # type: float
        self.estimate_drive_distance = estimate_drive_distance  # type: str
        self.estimate_price = estimate_price  # type: float
        self.fee_type = fee_type  # type: str
        self.index = index  # type: str
        self.invoice_title = invoice_title  # type: str
        self.level_name = level_name  # type: str
        self.memo = memo  # type: str
        self.order_id = order_id  # type: str
        self.order_price = order_price  # type: float
        self.over_apply_id = over_apply_id  # type: str
        self.person_settle_fee = person_settle_fee  # type: float
        self.primary_id = primary_id  # type: long
        self.project_code = project_code  # type: str
        self.project_name = project_name  # type: str
        self.provider_name = provider_name  # type: str
        self.real_drive_distance = real_drive_distance  # type: str
        self.real_from_addr = real_from_addr  # type: str
        self.real_to_addr = real_to_addr  # type: str
        self.remark = remark  # type: str
        self.service_fee = service_fee  # type: float
        self.settlement_fee = settlement_fee  # type: float
        self.settlement_grant_fee = settlement_grant_fee  # type: float
        self.settlement_time = settlement_time  # type: str
        self.settlement_type = settlement_type  # type: str
        self.special_order = special_order  # type: str
        self.special_reason = special_reason  # type: str
        self.status = status  # type: int
        self.sub_order_id = sub_order_id  # type: str
        self.supplement_apply_id = supplement_apply_id  # type: str
        # 税率
        self.tax_rate = tax_rate  # type: str
        self.third_itinerary_id = third_itinerary_id  # type: str
        self.time_type = time_type  # type: str
        self.traveler_id = traveler_id  # type: str
        self.traveler_job_no = traveler_job_no  # type: str
        self.traveler_member_type_name = traveler_member_type_name  # type: str
        self.traveler_name = traveler_name  # type: str
        self.user_confirm_desc = user_confirm_desc  # type: str
        self.voucher_type = voucher_type  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(CarBillSettlementQueryResponseBodyModuleDataList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alipay_trade_no is not None:
            result['alipay_trade_no'] = self.alipay_trade_no
        if self.apply_arr_city_code is not None:
            result['apply_arr_city_code'] = self.apply_arr_city_code
        if self.apply_arr_city_name is not None:
            result['apply_arr_city_name'] = self.apply_arr_city_name
        if self.apply_dep_city_code is not None:
            result['apply_dep_city_code'] = self.apply_dep_city_code
        if self.apply_dep_city_name is not None:
            result['apply_dep_city_name'] = self.apply_dep_city_name
        if self.apply_extend_field is not None:
            result['apply_extend_field'] = self.apply_extend_field
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.arr_city is not None:
            result['arr_city'] = self.arr_city
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.arr_date is not None:
            result['arr_date'] = self.arr_date
        if self.arr_location is not None:
            result['arr_location'] = self.arr_location
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.bill_record_time is not None:
            result['bill_record_time'] = self.bill_record_time
        if self.book_model is not None:
            result['book_model'] = self.book_model
        if self.book_time is not None:
            result['book_time'] = self.book_time
        if self.booker_id is not None:
            result['booker_id'] = self.booker_id
        if self.booker_job_no is not None:
            result['booker_job_no'] = self.booker_job_no
        if self.booker_name is not None:
            result['booker_name'] = self.booker_name
        if self.business_category is not None:
            result['business_category'] = self.business_category
        if self.capital_direction is not None:
            result['capital_direction'] = self.capital_direction
        if self.car_level is not None:
            result['car_level'] = self.car_level
        if self.cascade_department is not None:
            result['cascade_department'] = self.cascade_department
        if self.cost_center is not None:
            result['cost_center'] = self.cost_center
        if self.cost_center_number is not None:
            result['cost_center_number'] = self.cost_center_number
        if self.coupon is not None:
            result['coupon'] = self.coupon
        if self.coupon_price is not None:
            result['coupon_price'] = self.coupon_price
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.department is not None:
            result['department'] = self.department
        if self.department_id is not None:
            result['department_id'] = self.department_id
        if self.dept_city is not None:
            result['dept_city'] = self.dept_city
        if self.dept_date is not None:
            result['dept_date'] = self.dept_date
        if self.dept_location is not None:
            result['dept_location'] = self.dept_location
        if self.dept_time is not None:
            result['dept_time'] = self.dept_time
        if self.driver_add_detail is not None:
            result['driver_add_detail'] = self.driver_add_detail
        if self.driver_add_fee is not None:
            result['driver_add_fee'] = self.driver_add_fee
        if self.estimate_drive_distance is not None:
            result['estimate_drive_distance'] = self.estimate_drive_distance
        if self.estimate_price is not None:
            result['estimate_price'] = self.estimate_price
        if self.fee_type is not None:
            result['fee_type'] = self.fee_type
        if self.index is not None:
            result['index'] = self.index
        if self.invoice_title is not None:
            result['invoice_title'] = self.invoice_title
        if self.level_name is not None:
            result['level_name'] = self.level_name
        if self.memo is not None:
            result['memo'] = self.memo
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.order_price is not None:
            result['order_price'] = self.order_price
        if self.over_apply_id is not None:
            result['over_apply_id'] = self.over_apply_id
        if self.person_settle_fee is not None:
            result['person_settle_fee'] = self.person_settle_fee
        if self.primary_id is not None:
            result['primary_id'] = self.primary_id
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_name is not None:
            result['project_name'] = self.project_name
        if self.provider_name is not None:
            result['provider_name'] = self.provider_name
        if self.real_drive_distance is not None:
            result['real_drive_distance'] = self.real_drive_distance
        if self.real_from_addr is not None:
            result['real_from_addr'] = self.real_from_addr
        if self.real_to_addr is not None:
            result['real_to_addr'] = self.real_to_addr
        if self.remark is not None:
            result['remark'] = self.remark
        if self.service_fee is not None:
            result['service_fee'] = self.service_fee
        if self.settlement_fee is not None:
            result['settlement_fee'] = self.settlement_fee
        if self.settlement_grant_fee is not None:
            result['settlement_grant_fee'] = self.settlement_grant_fee
        if self.settlement_time is not None:
            result['settlement_time'] = self.settlement_time
        if self.settlement_type is not None:
            result['settlement_type'] = self.settlement_type
        if self.special_order is not None:
            result['special_order'] = self.special_order
        if self.special_reason is not None:
            result['special_reason'] = self.special_reason
        if self.status is not None:
            result['status'] = self.status
        if self.sub_order_id is not None:
            result['sub_order_id'] = self.sub_order_id
        if self.supplement_apply_id is not None:
            result['supplement_apply_id'] = self.supplement_apply_id
        if self.tax_rate is not None:
            result['tax_rate'] = self.tax_rate
        if self.third_itinerary_id is not None:
            result['third_itinerary_id'] = self.third_itinerary_id
        if self.time_type is not None:
            result['time_type'] = self.time_type
        if self.traveler_id is not None:
            result['traveler_id'] = self.traveler_id
        if self.traveler_job_no is not None:
            result['traveler_job_no'] = self.traveler_job_no
        if self.traveler_member_type_name is not None:
            result['traveler_member_type_name'] = self.traveler_member_type_name
        if self.traveler_name is not None:
            result['traveler_name'] = self.traveler_name
        if self.user_confirm_desc is not None:
            result['user_confirm_desc'] = self.user_confirm_desc
        if self.voucher_type is not None:
            result['voucher_type'] = self.voucher_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('alipay_trade_no') is not None:
            self.alipay_trade_no = m.get('alipay_trade_no')
        if m.get('apply_arr_city_code') is not None:
            self.apply_arr_city_code = m.get('apply_arr_city_code')
        if m.get('apply_arr_city_name') is not None:
            self.apply_arr_city_name = m.get('apply_arr_city_name')
        if m.get('apply_dep_city_code') is not None:
            self.apply_dep_city_code = m.get('apply_dep_city_code')
        if m.get('apply_dep_city_name') is not None:
            self.apply_dep_city_name = m.get('apply_dep_city_name')
        if m.get('apply_extend_field') is not None:
            self.apply_extend_field = m.get('apply_extend_field')
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('arr_city') is not None:
            self.arr_city = m.get('arr_city')
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('arr_date') is not None:
            self.arr_date = m.get('arr_date')
        if m.get('arr_location') is not None:
            self.arr_location = m.get('arr_location')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('bill_record_time') is not None:
            self.bill_record_time = m.get('bill_record_time')
        if m.get('book_model') is not None:
            self.book_model = m.get('book_model')
        if m.get('book_time') is not None:
            self.book_time = m.get('book_time')
        if m.get('booker_id') is not None:
            self.booker_id = m.get('booker_id')
        if m.get('booker_job_no') is not None:
            self.booker_job_no = m.get('booker_job_no')
        if m.get('booker_name') is not None:
            self.booker_name = m.get('booker_name')
        if m.get('business_category') is not None:
            self.business_category = m.get('business_category')
        if m.get('capital_direction') is not None:
            self.capital_direction = m.get('capital_direction')
        if m.get('car_level') is not None:
            self.car_level = m.get('car_level')
        if m.get('cascade_department') is not None:
            self.cascade_department = m.get('cascade_department')
        if m.get('cost_center') is not None:
            self.cost_center = m.get('cost_center')
        if m.get('cost_center_number') is not None:
            self.cost_center_number = m.get('cost_center_number')
        if m.get('coupon') is not None:
            self.coupon = m.get('coupon')
        if m.get('coupon_price') is not None:
            self.coupon_price = m.get('coupon_price')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('department') is not None:
            self.department = m.get('department')
        if m.get('department_id') is not None:
            self.department_id = m.get('department_id')
        if m.get('dept_city') is not None:
            self.dept_city = m.get('dept_city')
        if m.get('dept_date') is not None:
            self.dept_date = m.get('dept_date')
        if m.get('dept_location') is not None:
            self.dept_location = m.get('dept_location')
        if m.get('dept_time') is not None:
            self.dept_time = m.get('dept_time')
        if m.get('driver_add_detail') is not None:
            self.driver_add_detail = m.get('driver_add_detail')
        if m.get('driver_add_fee') is not None:
            self.driver_add_fee = m.get('driver_add_fee')
        if m.get('estimate_drive_distance') is not None:
            self.estimate_drive_distance = m.get('estimate_drive_distance')
        if m.get('estimate_price') is not None:
            self.estimate_price = m.get('estimate_price')
        if m.get('fee_type') is not None:
            self.fee_type = m.get('fee_type')
        if m.get('index') is not None:
            self.index = m.get('index')
        if m.get('invoice_title') is not None:
            self.invoice_title = m.get('invoice_title')
        if m.get('level_name') is not None:
            self.level_name = m.get('level_name')
        if m.get('memo') is not None:
            self.memo = m.get('memo')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('order_price') is not None:
            self.order_price = m.get('order_price')
        if m.get('over_apply_id') is not None:
            self.over_apply_id = m.get('over_apply_id')
        if m.get('person_settle_fee') is not None:
            self.person_settle_fee = m.get('person_settle_fee')
        if m.get('primary_id') is not None:
            self.primary_id = m.get('primary_id')
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_name') is not None:
            self.project_name = m.get('project_name')
        if m.get('provider_name') is not None:
            self.provider_name = m.get('provider_name')
        if m.get('real_drive_distance') is not None:
            self.real_drive_distance = m.get('real_drive_distance')
        if m.get('real_from_addr') is not None:
            self.real_from_addr = m.get('real_from_addr')
        if m.get('real_to_addr') is not None:
            self.real_to_addr = m.get('real_to_addr')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('service_fee') is not None:
            self.service_fee = m.get('service_fee')
        if m.get('settlement_fee') is not None:
            self.settlement_fee = m.get('settlement_fee')
        if m.get('settlement_grant_fee') is not None:
            self.settlement_grant_fee = m.get('settlement_grant_fee')
        if m.get('settlement_time') is not None:
            self.settlement_time = m.get('settlement_time')
        if m.get('settlement_type') is not None:
            self.settlement_type = m.get('settlement_type')
        if m.get('special_order') is not None:
            self.special_order = m.get('special_order')
        if m.get('special_reason') is not None:
            self.special_reason = m.get('special_reason')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('sub_order_id') is not None:
            self.sub_order_id = m.get('sub_order_id')
        if m.get('supplement_apply_id') is not None:
            self.supplement_apply_id = m.get('supplement_apply_id')
        if m.get('tax_rate') is not None:
            self.tax_rate = m.get('tax_rate')
        if m.get('third_itinerary_id') is not None:
            self.third_itinerary_id = m.get('third_itinerary_id')
        if m.get('time_type') is not None:
            self.time_type = m.get('time_type')
        if m.get('traveler_id') is not None:
            self.traveler_id = m.get('traveler_id')
        if m.get('traveler_job_no') is not None:
            self.traveler_job_no = m.get('traveler_job_no')
        if m.get('traveler_member_type_name') is not None:
            self.traveler_member_type_name = m.get('traveler_member_type_name')
        if m.get('traveler_name') is not None:
            self.traveler_name = m.get('traveler_name')
        if m.get('user_confirm_desc') is not None:
            self.user_confirm_desc = m.get('user_confirm_desc')
        if m.get('voucher_type') is not None:
            self.voucher_type = m.get('voucher_type')
        return self


class CarBillSettlementQueryResponseBodyModule(TeaModel):
    def __init__(self, category=None, corp_id=None, data_list=None, period_end=None, period_start=None,
                 total_num=None):
        self.category = category  # type: int
        self.corp_id = corp_id  # type: str
        self.data_list = data_list  # type: list[CarBillSettlementQueryResponseBodyModuleDataList]
        self.period_end = period_end  # type: str
        self.period_start = period_start  # type: str
        self.total_num = total_num  # type: long

    def validate(self):
        if self.data_list:
            for k in self.data_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(CarBillSettlementQueryResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['category'] = self.category
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        result['data_list'] = []
        if self.data_list is not None:
            for k in self.data_list:
                result['data_list'].append(k.to_map() if k else None)
        if self.period_end is not None:
            result['period_end'] = self.period_end
        if self.period_start is not None:
            result['period_start'] = self.period_start
        if self.total_num is not None:
            result['total_num'] = self.total_num
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('category') is not None:
            self.category = m.get('category')
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        self.data_list = []
        if m.get('data_list') is not None:
            for k in m.get('data_list'):
                temp_model = CarBillSettlementQueryResponseBodyModuleDataList()
                self.data_list.append(temp_model.from_map(k))
        if m.get('period_end') is not None:
            self.period_end = m.get('period_end')
        if m.get('period_start') is not None:
            self.period_start = m.get('period_start')
        if m.get('total_num') is not None:
            self.total_num = m.get('total_num')
        return self


class CarBillSettlementQueryResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: CarBillSettlementQueryResponseBodyModule
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(CarBillSettlementQueryResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = CarBillSettlementQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class CarBillSettlementQueryResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CarBillSettlementQueryResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CarBillSettlementQueryResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CarBillSettlementQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CarOrderListQueryHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_so_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CarOrderListQueryHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class CarOrderListQueryRequest(TeaModel):
    def __init__(self, all_apply=None, apply_id=None, depart_id=None, end_time=None, page=None, page_size=None,
                 start_time=None, thirdpart_apply_id=None, update_end_time=None, update_start_time=None, user_id=None):
        self.all_apply = all_apply  # type: bool
        self.apply_id = apply_id  # type: long
        self.depart_id = depart_id  # type: str
        self.end_time = end_time  # type: str
        self.page = page  # type: int
        self.page_size = page_size  # type: int
        self.start_time = start_time  # type: str
        self.thirdpart_apply_id = thirdpart_apply_id  # type: str
        self.update_end_time = update_end_time  # type: str
        self.update_start_time = update_start_time  # type: str
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CarOrderListQueryRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.all_apply is not None:
            result['all_apply'] = self.all_apply
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.depart_id is not None:
            result['depart_id'] = self.depart_id
        if self.end_time is not None:
            result['end_time'] = self.end_time
        if self.page is not None:
            result['page'] = self.page
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.start_time is not None:
            result['start_time'] = self.start_time
        if self.thirdpart_apply_id is not None:
            result['thirdpart_apply_id'] = self.thirdpart_apply_id
        if self.update_end_time is not None:
            result['update_end_time'] = self.update_end_time
        if self.update_start_time is not None:
            result['update_start_time'] = self.update_start_time
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('all_apply') is not None:
            self.all_apply = m.get('all_apply')
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('depart_id') is not None:
            self.depart_id = m.get('depart_id')
        if m.get('end_time') is not None:
            self.end_time = m.get('end_time')
        if m.get('page') is not None:
            self.page = m.get('page')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('start_time') is not None:
            self.start_time = m.get('start_time')
        if m.get('thirdpart_apply_id') is not None:
            self.thirdpart_apply_id = m.get('thirdpart_apply_id')
        if m.get('update_end_time') is not None:
            self.update_end_time = m.get('update_end_time')
        if m.get('update_start_time') is not None:
            self.update_start_time = m.get('update_start_time')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class CarOrderListQueryResponseBodyModulePriceInfoList(TeaModel):
    def __init__(self, category_code=None, category_type=None, gmt_create=None, passenger_name=None, pay_type=None,
                 person_price=None, price=None, trade_id=None, type=None):
        self.category_code = category_code  # type: int
        self.category_type = category_type  # type: int
        self.gmt_create = gmt_create  # type: str
        self.passenger_name = passenger_name  # type: str
        self.pay_type = pay_type  # type: int
        self.person_price = person_price  # type: float
        self.price = price  # type: float
        self.trade_id = trade_id  # type: str
        self.type = type  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(CarOrderListQueryResponseBodyModulePriceInfoList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category_code is not None:
            result['category_code'] = self.category_code
        if self.category_type is not None:
            result['category_type'] = self.category_type
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.passenger_name is not None:
            result['passenger_name'] = self.passenger_name
        if self.pay_type is not None:
            result['pay_type'] = self.pay_type
        if self.person_price is not None:
            result['person_price'] = self.person_price
        if self.price is not None:
            result['price'] = self.price
        if self.trade_id is not None:
            result['trade_id'] = self.trade_id
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('category_code') is not None:
            self.category_code = m.get('category_code')
        if m.get('category_type') is not None:
            self.category_type = m.get('category_type')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('passenger_name') is not None:
            self.passenger_name = m.get('passenger_name')
        if m.get('pay_type') is not None:
            self.pay_type = m.get('pay_type')
        if m.get('person_price') is not None:
            self.person_price = m.get('person_price')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('trade_id') is not None:
            self.trade_id = m.get('trade_id')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class CarOrderListQueryResponseBodyModuleUserAffiliateList(TeaModel):
    def __init__(self, user_id=None, user_name=None):
        self.user_id = user_id  # type: str
        self.user_name = user_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CarOrderListQueryResponseBodyModuleUserAffiliateList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class CarOrderListQueryResponseBodyModule(TeaModel):
    def __init__(self, apply_id=None, apply_show_id=None, btrip_title=None, business_category=None,
                 cancel_time=None, car_info=None, car_level=None, corp_id=None, corp_name=None, cost_center_id=None,
                 cost_center_name=None, cost_center_number=None, dept_id=None, dept_name=None, driver_confirm_time=None,
                 estimate_price=None, from_address=None, from_city_ad_code=None, from_city_name=None, gmt_create=None,
                 gmt_modified=None, id=None, invoice_id=None, invoice_title=None, is_special=None, memo=None, order_status=None,
                 passenger_name=None, pay_time=None, price_info_list=None, project_code=None, project_id=None, project_title=None,
                 provider=None, publish_time=None, real_from_address=None, real_from_city_ad_code=None,
                 real_from_city_name=None, real_to_address=None, real_to_city_ad_code=None, real_to_city_name=None, service_type=None,
                 special_types=None, taken_time=None, thirdpart_apply_id=None, thirdpart_itinerary_id=None, to_address=None,
                 to_city_ad_code=None, to_city_name=None, travel_distance=None, user_affiliate_list=None, user_confirm=None,
                 user_id=None, user_name=None):
        self.apply_id = apply_id  # type: long
        self.apply_show_id = apply_show_id  # type: str
        self.btrip_title = btrip_title  # type: str
        self.business_category = business_category  # type: str
        self.cancel_time = cancel_time  # type: str
        self.car_info = car_info  # type: str
        self.car_level = car_level  # type: int
        self.corp_id = corp_id  # type: str
        self.corp_name = corp_name  # type: str
        self.cost_center_id = cost_center_id  # type: long
        self.cost_center_name = cost_center_name  # type: str
        self.cost_center_number = cost_center_number  # type: str
        self.dept_id = dept_id  # type: long
        self.dept_name = dept_name  # type: str
        self.driver_confirm_time = driver_confirm_time  # type: str
        self.estimate_price = estimate_price  # type: float
        self.from_address = from_address  # type: str
        self.from_city_ad_code = from_city_ad_code  # type: str
        self.from_city_name = from_city_name  # type: str
        self.gmt_create = gmt_create  # type: str
        self.gmt_modified = gmt_modified  # type: str
        self.id = id  # type: long
        self.invoice_id = invoice_id  # type: long
        self.invoice_title = invoice_title  # type: str
        self.is_special = is_special  # type: bool
        self.memo = memo  # type: str
        self.order_status = order_status  # type: int
        self.passenger_name = passenger_name  # type: str
        self.pay_time = pay_time  # type: str
        self.price_info_list = price_info_list  # type: list[CarOrderListQueryResponseBodyModulePriceInfoList]
        self.project_code = project_code  # type: str
        self.project_id = project_id  # type: long
        self.project_title = project_title  # type: str
        self.provider = provider  # type: int
        self.publish_time = publish_time  # type: str
        self.real_from_address = real_from_address  # type: str
        self.real_from_city_ad_code = real_from_city_ad_code  # type: str
        self.real_from_city_name = real_from_city_name  # type: str
        self.real_to_address = real_to_address  # type: str
        self.real_to_city_ad_code = real_to_city_ad_code  # type: str
        self.real_to_city_name = real_to_city_name  # type: str
        self.service_type = service_type  # type: int
        self.special_types = special_types  # type: list[str]
        self.taken_time = taken_time  # type: str
        self.thirdpart_apply_id = thirdpart_apply_id  # type: str
        self.thirdpart_itinerary_id = thirdpart_itinerary_id  # type: str
        self.to_address = to_address  # type: str
        self.to_city_ad_code = to_city_ad_code  # type: str
        self.to_city_name = to_city_name  # type: str
        self.travel_distance = travel_distance  # type: float
        self.user_affiliate_list = user_affiliate_list  # type: list[CarOrderListQueryResponseBodyModuleUserAffiliateList]
        self.user_confirm = user_confirm  # type: int
        self.user_id = user_id  # type: str
        self.user_name = user_name  # type: str

    def validate(self):
        if self.price_info_list:
            for k in self.price_info_list:
                if k:
                    k.validate()
        if self.user_affiliate_list:
            for k in self.user_affiliate_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(CarOrderListQueryResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.apply_show_id is not None:
            result['apply_show_id'] = self.apply_show_id
        if self.btrip_title is not None:
            result['btrip_title'] = self.btrip_title
        if self.business_category is not None:
            result['business_category'] = self.business_category
        if self.cancel_time is not None:
            result['cancel_time'] = self.cancel_time
        if self.car_info is not None:
            result['car_info'] = self.car_info
        if self.car_level is not None:
            result['car_level'] = self.car_level
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        if self.corp_name is not None:
            result['corp_name'] = self.corp_name
        if self.cost_center_id is not None:
            result['cost_center_id'] = self.cost_center_id
        if self.cost_center_name is not None:
            result['cost_center_name'] = self.cost_center_name
        if self.cost_center_number is not None:
            result['cost_center_number'] = self.cost_center_number
        if self.dept_id is not None:
            result['dept_id'] = self.dept_id
        if self.dept_name is not None:
            result['dept_name'] = self.dept_name
        if self.driver_confirm_time is not None:
            result['driver_confirm_time'] = self.driver_confirm_time
        if self.estimate_price is not None:
            result['estimate_price'] = self.estimate_price
        if self.from_address is not None:
            result['from_address'] = self.from_address
        if self.from_city_ad_code is not None:
            result['from_city_ad_code'] = self.from_city_ad_code
        if self.from_city_name is not None:
            result['from_city_name'] = self.from_city_name
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.gmt_modified is not None:
            result['gmt_modified'] = self.gmt_modified
        if self.id is not None:
            result['id'] = self.id
        if self.invoice_id is not None:
            result['invoice_id'] = self.invoice_id
        if self.invoice_title is not None:
            result['invoice_title'] = self.invoice_title
        if self.is_special is not None:
            result['is_special'] = self.is_special
        if self.memo is not None:
            result['memo'] = self.memo
        if self.order_status is not None:
            result['order_status'] = self.order_status
        if self.passenger_name is not None:
            result['passenger_name'] = self.passenger_name
        if self.pay_time is not None:
            result['pay_time'] = self.pay_time
        result['price_info_list'] = []
        if self.price_info_list is not None:
            for k in self.price_info_list:
                result['price_info_list'].append(k.to_map() if k else None)
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_id is not None:
            result['project_id'] = self.project_id
        if self.project_title is not None:
            result['project_title'] = self.project_title
        if self.provider is not None:
            result['provider'] = self.provider
        if self.publish_time is not None:
            result['publish_time'] = self.publish_time
        if self.real_from_address is not None:
            result['real_from_address'] = self.real_from_address
        if self.real_from_city_ad_code is not None:
            result['real_from_city_ad_code'] = self.real_from_city_ad_code
        if self.real_from_city_name is not None:
            result['real_from_city_name'] = self.real_from_city_name
        if self.real_to_address is not None:
            result['real_to_address'] = self.real_to_address
        if self.real_to_city_ad_code is not None:
            result['real_to_city_ad_code'] = self.real_to_city_ad_code
        if self.real_to_city_name is not None:
            result['real_to_city_name'] = self.real_to_city_name
        if self.service_type is not None:
            result['service_type'] = self.service_type
        if self.special_types is not None:
            result['special_types'] = self.special_types
        if self.taken_time is not None:
            result['taken_time'] = self.taken_time
        if self.thirdpart_apply_id is not None:
            result['thirdpart_apply_id'] = self.thirdpart_apply_id
        if self.thirdpart_itinerary_id is not None:
            result['thirdpart_itinerary_id'] = self.thirdpart_itinerary_id
        if self.to_address is not None:
            result['to_address'] = self.to_address
        if self.to_city_ad_code is not None:
            result['to_city_ad_code'] = self.to_city_ad_code
        if self.to_city_name is not None:
            result['to_city_name'] = self.to_city_name
        if self.travel_distance is not None:
            result['travel_distance'] = self.travel_distance
        result['user_affiliate_list'] = []
        if self.user_affiliate_list is not None:
            for k in self.user_affiliate_list:
                result['user_affiliate_list'].append(k.to_map() if k else None)
        if self.user_confirm is not None:
            result['user_confirm'] = self.user_confirm
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('apply_show_id') is not None:
            self.apply_show_id = m.get('apply_show_id')
        if m.get('btrip_title') is not None:
            self.btrip_title = m.get('btrip_title')
        if m.get('business_category') is not None:
            self.business_category = m.get('business_category')
        if m.get('cancel_time') is not None:
            self.cancel_time = m.get('cancel_time')
        if m.get('car_info') is not None:
            self.car_info = m.get('car_info')
        if m.get('car_level') is not None:
            self.car_level = m.get('car_level')
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        if m.get('corp_name') is not None:
            self.corp_name = m.get('corp_name')
        if m.get('cost_center_id') is not None:
            self.cost_center_id = m.get('cost_center_id')
        if m.get('cost_center_name') is not None:
            self.cost_center_name = m.get('cost_center_name')
        if m.get('cost_center_number') is not None:
            self.cost_center_number = m.get('cost_center_number')
        if m.get('dept_id') is not None:
            self.dept_id = m.get('dept_id')
        if m.get('dept_name') is not None:
            self.dept_name = m.get('dept_name')
        if m.get('driver_confirm_time') is not None:
            self.driver_confirm_time = m.get('driver_confirm_time')
        if m.get('estimate_price') is not None:
            self.estimate_price = m.get('estimate_price')
        if m.get('from_address') is not None:
            self.from_address = m.get('from_address')
        if m.get('from_city_ad_code') is not None:
            self.from_city_ad_code = m.get('from_city_ad_code')
        if m.get('from_city_name') is not None:
            self.from_city_name = m.get('from_city_name')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('gmt_modified') is not None:
            self.gmt_modified = m.get('gmt_modified')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('invoice_id') is not None:
            self.invoice_id = m.get('invoice_id')
        if m.get('invoice_title') is not None:
            self.invoice_title = m.get('invoice_title')
        if m.get('is_special') is not None:
            self.is_special = m.get('is_special')
        if m.get('memo') is not None:
            self.memo = m.get('memo')
        if m.get('order_status') is not None:
            self.order_status = m.get('order_status')
        if m.get('passenger_name') is not None:
            self.passenger_name = m.get('passenger_name')
        if m.get('pay_time') is not None:
            self.pay_time = m.get('pay_time')
        self.price_info_list = []
        if m.get('price_info_list') is not None:
            for k in m.get('price_info_list'):
                temp_model = CarOrderListQueryResponseBodyModulePriceInfoList()
                self.price_info_list.append(temp_model.from_map(k))
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_id') is not None:
            self.project_id = m.get('project_id')
        if m.get('project_title') is not None:
            self.project_title = m.get('project_title')
        if m.get('provider') is not None:
            self.provider = m.get('provider')
        if m.get('publish_time') is not None:
            self.publish_time = m.get('publish_time')
        if m.get('real_from_address') is not None:
            self.real_from_address = m.get('real_from_address')
        if m.get('real_from_city_ad_code') is not None:
            self.real_from_city_ad_code = m.get('real_from_city_ad_code')
        if m.get('real_from_city_name') is not None:
            self.real_from_city_name = m.get('real_from_city_name')
        if m.get('real_to_address') is not None:
            self.real_to_address = m.get('real_to_address')
        if m.get('real_to_city_ad_code') is not None:
            self.real_to_city_ad_code = m.get('real_to_city_ad_code')
        if m.get('real_to_city_name') is not None:
            self.real_to_city_name = m.get('real_to_city_name')
        if m.get('service_type') is not None:
            self.service_type = m.get('service_type')
        if m.get('special_types') is not None:
            self.special_types = m.get('special_types')
        if m.get('taken_time') is not None:
            self.taken_time = m.get('taken_time')
        if m.get('thirdpart_apply_id') is not None:
            self.thirdpart_apply_id = m.get('thirdpart_apply_id')
        if m.get('thirdpart_itinerary_id') is not None:
            self.thirdpart_itinerary_id = m.get('thirdpart_itinerary_id')
        if m.get('to_address') is not None:
            self.to_address = m.get('to_address')
        if m.get('to_city_ad_code') is not None:
            self.to_city_ad_code = m.get('to_city_ad_code')
        if m.get('to_city_name') is not None:
            self.to_city_name = m.get('to_city_name')
        if m.get('travel_distance') is not None:
            self.travel_distance = m.get('travel_distance')
        self.user_affiliate_list = []
        if m.get('user_affiliate_list') is not None:
            for k in m.get('user_affiliate_list'):
                temp_model = CarOrderListQueryResponseBodyModuleUserAffiliateList()
                self.user_affiliate_list.append(temp_model.from_map(k))
        if m.get('user_confirm') is not None:
            self.user_confirm = m.get('user_confirm')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class CarOrderListQueryResponseBodyPageInfo(TeaModel):
    def __init__(self, page=None, page_size=None, total_number=None):
        self.page = page  # type: int
        self.page_size = page_size  # type: int
        self.total_number = total_number  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(CarOrderListQueryResponseBodyPageInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page is not None:
            result['page'] = self.page
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.total_number is not None:
            result['total_number'] = self.total_number
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('page') is not None:
            self.page = m.get('page')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('total_number') is not None:
            self.total_number = m.get('total_number')
        return self


class CarOrderListQueryResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, page_info=None, request_id=None, success=None,
                 trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: list[CarOrderListQueryResponseBodyModule]
        self.page_info = page_info  # type: CarOrderListQueryResponseBodyPageInfo
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        # traceId
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            for k in self.module:
                if k:
                    k.validate()
        if self.page_info:
            self.page_info.validate()

    def to_map(self):
        _map = super(CarOrderListQueryResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        result['module'] = []
        if self.module is not None:
            for k in self.module:
                result['module'].append(k.to_map() if k else None)
        if self.page_info is not None:
            result['page_info'] = self.page_info.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        self.module = []
        if m.get('module') is not None:
            for k in m.get('module'):
                temp_model = CarOrderListQueryResponseBodyModule()
                self.module.append(temp_model.from_map(k))
        if m.get('page_info') is not None:
            temp_model = CarOrderListQueryResponseBodyPageInfo()
            self.page_info = temp_model.from_map(m['page_info'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class CarOrderListQueryResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CarOrderListQueryResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CarOrderListQueryResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CarOrderListQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CarOrderQueryHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_so_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CarOrderQueryHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class CarOrderQueryRequest(TeaModel):
    def __init__(self, order_id=None, sub_order_id=None):
        self.order_id = order_id  # type: long
        self.sub_order_id = sub_order_id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(CarOrderQueryRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.sub_order_id is not None:
            result['sub_order_id'] = self.sub_order_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('sub_order_id') is not None:
            self.sub_order_id = m.get('sub_order_id')
        return self


class CarOrderQueryResponseBodyModuleCarInfo(TeaModel):
    def __init__(self, business_category=None, cancel_time=None, car_info=None, car_level=None, driver_card=None,
                 driver_confirm_time=None, driver_name=None, estimate_price=None, from_address=None, from_city_ad_code=None,
                 from_city_name=None, is_special=None, memo=None, pay_time=None, publish_time=None, real_from_address=None,
                 real_from_city_ad_code=None, real_from_city_name=None, real_to_address=None, real_to_city_ad_code=None,
                 real_to_city_name=None, service_type=None, special_types=None, taken_time=None, to_address=None,
                 to_city_ad_code=None, to_city_name=None, travel_distance=None):
        self.business_category = business_category  # type: str
        self.cancel_time = cancel_time  # type: long
        self.car_info = car_info  # type: str
        self.car_level = car_level  # type: int
        self.driver_card = driver_card  # type: str
        self.driver_confirm_time = driver_confirm_time  # type: long
        self.driver_name = driver_name  # type: str
        self.estimate_price = estimate_price  # type: long
        self.from_address = from_address  # type: str
        self.from_city_ad_code = from_city_ad_code  # type: str
        self.from_city_name = from_city_name  # type: str
        self.is_special = is_special  # type: bool
        self.memo = memo  # type: str
        self.pay_time = pay_time  # type: long
        self.publish_time = publish_time  # type: long
        self.real_from_address = real_from_address  # type: str
        self.real_from_city_ad_code = real_from_city_ad_code  # type: str
        self.real_from_city_name = real_from_city_name  # type: str
        self.real_to_address = real_to_address  # type: str
        self.real_to_city_ad_code = real_to_city_ad_code  # type: str
        self.real_to_city_name = real_to_city_name  # type: str
        self.service_type = service_type  # type: int
        self.special_types = special_types  # type: str
        self.taken_time = taken_time  # type: long
        self.to_address = to_address  # type: str
        self.to_city_ad_code = to_city_ad_code  # type: str
        self.to_city_name = to_city_name  # type: str
        self.travel_distance = travel_distance  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CarOrderQueryResponseBodyModuleCarInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.business_category is not None:
            result['business_category'] = self.business_category
        if self.cancel_time is not None:
            result['cancel_time'] = self.cancel_time
        if self.car_info is not None:
            result['car_info'] = self.car_info
        if self.car_level is not None:
            result['car_level'] = self.car_level
        if self.driver_card is not None:
            result['driver_card'] = self.driver_card
        if self.driver_confirm_time is not None:
            result['driver_confirm_time'] = self.driver_confirm_time
        if self.driver_name is not None:
            result['driver_name'] = self.driver_name
        if self.estimate_price is not None:
            result['estimate_price'] = self.estimate_price
        if self.from_address is not None:
            result['from_address'] = self.from_address
        if self.from_city_ad_code is not None:
            result['from_city_ad_code'] = self.from_city_ad_code
        if self.from_city_name is not None:
            result['from_city_name'] = self.from_city_name
        if self.is_special is not None:
            result['is_special'] = self.is_special
        if self.memo is not None:
            result['memo'] = self.memo
        if self.pay_time is not None:
            result['pay_time'] = self.pay_time
        if self.publish_time is not None:
            result['publish_time'] = self.publish_time
        if self.real_from_address is not None:
            result['real_from_address'] = self.real_from_address
        if self.real_from_city_ad_code is not None:
            result['real_from_city_ad_code'] = self.real_from_city_ad_code
        if self.real_from_city_name is not None:
            result['real_from_city_name'] = self.real_from_city_name
        if self.real_to_address is not None:
            result['real_to_address'] = self.real_to_address
        if self.real_to_city_ad_code is not None:
            result['real_to_city_ad_code'] = self.real_to_city_ad_code
        if self.real_to_city_name is not None:
            result['real_to_city_name'] = self.real_to_city_name
        if self.service_type is not None:
            result['service_type'] = self.service_type
        if self.special_types is not None:
            result['special_types'] = self.special_types
        if self.taken_time is not None:
            result['taken_time'] = self.taken_time
        if self.to_address is not None:
            result['to_address'] = self.to_address
        if self.to_city_ad_code is not None:
            result['to_city_ad_code'] = self.to_city_ad_code
        if self.to_city_name is not None:
            result['to_city_name'] = self.to_city_name
        if self.travel_distance is not None:
            result['travel_distance'] = self.travel_distance
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('business_category') is not None:
            self.business_category = m.get('business_category')
        if m.get('cancel_time') is not None:
            self.cancel_time = m.get('cancel_time')
        if m.get('car_info') is not None:
            self.car_info = m.get('car_info')
        if m.get('car_level') is not None:
            self.car_level = m.get('car_level')
        if m.get('driver_card') is not None:
            self.driver_card = m.get('driver_card')
        if m.get('driver_confirm_time') is not None:
            self.driver_confirm_time = m.get('driver_confirm_time')
        if m.get('driver_name') is not None:
            self.driver_name = m.get('driver_name')
        if m.get('estimate_price') is not None:
            self.estimate_price = m.get('estimate_price')
        if m.get('from_address') is not None:
            self.from_address = m.get('from_address')
        if m.get('from_city_ad_code') is not None:
            self.from_city_ad_code = m.get('from_city_ad_code')
        if m.get('from_city_name') is not None:
            self.from_city_name = m.get('from_city_name')
        if m.get('is_special') is not None:
            self.is_special = m.get('is_special')
        if m.get('memo') is not None:
            self.memo = m.get('memo')
        if m.get('pay_time') is not None:
            self.pay_time = m.get('pay_time')
        if m.get('publish_time') is not None:
            self.publish_time = m.get('publish_time')
        if m.get('real_from_address') is not None:
            self.real_from_address = m.get('real_from_address')
        if m.get('real_from_city_ad_code') is not None:
            self.real_from_city_ad_code = m.get('real_from_city_ad_code')
        if m.get('real_from_city_name') is not None:
            self.real_from_city_name = m.get('real_from_city_name')
        if m.get('real_to_address') is not None:
            self.real_to_address = m.get('real_to_address')
        if m.get('real_to_city_ad_code') is not None:
            self.real_to_city_ad_code = m.get('real_to_city_ad_code')
        if m.get('real_to_city_name') is not None:
            self.real_to_city_name = m.get('real_to_city_name')
        if m.get('service_type') is not None:
            self.service_type = m.get('service_type')
        if m.get('special_types') is not None:
            self.special_types = m.get('special_types')
        if m.get('taken_time') is not None:
            self.taken_time = m.get('taken_time')
        if m.get('to_address') is not None:
            self.to_address = m.get('to_address')
        if m.get('to_city_ad_code') is not None:
            self.to_city_ad_code = m.get('to_city_ad_code')
        if m.get('to_city_name') is not None:
            self.to_city_name = m.get('to_city_name')
        if m.get('travel_distance') is not None:
            self.travel_distance = m.get('travel_distance')
        return self


class CarOrderQueryResponseBodyModuleInvoiceInfo(TeaModel):
    def __init__(self, id=None, title=None):
        self.id = id  # type: long
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CarOrderQueryResponseBodyModuleInvoiceInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class CarOrderQueryResponseBodyModuleOrderBaseInfo(TeaModel):
    def __init__(self, apply_id=None, btrip_cause=None, btrip_title=None, corp_id=None, corp_name=None,
                 depart_id=None, depart_name=None, gmt_create=None, gmt_modified=None, itinerary_id=None, order_id=None,
                 order_status=None, sub_order_id=None, third_depart_id=None, thirdpart_apply_id=None,
                 thirdpart_itinerary_id=None, user_id=None, user_name=None):
        self.apply_id = apply_id  # type: str
        self.btrip_cause = btrip_cause  # type: str
        self.btrip_title = btrip_title  # type: str
        self.corp_id = corp_id  # type: str
        self.corp_name = corp_name  # type: str
        self.depart_id = depart_id  # type: str
        self.depart_name = depart_name  # type: str
        self.gmt_create = gmt_create  # type: long
        self.gmt_modified = gmt_modified  # type: long
        self.itinerary_id = itinerary_id  # type: str
        self.order_id = order_id  # type: long
        self.order_status = order_status  # type: int
        self.sub_order_id = sub_order_id  # type: long
        self.third_depart_id = third_depart_id  # type: str
        self.thirdpart_apply_id = thirdpart_apply_id  # type: str
        self.thirdpart_itinerary_id = thirdpart_itinerary_id  # type: str
        self.user_id = user_id  # type: str
        self.user_name = user_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CarOrderQueryResponseBodyModuleOrderBaseInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.btrip_cause is not None:
            result['btrip_cause'] = self.btrip_cause
        if self.btrip_title is not None:
            result['btrip_title'] = self.btrip_title
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        if self.corp_name is not None:
            result['corp_name'] = self.corp_name
        if self.depart_id is not None:
            result['depart_id'] = self.depart_id
        if self.depart_name is not None:
            result['depart_name'] = self.depart_name
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.gmt_modified is not None:
            result['gmt_modified'] = self.gmt_modified
        if self.itinerary_id is not None:
            result['itinerary_id'] = self.itinerary_id
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.order_status is not None:
            result['order_status'] = self.order_status
        if self.sub_order_id is not None:
            result['sub_order_id'] = self.sub_order_id
        if self.third_depart_id is not None:
            result['third_depart_id'] = self.third_depart_id
        if self.thirdpart_apply_id is not None:
            result['thirdpart_apply_id'] = self.thirdpart_apply_id
        if self.thirdpart_itinerary_id is not None:
            result['thirdpart_itinerary_id'] = self.thirdpart_itinerary_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('btrip_cause') is not None:
            self.btrip_cause = m.get('btrip_cause')
        if m.get('btrip_title') is not None:
            self.btrip_title = m.get('btrip_title')
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        if m.get('corp_name') is not None:
            self.corp_name = m.get('corp_name')
        if m.get('depart_id') is not None:
            self.depart_id = m.get('depart_id')
        if m.get('depart_name') is not None:
            self.depart_name = m.get('depart_name')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('gmt_modified') is not None:
            self.gmt_modified = m.get('gmt_modified')
        if m.get('itinerary_id') is not None:
            self.itinerary_id = m.get('itinerary_id')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('order_status') is not None:
            self.order_status = m.get('order_status')
        if m.get('sub_order_id') is not None:
            self.sub_order_id = m.get('sub_order_id')
        if m.get('third_depart_id') is not None:
            self.third_depart_id = m.get('third_depart_id')
        if m.get('thirdpart_apply_id') is not None:
            self.thirdpart_apply_id = m.get('thirdpart_apply_id')
        if m.get('thirdpart_itinerary_id') is not None:
            self.thirdpart_itinerary_id = m.get('thirdpart_itinerary_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class CarOrderQueryResponseBodyModulePassengerList(TeaModel):
    def __init__(self, cost_center_id=None, cost_center_name=None, cost_center_number=None, project_code=None,
                 project_id=None, project_title=None, thirdpart_cost_center_id=None, thirdpart_project_id=None, user_id=None,
                 user_name=None, user_type=None):
        self.cost_center_id = cost_center_id  # type: long
        self.cost_center_name = cost_center_name  # type: str
        self.cost_center_number = cost_center_number  # type: str
        self.project_code = project_code  # type: str
        self.project_id = project_id  # type: long
        self.project_title = project_title  # type: str
        self.thirdpart_cost_center_id = thirdpart_cost_center_id  # type: str
        self.thirdpart_project_id = thirdpart_project_id  # type: str
        self.user_id = user_id  # type: str
        self.user_name = user_name  # type: str
        self.user_type = user_type  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(CarOrderQueryResponseBodyModulePassengerList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cost_center_id is not None:
            result['cost_center_id'] = self.cost_center_id
        if self.cost_center_name is not None:
            result['cost_center_name'] = self.cost_center_name
        if self.cost_center_number is not None:
            result['cost_center_number'] = self.cost_center_number
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_id is not None:
            result['project_id'] = self.project_id
        if self.project_title is not None:
            result['project_title'] = self.project_title
        if self.thirdpart_cost_center_id is not None:
            result['thirdpart_cost_center_id'] = self.thirdpart_cost_center_id
        if self.thirdpart_project_id is not None:
            result['thirdpart_project_id'] = self.thirdpart_project_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        if self.user_type is not None:
            result['user_type'] = self.user_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('cost_center_id') is not None:
            self.cost_center_id = m.get('cost_center_id')
        if m.get('cost_center_name') is not None:
            self.cost_center_name = m.get('cost_center_name')
        if m.get('cost_center_number') is not None:
            self.cost_center_number = m.get('cost_center_number')
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_id') is not None:
            self.project_id = m.get('project_id')
        if m.get('project_title') is not None:
            self.project_title = m.get('project_title')
        if m.get('thirdpart_cost_center_id') is not None:
            self.thirdpart_cost_center_id = m.get('thirdpart_cost_center_id')
        if m.get('thirdpart_project_id') is not None:
            self.thirdpart_project_id = m.get('thirdpart_project_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        if m.get('user_type') is not None:
            self.user_type = m.get('user_type')
        return self


class CarOrderQueryResponseBodyModulePriceInfoList(TeaModel):
    def __init__(self, category_code=None, gmt_create=None, pay_type=None, person_price=None, price=None,
                 trade_id=None, type=None):
        self.category_code = category_code  # type: int
        self.gmt_create = gmt_create  # type: long
        self.pay_type = pay_type  # type: int
        self.person_price = person_price  # type: long
        self.price = price  # type: long
        self.trade_id = trade_id  # type: str
        self.type = type  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(CarOrderQueryResponseBodyModulePriceInfoList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category_code is not None:
            result['category_code'] = self.category_code
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.pay_type is not None:
            result['pay_type'] = self.pay_type
        if self.person_price is not None:
            result['person_price'] = self.person_price
        if self.price is not None:
            result['price'] = self.price
        if self.trade_id is not None:
            result['trade_id'] = self.trade_id
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('category_code') is not None:
            self.category_code = m.get('category_code')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('pay_type') is not None:
            self.pay_type = m.get('pay_type')
        if m.get('person_price') is not None:
            self.person_price = m.get('person_price')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('trade_id') is not None:
            self.trade_id = m.get('trade_id')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class CarOrderQueryResponseBodyModule(TeaModel):
    def __init__(self, car_info=None, invoice_info=None, order_base_info=None, passenger_list=None,
                 price_info_list=None):
        self.car_info = car_info  # type: CarOrderQueryResponseBodyModuleCarInfo
        self.invoice_info = invoice_info  # type: CarOrderQueryResponseBodyModuleInvoiceInfo
        self.order_base_info = order_base_info  # type: CarOrderQueryResponseBodyModuleOrderBaseInfo
        self.passenger_list = passenger_list  # type: list[CarOrderQueryResponseBodyModulePassengerList]
        self.price_info_list = price_info_list  # type: list[CarOrderQueryResponseBodyModulePriceInfoList]

    def validate(self):
        if self.car_info:
            self.car_info.validate()
        if self.invoice_info:
            self.invoice_info.validate()
        if self.order_base_info:
            self.order_base_info.validate()
        if self.passenger_list:
            for k in self.passenger_list:
                if k:
                    k.validate()
        if self.price_info_list:
            for k in self.price_info_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(CarOrderQueryResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.car_info is not None:
            result['car_info'] = self.car_info.to_map()
        if self.invoice_info is not None:
            result['invoice_info'] = self.invoice_info.to_map()
        if self.order_base_info is not None:
            result['order_base_info'] = self.order_base_info.to_map()
        result['passenger_list'] = []
        if self.passenger_list is not None:
            for k in self.passenger_list:
                result['passenger_list'].append(k.to_map() if k else None)
        result['price_info_list'] = []
        if self.price_info_list is not None:
            for k in self.price_info_list:
                result['price_info_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('car_info') is not None:
            temp_model = CarOrderQueryResponseBodyModuleCarInfo()
            self.car_info = temp_model.from_map(m['car_info'])
        if m.get('invoice_info') is not None:
            temp_model = CarOrderQueryResponseBodyModuleInvoiceInfo()
            self.invoice_info = temp_model.from_map(m['invoice_info'])
        if m.get('order_base_info') is not None:
            temp_model = CarOrderQueryResponseBodyModuleOrderBaseInfo()
            self.order_base_info = temp_model.from_map(m['order_base_info'])
        self.passenger_list = []
        if m.get('passenger_list') is not None:
            for k in m.get('passenger_list'):
                temp_model = CarOrderQueryResponseBodyModulePassengerList()
                self.passenger_list.append(temp_model.from_map(k))
        self.price_info_list = []
        if m.get('price_info_list') is not None:
            for k in m.get('price_info_list'):
                temp_model = CarOrderQueryResponseBodyModulePriceInfoList()
                self.price_info_list.append(temp_model.from_map(k))
        return self


class CarOrderQueryResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: CarOrderQueryResponseBodyModule
        # requestId
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        # traceId
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(CarOrderQueryResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = CarOrderQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class CarOrderQueryResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CarOrderQueryResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CarOrderQueryResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CarOrderQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CarSceneQueryHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CarSceneQueryHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class CarSceneQueryResponseBodyModule(TeaModel):
    def __init__(self, scenario_template_id=None, scenario_template_name=None, state=None):
        self.scenario_template_id = scenario_template_id  # type: str
        self.scenario_template_name = scenario_template_name  # type: str
        self.state = state  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CarSceneQueryResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.scenario_template_id is not None:
            result['scenarioTemplateId'] = self.scenario_template_id
        if self.scenario_template_name is not None:
            result['scenarioTemplateName'] = self.scenario_template_name
        if self.state is not None:
            result['state'] = self.state
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('scenarioTemplateId') is not None:
            self.scenario_template_id = m.get('scenarioTemplateId')
        if m.get('scenarioTemplateName') is not None:
            self.scenario_template_name = m.get('scenarioTemplateName')
        if m.get('state') is not None:
            self.state = m.get('state')
        return self


class CarSceneQueryResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: list[CarSceneQueryResponseBodyModule]
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        # traceId
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            for k in self.module:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(CarSceneQueryResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        result['module'] = []
        if self.module is not None:
            for k in self.module:
                result['module'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        self.module = []
        if m.get('module') is not None:
            for k in m.get('module'):
                temp_model = CarSceneQueryResponseBodyModule()
                self.module.append(temp_model.from_map(k))
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class CarSceneQueryResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CarSceneQueryResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CarSceneQueryResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CarSceneQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CitySearchHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_so_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CitySearchHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class CitySearchRequest(TeaModel):
    def __init__(self, keyword=None):
        self.keyword = keyword  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CitySearchRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.keyword is not None:
            result['keyword'] = self.keyword
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('keyword') is not None:
            self.keyword = m.get('keyword')
        return self


class CitySearchResponseBodyModuleCities(TeaModel):
    def __init__(self, code=None, name=None, region=None):
        self.code = code  # type: str
        self.name = name  # type: str
        self.region = region  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(CitySearchResponseBodyModuleCities, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.name is not None:
            result['name'] = self.name
        if self.region is not None:
            result['region'] = self.region
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('region') is not None:
            self.region = m.get('region')
        return self


class CitySearchResponseBodyModule(TeaModel):
    def __init__(self, cities=None):
        self.cities = cities  # type: list[CitySearchResponseBodyModuleCities]

    def validate(self):
        if self.cities:
            for k in self.cities:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(CitySearchResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['cities'] = []
        if self.cities is not None:
            for k in self.cities:
                result['cities'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.cities = []
        if m.get('cities') is not None:
            for k in m.get('cities'):
                temp_model = CitySearchResponseBodyModuleCities()
                self.cities.append(temp_model.from_map(k))
        return self


class CitySearchResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        # module
        self.module = module  # type: CitySearchResponseBodyModule
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(CitySearchResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = CitySearchResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class CitySearchResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CitySearchResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CitySearchResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CitySearchResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CommonApplyQueryHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_so_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CommonApplyQueryHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class CommonApplyQueryRequest(TeaModel):
    def __init__(self, apply_id=None, biz_category=None, user_id=None):
        self.apply_id = apply_id  # type: long
        self.biz_category = biz_category  # type: int
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CommonApplyQueryRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.biz_category is not None:
            result['biz_category'] = self.biz_category
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('biz_category') is not None:
            self.biz_category = m.get('biz_category')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class CommonApplyQueryResponseBodyModule(TeaModel):
    def __init__(self, apply_id=None, biz_category=None, cause=None, corp_id=None, extend_value=None,
                 gmt_create=None, status=None, thirdpart_corp_id=None, thirdpart_id=None, trip_cause=None, user_id=None):
        self.apply_id = apply_id  # type: long
        self.biz_category = biz_category  # type: int
        self.cause = cause  # type: str
        self.corp_id = corp_id  # type: str
        self.extend_value = extend_value  # type: str
        self.gmt_create = gmt_create  # type: str
        self.status = status  # type: int
        self.thirdpart_corp_id = thirdpart_corp_id  # type: str
        self.thirdpart_id = thirdpart_id  # type: str
        self.trip_cause = trip_cause  # type: str
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CommonApplyQueryResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.biz_category is not None:
            result['biz_category'] = self.biz_category
        if self.cause is not None:
            result['cause'] = self.cause
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        if self.extend_value is not None:
            result['extend_value'] = self.extend_value
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.status is not None:
            result['status'] = self.status
        if self.thirdpart_corp_id is not None:
            result['thirdpart_corp_id'] = self.thirdpart_corp_id
        if self.thirdpart_id is not None:
            result['thirdpart_id'] = self.thirdpart_id
        if self.trip_cause is not None:
            result['trip_cause'] = self.trip_cause
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('biz_category') is not None:
            self.biz_category = m.get('biz_category')
        if m.get('cause') is not None:
            self.cause = m.get('cause')
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        if m.get('extend_value') is not None:
            self.extend_value = m.get('extend_value')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('thirdpart_corp_id') is not None:
            self.thirdpart_corp_id = m.get('thirdpart_corp_id')
        if m.get('thirdpart_id') is not None:
            self.thirdpart_id = m.get('thirdpart_id')
        if m.get('trip_cause') is not None:
            self.trip_cause = m.get('trip_cause')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class CommonApplyQueryResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: CommonApplyQueryResponseBodyModule
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(CommonApplyQueryResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = CommonApplyQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class CommonApplyQueryResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CommonApplyQueryResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CommonApplyQueryResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CommonApplyQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CommonApplySyncHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_so_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CommonApplySyncHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class CommonApplySyncRequest(TeaModel):
    def __init__(self, apply_id=None, biz_category=None, remark=None, status=None, thirdparty_flow_id=None,
                 user_id=None):
        self.apply_id = apply_id  # type: long
        self.biz_category = biz_category  # type: int
        self.remark = remark  # type: str
        self.status = status  # type: int
        self.thirdparty_flow_id = thirdparty_flow_id  # type: str
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CommonApplySyncRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.biz_category is not None:
            result['biz_category'] = self.biz_category
        if self.remark is not None:
            result['remark'] = self.remark
        if self.status is not None:
            result['status'] = self.status
        if self.thirdparty_flow_id is not None:
            result['thirdparty_flow_id'] = self.thirdparty_flow_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('biz_category') is not None:
            self.biz_category = m.get('biz_category')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('thirdparty_flow_id') is not None:
            self.thirdparty_flow_id = m.get('thirdparty_flow_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class CommonApplySyncResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        # module。
        self.module = module  # type: bool
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CommonApplySyncResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            self.module = m.get('module')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class CommonApplySyncResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CommonApplySyncResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CommonApplySyncResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CommonApplySyncResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CorpAuthLinkInfoQueryResponseBodyModuleLinkCorps(TeaModel):
    def __init__(self, corp_name=None, open_corp_id=None, true_corp_id=None):
        self.corp_name = corp_name  # type: str
        self.open_corp_id = open_corp_id  # type: str
        self.true_corp_id = true_corp_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CorpAuthLinkInfoQueryResponseBodyModuleLinkCorps, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_name is not None:
            result['corp_name'] = self.corp_name
        if self.open_corp_id is not None:
            result['open_corp_id'] = self.open_corp_id
        if self.true_corp_id is not None:
            result['true_corp_id'] = self.true_corp_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('corp_name') is not None:
            self.corp_name = m.get('corp_name')
        if m.get('open_corp_id') is not None:
            self.open_corp_id = m.get('open_corp_id')
        if m.get('true_corp_id') is not None:
            self.true_corp_id = m.get('true_corp_id')
        return self


class CorpAuthLinkInfoQueryResponseBodyModuleOrgCorp(TeaModel):
    def __init__(self, corp_name=None, open_corp_id=None, true_corp_id=None):
        self.corp_name = corp_name  # type: str
        self.open_corp_id = open_corp_id  # type: str
        self.true_corp_id = true_corp_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CorpAuthLinkInfoQueryResponseBodyModuleOrgCorp, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_name is not None:
            result['corp_name'] = self.corp_name
        if self.open_corp_id is not None:
            result['open_corp_id'] = self.open_corp_id
        if self.true_corp_id is not None:
            result['true_corp_id'] = self.true_corp_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('corp_name') is not None:
            self.corp_name = m.get('corp_name')
        if m.get('open_corp_id') is not None:
            self.open_corp_id = m.get('open_corp_id')
        if m.get('true_corp_id') is not None:
            self.true_corp_id = m.get('true_corp_id')
        return self


class CorpAuthLinkInfoQueryResponseBodyModule(TeaModel):
    def __init__(self, link_corps=None, org_corp=None):
        self.link_corps = link_corps  # type: list[CorpAuthLinkInfoQueryResponseBodyModuleLinkCorps]
        self.org_corp = org_corp  # type: CorpAuthLinkInfoQueryResponseBodyModuleOrgCorp

    def validate(self):
        if self.link_corps:
            for k in self.link_corps:
                if k:
                    k.validate()
        if self.org_corp:
            self.org_corp.validate()

    def to_map(self):
        _map = super(CorpAuthLinkInfoQueryResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['link_corps'] = []
        if self.link_corps is not None:
            for k in self.link_corps:
                result['link_corps'].append(k.to_map() if k else None)
        if self.org_corp is not None:
            result['org_corp'] = self.org_corp.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.link_corps = []
        if m.get('link_corps') is not None:
            for k in m.get('link_corps'):
                temp_model = CorpAuthLinkInfoQueryResponseBodyModuleLinkCorps()
                self.link_corps.append(temp_model.from_map(k))
        if m.get('org_corp') is not None:
            temp_model = CorpAuthLinkInfoQueryResponseBodyModuleOrgCorp()
            self.org_corp = temp_model.from_map(m['org_corp'])
        return self


class CorpAuthLinkInfoQueryResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: CorpAuthLinkInfoQueryResponseBodyModule
        self.request_id = request_id  # type: str
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(CorpAuthLinkInfoQueryResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = CorpAuthLinkInfoQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class CorpAuthLinkInfoQueryResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CorpAuthLinkInfoQueryResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CorpAuthLinkInfoQueryResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CorpAuthLinkInfoQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CorpTokenHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_access_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_access_token = x_acs_btrip_access_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CorpTokenHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_access_token is not None:
            result['x-acs-btrip-access-token'] = self.x_acs_btrip_access_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-access-token') is not None:
            self.x_acs_btrip_access_token = m.get('x-acs-btrip-access-token')
        return self


class CorpTokenRequest(TeaModel):
    def __init__(self, app_secret=None, corp_id=None, type=None):
        self.app_secret = app_secret  # type: str
        self.corp_id = corp_id  # type: str
        self.type = type  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(CorpTokenRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_secret is not None:
            result['app_secret'] = self.app_secret
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('app_secret') is not None:
            self.app_secret = m.get('app_secret')
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class CorpTokenResponseBodyData(TeaModel):
    def __init__(self, expire=None, token=None):
        self.expire = expire  # type: long
        self.token = token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CorpTokenResponseBodyData, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.expire is not None:
            result['expire'] = self.expire
        if self.token is not None:
            result['token'] = self.token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('expire') is not None:
            self.expire = m.get('expire')
        if m.get('token') is not None:
            self.token = m.get('token')
        return self


class CorpTokenResponseBodyModule(TeaModel):
    def __init__(self, expire=None, start=None, token=None):
        self.expire = expire  # type: long
        self.start = start  # type: long
        self.token = token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CorpTokenResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.expire is not None:
            result['expire'] = self.expire
        if self.start is not None:
            result['start'] = self.start
        if self.token is not None:
            result['token'] = self.token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('expire') is not None:
            self.expire = m.get('expire')
        if m.get('start') is not None:
            self.start = m.get('start')
        if m.get('token') is not None:
            self.token = m.get('token')
        return self


class CorpTokenResponseBody(TeaModel):
    def __init__(self, code=None, data=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.data = data  # type: CorpTokenResponseBodyData
        self.message = message  # type: str
        self.module = module  # type: CorpTokenResponseBodyModule
        self.request_id = request_id  # type: str
        # 是否成功
        self.success = success  # type: bool
        # traceId
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.data:
            self.data.validate()
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(CorpTokenResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data.to_map()
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            temp_model = CorpTokenResponseBodyData()
            self.data = temp_model.from_map(m['data'])
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = CorpTokenResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class CorpTokenResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CorpTokenResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CorpTokenResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CorpTokenResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CostCenterDeleteHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_so_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CostCenterDeleteHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class CostCenterDeleteRequest(TeaModel):
    def __init__(self, thirdpart_id=None):
        self.thirdpart_id = thirdpart_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CostCenterDeleteRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.thirdpart_id is not None:
            result['thirdpart_id'] = self.thirdpart_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('thirdpart_id') is not None:
            self.thirdpart_id = m.get('thirdpart_id')
        return self


class CostCenterDeleteResponseBody(TeaModel):
    def __init__(self, code=None, message=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        # traceId
        self.trace_id = trace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CostCenterDeleteResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class CostCenterDeleteResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CostCenterDeleteResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CostCenterDeleteResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CostCenterDeleteResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CostCenterModifyHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_so_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CostCenterModifyHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class CostCenterModifyRequest(TeaModel):
    def __init__(self, alipay_no=None, number=None, scope=None, thirdpart_id=None, title=None):
        self.alipay_no = alipay_no  # type: str
        self.number = number  # type: str
        self.scope = scope  # type: long
        self.thirdpart_id = thirdpart_id  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CostCenterModifyRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alipay_no is not None:
            result['alipay_no'] = self.alipay_no
        if self.number is not None:
            result['number'] = self.number
        if self.scope is not None:
            result['scope'] = self.scope
        if self.thirdpart_id is not None:
            result['thirdpart_id'] = self.thirdpart_id
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('alipay_no') is not None:
            self.alipay_no = m.get('alipay_no')
        if m.get('number') is not None:
            self.number = m.get('number')
        if m.get('scope') is not None:
            self.scope = m.get('scope')
        if m.get('thirdpart_id') is not None:
            self.thirdpart_id = m.get('thirdpart_id')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class CostCenterModifyResponseBody(TeaModel):
    def __init__(self, code=None, message=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CostCenterModifyResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class CostCenterModifyResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CostCenterModifyResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CostCenterModifyResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CostCenterModifyResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CostCenterQueryHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_so_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CostCenterQueryHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class CostCenterQueryRequest(TeaModel):
    def __init__(self, need_org_entity=None, thirdpart_id=None, title=None, user_id=None):
        self.need_org_entity = need_org_entity  # type: bool
        self.thirdpart_id = thirdpart_id  # type: str
        self.title = title  # type: str
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CostCenterQueryRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.need_org_entity is not None:
            result['need_org_entity'] = self.need_org_entity
        if self.thirdpart_id is not None:
            result['thirdpart_id'] = self.thirdpart_id
        if self.title is not None:
            result['title'] = self.title
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('need_org_entity') is not None:
            self.need_org_entity = m.get('need_org_entity')
        if m.get('thirdpart_id') is not None:
            self.thirdpart_id = m.get('thirdpart_id')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class CostCenterQueryResponseBodyModuleEntityDOS(TeaModel):
    def __init__(self, corp_id=None, entity_id=None, entity_type=None, name=None, user_num=None):
        self.corp_id = corp_id  # type: str
        self.entity_id = entity_id  # type: str
        self.entity_type = entity_type  # type: str
        self.name = name  # type: str
        self.user_num = user_num  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(CostCenterQueryResponseBodyModuleEntityDOS, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        if self.entity_id is not None:
            result['entity_id'] = self.entity_id
        if self.entity_type is not None:
            result['entity_type'] = self.entity_type
        if self.name is not None:
            result['name'] = self.name
        if self.user_num is not None:
            result['user_num'] = self.user_num
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        if m.get('entity_id') is not None:
            self.entity_id = m.get('entity_id')
        if m.get('entity_type') is not None:
            self.entity_type = m.get('entity_type')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('user_num') is not None:
            self.user_num = m.get('user_num')
        return self


class CostCenterQueryResponseBodyModule(TeaModel):
    def __init__(self, alipay_no=None, corp_id=None, entity_dos=None, id=None, number=None, rule_code=None,
                 scope=None, thirdpart_id=None, title=None):
        self.alipay_no = alipay_no  # type: str
        self.corp_id = corp_id  # type: str
        self.entity_dos = entity_dos  # type: list[CostCenterQueryResponseBodyModuleEntityDOS]
        self.id = id  # type: long
        self.number = number  # type: str
        # rule code
        self.rule_code = rule_code  # type: long
        self.scope = scope  # type: long
        self.thirdpart_id = thirdpart_id  # type: str
        self.title = title  # type: str

    def validate(self):
        if self.entity_dos:
            for k in self.entity_dos:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(CostCenterQueryResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alipay_no is not None:
            result['alipay_no'] = self.alipay_no
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        result['entity_d_o_s'] = []
        if self.entity_dos is not None:
            for k in self.entity_dos:
                result['entity_d_o_s'].append(k.to_map() if k else None)
        if self.id is not None:
            result['id'] = self.id
        if self.number is not None:
            result['number'] = self.number
        if self.rule_code is not None:
            result['rule_code'] = self.rule_code
        if self.scope is not None:
            result['scope'] = self.scope
        if self.thirdpart_id is not None:
            result['thirdpart_id'] = self.thirdpart_id
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('alipay_no') is not None:
            self.alipay_no = m.get('alipay_no')
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        self.entity_dos = []
        if m.get('entity_d_o_s') is not None:
            for k in m.get('entity_d_o_s'):
                temp_model = CostCenterQueryResponseBodyModuleEntityDOS()
                self.entity_dos.append(temp_model.from_map(k))
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('number') is not None:
            self.number = m.get('number')
        if m.get('rule_code') is not None:
            self.rule_code = m.get('rule_code')
        if m.get('scope') is not None:
            self.scope = m.get('scope')
        if m.get('thirdpart_id') is not None:
            self.thirdpart_id = m.get('thirdpart_id')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class CostCenterQueryResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, more_page=None, request_id=None, success=None,
                 trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: list[CostCenterQueryResponseBodyModule]
        self.more_page = more_page  # type: bool
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        # traceId
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            for k in self.module:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(CostCenterQueryResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        result['module'] = []
        if self.module is not None:
            for k in self.module:
                result['module'].append(k.to_map() if k else None)
        if self.more_page is not None:
            result['more_page'] = self.more_page
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        self.module = []
        if m.get('module') is not None:
            for k in m.get('module'):
                temp_model = CostCenterQueryResponseBodyModule()
                self.module.append(temp_model.from_map(k))
        if m.get('more_page') is not None:
            self.more_page = m.get('more_page')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class CostCenterQueryResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CostCenterQueryResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CostCenterQueryResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CostCenterQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CostCenterSaveHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_so_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CostCenterSaveHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class CostCenterSaveRequest(TeaModel):
    def __init__(self, alipay_no=None, number=None, scope=None, thirdpart_id=None, title=None):
        self.alipay_no = alipay_no  # type: str
        self.number = number  # type: str
        self.scope = scope  # type: long
        self.thirdpart_id = thirdpart_id  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CostCenterSaveRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alipay_no is not None:
            result['alipay_no'] = self.alipay_no
        if self.number is not None:
            result['number'] = self.number
        if self.scope is not None:
            result['scope'] = self.scope
        if self.thirdpart_id is not None:
            result['thirdpart_id'] = self.thirdpart_id
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('alipay_no') is not None:
            self.alipay_no = m.get('alipay_no')
        if m.get('number') is not None:
            self.number = m.get('number')
        if m.get('scope') is not None:
            self.scope = m.get('scope')
        if m.get('thirdpart_id') is not None:
            self.thirdpart_id = m.get('thirdpart_id')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class CostCenterSaveResponseBodyModule(TeaModel):
    def __init__(self, id=None):
        self.id = id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(CostCenterSaveResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        return self


class CostCenterSaveResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: CostCenterSaveResponseBodyModule
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(CostCenterSaveResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = CostCenterSaveResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class CostCenterSaveResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CostCenterSaveResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CostCenterSaveResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CostCenterSaveResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateSubCorpHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateSubCorpHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class CreateSubCorpRequest(TeaModel):
    def __init__(self, outer_corp_id=None, outer_corp_name=None, user_id=None):
        self.outer_corp_id = outer_corp_id  # type: str
        self.outer_corp_name = outer_corp_name  # type: str
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateSubCorpRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.outer_corp_id is not None:
            result['outer_corp_id'] = self.outer_corp_id
        if self.outer_corp_name is not None:
            result['outer_corp_name'] = self.outer_corp_name
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('outer_corp_id') is not None:
            self.outer_corp_id = m.get('outer_corp_id')
        if m.get('outer_corp_name') is not None:
            self.outer_corp_name = m.get('outer_corp_name')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class CreateSubCorpResponseBodyModule(TeaModel):
    def __init__(self, sub_corp_id=None):
        self.sub_corp_id = sub_corp_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(CreateSubCorpResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.sub_corp_id is not None:
            result['sub_corp_id'] = self.sub_corp_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('sub_corp_id') is not None:
            self.sub_corp_id = m.get('sub_corp_id')
        return self


class CreateSubCorpResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: CreateSubCorpResponseBodyModule
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(CreateSubCorpResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = CreateSubCorpResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class CreateSubCorpResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: CreateSubCorpResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(CreateSubCorpResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateSubCorpResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteInvoiceEntityHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteInvoiceEntityHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class DeleteInvoiceEntityRequestEntities(TeaModel):
    def __init__(self, entity_id=None, entity_type=None):
        self.entity_id = entity_id  # type: str
        self.entity_type = entity_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteInvoiceEntityRequestEntities, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.entity_id is not None:
            result['entity_id'] = self.entity_id
        if self.entity_type is not None:
            result['entity_type'] = self.entity_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('entity_id') is not None:
            self.entity_id = m.get('entity_id')
        if m.get('entity_type') is not None:
            self.entity_type = m.get('entity_type')
        return self


class DeleteInvoiceEntityRequest(TeaModel):
    def __init__(self, del_all=None, entities=None, third_part_id=None):
        self.del_all = del_all  # type: bool
        self.entities = entities  # type: list[DeleteInvoiceEntityRequestEntities]
        self.third_part_id = third_part_id  # type: str

    def validate(self):
        if self.entities:
            for k in self.entities:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DeleteInvoiceEntityRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.del_all is not None:
            result['del_all'] = self.del_all
        result['entities'] = []
        if self.entities is not None:
            for k in self.entities:
                result['entities'].append(k.to_map() if k else None)
        if self.third_part_id is not None:
            result['third_part_id'] = self.third_part_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('del_all') is not None:
            self.del_all = m.get('del_all')
        self.entities = []
        if m.get('entities') is not None:
            for k in m.get('entities'):
                temp_model = DeleteInvoiceEntityRequestEntities()
                self.entities.append(temp_model.from_map(k))
        if m.get('third_part_id') is not None:
            self.third_part_id = m.get('third_part_id')
        return self


class DeleteInvoiceEntityShrinkRequest(TeaModel):
    def __init__(self, del_all=None, entities_shrink=None, third_part_id=None):
        self.del_all = del_all  # type: bool
        self.entities_shrink = entities_shrink  # type: str
        self.third_part_id = third_part_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteInvoiceEntityShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.del_all is not None:
            result['del_all'] = self.del_all
        if self.entities_shrink is not None:
            result['entities'] = self.entities_shrink
        if self.third_part_id is not None:
            result['third_part_id'] = self.third_part_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('del_all') is not None:
            self.del_all = m.get('del_all')
        if m.get('entities') is not None:
            self.entities_shrink = m.get('entities')
        if m.get('third_part_id') is not None:
            self.third_part_id = m.get('third_part_id')
        return self


class DeleteInvoiceEntityResponseBodyModule(TeaModel):
    def __init__(self, remove_num=None, selected_user_num=None):
        self.remove_num = remove_num  # type: int
        self.selected_user_num = selected_user_num  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(DeleteInvoiceEntityResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.remove_num is not None:
            result['remove_num'] = self.remove_num
        if self.selected_user_num is not None:
            result['selected_user_num'] = self.selected_user_num
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('remove_num') is not None:
            self.remove_num = m.get('remove_num')
        if m.get('selected_user_num') is not None:
            self.selected_user_num = m.get('selected_user_num')
        return self


class DeleteInvoiceEntityResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: DeleteInvoiceEntityResponseBodyModule
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        # traceId
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(DeleteInvoiceEntityResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = DeleteInvoiceEntityResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class DeleteInvoiceEntityResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DeleteInvoiceEntityResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DeleteInvoiceEntityResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteInvoiceEntityResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DepartmentSaveHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_so_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DepartmentSaveHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class DepartmentSaveRequestDepartList(TeaModel):
    def __init__(self, depart_id=None, depart_name=None, depart_pid=None, manager_ids=None, status=None,
                 third_depart_id=None, third_depart_pid=None):
        self.depart_id = depart_id  # type: long
        self.depart_name = depart_name  # type: str
        self.depart_pid = depart_pid  # type: long
        self.manager_ids = manager_ids  # type: str
        self.status = status  # type: int
        self.third_depart_id = third_depart_id  # type: str
        self.third_depart_pid = third_depart_pid  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DepartmentSaveRequestDepartList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.depart_id is not None:
            result['depart_id'] = self.depart_id
        if self.depart_name is not None:
            result['depart_name'] = self.depart_name
        if self.depart_pid is not None:
            result['depart_pid'] = self.depart_pid
        if self.manager_ids is not None:
            result['manager_ids'] = self.manager_ids
        if self.status is not None:
            result['status'] = self.status
        if self.third_depart_id is not None:
            result['third_depart_id'] = self.third_depart_id
        if self.third_depart_pid is not None:
            result['third_depart_pid'] = self.third_depart_pid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('depart_id') is not None:
            self.depart_id = m.get('depart_id')
        if m.get('depart_name') is not None:
            self.depart_name = m.get('depart_name')
        if m.get('depart_pid') is not None:
            self.depart_pid = m.get('depart_pid')
        if m.get('manager_ids') is not None:
            self.manager_ids = m.get('manager_ids')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('third_depart_id') is not None:
            self.third_depart_id = m.get('third_depart_id')
        if m.get('third_depart_pid') is not None:
            self.third_depart_pid = m.get('third_depart_pid')
        return self


class DepartmentSaveRequest(TeaModel):
    def __init__(self, depart_list=None):
        self.depart_list = depart_list  # type: list[DepartmentSaveRequestDepartList]

    def validate(self):
        if self.depart_list:
            for k in self.depart_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(DepartmentSaveRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['depart_list'] = []
        if self.depart_list is not None:
            for k in self.depart_list:
                result['depart_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.depart_list = []
        if m.get('depart_list') is not None:
            for k in m.get('depart_list'):
                temp_model = DepartmentSaveRequestDepartList()
                self.depart_list.append(temp_model.from_map(k))
        return self


class DepartmentSaveShrinkRequest(TeaModel):
    def __init__(self, depart_list_shrink=None):
        self.depart_list_shrink = depart_list_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DepartmentSaveShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.depart_list_shrink is not None:
            result['depart_list'] = self.depart_list_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('depart_list') is not None:
            self.depart_list_shrink = m.get('depart_list')
        return self


class DepartmentSaveResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        # traceId
        self.trace_id = trace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(DepartmentSaveResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            self.module = m.get('module')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class DepartmentSaveResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: DepartmentSaveResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(DepartmentSaveResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DepartmentSaveResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class EntityAddHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_so_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(EntityAddHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class EntityAddRequestEntityDOList(TeaModel):
    def __init__(self, entity_id=None, entity_type=None):
        self.entity_id = entity_id  # type: str
        self.entity_type = entity_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(EntityAddRequestEntityDOList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.entity_id is not None:
            result['entity_id'] = self.entity_id
        if self.entity_type is not None:
            result['entity_type'] = self.entity_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('entity_id') is not None:
            self.entity_id = m.get('entity_id')
        if m.get('entity_type') is not None:
            self.entity_type = m.get('entity_type')
        return self


class EntityAddRequest(TeaModel):
    def __init__(self, entity_dolist=None, thirdpart_id=None):
        self.entity_dolist = entity_dolist  # type: list[EntityAddRequestEntityDOList]
        self.thirdpart_id = thirdpart_id  # type: str

    def validate(self):
        if self.entity_dolist:
            for k in self.entity_dolist:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(EntityAddRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['entity_d_o_list'] = []
        if self.entity_dolist is not None:
            for k in self.entity_dolist:
                result['entity_d_o_list'].append(k.to_map() if k else None)
        if self.thirdpart_id is not None:
            result['thirdpart_id'] = self.thirdpart_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.entity_dolist = []
        if m.get('entity_d_o_list') is not None:
            for k in m.get('entity_d_o_list'):
                temp_model = EntityAddRequestEntityDOList()
                self.entity_dolist.append(temp_model.from_map(k))
        if m.get('thirdpart_id') is not None:
            self.thirdpart_id = m.get('thirdpart_id')
        return self


class EntityAddShrinkRequest(TeaModel):
    def __init__(self, entity_dolist_shrink=None, thirdpart_id=None):
        self.entity_dolist_shrink = entity_dolist_shrink  # type: str
        self.thirdpart_id = thirdpart_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(EntityAddShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.entity_dolist_shrink is not None:
            result['entity_d_o_list'] = self.entity_dolist_shrink
        if self.thirdpart_id is not None:
            result['thirdpart_id'] = self.thirdpart_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('entity_d_o_list') is not None:
            self.entity_dolist_shrink = m.get('entity_d_o_list')
        if m.get('thirdpart_id') is not None:
            self.thirdpart_id = m.get('thirdpart_id')
        return self


class EntityAddResponseBodyModule(TeaModel):
    def __init__(self, add_num=None, selected_user_num=None):
        self.add_num = add_num  # type: int
        self.selected_user_num = selected_user_num  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(EntityAddResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.add_num is not None:
            result['add_num'] = self.add_num
        if self.selected_user_num is not None:
            result['selected_user_num'] = self.selected_user_num
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('add_num') is not None:
            self.add_num = m.get('add_num')
        if m.get('selected_user_num') is not None:
            self.selected_user_num = m.get('selected_user_num')
        return self


class EntityAddResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: EntityAddResponseBodyModule
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        # traceId
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(EntityAddResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = EntityAddResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class EntityAddResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: EntityAddResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(EntityAddResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = EntityAddResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class EntityDeleteHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_so_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(EntityDeleteHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class EntityDeleteRequestEntityDOList(TeaModel):
    def __init__(self, entity_id=None, entity_type=None):
        self.entity_id = entity_id  # type: str
        self.entity_type = entity_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(EntityDeleteRequestEntityDOList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.entity_id is not None:
            result['entity_id'] = self.entity_id
        if self.entity_type is not None:
            result['entity_type'] = self.entity_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('entity_id') is not None:
            self.entity_id = m.get('entity_id')
        if m.get('entity_type') is not None:
            self.entity_type = m.get('entity_type')
        return self


class EntityDeleteRequest(TeaModel):
    def __init__(self, del_all=None, entity_dolist=None, thirdpart_id=None):
        self.del_all = del_all  # type: bool
        self.entity_dolist = entity_dolist  # type: list[EntityDeleteRequestEntityDOList]
        self.thirdpart_id = thirdpart_id  # type: str

    def validate(self):
        if self.entity_dolist:
            for k in self.entity_dolist:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(EntityDeleteRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.del_all is not None:
            result['del_all'] = self.del_all
        result['entity_d_o_list'] = []
        if self.entity_dolist is not None:
            for k in self.entity_dolist:
                result['entity_d_o_list'].append(k.to_map() if k else None)
        if self.thirdpart_id is not None:
            result['thirdpart_id'] = self.thirdpart_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('del_all') is not None:
            self.del_all = m.get('del_all')
        self.entity_dolist = []
        if m.get('entity_d_o_list') is not None:
            for k in m.get('entity_d_o_list'):
                temp_model = EntityDeleteRequestEntityDOList()
                self.entity_dolist.append(temp_model.from_map(k))
        if m.get('thirdpart_id') is not None:
            self.thirdpart_id = m.get('thirdpart_id')
        return self


class EntityDeleteShrinkRequest(TeaModel):
    def __init__(self, del_all=None, entity_dolist_shrink=None, thirdpart_id=None):
        self.del_all = del_all  # type: bool
        self.entity_dolist_shrink = entity_dolist_shrink  # type: str
        self.thirdpart_id = thirdpart_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(EntityDeleteShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.del_all is not None:
            result['del_all'] = self.del_all
        if self.entity_dolist_shrink is not None:
            result['entity_d_o_list'] = self.entity_dolist_shrink
        if self.thirdpart_id is not None:
            result['thirdpart_id'] = self.thirdpart_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('del_all') is not None:
            self.del_all = m.get('del_all')
        if m.get('entity_d_o_list') is not None:
            self.entity_dolist_shrink = m.get('entity_d_o_list')
        if m.get('thirdpart_id') is not None:
            self.thirdpart_id = m.get('thirdpart_id')
        return self


class EntityDeleteResponseBodyModule(TeaModel):
    def __init__(self, remove_num=None, selected_user_num=None):
        self.remove_num = remove_num  # type: int
        self.selected_user_num = selected_user_num  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(EntityDeleteResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.remove_num is not None:
            result['remove_num'] = self.remove_num
        if self.selected_user_num is not None:
            result['selected_user_num'] = self.selected_user_num
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('remove_num') is not None:
            self.remove_num = m.get('remove_num')
        if m.get('selected_user_num') is not None:
            self.selected_user_num = m.get('selected_user_num')
        return self


class EntityDeleteResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, more_page=None, request_id=None, success=None,
                 trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: EntityDeleteResponseBodyModule
        self.more_page = more_page  # type: bool
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        # traceId
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(EntityDeleteResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.more_page is not None:
            result['more_page'] = self.more_page
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = EntityDeleteResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('more_page') is not None:
            self.more_page = m.get('more_page')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class EntityDeleteResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: EntityDeleteResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(EntityDeleteResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = EntityDeleteResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class EntitySetHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_so_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(EntitySetHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class EntitySetRequestEntityDOList(TeaModel):
    def __init__(self, entity_id=None, entity_type=None):
        self.entity_id = entity_id  # type: str
        self.entity_type = entity_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(EntitySetRequestEntityDOList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.entity_id is not None:
            result['entity_id'] = self.entity_id
        if self.entity_type is not None:
            result['entity_type'] = self.entity_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('entity_id') is not None:
            self.entity_id = m.get('entity_id')
        if m.get('entity_type') is not None:
            self.entity_type = m.get('entity_type')
        return self


class EntitySetRequest(TeaModel):
    def __init__(self, entity_dolist=None, thirdpart_id=None):
        self.entity_dolist = entity_dolist  # type: list[EntitySetRequestEntityDOList]
        self.thirdpart_id = thirdpart_id  # type: str

    def validate(self):
        if self.entity_dolist:
            for k in self.entity_dolist:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(EntitySetRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['entity_d_o_list'] = []
        if self.entity_dolist is not None:
            for k in self.entity_dolist:
                result['entity_d_o_list'].append(k.to_map() if k else None)
        if self.thirdpart_id is not None:
            result['thirdpart_id'] = self.thirdpart_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.entity_dolist = []
        if m.get('entity_d_o_list') is not None:
            for k in m.get('entity_d_o_list'):
                temp_model = EntitySetRequestEntityDOList()
                self.entity_dolist.append(temp_model.from_map(k))
        if m.get('thirdpart_id') is not None:
            self.thirdpart_id = m.get('thirdpart_id')
        return self


class EntitySetShrinkRequest(TeaModel):
    def __init__(self, entity_dolist_shrink=None, thirdpart_id=None):
        self.entity_dolist_shrink = entity_dolist_shrink  # type: str
        self.thirdpart_id = thirdpart_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(EntitySetShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.entity_dolist_shrink is not None:
            result['entity_d_o_list'] = self.entity_dolist_shrink
        if self.thirdpart_id is not None:
            result['thirdpart_id'] = self.thirdpart_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('entity_d_o_list') is not None:
            self.entity_dolist_shrink = m.get('entity_d_o_list')
        if m.get('thirdpart_id') is not None:
            self.thirdpart_id = m.get('thirdpart_id')
        return self


class EntitySetResponseBodyModule(TeaModel):
    def __init__(self, add_num=None, remove_num=None, selected_user_num=None):
        self.add_num = add_num  # type: int
        self.remove_num = remove_num  # type: int
        self.selected_user_num = selected_user_num  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(EntitySetResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.add_num is not None:
            result['add_num'] = self.add_num
        if self.remove_num is not None:
            result['remove_num'] = self.remove_num
        if self.selected_user_num is not None:
            result['selected_user_num'] = self.selected_user_num
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('add_num') is not None:
            self.add_num = m.get('add_num')
        if m.get('remove_num') is not None:
            self.remove_num = m.get('remove_num')
        if m.get('selected_user_num') is not None:
            self.selected_user_num = m.get('selected_user_num')
        return self


class EntitySetResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, more_page=None, request_id=None, success=None,
                 trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: EntitySetResponseBodyModule
        self.more_page = more_page  # type: bool
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        # traceId
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(EntitySetResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.more_page is not None:
            result['more_page'] = self.more_page
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = EntitySetResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('more_page') is not None:
            self.more_page = m.get('more_page')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class EntitySetResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: EntitySetResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(EntitySetResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = EntitySetResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class EstimatedPriceQueryHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_so_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(EstimatedPriceQueryHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class EstimatedPriceQueryRequest(TeaModel):
    def __init__(self, arr_city=None, category=None, dep_city=None, end_time=None, itinerary_id=None,
                 start_time=None, sub_corp_id=None, user_id=None):
        self.arr_city = arr_city  # type: str
        self.category = category  # type: str
        self.dep_city = dep_city  # type: str
        self.end_time = end_time  # type: long
        self.itinerary_id = itinerary_id  # type: str
        self.start_time = start_time  # type: long
        self.sub_corp_id = sub_corp_id  # type: str
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(EstimatedPriceQueryRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_city is not None:
            result['arr_city'] = self.arr_city
        if self.category is not None:
            result['category'] = self.category
        if self.dep_city is not None:
            result['dep_city'] = self.dep_city
        if self.end_time is not None:
            result['end_time'] = self.end_time
        if self.itinerary_id is not None:
            result['itinerary_id'] = self.itinerary_id
        if self.start_time is not None:
            result['start_time'] = self.start_time
        if self.sub_corp_id is not None:
            result['sub_corp_id'] = self.sub_corp_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('arr_city') is not None:
            self.arr_city = m.get('arr_city')
        if m.get('category') is not None:
            self.category = m.get('category')
        if m.get('dep_city') is not None:
            self.dep_city = m.get('dep_city')
        if m.get('end_time') is not None:
            self.end_time = m.get('end_time')
        if m.get('itinerary_id') is not None:
            self.itinerary_id = m.get('itinerary_id')
        if m.get('start_time') is not None:
            self.start_time = m.get('start_time')
        if m.get('sub_corp_id') is not None:
            self.sub_corp_id = m.get('sub_corp_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class EstimatedPriceQueryResponseBodyModuleHotelFeeDetail(TeaModel):
    def __init__(self, city=None, criterion=None, itinerary_id=None, total=None, trip_days=None):
        self.city = city  # type: str
        self.criterion = criterion  # type: long
        self.itinerary_id = itinerary_id  # type: str
        self.total = total  # type: long
        self.trip_days = trip_days  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(EstimatedPriceQueryResponseBodyModuleHotelFeeDetail, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.city is not None:
            result['city'] = self.city
        if self.criterion is not None:
            result['criterion'] = self.criterion
        if self.itinerary_id is not None:
            result['itinerary_id'] = self.itinerary_id
        if self.total is not None:
            result['total'] = self.total
        if self.trip_days is not None:
            result['trip_days'] = self.trip_days
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('city') is not None:
            self.city = m.get('city')
        if m.get('criterion') is not None:
            self.criterion = m.get('criterion')
        if m.get('itinerary_id') is not None:
            self.itinerary_id = m.get('itinerary_id')
        if m.get('total') is not None:
            self.total = m.get('total')
        if m.get('trip_days') is not None:
            self.trip_days = m.get('trip_days')
        return self


class EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutesCheapest(TeaModel):
    def __init__(self, arr_time=None, dep_time=None, fee=None, seat_grade=None, vehicle_no=None):
        self.arr_time = arr_time  # type: str
        self.dep_time = dep_time  # type: str
        self.fee = fee  # type: long
        self.seat_grade = seat_grade  # type: str
        self.vehicle_no = vehicle_no  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutesCheapest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.fee is not None:
            result['fee'] = self.fee
        if self.seat_grade is not None:
            result['seat_grade'] = self.seat_grade
        if self.vehicle_no is not None:
            result['vehicle_no'] = self.vehicle_no
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('fee') is not None:
            self.fee = m.get('fee')
        if m.get('seat_grade') is not None:
            self.seat_grade = m.get('seat_grade')
        if m.get('vehicle_no') is not None:
            self.vehicle_no = m.get('vehicle_no')
        return self


class EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutesMostExpensive(TeaModel):
    def __init__(self, arr_time=None, dep_time=None, fee=None, seat_grade=None, vehicle_no=None):
        self.arr_time = arr_time  # type: str
        self.dep_time = dep_time  # type: str
        self.fee = fee  # type: long
        self.seat_grade = seat_grade  # type: str
        self.vehicle_no = vehicle_no  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutesMostExpensive, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.fee is not None:
            result['fee'] = self.fee
        if self.seat_grade is not None:
            result['seat_grade'] = self.seat_grade
        if self.vehicle_no is not None:
            result['vehicle_no'] = self.vehicle_no
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('fee') is not None:
            self.fee = m.get('fee')
        if m.get('seat_grade') is not None:
            self.seat_grade = m.get('seat_grade')
        if m.get('vehicle_no') is not None:
            self.vehicle_no = m.get('vehicle_no')
        return self


class EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutes(TeaModel):
    def __init__(self, arr_city=None, arr_date=None, cheapest=None, dep_city=None, dep_date=None, err_msg=None,
                 itinerary_id=None, most_expensive=None, success=None):
        self.arr_city = arr_city  # type: str
        self.arr_date = arr_date  # type: long
        self.cheapest = cheapest  # type: EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutesCheapest
        self.dep_city = dep_city  # type: str
        self.dep_date = dep_date  # type: long
        self.err_msg = err_msg  # type: str
        self.itinerary_id = itinerary_id  # type: str
        self.most_expensive = most_expensive  # type: EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutesMostExpensive
        self.success = success  # type: bool

    def validate(self):
        if self.cheapest:
            self.cheapest.validate()
        if self.most_expensive:
            self.most_expensive.validate()

    def to_map(self):
        _map = super(EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutes, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_city is not None:
            result['arr_city'] = self.arr_city
        if self.arr_date is not None:
            result['arr_date'] = self.arr_date
        if self.cheapest is not None:
            result['cheapest'] = self.cheapest.to_map()
        if self.dep_city is not None:
            result['dep_city'] = self.dep_city
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        if self.err_msg is not None:
            result['err_msg'] = self.err_msg
        if self.itinerary_id is not None:
            result['itinerary_id'] = self.itinerary_id
        if self.most_expensive is not None:
            result['most_expensive'] = self.most_expensive.to_map()
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('arr_city') is not None:
            self.arr_city = m.get('arr_city')
        if m.get('arr_date') is not None:
            self.arr_date = m.get('arr_date')
        if m.get('cheapest') is not None:
            temp_model = EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutesCheapest()
            self.cheapest = temp_model.from_map(m['cheapest'])
        if m.get('dep_city') is not None:
            self.dep_city = m.get('dep_city')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        if m.get('err_msg') is not None:
            self.err_msg = m.get('err_msg')
        if m.get('itinerary_id') is not None:
            self.itinerary_id = m.get('itinerary_id')
        if m.get('most_expensive') is not None:
            temp_model = EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutesMostExpensive()
            self.most_expensive = temp_model.from_map(m['most_expensive'])
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class EstimatedPriceQueryResponseBodyModuleTrafficFee(TeaModel):
    def __init__(self, btrip_routes=None, err_msg=None, max_fee=None, min_fee=None, success=None):
        self.btrip_routes = btrip_routes  # type: list[EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutes]
        self.err_msg = err_msg  # type: str
        self.max_fee = max_fee  # type: long
        self.min_fee = min_fee  # type: long
        self.success = success  # type: bool

    def validate(self):
        if self.btrip_routes:
            for k in self.btrip_routes:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(EstimatedPriceQueryResponseBodyModuleTrafficFee, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['btrip_routes'] = []
        if self.btrip_routes is not None:
            for k in self.btrip_routes:
                result['btrip_routes'].append(k.to_map() if k else None)
        if self.err_msg is not None:
            result['err_msg'] = self.err_msg
        if self.max_fee is not None:
            result['max_fee'] = self.max_fee
        if self.min_fee is not None:
            result['min_fee'] = self.min_fee
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.btrip_routes = []
        if m.get('btrip_routes') is not None:
            for k in m.get('btrip_routes'):
                temp_model = EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutes()
                self.btrip_routes.append(temp_model.from_map(k))
        if m.get('err_msg') is not None:
            self.err_msg = m.get('err_msg')
        if m.get('max_fee') is not None:
            self.max_fee = m.get('max_fee')
        if m.get('min_fee') is not None:
            self.min_fee = m.get('min_fee')
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class EstimatedPriceQueryResponseBodyModule(TeaModel):
    def __init__(self, hotel_fee_detail=None, total_hotel_fee=None, traffic_fee=None):
        self.hotel_fee_detail = hotel_fee_detail  # type: list[EstimatedPriceQueryResponseBodyModuleHotelFeeDetail]
        # 酒店费用总额，单位为元
        self.total_hotel_fee = total_hotel_fee  # type: long
        self.traffic_fee = traffic_fee  # type: EstimatedPriceQueryResponseBodyModuleTrafficFee

    def validate(self):
        if self.hotel_fee_detail:
            for k in self.hotel_fee_detail:
                if k:
                    k.validate()
        if self.traffic_fee:
            self.traffic_fee.validate()

    def to_map(self):
        _map = super(EstimatedPriceQueryResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['hotel_fee_detail'] = []
        if self.hotel_fee_detail is not None:
            for k in self.hotel_fee_detail:
                result['hotel_fee_detail'].append(k.to_map() if k else None)
        if self.total_hotel_fee is not None:
            result['total_hotel_fee'] = self.total_hotel_fee
        if self.traffic_fee is not None:
            result['traffic_fee'] = self.traffic_fee.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.hotel_fee_detail = []
        if m.get('hotel_fee_detail') is not None:
            for k in m.get('hotel_fee_detail'):
                temp_model = EstimatedPriceQueryResponseBodyModuleHotelFeeDetail()
                self.hotel_fee_detail.append(temp_model.from_map(k))
        if m.get('total_hotel_fee') is not None:
            self.total_hotel_fee = m.get('total_hotel_fee')
        if m.get('traffic_fee') is not None:
            temp_model = EstimatedPriceQueryResponseBodyModuleTrafficFee()
            self.traffic_fee = temp_model.from_map(m['traffic_fee'])
        return self


class EstimatedPriceQueryResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: int
        self.message = message  # type: str
        self.module = module  # type: EstimatedPriceQueryResponseBodyModule
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        # traceId
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(EstimatedPriceQueryResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = EstimatedPriceQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class EstimatedPriceQueryResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: EstimatedPriceQueryResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(EstimatedPriceQueryResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = EstimatedPriceQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ExceedApplySyncHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_so_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ExceedApplySyncHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class ExceedApplySyncRequest(TeaModel):
    def __init__(self, apply_id=None, biz_category=None, remark=None, status=None, thirdparty_flow_id=None,
                 user_id=None):
        self.apply_id = apply_id  # type: long
        self.biz_category = biz_category  # type: int
        self.remark = remark  # type: str
        self.status = status  # type: int
        self.thirdparty_flow_id = thirdparty_flow_id  # type: str
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ExceedApplySyncRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.biz_category is not None:
            result['biz_category'] = self.biz_category
        if self.remark is not None:
            result['remark'] = self.remark
        if self.status is not None:
            result['status'] = self.status
        if self.thirdparty_flow_id is not None:
            result['thirdparty_flow_id'] = self.thirdparty_flow_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('biz_category') is not None:
            self.biz_category = m.get('biz_category')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('thirdparty_flow_id') is not None:
            self.thirdparty_flow_id = m.get('thirdparty_flow_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class ExceedApplySyncResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        # module。
        self.module = module  # type: bool
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ExceedApplySyncResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            self.module = m.get('module')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class ExceedApplySyncResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ExceedApplySyncResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ExceedApplySyncResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ExceedApplySyncResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightBillSettlementQueryHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_so_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightBillSettlementQueryHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class FlightBillSettlementQueryRequest(TeaModel):
    def __init__(self, page_no=None, page_size=None, period_end=None, period_start=None):
        self.page_no = page_no  # type: int
        self.page_size = page_size  # type: int
        self.period_end = period_end  # type: str
        self.period_start = period_start  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightBillSettlementQueryRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_no is not None:
            result['page_no'] = self.page_no
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.period_end is not None:
            result['period_end'] = self.period_end
        if self.period_start is not None:
            result['period_start'] = self.period_start
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('page_no') is not None:
            self.page_no = m.get('page_no')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('period_end') is not None:
            self.period_end = m.get('period_end')
        if m.get('period_start') is not None:
            self.period_start = m.get('period_start')
        return self


class FlightBillSettlementQueryResponseBodyModuleDataList(TeaModel):
    def __init__(self, advance_day=None, airline_corp_code=None, airline_corp_name=None, alipay_trade_no=None,
                 apply_arr_city_code=None, apply_arr_city_name=None, apply_dep_city_code=None, apply_dep_city_name=None,
                 apply_extend_field=None, apply_id=None, arr_airport_code=None, arr_city=None, arr_city_code=None, arr_date=None,
                 arr_station=None, arr_time=None, bill_record_time=None, book_time=None, booker_id=None, booker_job_no=None,
                 booker_name=None, btrip_coupon_fee=None, build_fee=None, business_trip_result=None, cabin=None,
                 cabin_class=None, capital_direction=None, cascade_department=None, change_fee=None, change_result=None,
                 corp_pay_order_fee=None, corp_settle_price=None, cost_center=None, cost_center_number=None, coupon=None,
                 dep_airport_code=None, dep_city_code=None, department=None, department_id=None, dept_city=None, dept_date=None,
                 dept_station=None, dept_time=None, discount=None, exceed_reason=None, fee_type=None, flight_no=None, index=None,
                 ins_order_id=None, insurance_fee=None, insurance_number=None, invoice_title=None, itinerary_num=None,
                 itinerary_price=None, mileage=None, most_difference_dept_time=None, most_difference_discount=None,
                 most_difference_flight_no=None, most_difference_price=None, most_difference_reason=None, most_price=None,
                 negotiation_coupon_fee=None, oil_fee=None, order_id=None, over_apply_id=None, person_settle_price=None, pre_book_tip=None,
                 primary_id=None, project_code=None, project_name=None, refund_fee=None, refund_result=None,
                 refund_upgrade_cost=None, remark=None, repeat_refund=None, seal_price=None, service_fee=None, settlement_fee=None,
                 settlement_grant_fee=None, settlement_time=None, settlement_type=None, status=None, tax_rate=None,
                 third_itinerary_id=None, ticket_id=None, trade=None, traveler_id=None, traveler_job_no=None,
                 traveler_member_type_name=None, traveler_name=None, upgrade_cost=None, voucher_type=None):
        self.advance_day = advance_day  # type: int
        self.airline_corp_code = airline_corp_code  # type: str
        self.airline_corp_name = airline_corp_name  # type: str
        self.alipay_trade_no = alipay_trade_no  # type: str
        self.apply_arr_city_code = apply_arr_city_code  # type: str
        self.apply_arr_city_name = apply_arr_city_name  # type: str
        self.apply_dep_city_code = apply_dep_city_code  # type: str
        self.apply_dep_city_name = apply_dep_city_name  # type: str
        # 审批扩展自定义字段
        self.apply_extend_field = apply_extend_field  # type: str
        self.apply_id = apply_id  # type: str
        self.arr_airport_code = arr_airport_code  # type: str
        self.arr_city = arr_city  # type: str
        self.arr_city_code = arr_city_code  # type: str
        self.arr_date = arr_date  # type: str
        self.arr_station = arr_station  # type: str
        self.arr_time = arr_time  # type: str
        self.bill_record_time = bill_record_time  # type: str
        self.book_time = book_time  # type: str
        self.booker_id = booker_id  # type: str
        self.booker_job_no = booker_job_no  # type: str
        self.booker_name = booker_name  # type: str
        self.btrip_coupon_fee = btrip_coupon_fee  # type: float
        self.build_fee = build_fee  # type: float
        self.business_trip_result = business_trip_result  # type: str
        self.cabin = cabin  # type: str
        self.cabin_class = cabin_class  # type: str
        self.capital_direction = capital_direction  # type: str
        self.cascade_department = cascade_department  # type: str
        self.change_fee = change_fee  # type: float
        self.change_result = change_result  # type: str
        self.corp_pay_order_fee = corp_pay_order_fee  # type: float
        self.corp_settle_price = corp_settle_price  # type: float
        self.cost_center = cost_center  # type: str
        self.cost_center_number = cost_center_number  # type: str
        self.coupon = coupon  # type: float
        self.dep_airport_code = dep_airport_code  # type: str
        self.dep_city_code = dep_city_code  # type: str
        self.department = department  # type: str
        self.department_id = department_id  # type: str
        self.dept_city = dept_city  # type: str
        self.dept_date = dept_date  # type: str
        self.dept_station = dept_station  # type: str
        self.dept_time = dept_time  # type: str
        self.discount = discount  # type: str
        self.exceed_reason = exceed_reason  # type: str
        self.fee_type = fee_type  # type: str
        self.flight_no = flight_no  # type: str
        self.index = index  # type: str
        self.ins_order_id = ins_order_id  # type: str
        self.insurance_fee = insurance_fee  # type: float
        self.insurance_number = insurance_number  # type: str
        self.invoice_title = invoice_title  # type: str
        self.itinerary_num = itinerary_num  # type: str
        self.itinerary_price = itinerary_price  # type: float
        self.mileage = mileage  # type: str
        self.most_difference_dept_time = most_difference_dept_time  # type: str
        self.most_difference_discount = most_difference_discount  # type: str
        self.most_difference_flight_no = most_difference_flight_no  # type: str
        self.most_difference_price = most_difference_price  # type: float
        self.most_difference_reason = most_difference_reason  # type: str
        self.most_price = most_price  # type: float
        self.negotiation_coupon_fee = negotiation_coupon_fee  # type: float
        self.oil_fee = oil_fee  # type: float
        self.order_id = order_id  # type: str
        self.over_apply_id = over_apply_id  # type: str
        self.person_settle_price = person_settle_price  # type: float
        self.pre_book_tip = pre_book_tip  # type: str
        self.primary_id = primary_id  # type: long
        self.project_code = project_code  # type: str
        self.project_name = project_name  # type: str
        self.refund_fee = refund_fee  # type: float
        self.refund_result = refund_result  # type: str
        self.refund_upgrade_cost = refund_upgrade_cost  # type: float
        self.remark = remark  # type: str
        self.repeat_refund = repeat_refund  # type: str
        self.seal_price = seal_price  # type: float
        self.service_fee = service_fee  # type: float
        self.settlement_fee = settlement_fee  # type: float
        self.settlement_grant_fee = settlement_grant_fee  # type: float
        self.settlement_time = settlement_time  # type: str
        self.settlement_type = settlement_type  # type: str
        self.status = status  # type: int
        # 税率
        self.tax_rate = tax_rate  # type: str
        self.third_itinerary_id = third_itinerary_id  # type: str
        self.ticket_id = ticket_id  # type: str
        self.trade = trade  # type: str
        self.traveler_id = traveler_id  # type: str
        self.traveler_job_no = traveler_job_no  # type: str
        self.traveler_member_type_name = traveler_member_type_name  # type: str
        self.traveler_name = traveler_name  # type: str
        self.upgrade_cost = upgrade_cost  # type: float
        self.voucher_type = voucher_type  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightBillSettlementQueryResponseBodyModuleDataList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.advance_day is not None:
            result['advance_day'] = self.advance_day
        if self.airline_corp_code is not None:
            result['airline_corp_code'] = self.airline_corp_code
        if self.airline_corp_name is not None:
            result['airline_corp_name'] = self.airline_corp_name
        if self.alipay_trade_no is not None:
            result['alipay_trade_no'] = self.alipay_trade_no
        if self.apply_arr_city_code is not None:
            result['apply_arr_city_code'] = self.apply_arr_city_code
        if self.apply_arr_city_name is not None:
            result['apply_arr_city_name'] = self.apply_arr_city_name
        if self.apply_dep_city_code is not None:
            result['apply_dep_city_code'] = self.apply_dep_city_code
        if self.apply_dep_city_name is not None:
            result['apply_dep_city_name'] = self.apply_dep_city_name
        if self.apply_extend_field is not None:
            result['apply_extend_field'] = self.apply_extend_field
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.arr_airport_code is not None:
            result['arr_airport_code'] = self.arr_airport_code
        if self.arr_city is not None:
            result['arr_city'] = self.arr_city
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.arr_date is not None:
            result['arr_date'] = self.arr_date
        if self.arr_station is not None:
            result['arr_station'] = self.arr_station
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.bill_record_time is not None:
            result['bill_record_time'] = self.bill_record_time
        if self.book_time is not None:
            result['book_time'] = self.book_time
        if self.booker_id is not None:
            result['booker_id'] = self.booker_id
        if self.booker_job_no is not None:
            result['booker_job_no'] = self.booker_job_no
        if self.booker_name is not None:
            result['booker_name'] = self.booker_name
        if self.btrip_coupon_fee is not None:
            result['btrip_coupon_fee'] = self.btrip_coupon_fee
        if self.build_fee is not None:
            result['build_fee'] = self.build_fee
        if self.business_trip_result is not None:
            result['business_trip_result'] = self.business_trip_result
        if self.cabin is not None:
            result['cabin'] = self.cabin
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.capital_direction is not None:
            result['capital_direction'] = self.capital_direction
        if self.cascade_department is not None:
            result['cascade_department'] = self.cascade_department
        if self.change_fee is not None:
            result['change_fee'] = self.change_fee
        if self.change_result is not None:
            result['change_result'] = self.change_result
        if self.corp_pay_order_fee is not None:
            result['corp_pay_order_fee'] = self.corp_pay_order_fee
        if self.corp_settle_price is not None:
            result['corp_settle_price'] = self.corp_settle_price
        if self.cost_center is not None:
            result['cost_center'] = self.cost_center
        if self.cost_center_number is not None:
            result['cost_center_number'] = self.cost_center_number
        if self.coupon is not None:
            result['coupon'] = self.coupon
        if self.dep_airport_code is not None:
            result['dep_airport_code'] = self.dep_airport_code
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.department is not None:
            result['department'] = self.department
        if self.department_id is not None:
            result['department_id'] = self.department_id
        if self.dept_city is not None:
            result['dept_city'] = self.dept_city
        if self.dept_date is not None:
            result['dept_date'] = self.dept_date
        if self.dept_station is not None:
            result['dept_station'] = self.dept_station
        if self.dept_time is not None:
            result['dept_time'] = self.dept_time
        if self.discount is not None:
            result['discount'] = self.discount
        if self.exceed_reason is not None:
            result['exceed_reason'] = self.exceed_reason
        if self.fee_type is not None:
            result['fee_type'] = self.fee_type
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        if self.index is not None:
            result['index'] = self.index
        if self.ins_order_id is not None:
            result['ins_order_id'] = self.ins_order_id
        if self.insurance_fee is not None:
            result['insurance_fee'] = self.insurance_fee
        if self.insurance_number is not None:
            result['insurance_number'] = self.insurance_number
        if self.invoice_title is not None:
            result['invoice_title'] = self.invoice_title
        if self.itinerary_num is not None:
            result['itinerary_num'] = self.itinerary_num
        if self.itinerary_price is not None:
            result['itinerary_price'] = self.itinerary_price
        if self.mileage is not None:
            result['mileage'] = self.mileage
        if self.most_difference_dept_time is not None:
            result['most_difference_dept_time'] = self.most_difference_dept_time
        if self.most_difference_discount is not None:
            result['most_difference_discount'] = self.most_difference_discount
        if self.most_difference_flight_no is not None:
            result['most_difference_flight_no'] = self.most_difference_flight_no
        if self.most_difference_price is not None:
            result['most_difference_price'] = self.most_difference_price
        if self.most_difference_reason is not None:
            result['most_difference_reason'] = self.most_difference_reason
        if self.most_price is not None:
            result['most_price'] = self.most_price
        if self.negotiation_coupon_fee is not None:
            result['negotiation_coupon_fee'] = self.negotiation_coupon_fee
        if self.oil_fee is not None:
            result['oil_fee'] = self.oil_fee
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.over_apply_id is not None:
            result['over_apply_id'] = self.over_apply_id
        if self.person_settle_price is not None:
            result['person_settle_price'] = self.person_settle_price
        if self.pre_book_tip is not None:
            result['pre_book_tip'] = self.pre_book_tip
        if self.primary_id is not None:
            result['primary_id'] = self.primary_id
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_name is not None:
            result['project_name'] = self.project_name
        if self.refund_fee is not None:
            result['refund_fee'] = self.refund_fee
        if self.refund_result is not None:
            result['refund_result'] = self.refund_result
        if self.refund_upgrade_cost is not None:
            result['refund_upgrade_cost'] = self.refund_upgrade_cost
        if self.remark is not None:
            result['remark'] = self.remark
        if self.repeat_refund is not None:
            result['repeat_refund'] = self.repeat_refund
        if self.seal_price is not None:
            result['seal_price'] = self.seal_price
        if self.service_fee is not None:
            result['service_fee'] = self.service_fee
        if self.settlement_fee is not None:
            result['settlement_fee'] = self.settlement_fee
        if self.settlement_grant_fee is not None:
            result['settlement_grant_fee'] = self.settlement_grant_fee
        if self.settlement_time is not None:
            result['settlement_time'] = self.settlement_time
        if self.settlement_type is not None:
            result['settlement_type'] = self.settlement_type
        if self.status is not None:
            result['status'] = self.status
        if self.tax_rate is not None:
            result['tax_rate'] = self.tax_rate
        if self.third_itinerary_id is not None:
            result['third_itinerary_id'] = self.third_itinerary_id
        if self.ticket_id is not None:
            result['ticket_id'] = self.ticket_id
        if self.trade is not None:
            result['trade'] = self.trade
        if self.traveler_id is not None:
            result['traveler_id'] = self.traveler_id
        if self.traveler_job_no is not None:
            result['traveler_job_no'] = self.traveler_job_no
        if self.traveler_member_type_name is not None:
            result['traveler_member_type_name'] = self.traveler_member_type_name
        if self.traveler_name is not None:
            result['traveler_name'] = self.traveler_name
        if self.upgrade_cost is not None:
            result['upgrade_cost'] = self.upgrade_cost
        if self.voucher_type is not None:
            result['voucher_type'] = self.voucher_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('advance_day') is not None:
            self.advance_day = m.get('advance_day')
        if m.get('airline_corp_code') is not None:
            self.airline_corp_code = m.get('airline_corp_code')
        if m.get('airline_corp_name') is not None:
            self.airline_corp_name = m.get('airline_corp_name')
        if m.get('alipay_trade_no') is not None:
            self.alipay_trade_no = m.get('alipay_trade_no')
        if m.get('apply_arr_city_code') is not None:
            self.apply_arr_city_code = m.get('apply_arr_city_code')
        if m.get('apply_arr_city_name') is not None:
            self.apply_arr_city_name = m.get('apply_arr_city_name')
        if m.get('apply_dep_city_code') is not None:
            self.apply_dep_city_code = m.get('apply_dep_city_code')
        if m.get('apply_dep_city_name') is not None:
            self.apply_dep_city_name = m.get('apply_dep_city_name')
        if m.get('apply_extend_field') is not None:
            self.apply_extend_field = m.get('apply_extend_field')
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('arr_airport_code') is not None:
            self.arr_airport_code = m.get('arr_airport_code')
        if m.get('arr_city') is not None:
            self.arr_city = m.get('arr_city')
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('arr_date') is not None:
            self.arr_date = m.get('arr_date')
        if m.get('arr_station') is not None:
            self.arr_station = m.get('arr_station')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('bill_record_time') is not None:
            self.bill_record_time = m.get('bill_record_time')
        if m.get('book_time') is not None:
            self.book_time = m.get('book_time')
        if m.get('booker_id') is not None:
            self.booker_id = m.get('booker_id')
        if m.get('booker_job_no') is not None:
            self.booker_job_no = m.get('booker_job_no')
        if m.get('booker_name') is not None:
            self.booker_name = m.get('booker_name')
        if m.get('btrip_coupon_fee') is not None:
            self.btrip_coupon_fee = m.get('btrip_coupon_fee')
        if m.get('build_fee') is not None:
            self.build_fee = m.get('build_fee')
        if m.get('business_trip_result') is not None:
            self.business_trip_result = m.get('business_trip_result')
        if m.get('cabin') is not None:
            self.cabin = m.get('cabin')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('capital_direction') is not None:
            self.capital_direction = m.get('capital_direction')
        if m.get('cascade_department') is not None:
            self.cascade_department = m.get('cascade_department')
        if m.get('change_fee') is not None:
            self.change_fee = m.get('change_fee')
        if m.get('change_result') is not None:
            self.change_result = m.get('change_result')
        if m.get('corp_pay_order_fee') is not None:
            self.corp_pay_order_fee = m.get('corp_pay_order_fee')
        if m.get('corp_settle_price') is not None:
            self.corp_settle_price = m.get('corp_settle_price')
        if m.get('cost_center') is not None:
            self.cost_center = m.get('cost_center')
        if m.get('cost_center_number') is not None:
            self.cost_center_number = m.get('cost_center_number')
        if m.get('coupon') is not None:
            self.coupon = m.get('coupon')
        if m.get('dep_airport_code') is not None:
            self.dep_airport_code = m.get('dep_airport_code')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('department') is not None:
            self.department = m.get('department')
        if m.get('department_id') is not None:
            self.department_id = m.get('department_id')
        if m.get('dept_city') is not None:
            self.dept_city = m.get('dept_city')
        if m.get('dept_date') is not None:
            self.dept_date = m.get('dept_date')
        if m.get('dept_station') is not None:
            self.dept_station = m.get('dept_station')
        if m.get('dept_time') is not None:
            self.dept_time = m.get('dept_time')
        if m.get('discount') is not None:
            self.discount = m.get('discount')
        if m.get('exceed_reason') is not None:
            self.exceed_reason = m.get('exceed_reason')
        if m.get('fee_type') is not None:
            self.fee_type = m.get('fee_type')
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        if m.get('index') is not None:
            self.index = m.get('index')
        if m.get('ins_order_id') is not None:
            self.ins_order_id = m.get('ins_order_id')
        if m.get('insurance_fee') is not None:
            self.insurance_fee = m.get('insurance_fee')
        if m.get('insurance_number') is not None:
            self.insurance_number = m.get('insurance_number')
        if m.get('invoice_title') is not None:
            self.invoice_title = m.get('invoice_title')
        if m.get('itinerary_num') is not None:
            self.itinerary_num = m.get('itinerary_num')
        if m.get('itinerary_price') is not None:
            self.itinerary_price = m.get('itinerary_price')
        if m.get('mileage') is not None:
            self.mileage = m.get('mileage')
        if m.get('most_difference_dept_time') is not None:
            self.most_difference_dept_time = m.get('most_difference_dept_time')
        if m.get('most_difference_discount') is not None:
            self.most_difference_discount = m.get('most_difference_discount')
        if m.get('most_difference_flight_no') is not None:
            self.most_difference_flight_no = m.get('most_difference_flight_no')
        if m.get('most_difference_price') is not None:
            self.most_difference_price = m.get('most_difference_price')
        if m.get('most_difference_reason') is not None:
            self.most_difference_reason = m.get('most_difference_reason')
        if m.get('most_price') is not None:
            self.most_price = m.get('most_price')
        if m.get('negotiation_coupon_fee') is not None:
            self.negotiation_coupon_fee = m.get('negotiation_coupon_fee')
        if m.get('oil_fee') is not None:
            self.oil_fee = m.get('oil_fee')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('over_apply_id') is not None:
            self.over_apply_id = m.get('over_apply_id')
        if m.get('person_settle_price') is not None:
            self.person_settle_price = m.get('person_settle_price')
        if m.get('pre_book_tip') is not None:
            self.pre_book_tip = m.get('pre_book_tip')
        if m.get('primary_id') is not None:
            self.primary_id = m.get('primary_id')
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_name') is not None:
            self.project_name = m.get('project_name')
        if m.get('refund_fee') is not None:
            self.refund_fee = m.get('refund_fee')
        if m.get('refund_result') is not None:
            self.refund_result = m.get('refund_result')
        if m.get('refund_upgrade_cost') is not None:
            self.refund_upgrade_cost = m.get('refund_upgrade_cost')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('repeat_refund') is not None:
            self.repeat_refund = m.get('repeat_refund')
        if m.get('seal_price') is not None:
            self.seal_price = m.get('seal_price')
        if m.get('service_fee') is not None:
            self.service_fee = m.get('service_fee')
        if m.get('settlement_fee') is not None:
            self.settlement_fee = m.get('settlement_fee')
        if m.get('settlement_grant_fee') is not None:
            self.settlement_grant_fee = m.get('settlement_grant_fee')
        if m.get('settlement_time') is not None:
            self.settlement_time = m.get('settlement_time')
        if m.get('settlement_type') is not None:
            self.settlement_type = m.get('settlement_type')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('tax_rate') is not None:
            self.tax_rate = m.get('tax_rate')
        if m.get('third_itinerary_id') is not None:
            self.third_itinerary_id = m.get('third_itinerary_id')
        if m.get('ticket_id') is not None:
            self.ticket_id = m.get('ticket_id')
        if m.get('trade') is not None:
            self.trade = m.get('trade')
        if m.get('traveler_id') is not None:
            self.traveler_id = m.get('traveler_id')
        if m.get('traveler_job_no') is not None:
            self.traveler_job_no = m.get('traveler_job_no')
        if m.get('traveler_member_type_name') is not None:
            self.traveler_member_type_name = m.get('traveler_member_type_name')
        if m.get('traveler_name') is not None:
            self.traveler_name = m.get('traveler_name')
        if m.get('upgrade_cost') is not None:
            self.upgrade_cost = m.get('upgrade_cost')
        if m.get('voucher_type') is not None:
            self.voucher_type = m.get('voucher_type')
        return self


class FlightBillSettlementQueryResponseBodyModule(TeaModel):
    def __init__(self, category=None, corp_id=None, data_list=None, period_end=None, period_start=None,
                 total_num=None):
        self.category = category  # type: int
        self.corp_id = corp_id  # type: str
        self.data_list = data_list  # type: list[FlightBillSettlementQueryResponseBodyModuleDataList]
        self.period_end = period_end  # type: str
        self.period_start = period_start  # type: str
        self.total_num = total_num  # type: long

    def validate(self):
        if self.data_list:
            for k in self.data_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightBillSettlementQueryResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['category'] = self.category
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        result['data_list'] = []
        if self.data_list is not None:
            for k in self.data_list:
                result['data_list'].append(k.to_map() if k else None)
        if self.period_end is not None:
            result['period_end'] = self.period_end
        if self.period_start is not None:
            result['period_start'] = self.period_start
        if self.total_num is not None:
            result['total_num'] = self.total_num
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('category') is not None:
            self.category = m.get('category')
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        self.data_list = []
        if m.get('data_list') is not None:
            for k in m.get('data_list'):
                temp_model = FlightBillSettlementQueryResponseBodyModuleDataList()
                self.data_list.append(temp_model.from_map(k))
        if m.get('period_end') is not None:
            self.period_end = m.get('period_end')
        if m.get('period_start') is not None:
            self.period_start = m.get('period_start')
        if m.get('total_num') is not None:
            self.total_num = m.get('total_num')
        return self


class FlightBillSettlementQueryResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: FlightBillSettlementQueryResponseBodyModule
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(FlightBillSettlementQueryResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = FlightBillSettlementQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightBillSettlementQueryResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: FlightBillSettlementQueryResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(FlightBillSettlementQueryResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightBillSettlementQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightCancelOrderHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightCancelOrderHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class FlightCancelOrderRequest(TeaModel):
    def __init__(self, dis_order_id=None):
        self.dis_order_id = dis_order_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightCancelOrderRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        return self


class FlightCancelOrderResponseBodyModule(TeaModel):
    def __init__(self, cancel_time=None, fail_code=None, fail_reason=None, order_status=None):
        self.cancel_time = cancel_time  # type: str
        self.fail_code = fail_code  # type: str
        self.fail_reason = fail_reason  # type: str
        self.order_status = order_status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightCancelOrderResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cancel_time is not None:
            result['cancel_time'] = self.cancel_time
        if self.fail_code is not None:
            result['fail_code'] = self.fail_code
        if self.fail_reason is not None:
            result['fail_reason'] = self.fail_reason
        if self.order_status is not None:
            result['order_status'] = self.order_status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('cancel_time') is not None:
            self.cancel_time = m.get('cancel_time')
        if m.get('fail_code') is not None:
            self.fail_code = m.get('fail_code')
        if m.get('fail_reason') is not None:
            self.fail_reason = m.get('fail_reason')
        if m.get('order_status') is not None:
            self.order_status = m.get('order_status')
        return self


class FlightCancelOrderResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: FlightCancelOrderResponseBodyModule
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(FlightCancelOrderResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = FlightCancelOrderResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightCancelOrderResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: FlightCancelOrderResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(FlightCancelOrderResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightCancelOrderResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightCancelOrderV2Headers(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightCancelOrderV2Headers, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class FlightCancelOrderV2Request(TeaModel):
    def __init__(self, isv_name=None, order_id=None, out_order_id=None):
        self.isv_name = isv_name  # type: str
        self.order_id = order_id  # type: str
        self.out_order_id = out_order_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightCancelOrderV2Request, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        return self


class FlightCancelOrderV2ResponseBodyModule(TeaModel):
    def __init__(self, cancel_time=None):
        self.cancel_time = cancel_time  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightCancelOrderV2ResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cancel_time is not None:
            result['cancel_time'] = self.cancel_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('cancel_time') is not None:
            self.cancel_time = m.get('cancel_time')
        return self


class FlightCancelOrderV2ResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        # module
        self.module = module  # type: FlightCancelOrderV2ResponseBodyModule
        # requestId
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        # traceId
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(FlightCancelOrderV2ResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = FlightCancelOrderV2ResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightCancelOrderV2Response(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: FlightCancelOrderV2ResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(FlightCancelOrderV2Response, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightCancelOrderV2ResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightCreateOrderHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightCreateOrderHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class FlightCreateOrderRequestContactInfo(TeaModel):
    def __init__(self, contact_email=None, contact_name=None, contact_phone=None):
        self.contact_email = contact_email  # type: str
        self.contact_name = contact_name  # type: str
        self.contact_phone = contact_phone  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightCreateOrderRequestContactInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_email is not None:
            result['contact_email'] = self.contact_email
        if self.contact_name is not None:
            result['contact_name'] = self.contact_name
        if self.contact_phone is not None:
            result['contact_phone'] = self.contact_phone
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('contact_email') is not None:
            self.contact_email = m.get('contact_email')
        if m.get('contact_name') is not None:
            self.contact_name = m.get('contact_name')
        if m.get('contact_phone') is not None:
            self.contact_phone = m.get('contact_phone')
        return self


class FlightCreateOrderRequestTravelerInfoList(TeaModel):
    def __init__(self, birthday=None, cert_nation=None, cert_no=None, cert_type=None, cert_valid_date=None,
                 name=None, nationality=None, nationality_code=None, out_user_id=None, phone=None, sex=None, type=None):
        self.birthday = birthday  # type: str
        self.cert_nation = cert_nation  # type: str
        self.cert_no = cert_no  # type: str
        self.cert_type = cert_type  # type: str
        self.cert_valid_date = cert_valid_date  # type: str
        self.name = name  # type: str
        # 国籍
        self.nationality = nationality  # type: str
        # 国籍二字码
        self.nationality_code = nationality_code  # type: str
        self.out_user_id = out_user_id  # type: str
        self.phone = phone  # type: str
        self.sex = sex  # type: int
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightCreateOrderRequestTravelerInfoList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.birthday is not None:
            result['birthday'] = self.birthday
        if self.cert_nation is not None:
            result['cert_nation'] = self.cert_nation
        if self.cert_no is not None:
            result['cert_no'] = self.cert_no
        if self.cert_type is not None:
            result['cert_type'] = self.cert_type
        if self.cert_valid_date is not None:
            result['cert_valid_date'] = self.cert_valid_date
        if self.name is not None:
            result['name'] = self.name
        if self.nationality is not None:
            result['nationality'] = self.nationality
        if self.nationality_code is not None:
            result['nationality_code'] = self.nationality_code
        if self.out_user_id is not None:
            result['out_user_id'] = self.out_user_id
        if self.phone is not None:
            result['phone'] = self.phone
        if self.sex is not None:
            result['sex'] = self.sex
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('birthday') is not None:
            self.birthday = m.get('birthday')
        if m.get('cert_nation') is not None:
            self.cert_nation = m.get('cert_nation')
        if m.get('cert_no') is not None:
            self.cert_no = m.get('cert_no')
        if m.get('cert_type') is not None:
            self.cert_type = m.get('cert_type')
        if m.get('cert_valid_date') is not None:
            self.cert_valid_date = m.get('cert_valid_date')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('nationality') is not None:
            self.nationality = m.get('nationality')
        if m.get('nationality_code') is not None:
            self.nationality_code = m.get('nationality_code')
        if m.get('out_user_id') is not None:
            self.out_user_id = m.get('out_user_id')
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        if m.get('sex') is not None:
            self.sex = m.get('sex')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class FlightCreateOrderRequest(TeaModel):
    def __init__(self, arr_airport_code=None, arr_city_code=None, auto_pay=None, buyer_name=None,
                 buyer_unique_key=None, contact_info=None, dep_airport_code=None, dep_city_code=None, dep_date=None,
                 dis_order_id=None, order_attr=None, order_params=None, ota_item_id=None, price=None, receipt_address=None,
                 receipt_target=None, receipt_title=None, traveler_info_list=None, trip_type=None):
        self.arr_airport_code = arr_airport_code  # type: str
        self.arr_city_code = arr_city_code  # type: str
        self.auto_pay = auto_pay  # type: int
        self.buyer_name = buyer_name  # type: str
        self.buyer_unique_key = buyer_unique_key  # type: str
        self.contact_info = contact_info  # type: FlightCreateOrderRequestContactInfo
        self.dep_airport_code = dep_airport_code  # type: str
        self.dep_city_code = dep_city_code  # type: str
        self.dep_date = dep_date  # type: str
        self.dis_order_id = dis_order_id  # type: str
        self.order_attr = order_attr  # type: dict[str, any]
        self.order_params = order_params  # type: str
        self.ota_item_id = ota_item_id  # type: str
        self.price = price  # type: long
        self.receipt_address = receipt_address  # type: str
        self.receipt_target = receipt_target  # type: int
        self.receipt_title = receipt_title  # type: str
        self.traveler_info_list = traveler_info_list  # type: list[FlightCreateOrderRequestTravelerInfoList]
        self.trip_type = trip_type  # type: int

    def validate(self):
        if self.contact_info:
            self.contact_info.validate()
        if self.traveler_info_list:
            for k in self.traveler_info_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightCreateOrderRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_airport_code is not None:
            result['arr_airport_code'] = self.arr_airport_code
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.auto_pay is not None:
            result['auto_pay'] = self.auto_pay
        if self.buyer_name is not None:
            result['buyer_name'] = self.buyer_name
        if self.buyer_unique_key is not None:
            result['buyer_unique_key'] = self.buyer_unique_key
        if self.contact_info is not None:
            result['contact_info'] = self.contact_info.to_map()
        if self.dep_airport_code is not None:
            result['dep_airport_code'] = self.dep_airport_code
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        if self.order_attr is not None:
            result['order_attr'] = self.order_attr
        if self.order_params is not None:
            result['order_params'] = self.order_params
        if self.ota_item_id is not None:
            result['ota_item_id'] = self.ota_item_id
        if self.price is not None:
            result['price'] = self.price
        if self.receipt_address is not None:
            result['receipt_address'] = self.receipt_address
        if self.receipt_target is not None:
            result['receipt_target'] = self.receipt_target
        if self.receipt_title is not None:
            result['receipt_title'] = self.receipt_title
        result['traveler_info_list'] = []
        if self.traveler_info_list is not None:
            for k in self.traveler_info_list:
                result['traveler_info_list'].append(k.to_map() if k else None)
        if self.trip_type is not None:
            result['trip_type'] = self.trip_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('arr_airport_code') is not None:
            self.arr_airport_code = m.get('arr_airport_code')
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('auto_pay') is not None:
            self.auto_pay = m.get('auto_pay')
        if m.get('buyer_name') is not None:
            self.buyer_name = m.get('buyer_name')
        if m.get('buyer_unique_key') is not None:
            self.buyer_unique_key = m.get('buyer_unique_key')
        if m.get('contact_info') is not None:
            temp_model = FlightCreateOrderRequestContactInfo()
            self.contact_info = temp_model.from_map(m['contact_info'])
        if m.get('dep_airport_code') is not None:
            self.dep_airport_code = m.get('dep_airport_code')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        if m.get('order_attr') is not None:
            self.order_attr = m.get('order_attr')
        if m.get('order_params') is not None:
            self.order_params = m.get('order_params')
        if m.get('ota_item_id') is not None:
            self.ota_item_id = m.get('ota_item_id')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('receipt_address') is not None:
            self.receipt_address = m.get('receipt_address')
        if m.get('receipt_target') is not None:
            self.receipt_target = m.get('receipt_target')
        if m.get('receipt_title') is not None:
            self.receipt_title = m.get('receipt_title')
        self.traveler_info_list = []
        if m.get('traveler_info_list') is not None:
            for k in m.get('traveler_info_list'):
                temp_model = FlightCreateOrderRequestTravelerInfoList()
                self.traveler_info_list.append(temp_model.from_map(k))
        if m.get('trip_type') is not None:
            self.trip_type = m.get('trip_type')
        return self


class FlightCreateOrderShrinkRequest(TeaModel):
    def __init__(self, arr_airport_code=None, arr_city_code=None, auto_pay=None, buyer_name=None,
                 buyer_unique_key=None, contact_info_shrink=None, dep_airport_code=None, dep_city_code=None, dep_date=None,
                 dis_order_id=None, order_attr_shrink=None, order_params=None, ota_item_id=None, price=None,
                 receipt_address=None, receipt_target=None, receipt_title=None, traveler_info_list_shrink=None, trip_type=None):
        self.arr_airport_code = arr_airport_code  # type: str
        self.arr_city_code = arr_city_code  # type: str
        self.auto_pay = auto_pay  # type: int
        self.buyer_name = buyer_name  # type: str
        self.buyer_unique_key = buyer_unique_key  # type: str
        self.contact_info_shrink = contact_info_shrink  # type: str
        self.dep_airport_code = dep_airport_code  # type: str
        self.dep_city_code = dep_city_code  # type: str
        self.dep_date = dep_date  # type: str
        self.dis_order_id = dis_order_id  # type: str
        self.order_attr_shrink = order_attr_shrink  # type: str
        self.order_params = order_params  # type: str
        self.ota_item_id = ota_item_id  # type: str
        self.price = price  # type: long
        self.receipt_address = receipt_address  # type: str
        self.receipt_target = receipt_target  # type: int
        self.receipt_title = receipt_title  # type: str
        self.traveler_info_list_shrink = traveler_info_list_shrink  # type: str
        self.trip_type = trip_type  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightCreateOrderShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_airport_code is not None:
            result['arr_airport_code'] = self.arr_airport_code
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.auto_pay is not None:
            result['auto_pay'] = self.auto_pay
        if self.buyer_name is not None:
            result['buyer_name'] = self.buyer_name
        if self.buyer_unique_key is not None:
            result['buyer_unique_key'] = self.buyer_unique_key
        if self.contact_info_shrink is not None:
            result['contact_info'] = self.contact_info_shrink
        if self.dep_airport_code is not None:
            result['dep_airport_code'] = self.dep_airport_code
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        if self.order_attr_shrink is not None:
            result['order_attr'] = self.order_attr_shrink
        if self.order_params is not None:
            result['order_params'] = self.order_params
        if self.ota_item_id is not None:
            result['ota_item_id'] = self.ota_item_id
        if self.price is not None:
            result['price'] = self.price
        if self.receipt_address is not None:
            result['receipt_address'] = self.receipt_address
        if self.receipt_target is not None:
            result['receipt_target'] = self.receipt_target
        if self.receipt_title is not None:
            result['receipt_title'] = self.receipt_title
        if self.traveler_info_list_shrink is not None:
            result['traveler_info_list'] = self.traveler_info_list_shrink
        if self.trip_type is not None:
            result['trip_type'] = self.trip_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('arr_airport_code') is not None:
            self.arr_airport_code = m.get('arr_airport_code')
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('auto_pay') is not None:
            self.auto_pay = m.get('auto_pay')
        if m.get('buyer_name') is not None:
            self.buyer_name = m.get('buyer_name')
        if m.get('buyer_unique_key') is not None:
            self.buyer_unique_key = m.get('buyer_unique_key')
        if m.get('contact_info') is not None:
            self.contact_info_shrink = m.get('contact_info')
        if m.get('dep_airport_code') is not None:
            self.dep_airport_code = m.get('dep_airport_code')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        if m.get('order_attr') is not None:
            self.order_attr_shrink = m.get('order_attr')
        if m.get('order_params') is not None:
            self.order_params = m.get('order_params')
        if m.get('ota_item_id') is not None:
            self.ota_item_id = m.get('ota_item_id')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('receipt_address') is not None:
            self.receipt_address = m.get('receipt_address')
        if m.get('receipt_target') is not None:
            self.receipt_target = m.get('receipt_target')
        if m.get('receipt_title') is not None:
            self.receipt_title = m.get('receipt_title')
        if m.get('traveler_info_list') is not None:
            self.traveler_info_list_shrink = m.get('traveler_info_list')
        if m.get('trip_type') is not None:
            self.trip_type = m.get('trip_type')
        return self


class FlightCreateOrderResponseBodyModule(TeaModel):
    def __init__(self, alipay_trade_no=None, btrip_order_id=None, dis_order_id=None, last_pay_time=None,
                 order_status=None, pay_status=None, payment_price=None, total_price=None):
        self.alipay_trade_no = alipay_trade_no  # type: str
        self.btrip_order_id = btrip_order_id  # type: long
        self.dis_order_id = dis_order_id  # type: str
        self.last_pay_time = last_pay_time  # type: str
        self.order_status = order_status  # type: int
        self.pay_status = pay_status  # type: int
        self.payment_price = payment_price  # type: long
        self.total_price = total_price  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightCreateOrderResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alipay_trade_no is not None:
            result['alipay_trade_no'] = self.alipay_trade_no
        if self.btrip_order_id is not None:
            result['btrip_order_id'] = self.btrip_order_id
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        if self.last_pay_time is not None:
            result['last_pay_time'] = self.last_pay_time
        if self.order_status is not None:
            result['order_status'] = self.order_status
        if self.pay_status is not None:
            result['pay_status'] = self.pay_status
        if self.payment_price is not None:
            result['payment_price'] = self.payment_price
        if self.total_price is not None:
            result['total_price'] = self.total_price
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('alipay_trade_no') is not None:
            self.alipay_trade_no = m.get('alipay_trade_no')
        if m.get('btrip_order_id') is not None:
            self.btrip_order_id = m.get('btrip_order_id')
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        if m.get('last_pay_time') is not None:
            self.last_pay_time = m.get('last_pay_time')
        if m.get('order_status') is not None:
            self.order_status = m.get('order_status')
        if m.get('pay_status') is not None:
            self.pay_status = m.get('pay_status')
        if m.get('payment_price') is not None:
            self.payment_price = m.get('payment_price')
        if m.get('total_price') is not None:
            self.total_price = m.get('total_price')
        return self


class FlightCreateOrderResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: FlightCreateOrderResponseBodyModule
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(FlightCreateOrderResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = FlightCreateOrderResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightCreateOrderResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: FlightCreateOrderResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(FlightCreateOrderResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightCreateOrderResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightCreateOrderV2Headers(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightCreateOrderV2Headers, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class FlightCreateOrderV2RequestContactInfo(TeaModel):
    def __init__(self, contact_email=None, contact_name=None, contact_phone=None, send_msg_to_passenger=None):
        self.contact_email = contact_email  # type: str
        self.contact_name = contact_name  # type: str
        self.contact_phone = contact_phone  # type: str
        self.send_msg_to_passenger = send_msg_to_passenger  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightCreateOrderV2RequestContactInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_email is not None:
            result['contact_email'] = self.contact_email
        if self.contact_name is not None:
            result['contact_name'] = self.contact_name
        if self.contact_phone is not None:
            result['contact_phone'] = self.contact_phone
        if self.send_msg_to_passenger is not None:
            result['send_msg_to_passenger'] = self.send_msg_to_passenger
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('contact_email') is not None:
            self.contact_email = m.get('contact_email')
        if m.get('contact_name') is not None:
            self.contact_name = m.get('contact_name')
        if m.get('contact_phone') is not None:
            self.contact_phone = m.get('contact_phone')
        if m.get('send_msg_to_passenger') is not None:
            self.send_msg_to_passenger = m.get('send_msg_to_passenger')
        return self


class FlightCreateOrderV2RequestTravelers(TeaModel):
    def __init__(self, birthday=None, cert_nation=None, cert_no=None, cert_type=None, cert_valid_date=None,
                 cost_center_name=None, cost_center_number=None, dept_id=None, dept_name=None, gender=None, invoice_title=None,
                 nationality=None, nationality_code=None, passenger_name=None, passenger_type=None, phone=None,
                 project_code=None, project_title=None, user_id=None, user_type=None):
        self.birthday = birthday  # type: str
        self.cert_nation = cert_nation  # type: str
        self.cert_no = cert_no  # type: str
        self.cert_type = cert_type  # type: int
        self.cert_valid_date = cert_valid_date  # type: str
        self.cost_center_name = cost_center_name  # type: str
        self.cost_center_number = cost_center_number  # type: str
        self.dept_id = dept_id  # type: str
        self.dept_name = dept_name  # type: str
        self.gender = gender  # type: int
        self.invoice_title = invoice_title  # type: str
        self.nationality = nationality  # type: str
        self.nationality_code = nationality_code  # type: str
        self.passenger_name = passenger_name  # type: str
        self.passenger_type = passenger_type  # type: int
        self.phone = phone  # type: str
        self.project_code = project_code  # type: str
        self.project_title = project_title  # type: str
        self.user_id = user_id  # type: str
        self.user_type = user_type  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightCreateOrderV2RequestTravelers, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.birthday is not None:
            result['birthday'] = self.birthday
        if self.cert_nation is not None:
            result['cert_nation'] = self.cert_nation
        if self.cert_no is not None:
            result['cert_no'] = self.cert_no
        if self.cert_type is not None:
            result['cert_type'] = self.cert_type
        if self.cert_valid_date is not None:
            result['cert_valid_date'] = self.cert_valid_date
        if self.cost_center_name is not None:
            result['cost_center_name'] = self.cost_center_name
        if self.cost_center_number is not None:
            result['cost_center_number'] = self.cost_center_number
        if self.dept_id is not None:
            result['dept_id'] = self.dept_id
        if self.dept_name is not None:
            result['dept_name'] = self.dept_name
        if self.gender is not None:
            result['gender'] = self.gender
        if self.invoice_title is not None:
            result['invoice_title'] = self.invoice_title
        if self.nationality is not None:
            result['nationality'] = self.nationality
        if self.nationality_code is not None:
            result['nationality_code'] = self.nationality_code
        if self.passenger_name is not None:
            result['passenger_name'] = self.passenger_name
        if self.passenger_type is not None:
            result['passenger_type'] = self.passenger_type
        if self.phone is not None:
            result['phone'] = self.phone
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_title is not None:
            result['project_title'] = self.project_title
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_type is not None:
            result['user_type'] = self.user_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('birthday') is not None:
            self.birthday = m.get('birthday')
        if m.get('cert_nation') is not None:
            self.cert_nation = m.get('cert_nation')
        if m.get('cert_no') is not None:
            self.cert_no = m.get('cert_no')
        if m.get('cert_type') is not None:
            self.cert_type = m.get('cert_type')
        if m.get('cert_valid_date') is not None:
            self.cert_valid_date = m.get('cert_valid_date')
        if m.get('cost_center_name') is not None:
            self.cost_center_name = m.get('cost_center_name')
        if m.get('cost_center_number') is not None:
            self.cost_center_number = m.get('cost_center_number')
        if m.get('dept_id') is not None:
            self.dept_id = m.get('dept_id')
        if m.get('dept_name') is not None:
            self.dept_name = m.get('dept_name')
        if m.get('gender') is not None:
            self.gender = m.get('gender')
        if m.get('invoice_title') is not None:
            self.invoice_title = m.get('invoice_title')
        if m.get('nationality') is not None:
            self.nationality = m.get('nationality')
        if m.get('nationality_code') is not None:
            self.nationality_code = m.get('nationality_code')
        if m.get('passenger_name') is not None:
            self.passenger_name = m.get('passenger_name')
        if m.get('passenger_type') is not None:
            self.passenger_type = m.get('passenger_type')
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_title') is not None:
            self.project_title = m.get('project_title')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_type') is not None:
            self.user_type = m.get('user_type')
        return self


class FlightCreateOrderV2Request(TeaModel):
    def __init__(self, async_create_order_key=None, async_create_order_mode=None, btrip_user_id=None,
                 buyer_name=None, contact_info=None, isv_name=None, ota_item_id=None, out_order_id=None, total_price_cent=None,
                 travelers=None):
        self.async_create_order_key = async_create_order_key  # type: str
        self.async_create_order_mode = async_create_order_mode  # type: bool
        self.btrip_user_id = btrip_user_id  # type: str
        self.buyer_name = buyer_name  # type: str
        self.contact_info = contact_info  # type: FlightCreateOrderV2RequestContactInfo
        self.isv_name = isv_name  # type: str
        self.ota_item_id = ota_item_id  # type: str
        self.out_order_id = out_order_id  # type: str
        self.total_price_cent = total_price_cent  # type: long
        self.travelers = travelers  # type: list[FlightCreateOrderV2RequestTravelers]

    def validate(self):
        if self.contact_info:
            self.contact_info.validate()
        if self.travelers:
            for k in self.travelers:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightCreateOrderV2Request, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.async_create_order_key is not None:
            result['async_create_order_key'] = self.async_create_order_key
        if self.async_create_order_mode is not None:
            result['async_create_order_mode'] = self.async_create_order_mode
        if self.btrip_user_id is not None:
            result['btrip_user_id'] = self.btrip_user_id
        if self.buyer_name is not None:
            result['buyer_name'] = self.buyer_name
        if self.contact_info is not None:
            result['contact_info'] = self.contact_info.to_map()
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.ota_item_id is not None:
            result['ota_item_id'] = self.ota_item_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        if self.total_price_cent is not None:
            result['total_price_cent'] = self.total_price_cent
        result['travelers'] = []
        if self.travelers is not None:
            for k in self.travelers:
                result['travelers'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('async_create_order_key') is not None:
            self.async_create_order_key = m.get('async_create_order_key')
        if m.get('async_create_order_mode') is not None:
            self.async_create_order_mode = m.get('async_create_order_mode')
        if m.get('btrip_user_id') is not None:
            self.btrip_user_id = m.get('btrip_user_id')
        if m.get('buyer_name') is not None:
            self.buyer_name = m.get('buyer_name')
        if m.get('contact_info') is not None:
            temp_model = FlightCreateOrderV2RequestContactInfo()
            self.contact_info = temp_model.from_map(m['contact_info'])
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('ota_item_id') is not None:
            self.ota_item_id = m.get('ota_item_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        if m.get('total_price_cent') is not None:
            self.total_price_cent = m.get('total_price_cent')
        self.travelers = []
        if m.get('travelers') is not None:
            for k in m.get('travelers'):
                temp_model = FlightCreateOrderV2RequestTravelers()
                self.travelers.append(temp_model.from_map(k))
        return self


class FlightCreateOrderV2ShrinkRequest(TeaModel):
    def __init__(self, async_create_order_key=None, async_create_order_mode=None, btrip_user_id=None,
                 buyer_name=None, contact_info_shrink=None, isv_name=None, ota_item_id=None, out_order_id=None,
                 total_price_cent=None, travelers_shrink=None):
        self.async_create_order_key = async_create_order_key  # type: str
        self.async_create_order_mode = async_create_order_mode  # type: bool
        self.btrip_user_id = btrip_user_id  # type: str
        self.buyer_name = buyer_name  # type: str
        self.contact_info_shrink = contact_info_shrink  # type: str
        self.isv_name = isv_name  # type: str
        self.ota_item_id = ota_item_id  # type: str
        self.out_order_id = out_order_id  # type: str
        self.total_price_cent = total_price_cent  # type: long
        self.travelers_shrink = travelers_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightCreateOrderV2ShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.async_create_order_key is not None:
            result['async_create_order_key'] = self.async_create_order_key
        if self.async_create_order_mode is not None:
            result['async_create_order_mode'] = self.async_create_order_mode
        if self.btrip_user_id is not None:
            result['btrip_user_id'] = self.btrip_user_id
        if self.buyer_name is not None:
            result['buyer_name'] = self.buyer_name
        if self.contact_info_shrink is not None:
            result['contact_info'] = self.contact_info_shrink
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.ota_item_id is not None:
            result['ota_item_id'] = self.ota_item_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        if self.total_price_cent is not None:
            result['total_price_cent'] = self.total_price_cent
        if self.travelers_shrink is not None:
            result['travelers'] = self.travelers_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('async_create_order_key') is not None:
            self.async_create_order_key = m.get('async_create_order_key')
        if m.get('async_create_order_mode') is not None:
            self.async_create_order_mode = m.get('async_create_order_mode')
        if m.get('btrip_user_id') is not None:
            self.btrip_user_id = m.get('btrip_user_id')
        if m.get('buyer_name') is not None:
            self.buyer_name = m.get('buyer_name')
        if m.get('contact_info') is not None:
            self.contact_info_shrink = m.get('contact_info')
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('ota_item_id') is not None:
            self.ota_item_id = m.get('ota_item_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        if m.get('total_price_cent') is not None:
            self.total_price_cent = m.get('total_price_cent')
        if m.get('travelers') is not None:
            self.travelers_shrink = m.get('travelers')
        return self


class FlightCreateOrderV2ResponseBodyModule(TeaModel):
    def __init__(self, async_create_order_key=None, latest_pay_time=None, order_id=None, out_order_id=None,
                 status=None, total_price=None):
        self.async_create_order_key = async_create_order_key  # type: str
        self.latest_pay_time = latest_pay_time  # type: str
        self.order_id = order_id  # type: long
        self.out_order_id = out_order_id  # type: str
        self.status = status  # type: int
        self.total_price = total_price  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightCreateOrderV2ResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.async_create_order_key is not None:
            result['async_create_order_key'] = self.async_create_order_key
        if self.latest_pay_time is not None:
            result['latest_pay_time'] = self.latest_pay_time
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        if self.status is not None:
            result['status'] = self.status
        if self.total_price is not None:
            result['total_price'] = self.total_price
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('async_create_order_key') is not None:
            self.async_create_order_key = m.get('async_create_order_key')
        if m.get('latest_pay_time') is not None:
            self.latest_pay_time = m.get('latest_pay_time')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('total_price') is not None:
            self.total_price = m.get('total_price')
        return self


class FlightCreateOrderV2ResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: FlightCreateOrderV2ResponseBodyModule
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(FlightCreateOrderV2ResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = FlightCreateOrderV2ResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightCreateOrderV2Response(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: FlightCreateOrderV2ResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(FlightCreateOrderV2Response, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightCreateOrderV2ResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightExceedApplyQueryHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_so_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightExceedApplyQueryHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class FlightExceedApplyQueryRequest(TeaModel):
    def __init__(self, apply_id=None):
        self.apply_id = apply_id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightExceedApplyQueryRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        return self


class FlightExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo(TeaModel):
    def __init__(self, arr_airport_name=None, arr_city=None, arr_city_name=None, arr_time=None, cabin=None,
                 cabin_class=None, cabin_class_str=None, dep_airport_name=None, dep_city=None, dep_city_name=None,
                 dep_time=None, discount=None, flight_no=None, price=None, type=None):
        self.arr_airport_name = arr_airport_name  # type: str
        self.arr_city = arr_city  # type: str
        self.arr_city_name = arr_city_name  # type: str
        self.arr_time = arr_time  # type: str
        self.cabin = cabin  # type: str
        self.cabin_class = cabin_class  # type: int
        self.cabin_class_str = cabin_class_str  # type: str
        self.dep_airport_name = dep_airport_name  # type: str
        self.dep_city = dep_city  # type: str
        self.dep_city_name = dep_city_name  # type: str
        self.dep_time = dep_time  # type: str
        self.discount = discount  # type: str
        self.flight_no = flight_no  # type: str
        self.price = price  # type: long
        self.type = type  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_airport_name is not None:
            result['arr_airport_name'] = self.arr_airport_name
        if self.arr_city is not None:
            result['arr_city'] = self.arr_city
        if self.arr_city_name is not None:
            result['arr_city_name'] = self.arr_city_name
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.cabin is not None:
            result['cabin'] = self.cabin
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.cabin_class_str is not None:
            result['cabin_class_str'] = self.cabin_class_str
        if self.dep_airport_name is not None:
            result['dep_airport_name'] = self.dep_airport_name
        if self.dep_city is not None:
            result['dep_city'] = self.dep_city
        if self.dep_city_name is not None:
            result['dep_city_name'] = self.dep_city_name
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.discount is not None:
            result['discount'] = self.discount
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        if self.price is not None:
            result['price'] = self.price
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('arr_airport_name') is not None:
            self.arr_airport_name = m.get('arr_airport_name')
        if m.get('arr_city') is not None:
            self.arr_city = m.get('arr_city')
        if m.get('arr_city_name') is not None:
            self.arr_city_name = m.get('arr_city_name')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('cabin') is not None:
            self.cabin = m.get('cabin')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('cabin_class_str') is not None:
            self.cabin_class_str = m.get('cabin_class_str')
        if m.get('dep_airport_name') is not None:
            self.dep_airport_name = m.get('dep_airport_name')
        if m.get('dep_city') is not None:
            self.dep_city = m.get('dep_city')
        if m.get('dep_city_name') is not None:
            self.dep_city_name = m.get('dep_city_name')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('discount') is not None:
            self.discount = m.get('discount')
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class FlightExceedApplyQueryResponseBodyModuleApplyRecommendFlights(TeaModel):
    def __init__(self, arr_airport_name=None, arr_city_name=None, arr_time=None, cabin=None, cabin_class=None,
                 cabin_class_str=None, dep_airport_name=None, dep_city_name=None, dep_time=None, discount=None, flight_no=None,
                 price=None, transfer_airport_name=None):
        self.arr_airport_name = arr_airport_name  # type: str
        self.arr_city_name = arr_city_name  # type: str
        self.arr_time = arr_time  # type: str
        self.cabin = cabin  # type: str
        self.cabin_class = cabin_class  # type: int
        self.cabin_class_str = cabin_class_str  # type: str
        self.dep_airport_name = dep_airport_name  # type: str
        self.dep_city_name = dep_city_name  # type: str
        self.dep_time = dep_time  # type: str
        self.discount = discount  # type: str
        self.flight_no = flight_no  # type: str
        self.price = price  # type: long
        self.transfer_airport_name = transfer_airport_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightExceedApplyQueryResponseBodyModuleApplyRecommendFlights, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_airport_name is not None:
            result['arr_airport_name'] = self.arr_airport_name
        if self.arr_city_name is not None:
            result['arr_city_name'] = self.arr_city_name
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.cabin is not None:
            result['cabin'] = self.cabin
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.cabin_class_str is not None:
            result['cabin_class_str'] = self.cabin_class_str
        if self.dep_airport_name is not None:
            result['dep_airport_name'] = self.dep_airport_name
        if self.dep_city_name is not None:
            result['dep_city_name'] = self.dep_city_name
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.discount is not None:
            result['discount'] = self.discount
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        if self.price is not None:
            result['price'] = self.price
        if self.transfer_airport_name is not None:
            result['transfer_airport_name'] = self.transfer_airport_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('arr_airport_name') is not None:
            self.arr_airport_name = m.get('arr_airport_name')
        if m.get('arr_city_name') is not None:
            self.arr_city_name = m.get('arr_city_name')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('cabin') is not None:
            self.cabin = m.get('cabin')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('cabin_class_str') is not None:
            self.cabin_class_str = m.get('cabin_class_str')
        if m.get('dep_airport_name') is not None:
            self.dep_airport_name = m.get('dep_airport_name')
        if m.get('dep_city_name') is not None:
            self.dep_city_name = m.get('dep_city_name')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('discount') is not None:
            self.discount = m.get('discount')
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('transfer_airport_name') is not None:
            self.transfer_airport_name = m.get('transfer_airport_name')
        return self


class FlightExceedApplyQueryResponseBodyModule(TeaModel):
    def __init__(self, apply_id=None, apply_intention_info_do=None, apply_recommend_flights=None, btrip_cause=None,
                 corp_id=None, exceed_reason=None, exceed_type=None, origin_standard=None, status=None, submit_time=None,
                 thirdpart_apply_id=None, thirdpart_corp_id=None, user_id=None):
        self.apply_id = apply_id  # type: long
        self.apply_intention_info_do = apply_intention_info_do  # type: FlightExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo
        self.apply_recommend_flights = apply_recommend_flights  # type: FlightExceedApplyQueryResponseBodyModuleApplyRecommendFlights
        self.btrip_cause = btrip_cause  # type: str
        self.corp_id = corp_id  # type: str
        self.exceed_reason = exceed_reason  # type: str
        self.exceed_type = exceed_type  # type: int
        self.origin_standard = origin_standard  # type: str
        self.status = status  # type: int
        self.submit_time = submit_time  # type: str
        self.thirdpart_apply_id = thirdpart_apply_id  # type: str
        self.thirdpart_corp_id = thirdpart_corp_id  # type: str
        self.user_id = user_id  # type: str

    def validate(self):
        if self.apply_intention_info_do:
            self.apply_intention_info_do.validate()
        if self.apply_recommend_flights:
            self.apply_recommend_flights.validate()

    def to_map(self):
        _map = super(FlightExceedApplyQueryResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.apply_intention_info_do is not None:
            result['apply_intention_info_do'] = self.apply_intention_info_do.to_map()
        if self.apply_recommend_flights is not None:
            result['apply_recommend_flights'] = self.apply_recommend_flights.to_map()
        if self.btrip_cause is not None:
            result['btrip_cause'] = self.btrip_cause
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        if self.exceed_reason is not None:
            result['exceed_reason'] = self.exceed_reason
        if self.exceed_type is not None:
            result['exceed_type'] = self.exceed_type
        if self.origin_standard is not None:
            result['origin_standard'] = self.origin_standard
        if self.status is not None:
            result['status'] = self.status
        if self.submit_time is not None:
            result['submit_time'] = self.submit_time
        if self.thirdpart_apply_id is not None:
            result['thirdpart_apply_id'] = self.thirdpart_apply_id
        if self.thirdpart_corp_id is not None:
            result['thirdpart_corp_id'] = self.thirdpart_corp_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('apply_intention_info_do') is not None:
            temp_model = FlightExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo()
            self.apply_intention_info_do = temp_model.from_map(m['apply_intention_info_do'])
        if m.get('apply_recommend_flights') is not None:
            temp_model = FlightExceedApplyQueryResponseBodyModuleApplyRecommendFlights()
            self.apply_recommend_flights = temp_model.from_map(m['apply_recommend_flights'])
        if m.get('btrip_cause') is not None:
            self.btrip_cause = m.get('btrip_cause')
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        if m.get('exceed_reason') is not None:
            self.exceed_reason = m.get('exceed_reason')
        if m.get('exceed_type') is not None:
            self.exceed_type = m.get('exceed_type')
        if m.get('origin_standard') is not None:
            self.origin_standard = m.get('origin_standard')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('submit_time') is not None:
            self.submit_time = m.get('submit_time')
        if m.get('thirdpart_apply_id') is not None:
            self.thirdpart_apply_id = m.get('thirdpart_apply_id')
        if m.get('thirdpart_corp_id') is not None:
            self.thirdpart_corp_id = m.get('thirdpart_corp_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class FlightExceedApplyQueryResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: FlightExceedApplyQueryResponseBodyModule
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(FlightExceedApplyQueryResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = FlightExceedApplyQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightExceedApplyQueryResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: FlightExceedApplyQueryResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(FlightExceedApplyQueryResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightExceedApplyQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightItineraryScanQueryHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_so_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightItineraryScanQueryHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class FlightItineraryScanQueryRequest(TeaModel):
    def __init__(self, bill_date=None, bill_id=None, invoice_sub_task_id=None, itinerary_num=None, page_no=None,
                 page_size=None, ticket_no=None):
        self.bill_date = bill_date  # type: str
        self.bill_id = bill_id  # type: long
        self.invoice_sub_task_id = invoice_sub_task_id  # type: long
        self.itinerary_num = itinerary_num  # type: str
        self.page_no = page_no  # type: int
        self.page_size = page_size  # type: int
        self.ticket_no = ticket_no  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightItineraryScanQueryRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bill_date is not None:
            result['bill_date'] = self.bill_date
        if self.bill_id is not None:
            result['bill_id'] = self.bill_id
        if self.invoice_sub_task_id is not None:
            result['invoice_sub_task_id'] = self.invoice_sub_task_id
        if self.itinerary_num is not None:
            result['itinerary_num'] = self.itinerary_num
        if self.page_no is not None:
            result['page_no'] = self.page_no
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.ticket_no is not None:
            result['ticket_no'] = self.ticket_no
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('bill_date') is not None:
            self.bill_date = m.get('bill_date')
        if m.get('bill_id') is not None:
            self.bill_id = m.get('bill_id')
        if m.get('invoice_sub_task_id') is not None:
            self.invoice_sub_task_id = m.get('invoice_sub_task_id')
        if m.get('itinerary_num') is not None:
            self.itinerary_num = m.get('itinerary_num')
        if m.get('page_no') is not None:
            self.page_no = m.get('page_no')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('ticket_no') is not None:
            self.ticket_no = m.get('ticket_no')
        return self


class FlightItineraryScanQueryResponseBodyModuleItemsFlights(TeaModel):
    def __init__(self, arrival_station=None, cabin_class=None, carrier=None, departure_station=None,
                 flight_date=None, flight_number=None, flight_time=None, free_baggage_allowance=None, index=None,
                 seat_class=None, valid_from_date=None, valid_to_date=None):
        # 航班至
        self.arrival_station = arrival_station  # type: str
        # 座位等级
        self.cabin_class = cabin_class  # type: str
        # 承运人
        self.carrier = carrier  # type: str
        # 航班从
        self.departure_station = departure_station  # type: str
        # 日期
        self.flight_date = flight_date  # type: str
        # 航班号
        self.flight_number = flight_number  # type: str
        # 时间
        self.flight_time = flight_time  # type: str
        # 免费行李
        self.free_baggage_allowance = free_baggage_allowance  # type: str
        # 行号
        self.index = index  # type: str
        # 客票级别
        self.seat_class = seat_class  # type: str
        # 客票生效日期
        self.valid_from_date = valid_from_date  # type: str
        # 有效截止日期
        self.valid_to_date = valid_to_date  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightItineraryScanQueryResponseBodyModuleItemsFlights, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arrival_station is not None:
            result['arrival_station'] = self.arrival_station
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.carrier is not None:
            result['carrier'] = self.carrier
        if self.departure_station is not None:
            result['departure_station'] = self.departure_station
        if self.flight_date is not None:
            result['flight_date'] = self.flight_date
        if self.flight_number is not None:
            result['flight_number'] = self.flight_number
        if self.flight_time is not None:
            result['flight_time'] = self.flight_time
        if self.free_baggage_allowance is not None:
            result['free_baggage_allowance'] = self.free_baggage_allowance
        if self.index is not None:
            result['index'] = self.index
        if self.seat_class is not None:
            result['seat_class'] = self.seat_class
        if self.valid_from_date is not None:
            result['valid_from_date'] = self.valid_from_date
        if self.valid_to_date is not None:
            result['valid_to_date'] = self.valid_to_date
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('arrival_station') is not None:
            self.arrival_station = m.get('arrival_station')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('carrier') is not None:
            self.carrier = m.get('carrier')
        if m.get('departure_station') is not None:
            self.departure_station = m.get('departure_station')
        if m.get('flight_date') is not None:
            self.flight_date = m.get('flight_date')
        if m.get('flight_number') is not None:
            self.flight_number = m.get('flight_number')
        if m.get('flight_time') is not None:
            self.flight_time = m.get('flight_time')
        if m.get('free_baggage_allowance') is not None:
            self.free_baggage_allowance = m.get('free_baggage_allowance')
        if m.get('index') is not None:
            self.index = m.get('index')
        if m.get('seat_class') is not None:
            self.seat_class = m.get('seat_class')
        if m.get('valid_from_date') is not None:
            self.valid_from_date = m.get('valid_from_date')
        if m.get('valid_to_date') is not None:
            self.valid_to_date = m.get('valid_to_date')
        return self


class FlightItineraryScanQueryResponseBodyModuleItems(TeaModel):
    def __init__(self, agent_code=None, bill_date=None, build=None, cost_center=None, department=None, flights=None,
                 fuel_surcharge=None, id=None, insurance=None, invoice_title=None, issue_company=None, issue_date=None,
                 itinerary_num=None, order_id=None, oss_url=None, passenger_name=None, project=None, prompt_message=None,
                 tax_amount=None, tax_rate=None, ticket_no=None, ticket_price=None, total_price=None, validation_code=None):
        # 销售单位代号
        self.agent_code = agent_code  # type: str
        self.bill_date = bill_date  # type: str
        self.build = build  # type: str
        self.cost_center = cost_center  # type: str
        self.department = department  # type: str
        # 机票行程明细
        self.flights = flights  # type: list[FlightItineraryScanQueryResponseBodyModuleItemsFlights]
        self.fuel_surcharge = fuel_surcharge  # type: str
        # UK
        self.id = id  # type: str
        self.insurance = insurance  # type: str
        self.invoice_title = invoice_title  # type: str
        # 填开单位
        self.issue_company = issue_company  # type: str
        # 填开日期
        self.issue_date = issue_date  # type: str
        self.itinerary_num = itinerary_num  # type: str
        self.order_id = order_id  # type: long
        self.oss_url = oss_url  # type: str
        self.passenger_name = passenger_name  # type: str
        self.project = project  # type: str
        # 提示信息
        self.prompt_message = prompt_message  # type: str
        self.tax_amount = tax_amount  # type: str
        self.tax_rate = tax_rate  # type: str
        self.ticket_no = ticket_no  # type: str
        self.ticket_price = ticket_price  # type: str
        self.total_price = total_price  # type: str
        # 验证码
        self.validation_code = validation_code  # type: str

    def validate(self):
        if self.flights:
            for k in self.flights:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightItineraryScanQueryResponseBodyModuleItems, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_code is not None:
            result['agent_code'] = self.agent_code
        if self.bill_date is not None:
            result['bill_date'] = self.bill_date
        if self.build is not None:
            result['build'] = self.build
        if self.cost_center is not None:
            result['cost_center'] = self.cost_center
        if self.department is not None:
            result['department'] = self.department
        result['flights'] = []
        if self.flights is not None:
            for k in self.flights:
                result['flights'].append(k.to_map() if k else None)
        if self.fuel_surcharge is not None:
            result['fuel_surcharge'] = self.fuel_surcharge
        if self.id is not None:
            result['id'] = self.id
        if self.insurance is not None:
            result['insurance'] = self.insurance
        if self.invoice_title is not None:
            result['invoice_title'] = self.invoice_title
        if self.issue_company is not None:
            result['issue_company'] = self.issue_company
        if self.issue_date is not None:
            result['issue_date'] = self.issue_date
        if self.itinerary_num is not None:
            result['itinerary_num'] = self.itinerary_num
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.oss_url is not None:
            result['oss_url'] = self.oss_url
        if self.passenger_name is not None:
            result['passenger_name'] = self.passenger_name
        if self.project is not None:
            result['project'] = self.project
        if self.prompt_message is not None:
            result['prompt_message'] = self.prompt_message
        if self.tax_amount is not None:
            result['tax_amount'] = self.tax_amount
        if self.tax_rate is not None:
            result['tax_rate'] = self.tax_rate
        if self.ticket_no is not None:
            result['ticket_no'] = self.ticket_no
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.total_price is not None:
            result['total_price'] = self.total_price
        if self.validation_code is not None:
            result['validation_code'] = self.validation_code
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('agent_code') is not None:
            self.agent_code = m.get('agent_code')
        if m.get('bill_date') is not None:
            self.bill_date = m.get('bill_date')
        if m.get('build') is not None:
            self.build = m.get('build')
        if m.get('cost_center') is not None:
            self.cost_center = m.get('cost_center')
        if m.get('department') is not None:
            self.department = m.get('department')
        self.flights = []
        if m.get('flights') is not None:
            for k in m.get('flights'):
                temp_model = FlightItineraryScanQueryResponseBodyModuleItemsFlights()
                self.flights.append(temp_model.from_map(k))
        if m.get('fuel_surcharge') is not None:
            self.fuel_surcharge = m.get('fuel_surcharge')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('insurance') is not None:
            self.insurance = m.get('insurance')
        if m.get('invoice_title') is not None:
            self.invoice_title = m.get('invoice_title')
        if m.get('issue_company') is not None:
            self.issue_company = m.get('issue_company')
        if m.get('issue_date') is not None:
            self.issue_date = m.get('issue_date')
        if m.get('itinerary_num') is not None:
            self.itinerary_num = m.get('itinerary_num')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('oss_url') is not None:
            self.oss_url = m.get('oss_url')
        if m.get('passenger_name') is not None:
            self.passenger_name = m.get('passenger_name')
        if m.get('project') is not None:
            self.project = m.get('project')
        if m.get('prompt_message') is not None:
            self.prompt_message = m.get('prompt_message')
        if m.get('tax_amount') is not None:
            self.tax_amount = m.get('tax_amount')
        if m.get('tax_rate') is not None:
            self.tax_rate = m.get('tax_rate')
        if m.get('ticket_no') is not None:
            self.ticket_no = m.get('ticket_no')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('total_price') is not None:
            self.total_price = m.get('total_price')
        if m.get('validation_code') is not None:
            self.validation_code = m.get('validation_code')
        return self


class FlightItineraryScanQueryResponseBodyModule(TeaModel):
    def __init__(self, items=None, page_no=None, page_size=None, total_page=None, total_size=None):
        self.items = items  # type: list[FlightItineraryScanQueryResponseBodyModuleItems]
        self.page_no = page_no  # type: int
        self.page_size = page_size  # type: int
        self.total_page = total_page  # type: int
        self.total_size = total_size  # type: int

    def validate(self):
        if self.items:
            for k in self.items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightItineraryScanQueryResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['items'] = []
        if self.items is not None:
            for k in self.items:
                result['items'].append(k.to_map() if k else None)
        if self.page_no is not None:
            result['page_no'] = self.page_no
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.total_page is not None:
            result['total_page'] = self.total_page
        if self.total_size is not None:
            result['total_size'] = self.total_size
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.items = []
        if m.get('items') is not None:
            for k in m.get('items'):
                temp_model = FlightItineraryScanQueryResponseBodyModuleItems()
                self.items.append(temp_model.from_map(k))
        if m.get('page_no') is not None:
            self.page_no = m.get('page_no')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('total_page') is not None:
            self.total_page = m.get('total_page')
        if m.get('total_size') is not None:
            self.total_size = m.get('total_size')
        return self


class FlightItineraryScanQueryResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: FlightItineraryScanQueryResponseBodyModule
        # requestId
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        # traceId
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(FlightItineraryScanQueryResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = FlightItineraryScanQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightItineraryScanQueryResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: FlightItineraryScanQueryResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(FlightItineraryScanQueryResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightItineraryScanQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightListingSearchHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightListingSearchHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class FlightListingSearchRequest(TeaModel):
    def __init__(self, airline_code=None, arr_city_code=None, cabin_class=None, dep_city_code=None, dep_date=None):
        self.airline_code = airline_code  # type: str
        self.arr_city_code = arr_city_code  # type: str
        self.cabin_class = cabin_class  # type: str
        self.dep_city_code = dep_city_code  # type: str
        self.dep_date = dep_date  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightListingSearchRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        return self


class FlightListingSearchResponseBodyModuleFlightListAirlineInfo(TeaModel):
    def __init__(self, airline_code=None, airline_name=None, airline_simple_name=None):
        self.airline_code = airline_code  # type: str
        self.airline_name = airline_name  # type: str
        self.airline_simple_name = airline_simple_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightListingSearchResponseBodyModuleFlightListAirlineInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.airline_name is not None:
            result['airline_name'] = self.airline_name
        if self.airline_simple_name is not None:
            result['airline_simple_name'] = self.airline_simple_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('airline_name') is not None:
            self.airline_name = m.get('airline_name')
        if m.get('airline_simple_name') is not None:
            self.airline_simple_name = m.get('airline_simple_name')
        return self


class FlightListingSearchResponseBodyModuleFlightListArrAirportInfo(TeaModel):
    def __init__(self, airport_code=None, airport_name=None, city_code=None, city_name=None, terminal=None):
        self.airport_code = airport_code  # type: str
        self.airport_name = airport_name  # type: str
        self.city_code = city_code  # type: str
        self.city_name = city_name  # type: str
        self.terminal = terminal  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightListingSearchResponseBodyModuleFlightListArrAirportInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airport_code is not None:
            result['airport_code'] = self.airport_code
        if self.airport_name is not None:
            result['airport_name'] = self.airport_name
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.terminal is not None:
            result['terminal'] = self.terminal
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('airport_code') is not None:
            self.airport_code = m.get('airport_code')
        if m.get('airport_name') is not None:
            self.airport_name = m.get('airport_name')
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('terminal') is not None:
            self.terminal = m.get('terminal')
        return self


class FlightListingSearchResponseBodyModuleFlightListDepAirportInfo(TeaModel):
    def __init__(self, airport_code=None, airport_name=None, city_code=None, city_name=None, terminal=None):
        self.airport_code = airport_code  # type: str
        self.airport_name = airport_name  # type: str
        self.city_code = city_code  # type: str
        self.city_name = city_name  # type: str
        self.terminal = terminal  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightListingSearchResponseBodyModuleFlightListDepAirportInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airport_code is not None:
            result['airport_code'] = self.airport_code
        if self.airport_name is not None:
            result['airport_name'] = self.airport_name
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.terminal is not None:
            result['terminal'] = self.terminal
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('airport_code') is not None:
            self.airport_code = m.get('airport_code')
        if m.get('airport_name') is not None:
            self.airport_name = m.get('airport_name')
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('terminal') is not None:
            self.terminal = m.get('terminal')
        return self


class FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription(TeaModel):
    def __init__(self, desc=None, icon=None, image=None, title=None):
        self.desc = desc  # type: str
        self.icon = icon  # type: str
        self.image = image  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.desc is not None:
            result['desc'] = self.desc
        if self.icon is not None:
            result['icon'] = self.icon
        if self.image is not None:
            result['image'] = self.image
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('desc') is not None:
            self.desc = m.get('desc')
        if m.get('icon') is not None:
            self.icon = m.get('icon')
        if m.get('image') is not None:
            self.image = m.get('image')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO(TeaModel):
    def __init__(self, image=None, largest=None, middle=None, smallest=None):
        self.image = image  # type: str
        self.largest = largest  # type: str
        self.middle = middle  # type: str
        self.smallest = smallest  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.image is not None:
            result['image'] = self.image
        if self.largest is not None:
            result['largest'] = self.largest
        if self.middle is not None:
            result['middle'] = self.middle
        if self.smallest is not None:
            result['smallest'] = self.smallest
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('image') is not None:
            self.image = m.get('image')
        if m.get('largest') is not None:
            self.largest = m.get('largest')
        if m.get('middle') is not None:
            self.middle = m.get('middle')
        if m.get('smallest') is not None:
            self.smallest = m.get('smallest')
        return self


class FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes(TeaModel):
    def __init__(self, baggage_desc=None, baggage_sub_content_type=None, description=None, image_do=None,
                 is_highlight=None, sub_title=None):
        self.baggage_desc = baggage_desc  # type: list[str]
        self.baggage_sub_content_type = baggage_sub_content_type  # type: int
        self.description = description  # type: FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription
        self.image_do = image_do  # type: FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO
        self.is_highlight = is_highlight  # type: bool
        self.sub_title = sub_title  # type: str

    def validate(self):
        if self.description:
            self.description.validate()
        if self.image_do:
            self.image_do.validate()

    def to_map(self):
        _map = super(FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.baggage_desc is not None:
            result['baggage_desc'] = self.baggage_desc
        if self.baggage_sub_content_type is not None:
            result['baggage_sub_content_type'] = self.baggage_sub_content_type
        if self.description is not None:
            result['description'] = self.description.to_map()
        if self.image_do is not None:
            result['image_d_o'] = self.image_do.to_map()
        if self.is_highlight is not None:
            result['is_highlight'] = self.is_highlight
        if self.sub_title is not None:
            result['sub_title'] = self.sub_title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('baggage_desc') is not None:
            self.baggage_desc = m.get('baggage_desc')
        if m.get('baggage_sub_content_type') is not None:
            self.baggage_sub_content_type = m.get('baggage_sub_content_type')
        if m.get('description') is not None:
            temp_model = FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription()
            self.description = temp_model.from_map(m['description'])
        if m.get('image_d_o') is not None:
            temp_model = FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO()
            self.image_do = temp_model.from_map(m['image_d_o'])
        if m.get('is_highlight') is not None:
            self.is_highlight = m.get('is_highlight')
        if m.get('sub_title') is not None:
            self.sub_title = m.get('sub_title')
        return self


class FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems(TeaModel):
    def __init__(self, baggage_sub_content_visualizes=None, extra_content_visualizes=None, is_struct=None,
                 ptc=None, title=None):
        self.baggage_sub_content_visualizes = baggage_sub_content_visualizes  # type: list[FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes]
        self.extra_content_visualizes = extra_content_visualizes  # type: list[any]
        self.is_struct = is_struct  # type: bool
        # PTC
        self.ptc = ptc  # type: str
        self.title = title  # type: str

    def validate(self):
        if self.baggage_sub_content_visualizes:
            for k in self.baggage_sub_content_visualizes:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['baggage_sub_content_visualizes'] = []
        if self.baggage_sub_content_visualizes is not None:
            for k in self.baggage_sub_content_visualizes:
                result['baggage_sub_content_visualizes'].append(k.to_map() if k else None)
        if self.extra_content_visualizes is not None:
            result['extra_content_visualizes'] = self.extra_content_visualizes
        if self.is_struct is not None:
            result['is_struct'] = self.is_struct
        if self.ptc is not None:
            result['ptc'] = self.ptc
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.baggage_sub_content_visualizes = []
        if m.get('baggage_sub_content_visualizes') is not None:
            for k in m.get('baggage_sub_content_visualizes'):
                temp_model = FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes()
                self.baggage_sub_content_visualizes.append(temp_model.from_map(k))
        if m.get('extra_content_visualizes') is not None:
            self.extra_content_visualizes = m.get('extra_content_visualizes')
        if m.get('is_struct') is not None:
            self.is_struct = m.get('is_struct')
        if m.get('ptc') is not None:
            self.ptc = m.get('ptc')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemTips(TeaModel):
    def __init__(self, logo=None, tips_desc=None, tips_image=None):
        self.logo = logo  # type: str
        self.tips_desc = tips_desc  # type: str
        self.tips_image = tips_image  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemTips, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.logo is not None:
            result['logo'] = self.logo
        if self.tips_desc is not None:
            result['tips_desc'] = self.tips_desc
        if self.tips_image is not None:
            result['tips_image'] = self.tips_image
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('logo') is not None:
            self.logo = m.get('logo')
        if m.get('tips_desc') is not None:
            self.tips_desc = m.get('tips_desc')
        if m.get('tips_image') is not None:
            self.tips_image = m.get('tips_image')
        return self


class FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItem(TeaModel):
    def __init__(self, baggage_sub_items=None, index=None, table_head=None, tips=None, title=None, type=None):
        self.baggage_sub_items = baggage_sub_items  # type: list[FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems]
        self.index = index  # type: int
        self.table_head = table_head  # type: str
        self.tips = tips  # type: FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemTips
        self.title = title  # type: str
        self.type = type  # type: int

    def validate(self):
        if self.baggage_sub_items:
            for k in self.baggage_sub_items:
                if k:
                    k.validate()
        if self.tips:
            self.tips.validate()

    def to_map(self):
        _map = super(FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItem, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['baggage_sub_items'] = []
        if self.baggage_sub_items is not None:
            for k in self.baggage_sub_items:
                result['baggage_sub_items'].append(k.to_map() if k else None)
        if self.index is not None:
            result['index'] = self.index
        if self.table_head is not None:
            result['table_head'] = self.table_head
        if self.tips is not None:
            result['tips'] = self.tips.to_map()
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.baggage_sub_items = []
        if m.get('baggage_sub_items') is not None:
            for k in m.get('baggage_sub_items'):
                temp_model = FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems()
                self.baggage_sub_items.append(temp_model.from_map(k))
        if m.get('index') is not None:
            self.index = m.get('index')
        if m.get('table_head') is not None:
            self.table_head = m.get('table_head')
        if m.get('tips') is not None:
            temp_model = FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemTips()
            self.tips = temp_model.from_map(m['tips'])
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleInfo(TeaModel):
    def __init__(self, content=None, cost=None, cost_percent=None, time_stamp=None, time_type=None, title=None):
        self.content = content  # type: str
        self.cost = cost  # type: int
        self.cost_percent = cost_percent  # type: int
        self.time_stamp = time_stamp  # type: int
        self.time_type = time_type  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.cost is not None:
            result['cost'] = self.cost
        if self.cost_percent is not None:
            result['cost_percent'] = self.cost_percent
        if self.time_stamp is not None:
            result['time_stamp'] = self.time_stamp
        if self.time_type is not None:
            result['time_type'] = self.time_type
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('cost_percent') is not None:
            self.cost_percent = m.get('cost_percent')
        if m.get('time_stamp') is not None:
            self.time_stamp = m.get('time_stamp')
        if m.get('time_type') is not None:
            self.time_type = m.get('time_type')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRule(TeaModel):
    def __init__(self, able=None, info=None):
        self.able = able  # type: bool
        self.info = info  # type: list[FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleInfo]

    def validate(self):
        if self.info:
            for k in self.info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.able is not None:
            result['able'] = self.able
        result['info'] = []
        if self.info is not None:
            for k in self.info:
                result['info'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('able') is not None:
            self.able = m.get('able')
        self.info = []
        if m.get('info') is not None:
            for k in m.get('info'):
                temp_model = FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleInfo()
                self.info.append(temp_model.from_map(k))
        return self


class FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemExtraContents(TeaModel):
    def __init__(self, content=None, title=None):
        self.content = content  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemExtraContents, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents(TeaModel):
    def __init__(self, fee_desc=None, fee_range=None, style=None):
        self.fee_desc = fee_desc  # type: str
        self.fee_range = fee_range  # type: str
        self.style = style  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.fee_desc is not None:
            result['fee_desc'] = self.fee_desc
        if self.fee_range is not None:
            result['fee_range'] = self.fee_range
        if self.style is not None:
            result['style'] = self.style
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('fee_desc') is not None:
            self.fee_desc = m.get('fee_desc')
        if m.get('fee_range') is not None:
            self.fee_range = m.get('fee_range')
        if m.get('style') is not None:
            self.style = m.get('style')
        return self


class FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems(TeaModel):
    def __init__(self, is_struct=None, ptc=None, refund_sub_contents=None, title=None):
        # isStruct : true
        self.is_struct = is_struct  # type: bool
        # PTC
        self.ptc = ptc  # type: str
        self.refund_sub_contents = refund_sub_contents  # type: list[FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents]
        self.title = title  # type: str

    def validate(self):
        if self.refund_sub_contents:
            for k in self.refund_sub_contents:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.is_struct is not None:
            result['is_struct'] = self.is_struct
        if self.ptc is not None:
            result['ptc'] = self.ptc
        result['refund_sub_contents'] = []
        if self.refund_sub_contents is not None:
            for k in self.refund_sub_contents:
                result['refund_sub_contents'].append(k.to_map() if k else None)
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('is_struct') is not None:
            self.is_struct = m.get('is_struct')
        if m.get('ptc') is not None:
            self.ptc = m.get('ptc')
        self.refund_sub_contents = []
        if m.get('refund_sub_contents') is not None:
            for k in m.get('refund_sub_contents'):
                temp_model = FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents()
                self.refund_sub_contents.append(temp_model.from_map(k))
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItem(TeaModel):
    def __init__(self, extra_contents=None, index=None, refund_sub_items=None, sub_table_head=None, table_head=None,
                 title=None, type=None):
        self.extra_contents = extra_contents  # type: list[FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemExtraContents]
        self.index = index  # type: int
        self.refund_sub_items = refund_sub_items  # type: list[FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems]
        self.sub_table_head = sub_table_head  # type: list[str]
        self.table_head = table_head  # type: str
        self.title = title  # type: str
        self.type = type  # type: int

    def validate(self):
        if self.extra_contents:
            for k in self.extra_contents:
                if k:
                    k.validate()
        if self.refund_sub_items:
            for k in self.refund_sub_items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItem, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['extra_contents'] = []
        if self.extra_contents is not None:
            for k in self.extra_contents:
                result['extra_contents'].append(k.to_map() if k else None)
        if self.index is not None:
            result['index'] = self.index
        result['refund_sub_items'] = []
        if self.refund_sub_items is not None:
            for k in self.refund_sub_items:
                result['refund_sub_items'].append(k.to_map() if k else None)
        if self.sub_table_head is not None:
            result['sub_table_head'] = self.sub_table_head
        if self.table_head is not None:
            result['table_head'] = self.table_head
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.extra_contents = []
        if m.get('extra_contents') is not None:
            for k in m.get('extra_contents'):
                temp_model = FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemExtraContents()
                self.extra_contents.append(temp_model.from_map(k))
        if m.get('index') is not None:
            self.index = m.get('index')
        self.refund_sub_items = []
        if m.get('refund_sub_items') is not None:
            for k in m.get('refund_sub_items'):
                temp_model = FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems()
                self.refund_sub_items.append(temp_model.from_map(k))
        if m.get('sub_table_head') is not None:
            self.sub_table_head = m.get('sub_table_head')
        if m.get('table_head') is not None:
            self.table_head = m.get('table_head')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleInfo(TeaModel):
    def __init__(self, content=None, cost=None, cost_percent=None, time_stamp=None, time_type=None, title=None):
        self.content = content  # type: str
        self.cost = cost  # type: int
        self.cost_percent = cost_percent  # type: int
        self.time_stamp = time_stamp  # type: int
        self.time_type = time_type  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.cost is not None:
            result['cost'] = self.cost
        if self.cost_percent is not None:
            result['cost_percent'] = self.cost_percent
        if self.time_stamp is not None:
            result['time_stamp'] = self.time_stamp
        if self.time_type is not None:
            result['time_type'] = self.time_type
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('cost_percent') is not None:
            self.cost_percent = m.get('cost_percent')
        if m.get('time_stamp') is not None:
            self.time_stamp = m.get('time_stamp')
        if m.get('time_type') is not None:
            self.time_type = m.get('time_type')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRule(TeaModel):
    def __init__(self, able=None, info=None):
        self.able = able  # type: bool
        self.info = info  # type: list[FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleInfo]

    def validate(self):
        if self.info:
            for k in self.info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.able is not None:
            result['able'] = self.able
        result['info'] = []
        if self.info is not None:
            for k in self.info:
                result['info'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('able') is not None:
            self.able = m.get('able')
        self.info = []
        if m.get('info') is not None:
            for k in m.get('info'):
                temp_model = FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleInfo()
                self.info.append(temp_model.from_map(k))
        return self


class FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemExtraContents(TeaModel):
    def __init__(self, content=None, title=None):
        self.content = content  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemExtraContents, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents(TeaModel):
    def __init__(self, fee_desc=None, fee_range=None, style=None):
        self.fee_desc = fee_desc  # type: str
        self.fee_range = fee_range  # type: str
        self.style = style  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.fee_desc is not None:
            result['fee_desc'] = self.fee_desc
        if self.fee_range is not None:
            result['fee_range'] = self.fee_range
        if self.style is not None:
            result['style'] = self.style
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('fee_desc') is not None:
            self.fee_desc = m.get('fee_desc')
        if m.get('fee_range') is not None:
            self.fee_range = m.get('fee_range')
        if m.get('style') is not None:
            self.style = m.get('style')
        return self


class FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems(TeaModel):
    def __init__(self, is_struct=None, ptc=None, refund_sub_contents=None, title=None):
        self.is_struct = is_struct  # type: bool
        # PTC
        self.ptc = ptc  # type: str
        self.refund_sub_contents = refund_sub_contents  # type: list[FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents]
        self.title = title  # type: str

    def validate(self):
        if self.refund_sub_contents:
            for k in self.refund_sub_contents:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.is_struct is not None:
            result['is_struct'] = self.is_struct
        if self.ptc is not None:
            result['ptc'] = self.ptc
        result['refund_sub_contents'] = []
        if self.refund_sub_contents is not None:
            for k in self.refund_sub_contents:
                result['refund_sub_contents'].append(k.to_map() if k else None)
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('is_struct') is not None:
            self.is_struct = m.get('is_struct')
        if m.get('ptc') is not None:
            self.ptc = m.get('ptc')
        self.refund_sub_contents = []
        if m.get('refund_sub_contents') is not None:
            for k in m.get('refund_sub_contents'):
                temp_model = FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents()
                self.refund_sub_contents.append(temp_model.from_map(k))
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItem(TeaModel):
    def __init__(self, extra_contents=None, index=None, refund_sub_items=None, sub_table_head=None, table_head=None,
                 title=None, type=None):
        self.extra_contents = extra_contents  # type: list[FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemExtraContents]
        self.index = index  # type: int
        self.refund_sub_items = refund_sub_items  # type: list[FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems]
        self.sub_table_head = sub_table_head  # type: list[str]
        self.table_head = table_head  # type: str
        self.title = title  # type: str
        self.type = type  # type: int

    def validate(self):
        if self.extra_contents:
            for k in self.extra_contents:
                if k:
                    k.validate()
        if self.refund_sub_items:
            for k in self.refund_sub_items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItem, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['extra_contents'] = []
        if self.extra_contents is not None:
            for k in self.extra_contents:
                result['extra_contents'].append(k.to_map() if k else None)
        if self.index is not None:
            result['index'] = self.index
        result['refund_sub_items'] = []
        if self.refund_sub_items is not None:
            for k in self.refund_sub_items:
                result['refund_sub_items'].append(k.to_map() if k else None)
        if self.sub_table_head is not None:
            result['sub_table_head'] = self.sub_table_head
        if self.table_head is not None:
            result['table_head'] = self.table_head
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.extra_contents = []
        if m.get('extra_contents') is not None:
            for k in m.get('extra_contents'):
                temp_model = FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemExtraContents()
                self.extra_contents.append(temp_model.from_map(k))
        if m.get('index') is not None:
            self.index = m.get('index')
        self.refund_sub_items = []
        if m.get('refund_sub_items') is not None:
            for k in m.get('refund_sub_items'):
                temp_model = FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems()
                self.refund_sub_items.append(temp_model.from_map(k))
        if m.get('sub_table_head') is not None:
            self.sub_table_head = m.get('sub_table_head')
        if m.get('table_head') is not None:
            self.table_head = m.get('table_head')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class FlightListingSearchResponseBodyModuleFlightListFlightRuleListSignRuleInfo(TeaModel):
    def __init__(self, content=None, cost=None, cost_percent=None, time_stamp=None, time_type=None, title=None):
        self.content = content  # type: str
        self.cost = cost  # type: int
        self.cost_percent = cost_percent  # type: int
        self.time_stamp = time_stamp  # type: int
        self.time_type = time_type  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightListingSearchResponseBodyModuleFlightListFlightRuleListSignRuleInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.cost is not None:
            result['cost'] = self.cost
        if self.cost_percent is not None:
            result['cost_percent'] = self.cost_percent
        if self.time_stamp is not None:
            result['time_stamp'] = self.time_stamp
        if self.time_type is not None:
            result['time_type'] = self.time_type
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('cost_percent') is not None:
            self.cost_percent = m.get('cost_percent')
        if m.get('time_stamp') is not None:
            self.time_stamp = m.get('time_stamp')
        if m.get('time_type') is not None:
            self.time_type = m.get('time_type')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightListingSearchResponseBodyModuleFlightListFlightRuleListSignRule(TeaModel):
    def __init__(self, able=None, info=None):
        self.able = able  # type: bool
        self.info = info  # type: list[FlightListingSearchResponseBodyModuleFlightListFlightRuleListSignRuleInfo]

    def validate(self):
        if self.info:
            for k in self.info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightListingSearchResponseBodyModuleFlightListFlightRuleListSignRule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.able is not None:
            result['able'] = self.able
        result['info'] = []
        if self.info is not None:
            for k in self.info:
                result['info'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('able') is not None:
            self.able = m.get('able')
        self.info = []
        if m.get('info') is not None:
            for k in m.get('info'):
                temp_model = FlightListingSearchResponseBodyModuleFlightListFlightRuleListSignRuleInfo()
                self.info.append(temp_model.from_map(k))
        return self


class FlightListingSearchResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo(TeaModel):
    def __init__(self, content=None, cost=None, cost_percent=None, time_stamp=None, time_type=None, title=None):
        self.content = content  # type: str
        self.cost = cost  # type: int
        self.cost_percent = cost_percent  # type: int
        self.time_stamp = time_stamp  # type: int
        self.time_type = time_type  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightListingSearchResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.cost is not None:
            result['cost'] = self.cost
        if self.cost_percent is not None:
            result['cost_percent'] = self.cost_percent
        if self.time_stamp is not None:
            result['time_stamp'] = self.time_stamp
        if self.time_type is not None:
            result['time_type'] = self.time_type
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('cost_percent') is not None:
            self.cost_percent = m.get('cost_percent')
        if m.get('time_stamp') is not None:
            self.time_stamp = m.get('time_stamp')
        if m.get('time_type') is not None:
            self.time_type = m.get('time_type')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightListingSearchResponseBodyModuleFlightListFlightRuleListUpgradeRule(TeaModel):
    def __init__(self, able=None, info=None):
        self.able = able  # type: bool
        self.info = info  # type: list[FlightListingSearchResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo]

    def validate(self):
        if self.info:
            for k in self.info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightListingSearchResponseBodyModuleFlightListFlightRuleListUpgradeRule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.able is not None:
            result['able'] = self.able
        result['info'] = []
        if self.info is not None:
            for k in self.info:
                result['info'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('able') is not None:
            self.able = m.get('able')
        self.info = []
        if m.get('info') is not None:
            for k in m.get('info'):
                temp_model = FlightListingSearchResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo()
                self.info.append(temp_model.from_map(k))
        return self


class FlightListingSearchResponseBodyModuleFlightListFlightRuleList(TeaModel):
    def __init__(self, baggage_info=None, baggage_item=None, change_rule=None, change_rule_item=None, extra=None,
                 refund_rule=None, refund_rule_item=None, sign_rule=None, tuigaiqian_info=None, upgrade_rule=None):
        self.baggage_info = baggage_info  # type: str
        self.baggage_item = baggage_item  # type: FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItem
        self.change_rule = change_rule  # type: FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRule
        self.change_rule_item = change_rule_item  # type: FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItem
        self.extra = extra  # type: str
        self.refund_rule = refund_rule  # type: FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRule
        self.refund_rule_item = refund_rule_item  # type: FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItem
        self.sign_rule = sign_rule  # type: FlightListingSearchResponseBodyModuleFlightListFlightRuleListSignRule
        self.tuigaiqian_info = tuigaiqian_info  # type: str
        self.upgrade_rule = upgrade_rule  # type: FlightListingSearchResponseBodyModuleFlightListFlightRuleListUpgradeRule

    def validate(self):
        if self.baggage_item:
            self.baggage_item.validate()
        if self.change_rule:
            self.change_rule.validate()
        if self.change_rule_item:
            self.change_rule_item.validate()
        if self.refund_rule:
            self.refund_rule.validate()
        if self.refund_rule_item:
            self.refund_rule_item.validate()
        if self.sign_rule:
            self.sign_rule.validate()
        if self.upgrade_rule:
            self.upgrade_rule.validate()

    def to_map(self):
        _map = super(FlightListingSearchResponseBodyModuleFlightListFlightRuleList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.baggage_info is not None:
            result['baggage_info'] = self.baggage_info
        if self.baggage_item is not None:
            result['baggage_item'] = self.baggage_item.to_map()
        if self.change_rule is not None:
            result['change_rule'] = self.change_rule.to_map()
        if self.change_rule_item is not None:
            result['change_rule_item'] = self.change_rule_item.to_map()
        if self.extra is not None:
            result['extra'] = self.extra
        if self.refund_rule is not None:
            result['refund_rule'] = self.refund_rule.to_map()
        if self.refund_rule_item is not None:
            result['refund_rule_item'] = self.refund_rule_item.to_map()
        if self.sign_rule is not None:
            result['sign_rule'] = self.sign_rule.to_map()
        if self.tuigaiqian_info is not None:
            result['tuigaiqian_info'] = self.tuigaiqian_info
        if self.upgrade_rule is not None:
            result['upgrade_rule'] = self.upgrade_rule.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('baggage_info') is not None:
            self.baggage_info = m.get('baggage_info')
        if m.get('baggage_item') is not None:
            temp_model = FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItem()
            self.baggage_item = temp_model.from_map(m['baggage_item'])
        if m.get('change_rule') is not None:
            temp_model = FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRule()
            self.change_rule = temp_model.from_map(m['change_rule'])
        if m.get('change_rule_item') is not None:
            temp_model = FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItem()
            self.change_rule_item = temp_model.from_map(m['change_rule_item'])
        if m.get('extra') is not None:
            self.extra = m.get('extra')
        if m.get('refund_rule') is not None:
            temp_model = FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRule()
            self.refund_rule = temp_model.from_map(m['refund_rule'])
        if m.get('refund_rule_item') is not None:
            temp_model = FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItem()
            self.refund_rule_item = temp_model.from_map(m['refund_rule_item'])
        if m.get('sign_rule') is not None:
            temp_model = FlightListingSearchResponseBodyModuleFlightListFlightRuleListSignRule()
            self.sign_rule = temp_model.from_map(m['sign_rule'])
        if m.get('tuigaiqian_info') is not None:
            self.tuigaiqian_info = m.get('tuigaiqian_info')
        if m.get('upgrade_rule') is not None:
            temp_model = FlightListingSearchResponseBodyModuleFlightListFlightRuleListUpgradeRule()
            self.upgrade_rule = temp_model.from_map(m['upgrade_rule'])
        return self


class FlightListingSearchResponseBodyModuleFlightList(TeaModel):
    def __init__(self, airline_info=None, arr_airport_info=None, arr_date=None, basic_cabin_price=None,
                 build_price=None, cabin=None, cabin_class=None, carrier_airline=None, carrier_no=None, dep_airport_info=None,
                 dep_city_code=None, dep_date=None, discount=None, flight_no=None, flight_rule_list=None,
                 flight_rule_list_str=None, flight_size=None, flight_type=None, invoice_type=None, is_protocol=None, is_share=None,
                 is_stop=None, is_transfer=None, meal_desc=None, oil_price=None, ota_item_id=None, price=None,
                 product_type=None, product_type_desc=None, promotion_price=None, remained_seat_count=None, secret_params=None,
                 segment_number=None, stop_arr_time=None, stop_city=None, stop_dep_time=None, ticket_price=None, total_price=None,
                 trip_type=None):
        self.airline_info = airline_info  # type: FlightListingSearchResponseBodyModuleFlightListAirlineInfo
        self.arr_airport_info = arr_airport_info  # type: FlightListingSearchResponseBodyModuleFlightListArrAirportInfo
        self.arr_date = arr_date  # type: str
        self.basic_cabin_price = basic_cabin_price  # type: int
        self.build_price = build_price  # type: int
        self.cabin = cabin  # type: str
        self.cabin_class = cabin_class  # type: str
        self.carrier_airline = carrier_airline  # type: str
        self.carrier_no = carrier_no  # type: str
        self.dep_airport_info = dep_airport_info  # type: FlightListingSearchResponseBodyModuleFlightListDepAirportInfo
        self.dep_city_code = dep_city_code  # type: str
        self.dep_date = dep_date  # type: str
        self.discount = discount  # type: int
        self.flight_no = flight_no  # type: str
        self.flight_rule_list = flight_rule_list  # type: list[FlightListingSearchResponseBodyModuleFlightListFlightRuleList]
        self.flight_rule_list_str = flight_rule_list_str  # type: str
        self.flight_size = flight_size  # type: str
        self.flight_type = flight_type  # type: str
        self.invoice_type = invoice_type  # type: int
        self.is_protocol = is_protocol  # type: bool
        self.is_share = is_share  # type: bool
        self.is_stop = is_stop  # type: bool
        self.is_transfer = is_transfer  # type: bool
        self.meal_desc = meal_desc  # type: str
        self.oil_price = oil_price  # type: int
        self.ota_item_id = ota_item_id  # type: str
        self.price = price  # type: int
        self.product_type = product_type  # type: long
        self.product_type_desc = product_type_desc  # type: str
        self.promotion_price = promotion_price  # type: str
        self.remained_seat_count = remained_seat_count  # type: str
        self.secret_params = secret_params  # type: str
        self.segment_number = segment_number  # type: str
        self.stop_arr_time = stop_arr_time  # type: str
        self.stop_city = stop_city  # type: str
        self.stop_dep_time = stop_dep_time  # type: str
        self.ticket_price = ticket_price  # type: int
        self.total_price = total_price  # type: str
        self.trip_type = trip_type  # type: int

    def validate(self):
        if self.airline_info:
            self.airline_info.validate()
        if self.arr_airport_info:
            self.arr_airport_info.validate()
        if self.dep_airport_info:
            self.dep_airport_info.validate()
        if self.flight_rule_list:
            for k in self.flight_rule_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightListingSearchResponseBodyModuleFlightList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_info is not None:
            result['airline_info'] = self.airline_info.to_map()
        if self.arr_airport_info is not None:
            result['arr_airport_info'] = self.arr_airport_info.to_map()
        if self.arr_date is not None:
            result['arr_date'] = self.arr_date
        if self.basic_cabin_price is not None:
            result['basic_cabin_price'] = self.basic_cabin_price
        if self.build_price is not None:
            result['build_price'] = self.build_price
        if self.cabin is not None:
            result['cabin'] = self.cabin
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.carrier_airline is not None:
            result['carrier_airline'] = self.carrier_airline
        if self.carrier_no is not None:
            result['carrier_no'] = self.carrier_no
        if self.dep_airport_info is not None:
            result['dep_airport_info'] = self.dep_airport_info.to_map()
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        if self.discount is not None:
            result['discount'] = self.discount
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        result['flight_rule_list'] = []
        if self.flight_rule_list is not None:
            for k in self.flight_rule_list:
                result['flight_rule_list'].append(k.to_map() if k else None)
        if self.flight_rule_list_str is not None:
            result['flight_rule_list_str'] = self.flight_rule_list_str
        if self.flight_size is not None:
            result['flight_size'] = self.flight_size
        if self.flight_type is not None:
            result['flight_type'] = self.flight_type
        if self.invoice_type is not None:
            result['invoice_type'] = self.invoice_type
        if self.is_protocol is not None:
            result['is_protocol'] = self.is_protocol
        if self.is_share is not None:
            result['is_share'] = self.is_share
        if self.is_stop is not None:
            result['is_stop'] = self.is_stop
        if self.is_transfer is not None:
            result['is_transfer'] = self.is_transfer
        if self.meal_desc is not None:
            result['meal_desc'] = self.meal_desc
        if self.oil_price is not None:
            result['oil_price'] = self.oil_price
        if self.ota_item_id is not None:
            result['ota_item_id'] = self.ota_item_id
        if self.price is not None:
            result['price'] = self.price
        if self.product_type is not None:
            result['product_type'] = self.product_type
        if self.product_type_desc is not None:
            result['product_type_desc'] = self.product_type_desc
        if self.promotion_price is not None:
            result['promotion_price'] = self.promotion_price
        if self.remained_seat_count is not None:
            result['remained_seat_count'] = self.remained_seat_count
        if self.secret_params is not None:
            result['secret_params'] = self.secret_params
        if self.segment_number is not None:
            result['segment_number'] = self.segment_number
        if self.stop_arr_time is not None:
            result['stop_arr_time'] = self.stop_arr_time
        if self.stop_city is not None:
            result['stop_city'] = self.stop_city
        if self.stop_dep_time is not None:
            result['stop_dep_time'] = self.stop_dep_time
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.total_price is not None:
            result['total_price'] = self.total_price
        if self.trip_type is not None:
            result['trip_type'] = self.trip_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('airline_info') is not None:
            temp_model = FlightListingSearchResponseBodyModuleFlightListAirlineInfo()
            self.airline_info = temp_model.from_map(m['airline_info'])
        if m.get('arr_airport_info') is not None:
            temp_model = FlightListingSearchResponseBodyModuleFlightListArrAirportInfo()
            self.arr_airport_info = temp_model.from_map(m['arr_airport_info'])
        if m.get('arr_date') is not None:
            self.arr_date = m.get('arr_date')
        if m.get('basic_cabin_price') is not None:
            self.basic_cabin_price = m.get('basic_cabin_price')
        if m.get('build_price') is not None:
            self.build_price = m.get('build_price')
        if m.get('cabin') is not None:
            self.cabin = m.get('cabin')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('carrier_airline') is not None:
            self.carrier_airline = m.get('carrier_airline')
        if m.get('carrier_no') is not None:
            self.carrier_no = m.get('carrier_no')
        if m.get('dep_airport_info') is not None:
            temp_model = FlightListingSearchResponseBodyModuleFlightListDepAirportInfo()
            self.dep_airport_info = temp_model.from_map(m['dep_airport_info'])
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        if m.get('discount') is not None:
            self.discount = m.get('discount')
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        self.flight_rule_list = []
        if m.get('flight_rule_list') is not None:
            for k in m.get('flight_rule_list'):
                temp_model = FlightListingSearchResponseBodyModuleFlightListFlightRuleList()
                self.flight_rule_list.append(temp_model.from_map(k))
        if m.get('flight_rule_list_str') is not None:
            self.flight_rule_list_str = m.get('flight_rule_list_str')
        if m.get('flight_size') is not None:
            self.flight_size = m.get('flight_size')
        if m.get('flight_type') is not None:
            self.flight_type = m.get('flight_type')
        if m.get('invoice_type') is not None:
            self.invoice_type = m.get('invoice_type')
        if m.get('is_protocol') is not None:
            self.is_protocol = m.get('is_protocol')
        if m.get('is_share') is not None:
            self.is_share = m.get('is_share')
        if m.get('is_stop') is not None:
            self.is_stop = m.get('is_stop')
        if m.get('is_transfer') is not None:
            self.is_transfer = m.get('is_transfer')
        if m.get('meal_desc') is not None:
            self.meal_desc = m.get('meal_desc')
        if m.get('oil_price') is not None:
            self.oil_price = m.get('oil_price')
        if m.get('ota_item_id') is not None:
            self.ota_item_id = m.get('ota_item_id')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('product_type') is not None:
            self.product_type = m.get('product_type')
        if m.get('product_type_desc') is not None:
            self.product_type_desc = m.get('product_type_desc')
        if m.get('promotion_price') is not None:
            self.promotion_price = m.get('promotion_price')
        if m.get('remained_seat_count') is not None:
            self.remained_seat_count = m.get('remained_seat_count')
        if m.get('secret_params') is not None:
            self.secret_params = m.get('secret_params')
        if m.get('segment_number') is not None:
            self.segment_number = m.get('segment_number')
        if m.get('stop_arr_time') is not None:
            self.stop_arr_time = m.get('stop_arr_time')
        if m.get('stop_city') is not None:
            self.stop_city = m.get('stop_city')
        if m.get('stop_dep_time') is not None:
            self.stop_dep_time = m.get('stop_dep_time')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('total_price') is not None:
            self.total_price = m.get('total_price')
        if m.get('trip_type') is not None:
            self.trip_type = m.get('trip_type')
        return self


class FlightListingSearchResponseBodyModule(TeaModel):
    def __init__(self, flight_list=None):
        self.flight_list = flight_list  # type: list[FlightListingSearchResponseBodyModuleFlightList]

    def validate(self):
        if self.flight_list:
            for k in self.flight_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightListingSearchResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['flight_list'] = []
        if self.flight_list is not None:
            for k in self.flight_list:
                result['flight_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.flight_list = []
        if m.get('flight_list') is not None:
            for k in m.get('flight_list'):
                temp_model = FlightListingSearchResponseBodyModuleFlightList()
                self.flight_list.append(temp_model.from_map(k))
        return self


class FlightListingSearchResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        # module
        self.module = module  # type: FlightListingSearchResponseBodyModule
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(FlightListingSearchResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = FlightListingSearchResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightListingSearchResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: FlightListingSearchResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(FlightListingSearchResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightListingSearchResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightListingSearchV2Headers(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightListingSearchV2Headers, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class FlightListingSearchV2RequestSearchJourneysSelectedFlights(TeaModel):
    def __init__(self, arr_airport_code=None, arr_city_code=None, dep_airport_code=None, dep_city_code=None,
                 flight_time=None, market_flight_no=None, operate_flight_no=None):
        self.arr_airport_code = arr_airport_code  # type: str
        self.arr_city_code = arr_city_code  # type: str
        self.dep_airport_code = dep_airport_code  # type: str
        self.dep_city_code = dep_city_code  # type: str
        self.flight_time = flight_time  # type: str
        self.market_flight_no = market_flight_no  # type: str
        self.operate_flight_no = operate_flight_no  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightListingSearchV2RequestSearchJourneysSelectedFlights, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_airport_code is not None:
            result['arr_airport_code'] = self.arr_airport_code
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.dep_airport_code is not None:
            result['dep_airport_code'] = self.dep_airport_code
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.flight_time is not None:
            result['flight_time'] = self.flight_time
        if self.market_flight_no is not None:
            result['market_flight_no'] = self.market_flight_no
        if self.operate_flight_no is not None:
            result['operate_flight_no'] = self.operate_flight_no
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('arr_airport_code') is not None:
            self.arr_airport_code = m.get('arr_airport_code')
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('dep_airport_code') is not None:
            self.dep_airport_code = m.get('dep_airport_code')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('flight_time') is not None:
            self.flight_time = m.get('flight_time')
        if m.get('market_flight_no') is not None:
            self.market_flight_no = m.get('market_flight_no')
        if m.get('operate_flight_no') is not None:
            self.operate_flight_no = m.get('operate_flight_no')
        return self


class FlightListingSearchV2RequestSearchJourneys(TeaModel):
    def __init__(self, arr_city_code=None, dep_city_code=None, dep_date=None, selected_flights=None):
        self.arr_city_code = arr_city_code  # type: str
        self.dep_city_code = dep_city_code  # type: str
        self.dep_date = dep_date  # type: str
        self.selected_flights = selected_flights  # type: list[FlightListingSearchV2RequestSearchJourneysSelectedFlights]

    def validate(self):
        if self.selected_flights:
            for k in self.selected_flights:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightListingSearchV2RequestSearchJourneys, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        result['selected_flights'] = []
        if self.selected_flights is not None:
            for k in self.selected_flights:
                result['selected_flights'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        self.selected_flights = []
        if m.get('selected_flights') is not None:
            for k in m.get('selected_flights'):
                temp_model = FlightListingSearchV2RequestSearchJourneysSelectedFlights()
                self.selected_flights.append(temp_model.from_map(k))
        return self


class FlightListingSearchV2Request(TeaModel):
    def __init__(self, airline_code=None, cabin_type_list=None, direct_only=None, isv_name=None,
                 need_multi_class_price=None, need_query_service_fee=None, need_share_flight=None, need_ycbest_price=None,
                 search_journeys=None, search_mode=None, trip_type=None):
        self.airline_code = airline_code  # type: str
        self.cabin_type_list = cabin_type_list  # type: list[int]
        self.direct_only = direct_only  # type: bool
        self.isv_name = isv_name  # type: str
        self.need_multi_class_price = need_multi_class_price  # type: bool
        self.need_query_service_fee = need_query_service_fee  # type: bool
        self.need_share_flight = need_share_flight  # type: bool
        self.need_ycbest_price = need_ycbest_price  # type: bool
        self.search_journeys = search_journeys  # type: list[FlightListingSearchV2RequestSearchJourneys]
        self.search_mode = search_mode  # type: int
        self.trip_type = trip_type  # type: int

    def validate(self):
        if self.search_journeys:
            for k in self.search_journeys:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightListingSearchV2Request, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.cabin_type_list is not None:
            result['cabin_type_list'] = self.cabin_type_list
        if self.direct_only is not None:
            result['direct_only'] = self.direct_only
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.need_multi_class_price is not None:
            result['need_multi_class_price'] = self.need_multi_class_price
        if self.need_query_service_fee is not None:
            result['need_query_service_fee'] = self.need_query_service_fee
        if self.need_share_flight is not None:
            result['need_share_flight'] = self.need_share_flight
        if self.need_ycbest_price is not None:
            result['need_y_c_best_price'] = self.need_ycbest_price
        result['search_journeys'] = []
        if self.search_journeys is not None:
            for k in self.search_journeys:
                result['search_journeys'].append(k.to_map() if k else None)
        if self.search_mode is not None:
            result['search_mode'] = self.search_mode
        if self.trip_type is not None:
            result['trip_type'] = self.trip_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('cabin_type_list') is not None:
            self.cabin_type_list = m.get('cabin_type_list')
        if m.get('direct_only') is not None:
            self.direct_only = m.get('direct_only')
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('need_multi_class_price') is not None:
            self.need_multi_class_price = m.get('need_multi_class_price')
        if m.get('need_query_service_fee') is not None:
            self.need_query_service_fee = m.get('need_query_service_fee')
        if m.get('need_share_flight') is not None:
            self.need_share_flight = m.get('need_share_flight')
        if m.get('need_y_c_best_price') is not None:
            self.need_ycbest_price = m.get('need_y_c_best_price')
        self.search_journeys = []
        if m.get('search_journeys') is not None:
            for k in m.get('search_journeys'):
                temp_model = FlightListingSearchV2RequestSearchJourneys()
                self.search_journeys.append(temp_model.from_map(k))
        if m.get('search_mode') is not None:
            self.search_mode = m.get('search_mode')
        if m.get('trip_type') is not None:
            self.trip_type = m.get('trip_type')
        return self


class FlightListingSearchV2ShrinkRequest(TeaModel):
    def __init__(self, airline_code=None, cabin_type_list_shrink=None, direct_only=None, isv_name=None,
                 need_multi_class_price=None, need_query_service_fee=None, need_share_flight=None, need_ycbest_price=None,
                 search_journeys_shrink=None, search_mode=None, trip_type=None):
        self.airline_code = airline_code  # type: str
        self.cabin_type_list_shrink = cabin_type_list_shrink  # type: str
        self.direct_only = direct_only  # type: bool
        self.isv_name = isv_name  # type: str
        self.need_multi_class_price = need_multi_class_price  # type: bool
        self.need_query_service_fee = need_query_service_fee  # type: bool
        self.need_share_flight = need_share_flight  # type: bool
        self.need_ycbest_price = need_ycbest_price  # type: bool
        self.search_journeys_shrink = search_journeys_shrink  # type: str
        self.search_mode = search_mode  # type: int
        self.trip_type = trip_type  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightListingSearchV2ShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.cabin_type_list_shrink is not None:
            result['cabin_type_list'] = self.cabin_type_list_shrink
        if self.direct_only is not None:
            result['direct_only'] = self.direct_only
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.need_multi_class_price is not None:
            result['need_multi_class_price'] = self.need_multi_class_price
        if self.need_query_service_fee is not None:
            result['need_query_service_fee'] = self.need_query_service_fee
        if self.need_share_flight is not None:
            result['need_share_flight'] = self.need_share_flight
        if self.need_ycbest_price is not None:
            result['need_y_c_best_price'] = self.need_ycbest_price
        if self.search_journeys_shrink is not None:
            result['search_journeys'] = self.search_journeys_shrink
        if self.search_mode is not None:
            result['search_mode'] = self.search_mode
        if self.trip_type is not None:
            result['trip_type'] = self.trip_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('cabin_type_list') is not None:
            self.cabin_type_list_shrink = m.get('cabin_type_list')
        if m.get('direct_only') is not None:
            self.direct_only = m.get('direct_only')
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('need_multi_class_price') is not None:
            self.need_multi_class_price = m.get('need_multi_class_price')
        if m.get('need_query_service_fee') is not None:
            self.need_query_service_fee = m.get('need_query_service_fee')
        if m.get('need_share_flight') is not None:
            self.need_share_flight = m.get('need_share_flight')
        if m.get('need_y_c_best_price') is not None:
            self.need_ycbest_price = m.get('need_y_c_best_price')
        if m.get('search_journeys') is not None:
            self.search_journeys_shrink = m.get('search_journeys')
        if m.get('search_mode') is not None:
            self.search_mode = m.get('search_mode')
        if m.get('trip_type') is not None:
            self.trip_type = m.get('trip_type')
        return self


class FlightListingSearchV2ResponseBodyModuleFlightItemListBestPriceItemSubItems(TeaModel):
    def __init__(self, shopping_item_map=None, uniq_key=None):
        self.shopping_item_map = shopping_item_map  # type: dict[str, ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValue]
        self.uniq_key = uniq_key  # type: str

    def validate(self):
        if self.shopping_item_map:
            for v in self.shopping_item_map.values():
                if v:
                    v.validate()

    def to_map(self):
        _map = super(FlightListingSearchV2ResponseBodyModuleFlightItemListBestPriceItemSubItems, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['shopping_item_map'] = {}
        if self.shopping_item_map is not None:
            for k, v in self.shopping_item_map.items():
                result['shopping_item_map'][k] = v.to_map()
        if self.uniq_key is not None:
            result['uniq_key'] = self.uniq_key
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.shopping_item_map = {}
        if m.get('shopping_item_map') is not None:
            for k, v in m.get('shopping_item_map').items():
                temp_model = ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValue()
                self.shopping_item_map[k] = temp_model.from_map(v)
        if m.get('uniq_key') is not None:
            self.uniq_key = m.get('uniq_key')
        return self


class FlightListingSearchV2ResponseBodyModuleFlightItemListBestPriceItem(TeaModel):
    def __init__(self, flight_rule_infos=None, item_id=None, shopping_item_map=None, sub_item_position_map=None,
                 sub_items=None):
        self.flight_rule_infos = flight_rule_infos  # type: dict[str, ModuleFlightItemListBestPriceItemFlightRuleInfosValue]
        self.item_id = item_id  # type: str
        self.shopping_item_map = shopping_item_map  # type: dict[str, ModuleFlightItemListBestPriceItemShoppingItemMapValue]
        self.sub_item_position_map = sub_item_position_map  # type: dict[str, list[ModuleFlightItemListBestPriceItemSubItemPositionMapValue]]
        self.sub_items = sub_items  # type: list[FlightListingSearchV2ResponseBodyModuleFlightItemListBestPriceItemSubItems]

    def validate(self):
        if self.flight_rule_infos:
            for v in self.flight_rule_infos.values():
                if v:
                    v.validate()
        if self.shopping_item_map:
            for v in self.shopping_item_map.values():
                if v:
                    v.validate()
        if self.sub_item_position_map:
            for v in self.sub_item_position_map.values():
                for k1 in v:
                    if k1:
                        k1.validate()
        if self.sub_items:
            for k in self.sub_items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightListingSearchV2ResponseBodyModuleFlightItemListBestPriceItem, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['flight_rule_infos'] = {}
        if self.flight_rule_infos is not None:
            for k, v in self.flight_rule_infos.items():
                result['flight_rule_infos'][k] = v.to_map()
        if self.item_id is not None:
            result['item_id'] = self.item_id
        result['shopping_item_map'] = {}
        if self.shopping_item_map is not None:
            for k, v in self.shopping_item_map.items():
                result['shopping_item_map'][k] = v.to_map()
        result['sub_item_position_map'] = {}
        if self.sub_item_position_map is not None:
            for k, v in self.sub_item_position_map.items():
                l1 = []
                for k1 in v:
                    l1.append(k1.to_map() if k1 else None)
                result['subItemPositionMap'][k] = l1
        result['sub_items'] = []
        if self.sub_items is not None:
            for k in self.sub_items:
                result['sub_items'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.flight_rule_infos = {}
        if m.get('flight_rule_infos') is not None:
            for k, v in m.get('flight_rule_infos').items():
                temp_model = ModuleFlightItemListBestPriceItemFlightRuleInfosValue()
                self.flight_rule_infos[k] = temp_model.from_map(v)
        if m.get('item_id') is not None:
            self.item_id = m.get('item_id')
        self.shopping_item_map = {}
        if m.get('shopping_item_map') is not None:
            for k, v in m.get('shopping_item_map').items():
                temp_model = ModuleFlightItemListBestPriceItemShoppingItemMapValue()
                self.shopping_item_map[k] = temp_model.from_map(v)
        self.sub_item_position_map = {}
        if m.get('sub_item_position_map') is not None:
            for k, v in m.get('sub_item_position_map').items():
                l1 = []
                for k1 in v:
                    temp_model = ModuleFlightItemListBestPriceItemSubItemPositionMapValue()
                    l1.append(temp_model.from_map(k1))
                self.sub_item_position_map['k'] = l1
        self.sub_items = []
        if m.get('sub_items') is not None:
            for k in m.get('sub_items'):
                temp_model = FlightListingSearchV2ResponseBodyModuleFlightItemListBestPriceItemSubItems()
                self.sub_items.append(temp_model.from_map(k))
        return self


class FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosAirlineInfo(TeaModel):
    def __init__(self, airline_chinese_name=None, airline_chinese_short_name=None, airline_code=None,
                 airline_icon=None, cheap_flight=None):
        self.airline_chinese_name = airline_chinese_name  # type: str
        self.airline_chinese_short_name = airline_chinese_short_name  # type: str
        self.airline_code = airline_code  # type: str
        self.airline_icon = airline_icon  # type: str
        self.cheap_flight = cheap_flight  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosAirlineInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_chinese_name is not None:
            result['airline_chinese_name'] = self.airline_chinese_name
        if self.airline_chinese_short_name is not None:
            result['airline_chinese_short_name'] = self.airline_chinese_short_name
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.airline_icon is not None:
            result['airline_icon'] = self.airline_icon
        if self.cheap_flight is not None:
            result['cheap_flight'] = self.cheap_flight
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('airline_chinese_name') is not None:
            self.airline_chinese_name = m.get('airline_chinese_name')
        if m.get('airline_chinese_short_name') is not None:
            self.airline_chinese_short_name = m.get('airline_chinese_short_name')
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('airline_icon') is not None:
            self.airline_icon = m.get('airline_icon')
        if m.get('cheap_flight') is not None:
            self.cheap_flight = m.get('cheap_flight')
        return self


class FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosArrAirportInfo(TeaModel):
    def __init__(self, airport_code=None, airport_name=None, airport_name_color=None, airport_short_name=None,
                 terminal=None):
        self.airport_code = airport_code  # type: str
        self.airport_name = airport_name  # type: str
        self.airport_name_color = airport_name_color  # type: str
        self.airport_short_name = airport_short_name  # type: str
        self.terminal = terminal  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosArrAirportInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airport_code is not None:
            result['airport_code'] = self.airport_code
        if self.airport_name is not None:
            result['airport_name'] = self.airport_name
        if self.airport_name_color is not None:
            result['airport_name_color'] = self.airport_name_color
        if self.airport_short_name is not None:
            result['airport_short_name'] = self.airport_short_name
        if self.terminal is not None:
            result['terminal'] = self.terminal
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('airport_code') is not None:
            self.airport_code = m.get('airport_code')
        if m.get('airport_name') is not None:
            self.airport_name = m.get('airport_name')
        if m.get('airport_name_color') is not None:
            self.airport_name_color = m.get('airport_name_color')
        if m.get('airport_short_name') is not None:
            self.airport_short_name = m.get('airport_short_name')
        if m.get('terminal') is not None:
            self.terminal = m.get('terminal')
        return self


class FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosDepAirportInfo(TeaModel):
    def __init__(self, airport_code=None, airport_name=None, airport_name_color=None, airport_short_name=None,
                 terminal=None):
        self.airport_code = airport_code  # type: str
        self.airport_name = airport_name  # type: str
        self.airport_name_color = airport_name_color  # type: str
        self.airport_short_name = airport_short_name  # type: str
        self.terminal = terminal  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosDepAirportInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airport_code is not None:
            result['airport_code'] = self.airport_code
        if self.airport_name is not None:
            result['airport_name'] = self.airport_name
        if self.airport_name_color is not None:
            result['airport_name_color'] = self.airport_name_color
        if self.airport_short_name is not None:
            result['airport_short_name'] = self.airport_short_name
        if self.terminal is not None:
            result['terminal'] = self.terminal
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('airport_code') is not None:
            self.airport_code = m.get('airport_code')
        if m.get('airport_name') is not None:
            self.airport_name = m.get('airport_name')
        if m.get('airport_name_color') is not None:
            self.airport_name_color = m.get('airport_name_color')
        if m.get('airport_short_name') is not None:
            self.airport_short_name = m.get('airport_short_name')
        if m.get('terminal') is not None:
            self.terminal = m.get('terminal')
        return self


class FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosFlightShareInfoOperatingAirlineInfo(TeaModel):
    def __init__(self, airline_chinese_name=None, airline_chinese_short_name=None, airline_code=None,
                 airline_icon=None, cheap_flight=None):
        self.airline_chinese_name = airline_chinese_name  # type: str
        self.airline_chinese_short_name = airline_chinese_short_name  # type: str
        self.airline_code = airline_code  # type: str
        self.airline_icon = airline_icon  # type: str
        self.cheap_flight = cheap_flight  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosFlightShareInfoOperatingAirlineInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_chinese_name is not None:
            result['airline_chinese_name'] = self.airline_chinese_name
        if self.airline_chinese_short_name is not None:
            result['airline_chinese_short_name'] = self.airline_chinese_short_name
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.airline_icon is not None:
            result['airline_icon'] = self.airline_icon
        if self.cheap_flight is not None:
            result['cheap_flight'] = self.cheap_flight
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('airline_chinese_name') is not None:
            self.airline_chinese_name = m.get('airline_chinese_name')
        if m.get('airline_chinese_short_name') is not None:
            self.airline_chinese_short_name = m.get('airline_chinese_short_name')
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('airline_icon') is not None:
            self.airline_icon = m.get('airline_icon')
        if m.get('cheap_flight') is not None:
            self.cheap_flight = m.get('cheap_flight')
        return self


class FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosFlightShareInfo(TeaModel):
    def __init__(self, operating_airline_info=None, operating_flight_no=None):
        self.operating_airline_info = operating_airline_info  # type: FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosFlightShareInfoOperatingAirlineInfo
        self.operating_flight_no = operating_flight_no  # type: str

    def validate(self):
        if self.operating_airline_info:
            self.operating_airline_info.validate()

    def to_map(self):
        _map = super(FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosFlightShareInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.operating_airline_info is not None:
            result['operating_airline_info'] = self.operating_airline_info.to_map()
        if self.operating_flight_no is not None:
            result['operating_flight_no'] = self.operating_flight_no
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('operating_airline_info') is not None:
            temp_model = FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosFlightShareInfoOperatingAirlineInfo()
            self.operating_airline_info = temp_model.from_map(m['operating_airline_info'])
        if m.get('operating_flight_no') is not None:
            self.operating_flight_no = m.get('operating_flight_no')
        return self


class FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosFlightStopInfo(TeaModel):
    def __init__(self, stop_airport=None, stop_airport_name=None, stop_arr_term=None, stop_arr_time=None,
                 stop_city_code=None, stop_city_name=None, stop_city_names=None, stop_dep_term=None, stop_dep_time=None,
                 stop_time=None):
        self.stop_airport = stop_airport  # type: str
        self.stop_airport_name = stop_airport_name  # type: str
        self.stop_arr_term = stop_arr_term  # type: str
        self.stop_arr_time = stop_arr_time  # type: str
        self.stop_city_code = stop_city_code  # type: str
        self.stop_city_name = stop_city_name  # type: str
        self.stop_city_names = stop_city_names  # type: list[str]
        self.stop_dep_term = stop_dep_term  # type: str
        self.stop_dep_time = stop_dep_time  # type: str
        self.stop_time = stop_time  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosFlightStopInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.stop_airport is not None:
            result['stop_airport'] = self.stop_airport
        if self.stop_airport_name is not None:
            result['stop_airport_name'] = self.stop_airport_name
        if self.stop_arr_term is not None:
            result['stop_arr_term'] = self.stop_arr_term
        if self.stop_arr_time is not None:
            result['stop_arr_time'] = self.stop_arr_time
        if self.stop_city_code is not None:
            result['stop_city_code'] = self.stop_city_code
        if self.stop_city_name is not None:
            result['stop_city_name'] = self.stop_city_name
        if self.stop_city_names is not None:
            result['stop_city_names'] = self.stop_city_names
        if self.stop_dep_term is not None:
            result['stop_dep_term'] = self.stop_dep_term
        if self.stop_dep_time is not None:
            result['stop_dep_time'] = self.stop_dep_time
        if self.stop_time is not None:
            result['stop_time'] = self.stop_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('stop_airport') is not None:
            self.stop_airport = m.get('stop_airport')
        if m.get('stop_airport_name') is not None:
            self.stop_airport_name = m.get('stop_airport_name')
        if m.get('stop_arr_term') is not None:
            self.stop_arr_term = m.get('stop_arr_term')
        if m.get('stop_arr_time') is not None:
            self.stop_arr_time = m.get('stop_arr_time')
        if m.get('stop_city_code') is not None:
            self.stop_city_code = m.get('stop_city_code')
        if m.get('stop_city_name') is not None:
            self.stop_city_name = m.get('stop_city_name')
        if m.get('stop_city_names') is not None:
            self.stop_city_names = m.get('stop_city_names')
        if m.get('stop_dep_term') is not None:
            self.stop_dep_term = m.get('stop_dep_term')
        if m.get('stop_dep_time') is not None:
            self.stop_dep_time = m.get('stop_dep_time')
        if m.get('stop_time') is not None:
            self.stop_time = m.get('stop_time')
        return self


class FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfos(TeaModel):
    def __init__(self, airline_info=None, arr_airport_info=None, arr_city_code=None, arr_city_name=None,
                 arr_time=None, baggage_desc=None, dep_airport_info=None, dep_city_code=None, dep_city_name=None,
                 dep_time=None, duration=None, extra_info=None, flight_no=None, flight_share_info=None, flight_size=None,
                 flight_stop_info=None, flight_type=None, manufacturer=None, meal_desc=None, miles=None, on_time_rate=None,
                 one_more=None, one_more_show=None, segment_index=None, share=None, short_flight_size=None, stop=None,
                 total_time=None, transfer_time=None, transfer_time_number=None):
        self.airline_info = airline_info  # type: FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosAirlineInfo
        self.arr_airport_info = arr_airport_info  # type: FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosArrAirportInfo
        self.arr_city_code = arr_city_code  # type: str
        self.arr_city_name = arr_city_name  # type: str
        self.arr_time = arr_time  # type: str
        self.baggage_desc = baggage_desc  # type: str
        self.dep_airport_info = dep_airport_info  # type: FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosDepAirportInfo
        self.dep_city_code = dep_city_code  # type: str
        self.dep_city_name = dep_city_name  # type: str
        self.dep_time = dep_time  # type: str
        # duration
        self.duration = duration  # type: int
        self.extra_info = extra_info  # type: dict[str, any]
        self.flight_no = flight_no  # type: str
        self.flight_share_info = flight_share_info  # type: FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosFlightShareInfo
        self.flight_size = flight_size  # type: str
        self.flight_stop_info = flight_stop_info  # type: FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosFlightStopInfo
        self.flight_type = flight_type  # type: str
        self.manufacturer = manufacturer  # type: str
        self.meal_desc = meal_desc  # type: str
        self.miles = miles  # type: int
        self.on_time_rate = on_time_rate  # type: str
        self.one_more = one_more  # type: int
        self.one_more_show = one_more_show  # type: str
        self.segment_index = segment_index  # type: int
        self.share = share  # type: bool
        self.short_flight_size = short_flight_size  # type: str
        self.stop = stop  # type: bool
        self.total_time = total_time  # type: str
        self.transfer_time = transfer_time  # type: str
        self.transfer_time_number = transfer_time_number  # type: int

    def validate(self):
        if self.airline_info:
            self.airline_info.validate()
        if self.arr_airport_info:
            self.arr_airport_info.validate()
        if self.dep_airport_info:
            self.dep_airport_info.validate()
        if self.flight_share_info:
            self.flight_share_info.validate()
        if self.flight_stop_info:
            self.flight_stop_info.validate()

    def to_map(self):
        _map = super(FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfos, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_info is not None:
            result['airline_info'] = self.airline_info.to_map()
        if self.arr_airport_info is not None:
            result['arr_airport_info'] = self.arr_airport_info.to_map()
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.arr_city_name is not None:
            result['arr_city_name'] = self.arr_city_name
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.baggage_desc is not None:
            result['baggage_desc'] = self.baggage_desc
        if self.dep_airport_info is not None:
            result['dep_airport_info'] = self.dep_airport_info.to_map()
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_city_name is not None:
            result['dep_city_name'] = self.dep_city_name
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.duration is not None:
            result['duration'] = self.duration
        if self.extra_info is not None:
            result['extra_info'] = self.extra_info
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        if self.flight_share_info is not None:
            result['flight_share_info'] = self.flight_share_info.to_map()
        if self.flight_size is not None:
            result['flight_size'] = self.flight_size
        if self.flight_stop_info is not None:
            result['flight_stop_info'] = self.flight_stop_info.to_map()
        if self.flight_type is not None:
            result['flight_type'] = self.flight_type
        if self.manufacturer is not None:
            result['manufacturer'] = self.manufacturer
        if self.meal_desc is not None:
            result['meal_desc'] = self.meal_desc
        if self.miles is not None:
            result['miles'] = self.miles
        if self.on_time_rate is not None:
            result['on_time_rate'] = self.on_time_rate
        if self.one_more is not None:
            result['one_more'] = self.one_more
        if self.one_more_show is not None:
            result['one_more_show'] = self.one_more_show
        if self.segment_index is not None:
            result['segment_index'] = self.segment_index
        if self.share is not None:
            result['share'] = self.share
        if self.short_flight_size is not None:
            result['short_flight_size'] = self.short_flight_size
        if self.stop is not None:
            result['stop'] = self.stop
        if self.total_time is not None:
            result['total_time'] = self.total_time
        if self.transfer_time is not None:
            result['transfer_time'] = self.transfer_time
        if self.transfer_time_number is not None:
            result['transfer_time_number'] = self.transfer_time_number
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('airline_info') is not None:
            temp_model = FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosAirlineInfo()
            self.airline_info = temp_model.from_map(m['airline_info'])
        if m.get('arr_airport_info') is not None:
            temp_model = FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosArrAirportInfo()
            self.arr_airport_info = temp_model.from_map(m['arr_airport_info'])
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('arr_city_name') is not None:
            self.arr_city_name = m.get('arr_city_name')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('baggage_desc') is not None:
            self.baggage_desc = m.get('baggage_desc')
        if m.get('dep_airport_info') is not None:
            temp_model = FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosDepAirportInfo()
            self.dep_airport_info = temp_model.from_map(m['dep_airport_info'])
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_city_name') is not None:
            self.dep_city_name = m.get('dep_city_name')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('duration') is not None:
            self.duration = m.get('duration')
        if m.get('extra_info') is not None:
            self.extra_info = m.get('extra_info')
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        if m.get('flight_share_info') is not None:
            temp_model = FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosFlightShareInfo()
            self.flight_share_info = temp_model.from_map(m['flight_share_info'])
        if m.get('flight_size') is not None:
            self.flight_size = m.get('flight_size')
        if m.get('flight_stop_info') is not None:
            temp_model = FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosFlightStopInfo()
            self.flight_stop_info = temp_model.from_map(m['flight_stop_info'])
        if m.get('flight_type') is not None:
            self.flight_type = m.get('flight_type')
        if m.get('manufacturer') is not None:
            self.manufacturer = m.get('manufacturer')
        if m.get('meal_desc') is not None:
            self.meal_desc = m.get('meal_desc')
        if m.get('miles') is not None:
            self.miles = m.get('miles')
        if m.get('on_time_rate') is not None:
            self.on_time_rate = m.get('on_time_rate')
        if m.get('one_more') is not None:
            self.one_more = m.get('one_more')
        if m.get('one_more_show') is not None:
            self.one_more_show = m.get('one_more_show')
        if m.get('segment_index') is not None:
            self.segment_index = m.get('segment_index')
        if m.get('share') is not None:
            self.share = m.get('share')
        if m.get('short_flight_size') is not None:
            self.short_flight_size = m.get('short_flight_size')
        if m.get('stop') is not None:
            self.stop = m.get('stop')
        if m.get('total_time') is not None:
            self.total_time = m.get('total_time')
        if m.get('transfer_time') is not None:
            self.transfer_time = m.get('transfer_time')
        if m.get('transfer_time_number') is not None:
            self.transfer_time_number = m.get('transfer_time_number')
        return self


class FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfos(TeaModel):
    def __init__(self, arr_city_code=None, arr_city_name=None, arr_time=None, dep_city_code=None,
                 dep_city_name=None, dep_time=None, duration=None, extensions=None, flight_segment_infos=None, journey_index=None,
                 transfer_time=None):
        self.arr_city_code = arr_city_code  # type: str
        self.arr_city_name = arr_city_name  # type: str
        self.arr_time = arr_time  # type: str
        self.dep_city_code = dep_city_code  # type: str
        self.dep_city_name = dep_city_name  # type: str
        self.dep_time = dep_time  # type: str
        self.duration = duration  # type: int
        self.extensions = extensions  # type: dict[str, str]
        self.flight_segment_infos = flight_segment_infos  # type: list[FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfos]
        self.journey_index = journey_index  # type: int
        self.transfer_time = transfer_time  # type: int

    def validate(self):
        if self.flight_segment_infos:
            for k in self.flight_segment_infos:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfos, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.arr_city_name is not None:
            result['arr_city_name'] = self.arr_city_name
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_city_name is not None:
            result['dep_city_name'] = self.dep_city_name
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.duration is not None:
            result['duration'] = self.duration
        if self.extensions is not None:
            result['extensions'] = self.extensions
        result['flight_segment_infos'] = []
        if self.flight_segment_infos is not None:
            for k in self.flight_segment_infos:
                result['flight_segment_infos'].append(k.to_map() if k else None)
        if self.journey_index is not None:
            result['journey_index'] = self.journey_index
        if self.transfer_time is not None:
            result['transfer_time'] = self.transfer_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('arr_city_name') is not None:
            self.arr_city_name = m.get('arr_city_name')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_city_name') is not None:
            self.dep_city_name = m.get('dep_city_name')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('duration') is not None:
            self.duration = m.get('duration')
        if m.get('extensions') is not None:
            self.extensions = m.get('extensions')
        self.flight_segment_infos = []
        if m.get('flight_segment_infos') is not None:
            for k in m.get('flight_segment_infos'):
                temp_model = FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfos()
                self.flight_segment_infos.append(temp_model.from_map(k))
        if m.get('journey_index') is not None:
            self.journey_index = m.get('journey_index')
        if m.get('transfer_time') is not None:
            self.transfer_time = m.get('transfer_time')
        return self


class FlightListingSearchV2ResponseBodyModuleFlightItemListItemListSubItems(TeaModel):
    def __init__(self, shopping_item_map=None, uniq_key=None):
        self.shopping_item_map = shopping_item_map  # type: dict[str, ModuleFlightItemListItemListSubItemsShoppingItemMapValue]
        self.uniq_key = uniq_key  # type: str

    def validate(self):
        if self.shopping_item_map:
            for v in self.shopping_item_map.values():
                if v:
                    v.validate()

    def to_map(self):
        _map = super(FlightListingSearchV2ResponseBodyModuleFlightItemListItemListSubItems, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['shopping_item_map'] = {}
        if self.shopping_item_map is not None:
            for k, v in self.shopping_item_map.items():
                result['shopping_item_map'][k] = v.to_map()
        if self.uniq_key is not None:
            result['uniq_key'] = self.uniq_key
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.shopping_item_map = {}
        if m.get('shopping_item_map') is not None:
            for k, v in m.get('shopping_item_map').items():
                temp_model = ModuleFlightItemListItemListSubItemsShoppingItemMapValue()
                self.shopping_item_map[k] = temp_model.from_map(v)
        if m.get('uniq_key') is not None:
            self.uniq_key = m.get('uniq_key')
        return self


class FlightListingSearchV2ResponseBodyModuleFlightItemListItemList(TeaModel):
    def __init__(self, flight_rule_infos=None, item_id=None, shopping_item_map=None, sub_item_position_map=None,
                 sub_items=None):
        self.flight_rule_infos = flight_rule_infos  # type: dict[str, ModuleFlightItemListItemListFlightRuleInfosValue]
        self.item_id = item_id  # type: str
        self.shopping_item_map = shopping_item_map  # type: dict[str, ModuleFlightItemListItemListShoppingItemMapValue]
        self.sub_item_position_map = sub_item_position_map  # type: dict[str, list[ModuleFlightItemListItemListSubItemPositionMapValue]]
        self.sub_items = sub_items  # type: list[FlightListingSearchV2ResponseBodyModuleFlightItemListItemListSubItems]

    def validate(self):
        if self.flight_rule_infos:
            for v in self.flight_rule_infos.values():
                if v:
                    v.validate()
        if self.shopping_item_map:
            for v in self.shopping_item_map.values():
                if v:
                    v.validate()
        if self.sub_item_position_map:
            for v in self.sub_item_position_map.values():
                for k1 in v:
                    if k1:
                        k1.validate()
        if self.sub_items:
            for k in self.sub_items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightListingSearchV2ResponseBodyModuleFlightItemListItemList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['flight_rule_infos'] = {}
        if self.flight_rule_infos is not None:
            for k, v in self.flight_rule_infos.items():
                result['flight_rule_infos'][k] = v.to_map()
        if self.item_id is not None:
            result['item_id'] = self.item_id
        result['shopping_item_map'] = {}
        if self.shopping_item_map is not None:
            for k, v in self.shopping_item_map.items():
                result['shopping_item_map'][k] = v.to_map()
        result['sub_item_position_map'] = {}
        if self.sub_item_position_map is not None:
            for k, v in self.sub_item_position_map.items():
                l1 = []
                for k1 in v:
                    l1.append(k1.to_map() if k1 else None)
                result['subItemPositionMap'][k] = l1
        result['sub_items'] = []
        if self.sub_items is not None:
            for k in self.sub_items:
                result['sub_items'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.flight_rule_infos = {}
        if m.get('flight_rule_infos') is not None:
            for k, v in m.get('flight_rule_infos').items():
                temp_model = ModuleFlightItemListItemListFlightRuleInfosValue()
                self.flight_rule_infos[k] = temp_model.from_map(v)
        if m.get('item_id') is not None:
            self.item_id = m.get('item_id')
        self.shopping_item_map = {}
        if m.get('shopping_item_map') is not None:
            for k, v in m.get('shopping_item_map').items():
                temp_model = ModuleFlightItemListItemListShoppingItemMapValue()
                self.shopping_item_map[k] = temp_model.from_map(v)
        self.sub_item_position_map = {}
        if m.get('sub_item_position_map') is not None:
            for k, v in m.get('sub_item_position_map').items():
                l1 = []
                for k1 in v:
                    temp_model = ModuleFlightItemListItemListSubItemPositionMapValue()
                    l1.append(temp_model.from_map(k1))
                self.sub_item_position_map['k'] = l1
        self.sub_items = []
        if m.get('sub_items') is not None:
            for k in m.get('sub_items'):
                temp_model = FlightListingSearchV2ResponseBodyModuleFlightItemListItemListSubItems()
                self.sub_items.append(temp_model.from_map(k))
        return self


class FlightListingSearchV2ResponseBodyModuleFlightItemList(TeaModel):
    def __init__(self, best_price_item=None, flight_journey_infos=None, item_list=None):
        self.best_price_item = best_price_item  # type: FlightListingSearchV2ResponseBodyModuleFlightItemListBestPriceItem
        self.flight_journey_infos = flight_journey_infos  # type: list[FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfos]
        self.item_list = item_list  # type: list[FlightListingSearchV2ResponseBodyModuleFlightItemListItemList]

    def validate(self):
        if self.best_price_item:
            self.best_price_item.validate()
        if self.flight_journey_infos:
            for k in self.flight_journey_infos:
                if k:
                    k.validate()
        if self.item_list:
            for k in self.item_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightListingSearchV2ResponseBodyModuleFlightItemList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.best_price_item is not None:
            result['best_price_item'] = self.best_price_item.to_map()
        result['flight_journey_infos'] = []
        if self.flight_journey_infos is not None:
            for k in self.flight_journey_infos:
                result['flight_journey_infos'].append(k.to_map() if k else None)
        result['item_list'] = []
        if self.item_list is not None:
            for k in self.item_list:
                result['item_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('best_price_item') is not None:
            temp_model = FlightListingSearchV2ResponseBodyModuleFlightItemListBestPriceItem()
            self.best_price_item = temp_model.from_map(m['best_price_item'])
        self.flight_journey_infos = []
        if m.get('flight_journey_infos') is not None:
            for k in m.get('flight_journey_infos'):
                temp_model = FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfos()
                self.flight_journey_infos.append(temp_model.from_map(k))
        self.item_list = []
        if m.get('item_list') is not None:
            for k in m.get('item_list'):
                temp_model = FlightListingSearchV2ResponseBodyModuleFlightItemListItemList()
                self.item_list.append(temp_model.from_map(k))
        return self


class FlightListingSearchV2ResponseBodyModule(TeaModel):
    def __init__(self, flight_item_list=None, search_mode=None, trip_type=None):
        self.flight_item_list = flight_item_list  # type: list[FlightListingSearchV2ResponseBodyModuleFlightItemList]
        self.search_mode = search_mode  # type: int
        self.trip_type = trip_type  # type: int

    def validate(self):
        if self.flight_item_list:
            for k in self.flight_item_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightListingSearchV2ResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['flight_item_list'] = []
        if self.flight_item_list is not None:
            for k in self.flight_item_list:
                result['flight_item_list'].append(k.to_map() if k else None)
        if self.search_mode is not None:
            result['search_mode'] = self.search_mode
        if self.trip_type is not None:
            result['trip_type'] = self.trip_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.flight_item_list = []
        if m.get('flight_item_list') is not None:
            for k in m.get('flight_item_list'):
                temp_model = FlightListingSearchV2ResponseBodyModuleFlightItemList()
                self.flight_item_list.append(temp_model.from_map(k))
        if m.get('search_mode') is not None:
            self.search_mode = m.get('search_mode')
        if m.get('trip_type') is not None:
            self.trip_type = m.get('trip_type')
        return self


class FlightListingSearchV2ResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        # module
        self.module = module  # type: FlightListingSearchV2ResponseBodyModule
        # requestId
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        # traceId
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(FlightListingSearchV2ResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = FlightListingSearchV2ResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightListingSearchV2Response(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: FlightListingSearchV2ResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(FlightListingSearchV2Response, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightListingSearchV2ResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightModifyApplyV2Headers(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightModifyApplyV2Headers, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class FlightModifyApplyV2RequestPassengerSegmentRelations(TeaModel):
    def __init__(self, passenger_id=None, segment_id_list=None):
        self.passenger_id = passenger_id  # type: str
        self.segment_id_list = segment_id_list  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightModifyApplyV2RequestPassengerSegmentRelations, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.passenger_id is not None:
            result['passenger_id'] = self.passenger_id
        if self.segment_id_list is not None:
            result['segment_id_list'] = self.segment_id_list
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('passenger_id') is not None:
            self.passenger_id = m.get('passenger_id')
        if m.get('segment_id_list') is not None:
            self.segment_id_list = m.get('segment_id_list')
        return self


class FlightModifyApplyV2Request(TeaModel):
    def __init__(self, cache_key=None, contact_phone=None, isv_name=None, item_id=None, order_id=None,
                 out_order_id=None, out_sub_order_id=None, passenger_segment_relations=None, reason=None, session_id=None,
                 voluntary=None):
        self.cache_key = cache_key  # type: str
        self.contact_phone = contact_phone  # type: str
        self.isv_name = isv_name  # type: str
        self.item_id = item_id  # type: str
        self.order_id = order_id  # type: long
        self.out_order_id = out_order_id  # type: str
        self.out_sub_order_id = out_sub_order_id  # type: str
        self.passenger_segment_relations = passenger_segment_relations  # type: list[FlightModifyApplyV2RequestPassengerSegmentRelations]
        self.reason = reason  # type: str
        # sessionId
        self.session_id = session_id  # type: str
        self.voluntary = voluntary  # type: bool

    def validate(self):
        if self.passenger_segment_relations:
            for k in self.passenger_segment_relations:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightModifyApplyV2Request, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cache_key is not None:
            result['cache_key'] = self.cache_key
        if self.contact_phone is not None:
            result['contact_phone'] = self.contact_phone
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.item_id is not None:
            result['item_id'] = self.item_id
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        if self.out_sub_order_id is not None:
            result['out_sub_order_id'] = self.out_sub_order_id
        result['passenger_segment_relations'] = []
        if self.passenger_segment_relations is not None:
            for k in self.passenger_segment_relations:
                result['passenger_segment_relations'].append(k.to_map() if k else None)
        if self.reason is not None:
            result['reason'] = self.reason
        if self.session_id is not None:
            result['session_id'] = self.session_id
        if self.voluntary is not None:
            result['voluntary'] = self.voluntary
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('cache_key') is not None:
            self.cache_key = m.get('cache_key')
        if m.get('contact_phone') is not None:
            self.contact_phone = m.get('contact_phone')
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('item_id') is not None:
            self.item_id = m.get('item_id')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        if m.get('out_sub_order_id') is not None:
            self.out_sub_order_id = m.get('out_sub_order_id')
        self.passenger_segment_relations = []
        if m.get('passenger_segment_relations') is not None:
            for k in m.get('passenger_segment_relations'):
                temp_model = FlightModifyApplyV2RequestPassengerSegmentRelations()
                self.passenger_segment_relations.append(temp_model.from_map(k))
        if m.get('reason') is not None:
            self.reason = m.get('reason')
        if m.get('session_id') is not None:
            self.session_id = m.get('session_id')
        if m.get('voluntary') is not None:
            self.voluntary = m.get('voluntary')
        return self


class FlightModifyApplyV2ShrinkRequest(TeaModel):
    def __init__(self, cache_key=None, contact_phone=None, isv_name=None, item_id=None, order_id=None,
                 out_order_id=None, out_sub_order_id=None, passenger_segment_relations_shrink=None, reason=None,
                 session_id=None, voluntary=None):
        self.cache_key = cache_key  # type: str
        self.contact_phone = contact_phone  # type: str
        self.isv_name = isv_name  # type: str
        self.item_id = item_id  # type: str
        self.order_id = order_id  # type: long
        self.out_order_id = out_order_id  # type: str
        self.out_sub_order_id = out_sub_order_id  # type: str
        self.passenger_segment_relations_shrink = passenger_segment_relations_shrink  # type: str
        self.reason = reason  # type: str
        # sessionId
        self.session_id = session_id  # type: str
        self.voluntary = voluntary  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightModifyApplyV2ShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cache_key is not None:
            result['cache_key'] = self.cache_key
        if self.contact_phone is not None:
            result['contact_phone'] = self.contact_phone
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.item_id is not None:
            result['item_id'] = self.item_id
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        if self.out_sub_order_id is not None:
            result['out_sub_order_id'] = self.out_sub_order_id
        if self.passenger_segment_relations_shrink is not None:
            result['passenger_segment_relations'] = self.passenger_segment_relations_shrink
        if self.reason is not None:
            result['reason'] = self.reason
        if self.session_id is not None:
            result['session_id'] = self.session_id
        if self.voluntary is not None:
            result['voluntary'] = self.voluntary
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('cache_key') is not None:
            self.cache_key = m.get('cache_key')
        if m.get('contact_phone') is not None:
            self.contact_phone = m.get('contact_phone')
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('item_id') is not None:
            self.item_id = m.get('item_id')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        if m.get('out_sub_order_id') is not None:
            self.out_sub_order_id = m.get('out_sub_order_id')
        if m.get('passenger_segment_relations') is not None:
            self.passenger_segment_relations_shrink = m.get('passenger_segment_relations')
        if m.get('reason') is not None:
            self.reason = m.get('reason')
        if m.get('session_id') is not None:
            self.session_id = m.get('session_id')
        if m.get('voluntary') is not None:
            self.voluntary = m.get('voluntary')
        return self


class FlightModifyApplyV2ResponseBodyModule(TeaModel):
    def __init__(self, order_id=None, out_order_id=None, out_sub_order_id=None, sub_order_id=None):
        self.order_id = order_id  # type: str
        self.out_order_id = out_order_id  # type: str
        self.out_sub_order_id = out_sub_order_id  # type: str
        self.sub_order_id = sub_order_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightModifyApplyV2ResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        if self.out_sub_order_id is not None:
            result['out_sub_order_id'] = self.out_sub_order_id
        if self.sub_order_id is not None:
            result['sub_order_id'] = self.sub_order_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        if m.get('out_sub_order_id') is not None:
            self.out_sub_order_id = m.get('out_sub_order_id')
        if m.get('sub_order_id') is not None:
            self.sub_order_id = m.get('sub_order_id')
        return self


class FlightModifyApplyV2ResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        # module
        self.module = module  # type: FlightModifyApplyV2ResponseBodyModule
        # requestId
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        # traceId
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(FlightModifyApplyV2ResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = FlightModifyApplyV2ResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightModifyApplyV2Response(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: FlightModifyApplyV2ResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(FlightModifyApplyV2Response, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightModifyApplyV2ResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightModifyCancelV2Headers(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightModifyCancelV2Headers, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class FlightModifyCancelV2Request(TeaModel):
    def __init__(self, isv_name=None, order_id=None, out_order_id=None, out_sub_order_id=None, sub_order_id=None):
        self.isv_name = isv_name  # type: str
        self.order_id = order_id  # type: long
        self.out_order_id = out_order_id  # type: str
        self.out_sub_order_id = out_sub_order_id  # type: str
        self.sub_order_id = sub_order_id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightModifyCancelV2Request, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        if self.out_sub_order_id is not None:
            result['out_sub_order_id'] = self.out_sub_order_id
        if self.sub_order_id is not None:
            result['sub_order_id'] = self.sub_order_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        if m.get('out_sub_order_id') is not None:
            self.out_sub_order_id = m.get('out_sub_order_id')
        if m.get('sub_order_id') is not None:
            self.sub_order_id = m.get('sub_order_id')
        return self


class FlightModifyCancelV2ResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        # module
        self.module = module  # type: dict[str, any]
        # requestId
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        # traceId
        self.trace_id = trace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightModifyCancelV2ResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            self.module = m.get('module')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightModifyCancelV2Response(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: FlightModifyCancelV2ResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(FlightModifyCancelV2Response, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightModifyCancelV2ResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightModifyListingSearchV2Headers(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightModifyListingSearchV2Headers, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class FlightModifyListingSearchV2RequestPassengerSegmentRelations(TeaModel):
    def __init__(self, passenger_id=None, segment_id_list=None):
        self.passenger_id = passenger_id  # type: str
        self.segment_id_list = segment_id_list  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightModifyListingSearchV2RequestPassengerSegmentRelations, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.passenger_id is not None:
            result['passenger_id'] = self.passenger_id
        if self.segment_id_list is not None:
            result['segment_id_list'] = self.segment_id_list
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('passenger_id') is not None:
            self.passenger_id = m.get('passenger_id')
        if m.get('segment_id_list') is not None:
            self.segment_id_list = m.get('segment_id_list')
        return self


class FlightModifyListingSearchV2RequestSelectedSegments(TeaModel):
    def __init__(self, arr_city_code=None, dep_city_code=None, dep_date_time=None, journey_seq=None,
                 marketing_flight_no=None, operating_flight_no=None, segment_seq=None):
        self.arr_city_code = arr_city_code  # type: str
        self.dep_city_code = dep_city_code  # type: str
        self.dep_date_time = dep_date_time  # type: str
        self.journey_seq = journey_seq  # type: int
        self.marketing_flight_no = marketing_flight_no  # type: str
        self.operating_flight_no = operating_flight_no  # type: str
        self.segment_seq = segment_seq  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightModifyListingSearchV2RequestSelectedSegments, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_date_time is not None:
            result['dep_date_time'] = self.dep_date_time
        if self.journey_seq is not None:
            result['journey_seq'] = self.journey_seq
        if self.marketing_flight_no is not None:
            result['marketing_flight_no'] = self.marketing_flight_no
        if self.operating_flight_no is not None:
            result['operating_flight_no'] = self.operating_flight_no
        if self.segment_seq is not None:
            result['segment_seq'] = self.segment_seq
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_date_time') is not None:
            self.dep_date_time = m.get('dep_date_time')
        if m.get('journey_seq') is not None:
            self.journey_seq = m.get('journey_seq')
        if m.get('marketing_flight_no') is not None:
            self.marketing_flight_no = m.get('marketing_flight_no')
        if m.get('operating_flight_no') is not None:
            self.operating_flight_no = m.get('operating_flight_no')
        if m.get('segment_seq') is not None:
            self.segment_seq = m.get('segment_seq')
        return self


class FlightModifyListingSearchV2Request(TeaModel):
    def __init__(self, cabin_class=None, dep_date=None, isv_name=None, order_id=None, out_order_id=None,
                 passenger_segment_relations=None, search_mode=None, selected_segments=None, session_id=None, voluntary=None):
        self.cabin_class = cabin_class  # type: list[int]
        self.dep_date = dep_date  # type: list[str]
        self.isv_name = isv_name  # type: str
        self.order_id = order_id  # type: long
        self.out_order_id = out_order_id  # type: str
        self.passenger_segment_relations = passenger_segment_relations  # type: list[FlightModifyListingSearchV2RequestPassengerSegmentRelations]
        self.search_mode = search_mode  # type: int
        self.selected_segments = selected_segments  # type: list[FlightModifyListingSearchV2RequestSelectedSegments]
        self.session_id = session_id  # type: str
        self.voluntary = voluntary  # type: bool

    def validate(self):
        if self.passenger_segment_relations:
            for k in self.passenger_segment_relations:
                if k:
                    k.validate()
        if self.selected_segments:
            for k in self.selected_segments:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightModifyListingSearchV2Request, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        result['passenger_segment_relations'] = []
        if self.passenger_segment_relations is not None:
            for k in self.passenger_segment_relations:
                result['passenger_segment_relations'].append(k.to_map() if k else None)
        if self.search_mode is not None:
            result['search_mode'] = self.search_mode
        result['selected_segments'] = []
        if self.selected_segments is not None:
            for k in self.selected_segments:
                result['selected_segments'].append(k.to_map() if k else None)
        if self.session_id is not None:
            result['session_id'] = self.session_id
        if self.voluntary is not None:
            result['voluntary'] = self.voluntary
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        self.passenger_segment_relations = []
        if m.get('passenger_segment_relations') is not None:
            for k in m.get('passenger_segment_relations'):
                temp_model = FlightModifyListingSearchV2RequestPassengerSegmentRelations()
                self.passenger_segment_relations.append(temp_model.from_map(k))
        if m.get('search_mode') is not None:
            self.search_mode = m.get('search_mode')
        self.selected_segments = []
        if m.get('selected_segments') is not None:
            for k in m.get('selected_segments'):
                temp_model = FlightModifyListingSearchV2RequestSelectedSegments()
                self.selected_segments.append(temp_model.from_map(k))
        if m.get('session_id') is not None:
            self.session_id = m.get('session_id')
        if m.get('voluntary') is not None:
            self.voluntary = m.get('voluntary')
        return self


class FlightModifyListingSearchV2ShrinkRequest(TeaModel):
    def __init__(self, cabin_class_shrink=None, dep_date_shrink=None, isv_name=None, order_id=None,
                 out_order_id=None, passenger_segment_relations_shrink=None, search_mode=None, selected_segments_shrink=None,
                 session_id=None, voluntary=None):
        self.cabin_class_shrink = cabin_class_shrink  # type: str
        self.dep_date_shrink = dep_date_shrink  # type: str
        self.isv_name = isv_name  # type: str
        self.order_id = order_id  # type: long
        self.out_order_id = out_order_id  # type: str
        self.passenger_segment_relations_shrink = passenger_segment_relations_shrink  # type: str
        self.search_mode = search_mode  # type: int
        self.selected_segments_shrink = selected_segments_shrink  # type: str
        self.session_id = session_id  # type: str
        self.voluntary = voluntary  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightModifyListingSearchV2ShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cabin_class_shrink is not None:
            result['cabin_class'] = self.cabin_class_shrink
        if self.dep_date_shrink is not None:
            result['dep_date'] = self.dep_date_shrink
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        if self.passenger_segment_relations_shrink is not None:
            result['passenger_segment_relations'] = self.passenger_segment_relations_shrink
        if self.search_mode is not None:
            result['search_mode'] = self.search_mode
        if self.selected_segments_shrink is not None:
            result['selected_segments'] = self.selected_segments_shrink
        if self.session_id is not None:
            result['session_id'] = self.session_id
        if self.voluntary is not None:
            result['voluntary'] = self.voluntary
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('cabin_class') is not None:
            self.cabin_class_shrink = m.get('cabin_class')
        if m.get('dep_date') is not None:
            self.dep_date_shrink = m.get('dep_date')
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        if m.get('passenger_segment_relations') is not None:
            self.passenger_segment_relations_shrink = m.get('passenger_segment_relations')
        if m.get('search_mode') is not None:
            self.search_mode = m.get('search_mode')
        if m.get('selected_segments') is not None:
            self.selected_segments_shrink = m.get('selected_segments')
        if m.get('session_id') is not None:
            self.session_id = m.get('session_id')
        if m.get('voluntary') is not None:
            self.voluntary = m.get('voluntary')
        return self


class FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListAirlineInfo(TeaModel):
    def __init__(self, airline_chinese_name=None, airline_chinese_short_name=None, airline_code=None,
                 airline_icon=None, cheap_flight=None):
        self.airline_chinese_name = airline_chinese_name  # type: str
        self.airline_chinese_short_name = airline_chinese_short_name  # type: str
        self.airline_code = airline_code  # type: str
        self.airline_icon = airline_icon  # type: str
        self.cheap_flight = cheap_flight  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListAirlineInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_chinese_name is not None:
            result['airline_chinese_name'] = self.airline_chinese_name
        if self.airline_chinese_short_name is not None:
            result['airline_chinese_short_name'] = self.airline_chinese_short_name
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.airline_icon is not None:
            result['airline_icon'] = self.airline_icon
        if self.cheap_flight is not None:
            result['cheap_flight'] = self.cheap_flight
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('airline_chinese_name') is not None:
            self.airline_chinese_name = m.get('airline_chinese_name')
        if m.get('airline_chinese_short_name') is not None:
            self.airline_chinese_short_name = m.get('airline_chinese_short_name')
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('airline_icon') is not None:
            self.airline_icon = m.get('airline_icon')
        if m.get('cheap_flight') is not None:
            self.cheap_flight = m.get('cheap_flight')
        return self


class FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListArrAirportInfo(TeaModel):
    def __init__(self, airport_code=None, airport_name=None, airport_short_name=None, terminal=None):
        self.airport_code = airport_code  # type: str
        self.airport_name = airport_name  # type: str
        self.airport_short_name = airport_short_name  # type: str
        self.terminal = terminal  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListArrAirportInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airport_code is not None:
            result['airport_code'] = self.airport_code
        if self.airport_name is not None:
            result['airport_name'] = self.airport_name
        if self.airport_short_name is not None:
            result['airport_short_name'] = self.airport_short_name
        if self.terminal is not None:
            result['terminal'] = self.terminal
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('airport_code') is not None:
            self.airport_code = m.get('airport_code')
        if m.get('airport_name') is not None:
            self.airport_name = m.get('airport_name')
        if m.get('airport_short_name') is not None:
            self.airport_short_name = m.get('airport_short_name')
        if m.get('terminal') is not None:
            self.terminal = m.get('terminal')
        return self


class FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListDepAirportInfo(TeaModel):
    def __init__(self, airport_code=None, airport_name=None, airport_short_name=None, terminal=None):
        self.airport_code = airport_code  # type: str
        self.airport_name = airport_name  # type: str
        self.airport_short_name = airport_short_name  # type: str
        self.terminal = terminal  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListDepAirportInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airport_code is not None:
            result['airport_code'] = self.airport_code
        if self.airport_name is not None:
            result['airport_name'] = self.airport_name
        if self.airport_short_name is not None:
            result['airport_short_name'] = self.airport_short_name
        if self.terminal is not None:
            result['terminal'] = self.terminal
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('airport_code') is not None:
            self.airport_code = m.get('airport_code')
        if m.get('airport_name') is not None:
            self.airport_name = m.get('airport_name')
        if m.get('airport_short_name') is not None:
            self.airport_short_name = m.get('airport_short_name')
        if m.get('terminal') is not None:
            self.terminal = m.get('terminal')
        return self


class FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListFlightShareInfoOperatingAirlineInfo(TeaModel):
    def __init__(self, airline_chinese_name=None, airline_chinese_short_name=None, airline_code=None,
                 airline_icon=None, cheap_flight=None):
        self.airline_chinese_name = airline_chinese_name  # type: str
        self.airline_chinese_short_name = airline_chinese_short_name  # type: str
        self.airline_code = airline_code  # type: str
        self.airline_icon = airline_icon  # type: str
        self.cheap_flight = cheap_flight  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListFlightShareInfoOperatingAirlineInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_chinese_name is not None:
            result['airline_chinese_name'] = self.airline_chinese_name
        if self.airline_chinese_short_name is not None:
            result['airline_chinese_short_name'] = self.airline_chinese_short_name
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.airline_icon is not None:
            result['airline_icon'] = self.airline_icon
        if self.cheap_flight is not None:
            result['cheap_flight'] = self.cheap_flight
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('airline_chinese_name') is not None:
            self.airline_chinese_name = m.get('airline_chinese_name')
        if m.get('airline_chinese_short_name') is not None:
            self.airline_chinese_short_name = m.get('airline_chinese_short_name')
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('airline_icon') is not None:
            self.airline_icon = m.get('airline_icon')
        if m.get('cheap_flight') is not None:
            self.cheap_flight = m.get('cheap_flight')
        return self


class FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListFlightShareInfo(TeaModel):
    def __init__(self, operating_airline_info=None, operating_flight_no=None):
        self.operating_airline_info = operating_airline_info  # type: FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListFlightShareInfoOperatingAirlineInfo
        self.operating_flight_no = operating_flight_no  # type: str

    def validate(self):
        if self.operating_airline_info:
            self.operating_airline_info.validate()

    def to_map(self):
        _map = super(FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListFlightShareInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.operating_airline_info is not None:
            result['operating_airline_info'] = self.operating_airline_info.to_map()
        if self.operating_flight_no is not None:
            result['operating_flight_no'] = self.operating_flight_no
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('operating_airline_info') is not None:
            temp_model = FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListFlightShareInfoOperatingAirlineInfo()
            self.operating_airline_info = temp_model.from_map(m['operating_airline_info'])
        if m.get('operating_flight_no') is not None:
            self.operating_flight_no = m.get('operating_flight_no')
        return self


class FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListFlightStopInfo(TeaModel):
    def __init__(self, stop_airport=None, stop_arr_term=None, stop_arr_time=None, stop_city_code=None,
                 stop_city_name=None, stop_dep_term=None, stop_dep_time=None):
        self.stop_airport = stop_airport  # type: str
        self.stop_arr_term = stop_arr_term  # type: str
        self.stop_arr_time = stop_arr_time  # type: str
        self.stop_city_code = stop_city_code  # type: str
        self.stop_city_name = stop_city_name  # type: str
        self.stop_dep_term = stop_dep_term  # type: str
        self.stop_dep_time = stop_dep_time  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListFlightStopInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.stop_airport is not None:
            result['stop_airport'] = self.stop_airport
        if self.stop_arr_term is not None:
            result['stop_arr_term'] = self.stop_arr_term
        if self.stop_arr_time is not None:
            result['stop_arr_time'] = self.stop_arr_time
        if self.stop_city_code is not None:
            result['stop_city_code'] = self.stop_city_code
        if self.stop_city_name is not None:
            result['stop_city_name'] = self.stop_city_name
        if self.stop_dep_term is not None:
            result['stop_dep_term'] = self.stop_dep_term
        if self.stop_dep_time is not None:
            result['stop_dep_time'] = self.stop_dep_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('stop_airport') is not None:
            self.stop_airport = m.get('stop_airport')
        if m.get('stop_arr_term') is not None:
            self.stop_arr_term = m.get('stop_arr_term')
        if m.get('stop_arr_time') is not None:
            self.stop_arr_time = m.get('stop_arr_time')
        if m.get('stop_city_code') is not None:
            self.stop_city_code = m.get('stop_city_code')
        if m.get('stop_city_name') is not None:
            self.stop_city_name = m.get('stop_city_name')
        if m.get('stop_dep_term') is not None:
            self.stop_dep_term = m.get('stop_dep_term')
        if m.get('stop_dep_time') is not None:
            self.stop_dep_time = m.get('stop_dep_time')
        return self


class FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListFlightTransferInfoTransferAirlineInfo(TeaModel):
    def __init__(self, airline_chinese_name=None, airline_chinese_short_name=None, airline_code=None,
                 airline_icon=None, cheap_flight=None):
        self.airline_chinese_name = airline_chinese_name  # type: str
        self.airline_chinese_short_name = airline_chinese_short_name  # type: str
        self.airline_code = airline_code  # type: str
        self.airline_icon = airline_icon  # type: str
        self.cheap_flight = cheap_flight  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListFlightTransferInfoTransferAirlineInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_chinese_name is not None:
            result['airline_chinese_name'] = self.airline_chinese_name
        if self.airline_chinese_short_name is not None:
            result['airline_chinese_short_name'] = self.airline_chinese_short_name
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.airline_icon is not None:
            result['airline_icon'] = self.airline_icon
        if self.cheap_flight is not None:
            result['cheap_flight'] = self.cheap_flight
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('airline_chinese_name') is not None:
            self.airline_chinese_name = m.get('airline_chinese_name')
        if m.get('airline_chinese_short_name') is not None:
            self.airline_chinese_short_name = m.get('airline_chinese_short_name')
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('airline_icon') is not None:
            self.airline_icon = m.get('airline_icon')
        if m.get('cheap_flight') is not None:
            self.cheap_flight = m.get('cheap_flight')
        return self


class FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListFlightTransferInfo(TeaModel):
    def __init__(self, transfer_airline_info=None, transfer_city_code=None, transfer_city_name=None,
                 transfer_dep_time=None, transfer_flight_no=None, transfer_flight_size=None, transfer_share=None,
                 transfer_stop_time=None):
        self.transfer_airline_info = transfer_airline_info  # type: FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListFlightTransferInfoTransferAirlineInfo
        self.transfer_city_code = transfer_city_code  # type: str
        self.transfer_city_name = transfer_city_name  # type: str
        self.transfer_dep_time = transfer_dep_time  # type: str
        self.transfer_flight_no = transfer_flight_no  # type: str
        self.transfer_flight_size = transfer_flight_size  # type: str
        self.transfer_share = transfer_share  # type: bool
        self.transfer_stop_time = transfer_stop_time  # type: int

    def validate(self):
        if self.transfer_airline_info:
            self.transfer_airline_info.validate()

    def to_map(self):
        _map = super(FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListFlightTransferInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.transfer_airline_info is not None:
            result['transfer_airline_info'] = self.transfer_airline_info.to_map()
        if self.transfer_city_code is not None:
            result['transfer_city_code'] = self.transfer_city_code
        if self.transfer_city_name is not None:
            result['transfer_city_name'] = self.transfer_city_name
        if self.transfer_dep_time is not None:
            result['transfer_dep_time'] = self.transfer_dep_time
        if self.transfer_flight_no is not None:
            result['transfer_flight_no'] = self.transfer_flight_no
        if self.transfer_flight_size is not None:
            result['transfer_flight_size'] = self.transfer_flight_size
        if self.transfer_share is not None:
            result['transfer_share'] = self.transfer_share
        if self.transfer_stop_time is not None:
            result['transfer_stop_time'] = self.transfer_stop_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('transfer_airline_info') is not None:
            temp_model = FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListFlightTransferInfoTransferAirlineInfo()
            self.transfer_airline_info = temp_model.from_map(m['transfer_airline_info'])
        if m.get('transfer_city_code') is not None:
            self.transfer_city_code = m.get('transfer_city_code')
        if m.get('transfer_city_name') is not None:
            self.transfer_city_name = m.get('transfer_city_name')
        if m.get('transfer_dep_time') is not None:
            self.transfer_dep_time = m.get('transfer_dep_time')
        if m.get('transfer_flight_no') is not None:
            self.transfer_flight_no = m.get('transfer_flight_no')
        if m.get('transfer_flight_size') is not None:
            self.transfer_flight_size = m.get('transfer_flight_size')
        if m.get('transfer_share') is not None:
            self.transfer_share = m.get('transfer_share')
        if m.get('transfer_stop_time') is not None:
            self.transfer_stop_time = m.get('transfer_stop_time')
        return self


class FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListPriceInfoDTOReShopPriceInfoDTO(TeaModel):
    def __init__(self, re_shop_adult_change_fee=None, re_shop_adult_price=None, re_shop_adult_price_gap=None,
                 re_shop_child_change_fee=None, re_shop_child_price=None, re_shop_child_price_gap=None, re_shop_inf_change_fee=None,
                 re_shop_inf_price=None, re_shop_inf_price_gap=None):
        self.re_shop_adult_change_fee = re_shop_adult_change_fee  # type: int
        self.re_shop_adult_price = re_shop_adult_price  # type: int
        self.re_shop_adult_price_gap = re_shop_adult_price_gap  # type: int
        self.re_shop_child_change_fee = re_shop_child_change_fee  # type: int
        self.re_shop_child_price = re_shop_child_price  # type: int
        self.re_shop_child_price_gap = re_shop_child_price_gap  # type: int
        self.re_shop_inf_change_fee = re_shop_inf_change_fee  # type: int
        self.re_shop_inf_price = re_shop_inf_price  # type: int
        self.re_shop_inf_price_gap = re_shop_inf_price_gap  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListPriceInfoDTOReShopPriceInfoDTO, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.re_shop_adult_change_fee is not None:
            result['re_shop_adult_change_fee'] = self.re_shop_adult_change_fee
        if self.re_shop_adult_price is not None:
            result['re_shop_adult_price'] = self.re_shop_adult_price
        if self.re_shop_adult_price_gap is not None:
            result['re_shop_adult_price_gap'] = self.re_shop_adult_price_gap
        if self.re_shop_child_change_fee is not None:
            result['re_shop_child_change_fee'] = self.re_shop_child_change_fee
        if self.re_shop_child_price is not None:
            result['re_shop_child_price'] = self.re_shop_child_price
        if self.re_shop_child_price_gap is not None:
            result['re_shop_child_price_gap'] = self.re_shop_child_price_gap
        if self.re_shop_inf_change_fee is not None:
            result['re_shop_inf_change_fee'] = self.re_shop_inf_change_fee
        if self.re_shop_inf_price is not None:
            result['re_shop_inf_price'] = self.re_shop_inf_price
        if self.re_shop_inf_price_gap is not None:
            result['re_shop_inf_price_gap'] = self.re_shop_inf_price_gap
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('re_shop_adult_change_fee') is not None:
            self.re_shop_adult_change_fee = m.get('re_shop_adult_change_fee')
        if m.get('re_shop_adult_price') is not None:
            self.re_shop_adult_price = m.get('re_shop_adult_price')
        if m.get('re_shop_adult_price_gap') is not None:
            self.re_shop_adult_price_gap = m.get('re_shop_adult_price_gap')
        if m.get('re_shop_child_change_fee') is not None:
            self.re_shop_child_change_fee = m.get('re_shop_child_change_fee')
        if m.get('re_shop_child_price') is not None:
            self.re_shop_child_price = m.get('re_shop_child_price')
        if m.get('re_shop_child_price_gap') is not None:
            self.re_shop_child_price_gap = m.get('re_shop_child_price_gap')
        if m.get('re_shop_inf_change_fee') is not None:
            self.re_shop_inf_change_fee = m.get('re_shop_inf_change_fee')
        if m.get('re_shop_inf_price') is not None:
            self.re_shop_inf_price = m.get('re_shop_inf_price')
        if m.get('re_shop_inf_price_gap') is not None:
            self.re_shop_inf_price_gap = m.get('re_shop_inf_price_gap')
        return self


class FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListPriceInfoDTO(TeaModel):
    def __init__(self, adult_price=None, adult_tax=None, adult_total_price=None, before_control_price=None,
                 child_price=None, child_tax=None, child_total_price=None, infant_price=None, infant_tax=None,
                 infant_total_price=None, original_adult_price=None, original_adult_total_price=None, re_shop_price_info_dto=None):
        self.adult_price = adult_price  # type: int
        self.adult_tax = adult_tax  # type: int
        self.adult_total_price = adult_total_price  # type: int
        self.before_control_price = before_control_price  # type: int
        self.child_price = child_price  # type: int
        self.child_tax = child_tax  # type: int
        self.child_total_price = child_total_price  # type: int
        self.infant_price = infant_price  # type: int
        self.infant_tax = infant_tax  # type: int
        self.infant_total_price = infant_total_price  # type: int
        self.original_adult_price = original_adult_price  # type: int
        self.original_adult_total_price = original_adult_total_price  # type: int
        self.re_shop_price_info_dto = re_shop_price_info_dto  # type: FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListPriceInfoDTOReShopPriceInfoDTO

    def validate(self):
        if self.re_shop_price_info_dto:
            self.re_shop_price_info_dto.validate()

    def to_map(self):
        _map = super(FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListPriceInfoDTO, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.adult_price is not None:
            result['adult_price'] = self.adult_price
        if self.adult_tax is not None:
            result['adult_tax'] = self.adult_tax
        if self.adult_total_price is not None:
            result['adult_total_price'] = self.adult_total_price
        if self.before_control_price is not None:
            result['before_control_price'] = self.before_control_price
        if self.child_price is not None:
            result['child_price'] = self.child_price
        if self.child_tax is not None:
            result['child_tax'] = self.child_tax
        if self.child_total_price is not None:
            result['child_total_price'] = self.child_total_price
        if self.infant_price is not None:
            result['infant_price'] = self.infant_price
        if self.infant_tax is not None:
            result['infant_tax'] = self.infant_tax
        if self.infant_total_price is not None:
            result['infant_total_price'] = self.infant_total_price
        if self.original_adult_price is not None:
            result['original_adult_price'] = self.original_adult_price
        if self.original_adult_total_price is not None:
            result['original_adult_total_price'] = self.original_adult_total_price
        if self.re_shop_price_info_dto is not None:
            result['re_shop_price_info_d_t_o'] = self.re_shop_price_info_dto.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('adult_price') is not None:
            self.adult_price = m.get('adult_price')
        if m.get('adult_tax') is not None:
            self.adult_tax = m.get('adult_tax')
        if m.get('adult_total_price') is not None:
            self.adult_total_price = m.get('adult_total_price')
        if m.get('before_control_price') is not None:
            self.before_control_price = m.get('before_control_price')
        if m.get('child_price') is not None:
            self.child_price = m.get('child_price')
        if m.get('child_tax') is not None:
            self.child_tax = m.get('child_tax')
        if m.get('child_total_price') is not None:
            self.child_total_price = m.get('child_total_price')
        if m.get('infant_price') is not None:
            self.infant_price = m.get('infant_price')
        if m.get('infant_tax') is not None:
            self.infant_tax = m.get('infant_tax')
        if m.get('infant_total_price') is not None:
            self.infant_total_price = m.get('infant_total_price')
        if m.get('original_adult_price') is not None:
            self.original_adult_price = m.get('original_adult_price')
        if m.get('original_adult_total_price') is not None:
            self.original_adult_total_price = m.get('original_adult_total_price')
        if m.get('re_shop_price_info_d_t_o') is not None:
            temp_model = FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListPriceInfoDTOReShopPriceInfoDTO()
            self.re_shop_price_info_dto = temp_model.from_map(m['re_shop_price_info_d_t_o'])
        return self


class FlightModifyListingSearchV2ResponseBodyModuleDirectFlightList(TeaModel):
    def __init__(self, airline_info=None, arr_airport_info=None, arr_city_code=None, arr_time=None,
                 cabin_class=None, cabin_class_name=None, dep_airport_info=None, dep_city_code=None, dep_time=None,
                 duration=None, flight_no=None, flight_share_info=None, flight_size=None, flight_stop_info=None,
                 flight_transfer_info=None, flight_type=None, journey_seq=None, left_num=None, manufacturer=None, meal_desc=None,
                 price_info_dto=None, segment_seq=None, share=None, short_flight_size=None, span_day=None, stop=None, transfer=None):
        self.airline_info = airline_info  # type: FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListAirlineInfo
        self.arr_airport_info = arr_airport_info  # type: FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListArrAirportInfo
        self.arr_city_code = arr_city_code  # type: str
        self.arr_time = arr_time  # type: str
        self.cabin_class = cabin_class  # type: str
        self.cabin_class_name = cabin_class_name  # type: str
        self.dep_airport_info = dep_airport_info  # type: FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListDepAirportInfo
        self.dep_city_code = dep_city_code  # type: str
        self.dep_time = dep_time  # type: str
        self.duration = duration  # type: int
        self.flight_no = flight_no  # type: str
        self.flight_share_info = flight_share_info  # type: FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListFlightShareInfo
        self.flight_size = flight_size  # type: str
        self.flight_stop_info = flight_stop_info  # type: FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListFlightStopInfo
        self.flight_transfer_info = flight_transfer_info  # type: FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListFlightTransferInfo
        self.flight_type = flight_type  # type: str
        self.journey_seq = journey_seq  # type: int
        self.left_num = left_num  # type: str
        self.manufacturer = manufacturer  # type: str
        self.meal_desc = meal_desc  # type: str
        self.price_info_dto = price_info_dto  # type: FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListPriceInfoDTO
        self.segment_seq = segment_seq  # type: int
        self.share = share  # type: bool
        self.short_flight_size = short_flight_size  # type: str
        self.span_day = span_day  # type: str
        self.stop = stop  # type: bool
        self.transfer = transfer  # type: bool

    def validate(self):
        if self.airline_info:
            self.airline_info.validate()
        if self.arr_airport_info:
            self.arr_airport_info.validate()
        if self.dep_airport_info:
            self.dep_airport_info.validate()
        if self.flight_share_info:
            self.flight_share_info.validate()
        if self.flight_stop_info:
            self.flight_stop_info.validate()
        if self.flight_transfer_info:
            self.flight_transfer_info.validate()
        if self.price_info_dto:
            self.price_info_dto.validate()

    def to_map(self):
        _map = super(FlightModifyListingSearchV2ResponseBodyModuleDirectFlightList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_info is not None:
            result['airline_info'] = self.airline_info.to_map()
        if self.arr_airport_info is not None:
            result['arr_airport_info'] = self.arr_airport_info.to_map()
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.cabin_class is not None:
            result['cabinClass'] = self.cabin_class
        if self.cabin_class_name is not None:
            result['cabinClassName'] = self.cabin_class_name
        if self.dep_airport_info is not None:
            result['dep_airport_info'] = self.dep_airport_info.to_map()
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.duration is not None:
            result['duration'] = self.duration
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        if self.flight_share_info is not None:
            result['flight_share_info'] = self.flight_share_info.to_map()
        if self.flight_size is not None:
            result['flight_size'] = self.flight_size
        if self.flight_stop_info is not None:
            result['flight_stop_info'] = self.flight_stop_info.to_map()
        if self.flight_transfer_info is not None:
            result['flight_transfer_info'] = self.flight_transfer_info.to_map()
        if self.flight_type is not None:
            result['flight_type'] = self.flight_type
        if self.journey_seq is not None:
            result['journey_seq'] = self.journey_seq
        if self.left_num is not None:
            result['left_num'] = self.left_num
        if self.manufacturer is not None:
            result['manufacturer'] = self.manufacturer
        if self.meal_desc is not None:
            result['meal_desc'] = self.meal_desc
        if self.price_info_dto is not None:
            result['price_info_d_t_o'] = self.price_info_dto.to_map()
        if self.segment_seq is not None:
            result['segment_seq'] = self.segment_seq
        if self.share is not None:
            result['share'] = self.share
        if self.short_flight_size is not None:
            result['short_flight_size'] = self.short_flight_size
        if self.span_day is not None:
            result['span_day'] = self.span_day
        if self.stop is not None:
            result['stop'] = self.stop
        if self.transfer is not None:
            result['transfer'] = self.transfer
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('airline_info') is not None:
            temp_model = FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListAirlineInfo()
            self.airline_info = temp_model.from_map(m['airline_info'])
        if m.get('arr_airport_info') is not None:
            temp_model = FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListArrAirportInfo()
            self.arr_airport_info = temp_model.from_map(m['arr_airport_info'])
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('cabinClass') is not None:
            self.cabin_class = m.get('cabinClass')
        if m.get('cabinClassName') is not None:
            self.cabin_class_name = m.get('cabinClassName')
        if m.get('dep_airport_info') is not None:
            temp_model = FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListDepAirportInfo()
            self.dep_airport_info = temp_model.from_map(m['dep_airport_info'])
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('duration') is not None:
            self.duration = m.get('duration')
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        if m.get('flight_share_info') is not None:
            temp_model = FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListFlightShareInfo()
            self.flight_share_info = temp_model.from_map(m['flight_share_info'])
        if m.get('flight_size') is not None:
            self.flight_size = m.get('flight_size')
        if m.get('flight_stop_info') is not None:
            temp_model = FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListFlightStopInfo()
            self.flight_stop_info = temp_model.from_map(m['flight_stop_info'])
        if m.get('flight_transfer_info') is not None:
            temp_model = FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListFlightTransferInfo()
            self.flight_transfer_info = temp_model.from_map(m['flight_transfer_info'])
        if m.get('flight_type') is not None:
            self.flight_type = m.get('flight_type')
        if m.get('journey_seq') is not None:
            self.journey_seq = m.get('journey_seq')
        if m.get('left_num') is not None:
            self.left_num = m.get('left_num')
        if m.get('manufacturer') is not None:
            self.manufacturer = m.get('manufacturer')
        if m.get('meal_desc') is not None:
            self.meal_desc = m.get('meal_desc')
        if m.get('price_info_d_t_o') is not None:
            temp_model = FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListPriceInfoDTO()
            self.price_info_dto = temp_model.from_map(m['price_info_d_t_o'])
        if m.get('segment_seq') is not None:
            self.segment_seq = m.get('segment_seq')
        if m.get('share') is not None:
            self.share = m.get('share')
        if m.get('short_flight_size') is not None:
            self.short_flight_size = m.get('short_flight_size')
        if m.get('span_day') is not None:
            self.span_day = m.get('span_day')
        if m.get('stop') is not None:
            self.stop = m.get('stop')
        if m.get('transfer') is not None:
            self.transfer = m.get('transfer')
        return self


class FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListAirlineInfo(TeaModel):
    def __init__(self, airline_chinese_name=None, airline_chinese_short_name=None, airline_code=None,
                 airline_icon=None, cheap_flight=None):
        self.airline_chinese_name = airline_chinese_name  # type: str
        self.airline_chinese_short_name = airline_chinese_short_name  # type: str
        self.airline_code = airline_code  # type: str
        self.airline_icon = airline_icon  # type: str
        self.cheap_flight = cheap_flight  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListAirlineInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_chinese_name is not None:
            result['airline_chinese_name'] = self.airline_chinese_name
        if self.airline_chinese_short_name is not None:
            result['airline_chinese_short_name'] = self.airline_chinese_short_name
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.airline_icon is not None:
            result['airline_icon'] = self.airline_icon
        if self.cheap_flight is not None:
            result['cheap_flight'] = self.cheap_flight
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('airline_chinese_name') is not None:
            self.airline_chinese_name = m.get('airline_chinese_name')
        if m.get('airline_chinese_short_name') is not None:
            self.airline_chinese_short_name = m.get('airline_chinese_short_name')
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('airline_icon') is not None:
            self.airline_icon = m.get('airline_icon')
        if m.get('cheap_flight') is not None:
            self.cheap_flight = m.get('cheap_flight')
        return self


class FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListArrAirportInfo(TeaModel):
    def __init__(self, airport_code=None, airport_name=None, airport_short_name=None, terminal=None):
        self.airport_code = airport_code  # type: str
        self.airport_name = airport_name  # type: str
        self.airport_short_name = airport_short_name  # type: str
        self.terminal = terminal  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListArrAirportInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airport_code is not None:
            result['airport_code'] = self.airport_code
        if self.airport_name is not None:
            result['airport_name'] = self.airport_name
        if self.airport_short_name is not None:
            result['airport_short_name'] = self.airport_short_name
        if self.terminal is not None:
            result['terminal'] = self.terminal
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('airport_code') is not None:
            self.airport_code = m.get('airport_code')
        if m.get('airport_name') is not None:
            self.airport_name = m.get('airport_name')
        if m.get('airport_short_name') is not None:
            self.airport_short_name = m.get('airport_short_name')
        if m.get('terminal') is not None:
            self.terminal = m.get('terminal')
        return self


class FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListDepAirportInfo(TeaModel):
    def __init__(self, airport_code=None, airport_name=None, airport_short_name=None, terminal=None):
        self.airport_code = airport_code  # type: str
        self.airport_name = airport_name  # type: str
        self.airport_short_name = airport_short_name  # type: str
        self.terminal = terminal  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListDepAirportInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airport_code is not None:
            result['airport_code'] = self.airport_code
        if self.airport_name is not None:
            result['airport_name'] = self.airport_name
        if self.airport_short_name is not None:
            result['airport_short_name'] = self.airport_short_name
        if self.terminal is not None:
            result['terminal'] = self.terminal
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('airport_code') is not None:
            self.airport_code = m.get('airport_code')
        if m.get('airport_name') is not None:
            self.airport_name = m.get('airport_name')
        if m.get('airport_short_name') is not None:
            self.airport_short_name = m.get('airport_short_name')
        if m.get('terminal') is not None:
            self.terminal = m.get('terminal')
        return self


class FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListFlightShareInfoOperatingAirlineInfo(TeaModel):
    def __init__(self, airline_chinese_name=None, airline_chinese_short_name=None, airline_code=None,
                 airline_icon=None, cheap_flight=None):
        self.airline_chinese_name = airline_chinese_name  # type: str
        self.airline_chinese_short_name = airline_chinese_short_name  # type: str
        self.airline_code = airline_code  # type: str
        self.airline_icon = airline_icon  # type: str
        self.cheap_flight = cheap_flight  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListFlightShareInfoOperatingAirlineInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_chinese_name is not None:
            result['airline_chinese_name'] = self.airline_chinese_name
        if self.airline_chinese_short_name is not None:
            result['airline_chinese_short_name'] = self.airline_chinese_short_name
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.airline_icon is not None:
            result['airline_icon'] = self.airline_icon
        if self.cheap_flight is not None:
            result['cheap_flight'] = self.cheap_flight
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('airline_chinese_name') is not None:
            self.airline_chinese_name = m.get('airline_chinese_name')
        if m.get('airline_chinese_short_name') is not None:
            self.airline_chinese_short_name = m.get('airline_chinese_short_name')
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('airline_icon') is not None:
            self.airline_icon = m.get('airline_icon')
        if m.get('cheap_flight') is not None:
            self.cheap_flight = m.get('cheap_flight')
        return self


class FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListFlightShareInfo(TeaModel):
    def __init__(self, operating_airline_info=None, operating_flight_no=None):
        self.operating_airline_info = operating_airline_info  # type: FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListFlightShareInfoOperatingAirlineInfo
        self.operating_flight_no = operating_flight_no  # type: str

    def validate(self):
        if self.operating_airline_info:
            self.operating_airline_info.validate()

    def to_map(self):
        _map = super(FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListFlightShareInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.operating_airline_info is not None:
            result['operating_airline_info'] = self.operating_airline_info.to_map()
        if self.operating_flight_no is not None:
            result['operating_flight_no'] = self.operating_flight_no
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('operating_airline_info') is not None:
            temp_model = FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListFlightShareInfoOperatingAirlineInfo()
            self.operating_airline_info = temp_model.from_map(m['operating_airline_info'])
        if m.get('operating_flight_no') is not None:
            self.operating_flight_no = m.get('operating_flight_no')
        return self


class FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListFlightStopInfo(TeaModel):
    def __init__(self, stop_airport=None, stop_arr_term=None, stop_arr_time=None, stop_city_code=None,
                 stop_city_name=None, stop_dep_term=None, stop_dep_time=None):
        self.stop_airport = stop_airport  # type: str
        self.stop_arr_term = stop_arr_term  # type: str
        self.stop_arr_time = stop_arr_time  # type: str
        self.stop_city_code = stop_city_code  # type: str
        self.stop_city_name = stop_city_name  # type: str
        self.stop_dep_term = stop_dep_term  # type: str
        self.stop_dep_time = stop_dep_time  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListFlightStopInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.stop_airport is not None:
            result['stop_airport'] = self.stop_airport
        if self.stop_arr_term is not None:
            result['stop_arr_term'] = self.stop_arr_term
        if self.stop_arr_time is not None:
            result['stop_arr_time'] = self.stop_arr_time
        if self.stop_city_code is not None:
            result['stop_city_code'] = self.stop_city_code
        if self.stop_city_name is not None:
            result['stop_city_name'] = self.stop_city_name
        if self.stop_dep_term is not None:
            result['stop_dep_term'] = self.stop_dep_term
        if self.stop_dep_time is not None:
            result['stop_dep_time'] = self.stop_dep_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('stop_airport') is not None:
            self.stop_airport = m.get('stop_airport')
        if m.get('stop_arr_term') is not None:
            self.stop_arr_term = m.get('stop_arr_term')
        if m.get('stop_arr_time') is not None:
            self.stop_arr_time = m.get('stop_arr_time')
        if m.get('stop_city_code') is not None:
            self.stop_city_code = m.get('stop_city_code')
        if m.get('stop_city_name') is not None:
            self.stop_city_name = m.get('stop_city_name')
        if m.get('stop_dep_term') is not None:
            self.stop_dep_term = m.get('stop_dep_term')
        if m.get('stop_dep_time') is not None:
            self.stop_dep_time = m.get('stop_dep_time')
        return self


class FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListFlightTransferInfoTransferAirlineInfo(TeaModel):
    def __init__(self, airline_chinese_name=None, airline_chinese_short_name=None, airline_code=None,
                 airline_icon=None, cheap_flight=None):
        self.airline_chinese_name = airline_chinese_name  # type: str
        self.airline_chinese_short_name = airline_chinese_short_name  # type: str
        self.airline_code = airline_code  # type: str
        self.airline_icon = airline_icon  # type: str
        self.cheap_flight = cheap_flight  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListFlightTransferInfoTransferAirlineInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_chinese_name is not None:
            result['airline_chinese_name'] = self.airline_chinese_name
        if self.airline_chinese_short_name is not None:
            result['airline_chinese_short_name'] = self.airline_chinese_short_name
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.airline_icon is not None:
            result['airline_icon'] = self.airline_icon
        if self.cheap_flight is not None:
            result['cheap_flight'] = self.cheap_flight
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('airline_chinese_name') is not None:
            self.airline_chinese_name = m.get('airline_chinese_name')
        if m.get('airline_chinese_short_name') is not None:
            self.airline_chinese_short_name = m.get('airline_chinese_short_name')
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('airline_icon') is not None:
            self.airline_icon = m.get('airline_icon')
        if m.get('cheap_flight') is not None:
            self.cheap_flight = m.get('cheap_flight')
        return self


class FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListFlightTransferInfo(TeaModel):
    def __init__(self, transfer_airline_info=None, transfer_city_code=None, transfer_city_name=None,
                 transfer_dep_time=None, transfer_flight_no=None, transfer_flight_size=None, transfer_share=None,
                 transfer_stop_time=None):
        self.transfer_airline_info = transfer_airline_info  # type: FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListFlightTransferInfoTransferAirlineInfo
        self.transfer_city_code = transfer_city_code  # type: str
        self.transfer_city_name = transfer_city_name  # type: str
        self.transfer_dep_time = transfer_dep_time  # type: str
        self.transfer_flight_no = transfer_flight_no  # type: str
        self.transfer_flight_size = transfer_flight_size  # type: str
        self.transfer_share = transfer_share  # type: bool
        self.transfer_stop_time = transfer_stop_time  # type: int

    def validate(self):
        if self.transfer_airline_info:
            self.transfer_airline_info.validate()

    def to_map(self):
        _map = super(FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListFlightTransferInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.transfer_airline_info is not None:
            result['transfer_airline_info'] = self.transfer_airline_info.to_map()
        if self.transfer_city_code is not None:
            result['transfer_city_code'] = self.transfer_city_code
        if self.transfer_city_name is not None:
            result['transfer_city_name'] = self.transfer_city_name
        if self.transfer_dep_time is not None:
            result['transfer_dep_time'] = self.transfer_dep_time
        if self.transfer_flight_no is not None:
            result['transfer_flight_no'] = self.transfer_flight_no
        if self.transfer_flight_size is not None:
            result['transfer_flight_size'] = self.transfer_flight_size
        if self.transfer_share is not None:
            result['transfer_share'] = self.transfer_share
        if self.transfer_stop_time is not None:
            result['transfer_stop_time'] = self.transfer_stop_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('transfer_airline_info') is not None:
            temp_model = FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListFlightTransferInfoTransferAirlineInfo()
            self.transfer_airline_info = temp_model.from_map(m['transfer_airline_info'])
        if m.get('transfer_city_code') is not None:
            self.transfer_city_code = m.get('transfer_city_code')
        if m.get('transfer_city_name') is not None:
            self.transfer_city_name = m.get('transfer_city_name')
        if m.get('transfer_dep_time') is not None:
            self.transfer_dep_time = m.get('transfer_dep_time')
        if m.get('transfer_flight_no') is not None:
            self.transfer_flight_no = m.get('transfer_flight_no')
        if m.get('transfer_flight_size') is not None:
            self.transfer_flight_size = m.get('transfer_flight_size')
        if m.get('transfer_share') is not None:
            self.transfer_share = m.get('transfer_share')
        if m.get('transfer_stop_time') is not None:
            self.transfer_stop_time = m.get('transfer_stop_time')
        return self


class FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListPriceInfoDTOReShopPriceInfoDTO(TeaModel):
    def __init__(self, re_shop_adult_change_fee=None, re_shop_adult_price=None, re_shop_adult_price_gap=None,
                 re_shop_child_change_fee=None, re_shop_child_price=None, re_shop_child_price_gap=None, re_shop_inf_change_fee=None,
                 re_shop_inf_price=None, re_shop_inf_price_gap=None):
        self.re_shop_adult_change_fee = re_shop_adult_change_fee  # type: int
        self.re_shop_adult_price = re_shop_adult_price  # type: int
        self.re_shop_adult_price_gap = re_shop_adult_price_gap  # type: int
        self.re_shop_child_change_fee = re_shop_child_change_fee  # type: int
        self.re_shop_child_price = re_shop_child_price  # type: int
        self.re_shop_child_price_gap = re_shop_child_price_gap  # type: int
        self.re_shop_inf_change_fee = re_shop_inf_change_fee  # type: int
        self.re_shop_inf_price = re_shop_inf_price  # type: int
        self.re_shop_inf_price_gap = re_shop_inf_price_gap  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListPriceInfoDTOReShopPriceInfoDTO, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.re_shop_adult_change_fee is not None:
            result['re_shop_adult_change_fee'] = self.re_shop_adult_change_fee
        if self.re_shop_adult_price is not None:
            result['re_shop_adult_price'] = self.re_shop_adult_price
        if self.re_shop_adult_price_gap is not None:
            result['re_shop_adult_price_gap'] = self.re_shop_adult_price_gap
        if self.re_shop_child_change_fee is not None:
            result['re_shop_child_change_fee'] = self.re_shop_child_change_fee
        if self.re_shop_child_price is not None:
            result['re_shop_child_price'] = self.re_shop_child_price
        if self.re_shop_child_price_gap is not None:
            result['re_shop_child_price_gap'] = self.re_shop_child_price_gap
        if self.re_shop_inf_change_fee is not None:
            result['re_shop_inf_change_fee'] = self.re_shop_inf_change_fee
        if self.re_shop_inf_price is not None:
            result['re_shop_inf_price'] = self.re_shop_inf_price
        if self.re_shop_inf_price_gap is not None:
            result['re_shop_inf_price_gap'] = self.re_shop_inf_price_gap
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('re_shop_adult_change_fee') is not None:
            self.re_shop_adult_change_fee = m.get('re_shop_adult_change_fee')
        if m.get('re_shop_adult_price') is not None:
            self.re_shop_adult_price = m.get('re_shop_adult_price')
        if m.get('re_shop_adult_price_gap') is not None:
            self.re_shop_adult_price_gap = m.get('re_shop_adult_price_gap')
        if m.get('re_shop_child_change_fee') is not None:
            self.re_shop_child_change_fee = m.get('re_shop_child_change_fee')
        if m.get('re_shop_child_price') is not None:
            self.re_shop_child_price = m.get('re_shop_child_price')
        if m.get('re_shop_child_price_gap') is not None:
            self.re_shop_child_price_gap = m.get('re_shop_child_price_gap')
        if m.get('re_shop_inf_change_fee') is not None:
            self.re_shop_inf_change_fee = m.get('re_shop_inf_change_fee')
        if m.get('re_shop_inf_price') is not None:
            self.re_shop_inf_price = m.get('re_shop_inf_price')
        if m.get('re_shop_inf_price_gap') is not None:
            self.re_shop_inf_price_gap = m.get('re_shop_inf_price_gap')
        return self


class FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListPriceInfoDTO(TeaModel):
    def __init__(self, adult_price=None, adult_tax=None, adult_total_price=None, before_control_price=None,
                 child_price=None, child_tax=None, child_total_price=None, infant_price=None, infant_tax=None,
                 infant_total_price=None, original_adult_price=None, original_adult_total_price=None, re_shop_price_info_dto=None):
        self.adult_price = adult_price  # type: int
        self.adult_tax = adult_tax  # type: int
        self.adult_total_price = adult_total_price  # type: int
        self.before_control_price = before_control_price  # type: int
        self.child_price = child_price  # type: int
        self.child_tax = child_tax  # type: int
        self.child_total_price = child_total_price  # type: int
        self.infant_price = infant_price  # type: int
        self.infant_tax = infant_tax  # type: int
        self.infant_total_price = infant_total_price  # type: int
        self.original_adult_price = original_adult_price  # type: int
        self.original_adult_total_price = original_adult_total_price  # type: int
        self.re_shop_price_info_dto = re_shop_price_info_dto  # type: FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListPriceInfoDTOReShopPriceInfoDTO

    def validate(self):
        if self.re_shop_price_info_dto:
            self.re_shop_price_info_dto.validate()

    def to_map(self):
        _map = super(FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListPriceInfoDTO, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.adult_price is not None:
            result['adult_price'] = self.adult_price
        if self.adult_tax is not None:
            result['adult_tax'] = self.adult_tax
        if self.adult_total_price is not None:
            result['adult_total_price'] = self.adult_total_price
        if self.before_control_price is not None:
            result['before_control_price'] = self.before_control_price
        if self.child_price is not None:
            result['child_price'] = self.child_price
        if self.child_tax is not None:
            result['child_tax'] = self.child_tax
        if self.child_total_price is not None:
            result['child_total_price'] = self.child_total_price
        if self.infant_price is not None:
            result['infant_price'] = self.infant_price
        if self.infant_tax is not None:
            result['infant_tax'] = self.infant_tax
        if self.infant_total_price is not None:
            result['infant_total_price'] = self.infant_total_price
        if self.original_adult_price is not None:
            result['original_adult_price'] = self.original_adult_price
        if self.original_adult_total_price is not None:
            result['original_adult_total_price'] = self.original_adult_total_price
        if self.re_shop_price_info_dto is not None:
            result['re_shop_price_info_d_t_o'] = self.re_shop_price_info_dto.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('adult_price') is not None:
            self.adult_price = m.get('adult_price')
        if m.get('adult_tax') is not None:
            self.adult_tax = m.get('adult_tax')
        if m.get('adult_total_price') is not None:
            self.adult_total_price = m.get('adult_total_price')
        if m.get('before_control_price') is not None:
            self.before_control_price = m.get('before_control_price')
        if m.get('child_price') is not None:
            self.child_price = m.get('child_price')
        if m.get('child_tax') is not None:
            self.child_tax = m.get('child_tax')
        if m.get('child_total_price') is not None:
            self.child_total_price = m.get('child_total_price')
        if m.get('infant_price') is not None:
            self.infant_price = m.get('infant_price')
        if m.get('infant_tax') is not None:
            self.infant_tax = m.get('infant_tax')
        if m.get('infant_total_price') is not None:
            self.infant_total_price = m.get('infant_total_price')
        if m.get('original_adult_price') is not None:
            self.original_adult_price = m.get('original_adult_price')
        if m.get('original_adult_total_price') is not None:
            self.original_adult_total_price = m.get('original_adult_total_price')
        if m.get('re_shop_price_info_d_t_o') is not None:
            temp_model = FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListPriceInfoDTOReShopPriceInfoDTO()
            self.re_shop_price_info_dto = temp_model.from_map(m['re_shop_price_info_d_t_o'])
        return self


class FlightModifyListingSearchV2ResponseBodyModuleTransferFlightList(TeaModel):
    def __init__(self, airline_info=None, arr_airport_info=None, arr_city_code=None, arr_time=None,
                 cabin_class=None, cabin_class_name=None, dep_airport_info=None, dep_city_code=None, dep_time=None,
                 duration=None, flight_no=None, flight_share_info=None, flight_size=None, flight_stop_info=None,
                 flight_transfer_info=None, flight_type=None, journey_seq=None, left_num=None, manufacturer=None, meal_desc=None,
                 price_info_dto=None, segment_seq=None, share=None, short_flight_size=None, span_day=None, stop=None, transfer=None):
        self.airline_info = airline_info  # type: FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListAirlineInfo
        self.arr_airport_info = arr_airport_info  # type: FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListArrAirportInfo
        self.arr_city_code = arr_city_code  # type: str
        self.arr_time = arr_time  # type: str
        self.cabin_class = cabin_class  # type: str
        self.cabin_class_name = cabin_class_name  # type: str
        self.dep_airport_info = dep_airport_info  # type: FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListDepAirportInfo
        self.dep_city_code = dep_city_code  # type: str
        self.dep_time = dep_time  # type: str
        self.duration = duration  # type: int
        self.flight_no = flight_no  # type: str
        self.flight_share_info = flight_share_info  # type: FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListFlightShareInfo
        self.flight_size = flight_size  # type: str
        self.flight_stop_info = flight_stop_info  # type: FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListFlightStopInfo
        self.flight_transfer_info = flight_transfer_info  # type: FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListFlightTransferInfo
        self.flight_type = flight_type  # type: str
        self.journey_seq = journey_seq  # type: int
        self.left_num = left_num  # type: str
        self.manufacturer = manufacturer  # type: str
        self.meal_desc = meal_desc  # type: str
        self.price_info_dto = price_info_dto  # type: FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListPriceInfoDTO
        self.segment_seq = segment_seq  # type: int
        self.share = share  # type: bool
        self.short_flight_size = short_flight_size  # type: str
        self.span_day = span_day  # type: str
        self.stop = stop  # type: bool
        self.transfer = transfer  # type: bool

    def validate(self):
        if self.airline_info:
            self.airline_info.validate()
        if self.arr_airport_info:
            self.arr_airport_info.validate()
        if self.dep_airport_info:
            self.dep_airport_info.validate()
        if self.flight_share_info:
            self.flight_share_info.validate()
        if self.flight_stop_info:
            self.flight_stop_info.validate()
        if self.flight_transfer_info:
            self.flight_transfer_info.validate()
        if self.price_info_dto:
            self.price_info_dto.validate()

    def to_map(self):
        _map = super(FlightModifyListingSearchV2ResponseBodyModuleTransferFlightList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_info is not None:
            result['airline_info'] = self.airline_info.to_map()
        if self.arr_airport_info is not None:
            result['arr_airport_info'] = self.arr_airport_info.to_map()
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.cabin_class is not None:
            result['cabinClass'] = self.cabin_class
        if self.cabin_class_name is not None:
            result['cabinClassName'] = self.cabin_class_name
        if self.dep_airport_info is not None:
            result['dep_airport_info'] = self.dep_airport_info.to_map()
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.duration is not None:
            result['duration'] = self.duration
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        if self.flight_share_info is not None:
            result['flight_share_info'] = self.flight_share_info.to_map()
        if self.flight_size is not None:
            result['flight_size'] = self.flight_size
        if self.flight_stop_info is not None:
            result['flight_stop_info'] = self.flight_stop_info.to_map()
        if self.flight_transfer_info is not None:
            result['flight_transfer_info'] = self.flight_transfer_info.to_map()
        if self.flight_type is not None:
            result['flight_type'] = self.flight_type
        if self.journey_seq is not None:
            result['journey_seq'] = self.journey_seq
        if self.left_num is not None:
            result['left_num'] = self.left_num
        if self.manufacturer is not None:
            result['manufacturer'] = self.manufacturer
        if self.meal_desc is not None:
            result['meal_desc'] = self.meal_desc
        if self.price_info_dto is not None:
            result['price_info_d_t_o'] = self.price_info_dto.to_map()
        if self.segment_seq is not None:
            result['segment_seq'] = self.segment_seq
        if self.share is not None:
            result['share'] = self.share
        if self.short_flight_size is not None:
            result['short_flight_size'] = self.short_flight_size
        if self.span_day is not None:
            result['span_day'] = self.span_day
        if self.stop is not None:
            result['stop'] = self.stop
        if self.transfer is not None:
            result['transfer'] = self.transfer
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('airline_info') is not None:
            temp_model = FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListAirlineInfo()
            self.airline_info = temp_model.from_map(m['airline_info'])
        if m.get('arr_airport_info') is not None:
            temp_model = FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListArrAirportInfo()
            self.arr_airport_info = temp_model.from_map(m['arr_airport_info'])
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('cabinClass') is not None:
            self.cabin_class = m.get('cabinClass')
        if m.get('cabinClassName') is not None:
            self.cabin_class_name = m.get('cabinClassName')
        if m.get('dep_airport_info') is not None:
            temp_model = FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListDepAirportInfo()
            self.dep_airport_info = temp_model.from_map(m['dep_airport_info'])
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('duration') is not None:
            self.duration = m.get('duration')
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        if m.get('flight_share_info') is not None:
            temp_model = FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListFlightShareInfo()
            self.flight_share_info = temp_model.from_map(m['flight_share_info'])
        if m.get('flight_size') is not None:
            self.flight_size = m.get('flight_size')
        if m.get('flight_stop_info') is not None:
            temp_model = FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListFlightStopInfo()
            self.flight_stop_info = temp_model.from_map(m['flight_stop_info'])
        if m.get('flight_transfer_info') is not None:
            temp_model = FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListFlightTransferInfo()
            self.flight_transfer_info = temp_model.from_map(m['flight_transfer_info'])
        if m.get('flight_type') is not None:
            self.flight_type = m.get('flight_type')
        if m.get('journey_seq') is not None:
            self.journey_seq = m.get('journey_seq')
        if m.get('left_num') is not None:
            self.left_num = m.get('left_num')
        if m.get('manufacturer') is not None:
            self.manufacturer = m.get('manufacturer')
        if m.get('meal_desc') is not None:
            self.meal_desc = m.get('meal_desc')
        if m.get('price_info_d_t_o') is not None:
            temp_model = FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListPriceInfoDTO()
            self.price_info_dto = temp_model.from_map(m['price_info_d_t_o'])
        if m.get('segment_seq') is not None:
            self.segment_seq = m.get('segment_seq')
        if m.get('share') is not None:
            self.share = m.get('share')
        if m.get('short_flight_size') is not None:
            self.short_flight_size = m.get('short_flight_size')
        if m.get('span_day') is not None:
            self.span_day = m.get('span_day')
        if m.get('stop') is not None:
            self.stop = m.get('stop')
        if m.get('transfer') is not None:
            self.transfer = m.get('transfer')
        return self


class FlightModifyListingSearchV2ResponseBodyModule(TeaModel):
    def __init__(self, direct_flight_list=None, session_id=None, transfer_flight_list=None, transfer_title=None):
        self.direct_flight_list = direct_flight_list  # type: list[FlightModifyListingSearchV2ResponseBodyModuleDirectFlightList]
        self.session_id = session_id  # type: str
        self.transfer_flight_list = transfer_flight_list  # type: list[FlightModifyListingSearchV2ResponseBodyModuleTransferFlightList]
        self.transfer_title = transfer_title  # type: str

    def validate(self):
        if self.direct_flight_list:
            for k in self.direct_flight_list:
                if k:
                    k.validate()
        if self.transfer_flight_list:
            for k in self.transfer_flight_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightModifyListingSearchV2ResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['direct_flight_list'] = []
        if self.direct_flight_list is not None:
            for k in self.direct_flight_list:
                result['direct_flight_list'].append(k.to_map() if k else None)
        if self.session_id is not None:
            result['session_id'] = self.session_id
        result['transfer_flight_list'] = []
        if self.transfer_flight_list is not None:
            for k in self.transfer_flight_list:
                result['transfer_flight_list'].append(k.to_map() if k else None)
        if self.transfer_title is not None:
            result['transfer_title'] = self.transfer_title
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.direct_flight_list = []
        if m.get('direct_flight_list') is not None:
            for k in m.get('direct_flight_list'):
                temp_model = FlightModifyListingSearchV2ResponseBodyModuleDirectFlightList()
                self.direct_flight_list.append(temp_model.from_map(k))
        if m.get('session_id') is not None:
            self.session_id = m.get('session_id')
        self.transfer_flight_list = []
        if m.get('transfer_flight_list') is not None:
            for k in m.get('transfer_flight_list'):
                temp_model = FlightModifyListingSearchV2ResponseBodyModuleTransferFlightList()
                self.transfer_flight_list.append(temp_model.from_map(k))
        if m.get('transfer_title') is not None:
            self.transfer_title = m.get('transfer_title')
        return self


class FlightModifyListingSearchV2ResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        # module
        self.module = module  # type: FlightModifyListingSearchV2ResponseBodyModule
        # requestId
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        # requestId
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(FlightModifyListingSearchV2ResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = FlightModifyListingSearchV2ResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightModifyListingSearchV2Response(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: FlightModifyListingSearchV2ResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(FlightModifyListingSearchV2Response, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightModifyListingSearchV2ResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightModifyOrderDetailV2Headers(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightModifyOrderDetailV2Headers, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class FlightModifyOrderDetailV2Request(TeaModel):
    def __init__(self, isv_name=None, modify_apply_id=None, need_query_service_fee=None, order_id=None):
        self.isv_name = isv_name  # type: str
        self.modify_apply_id = modify_apply_id  # type: str
        self.need_query_service_fee = need_query_service_fee  # type: bool
        self.order_id = order_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightModifyOrderDetailV2Request, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.modify_apply_id is not None:
            result['modify_apply_id'] = self.modify_apply_id
        if self.need_query_service_fee is not None:
            result['need_query_service_fee'] = self.need_query_service_fee
        if self.order_id is not None:
            result['order_id'] = self.order_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('modify_apply_id') is not None:
            self.modify_apply_id = m.get('modify_apply_id')
        if m.get('need_query_service_fee') is not None:
            self.need_query_service_fee = m.get('need_query_service_fee')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        return self


class FlightModifyOrderDetailV2ResponseBodyModuleContactInfoDTO(TeaModel):
    def __init__(self, contact_email=None, contact_name=None, contact_phone=None, send_msg_to_passenger=None):
        self.contact_email = contact_email  # type: str
        self.contact_name = contact_name  # type: str
        self.contact_phone = contact_phone  # type: str
        self.send_msg_to_passenger = send_msg_to_passenger  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightModifyOrderDetailV2ResponseBodyModuleContactInfoDTO, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_email is not None:
            result['contact_email'] = self.contact_email
        if self.contact_name is not None:
            result['contact_name'] = self.contact_name
        if self.contact_phone is not None:
            result['contact_phone'] = self.contact_phone
        if self.send_msg_to_passenger is not None:
            result['send_msg_to_passenger'] = self.send_msg_to_passenger
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('contact_email') is not None:
            self.contact_email = m.get('contact_email')
        if m.get('contact_name') is not None:
            self.contact_name = m.get('contact_name')
        if m.get('contact_phone') is not None:
            self.contact_phone = m.get('contact_phone')
        if m.get('send_msg_to_passenger') is not None:
            self.send_msg_to_passenger = m.get('send_msg_to_passenger')
        return self


class FlightModifyOrderDetailV2ResponseBodyModuleDestFlightInfoDTOSSegmentPosition(TeaModel):
    def __init__(self, journey_index=None, segment_index=None):
        self.journey_index = journey_index  # type: int
        self.segment_index = segment_index  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightModifyOrderDetailV2ResponseBodyModuleDestFlightInfoDTOSSegmentPosition, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.journey_index is not None:
            result['journey_index'] = self.journey_index
        if self.segment_index is not None:
            result['segment_index'] = self.segment_index
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('journey_index') is not None:
            self.journey_index = m.get('journey_index')
        if m.get('segment_index') is not None:
            self.segment_index = m.get('segment_index')
        return self


class FlightModifyOrderDetailV2ResponseBodyModuleDestFlightInfoDTOS(TeaModel):
    def __init__(self, airline_code=None, airline_icon_url=None, airline_name=None, arr_airport_code=None,
                 arr_airport_name=None, arr_city_code=None, arr_city_name=None, arr_terminal=None, arr_time=None, cabin=None,
                 cabin_class=None, cabin_class_name=None, cabin_discount=None, carrier_airline_code=None,
                 carrier_airline_icon_url=None, carrier_airline_name=None, carrier_flight_no=None, dep_airport_code=None,
                 dep_airport_name=None, dep_city_code=None, dep_city_name=None, dep_terminal=None, dep_time=None, flight_no=None,
                 flight_type=None, meal_desc=None, segment_iid=None, segment_position=None, stop_arr_time=None, stop_city=None,
                 stop_dep_time=None):
        self.airline_code = airline_code  # type: str
        self.airline_icon_url = airline_icon_url  # type: str
        self.airline_name = airline_name  # type: str
        self.arr_airport_code = arr_airport_code  # type: str
        self.arr_airport_name = arr_airport_name  # type: str
        self.arr_city_code = arr_city_code  # type: str
        self.arr_city_name = arr_city_name  # type: str
        self.arr_terminal = arr_terminal  # type: str
        self.arr_time = arr_time  # type: str
        self.cabin = cabin  # type: str
        self.cabin_class = cabin_class  # type: str
        self.cabin_class_name = cabin_class_name  # type: str
        self.cabin_discount = cabin_discount  # type: long
        self.carrier_airline_code = carrier_airline_code  # type: str
        self.carrier_airline_icon_url = carrier_airline_icon_url  # type: str
        self.carrier_airline_name = carrier_airline_name  # type: str
        self.carrier_flight_no = carrier_flight_no  # type: str
        self.dep_airport_code = dep_airport_code  # type: str
        self.dep_airport_name = dep_airport_name  # type: str
        self.dep_city_code = dep_city_code  # type: str
        self.dep_city_name = dep_city_name  # type: str
        self.dep_terminal = dep_terminal  # type: str
        self.dep_time = dep_time  # type: str
        self.flight_no = flight_no  # type: str
        self.flight_type = flight_type  # type: str
        self.meal_desc = meal_desc  # type: str
        self.segment_iid = segment_iid  # type: str
        self.segment_position = segment_position  # type: FlightModifyOrderDetailV2ResponseBodyModuleDestFlightInfoDTOSSegmentPosition
        self.stop_arr_time = stop_arr_time  # type: str
        self.stop_city = stop_city  # type: str
        self.stop_dep_time = stop_dep_time  # type: str

    def validate(self):
        if self.segment_position:
            self.segment_position.validate()

    def to_map(self):
        _map = super(FlightModifyOrderDetailV2ResponseBodyModuleDestFlightInfoDTOS, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.airline_icon_url is not None:
            result['airline_icon_url'] = self.airline_icon_url
        if self.airline_name is not None:
            result['airline_name'] = self.airline_name
        if self.arr_airport_code is not None:
            result['arr_airport_code'] = self.arr_airport_code
        if self.arr_airport_name is not None:
            result['arr_airport_name'] = self.arr_airport_name
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.arr_city_name is not None:
            result['arr_city_name'] = self.arr_city_name
        if self.arr_terminal is not None:
            result['arr_terminal'] = self.arr_terminal
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.cabin is not None:
            result['cabin'] = self.cabin
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.cabin_class_name is not None:
            result['cabin_class_name'] = self.cabin_class_name
        if self.cabin_discount is not None:
            result['cabin_discount'] = self.cabin_discount
        if self.carrier_airline_code is not None:
            result['carrier_airline_code'] = self.carrier_airline_code
        if self.carrier_airline_icon_url is not None:
            result['carrier_airline_icon_url'] = self.carrier_airline_icon_url
        if self.carrier_airline_name is not None:
            result['carrier_airline_name'] = self.carrier_airline_name
        if self.carrier_flight_no is not None:
            result['carrier_flight_no'] = self.carrier_flight_no
        if self.dep_airport_code is not None:
            result['dep_airport_code'] = self.dep_airport_code
        if self.dep_airport_name is not None:
            result['dep_airport_name'] = self.dep_airport_name
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_city_name is not None:
            result['dep_city_name'] = self.dep_city_name
        if self.dep_terminal is not None:
            result['dep_terminal'] = self.dep_terminal
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        if self.flight_type is not None:
            result['flight_type'] = self.flight_type
        if self.meal_desc is not None:
            result['meal_desc'] = self.meal_desc
        if self.segment_iid is not None:
            result['segmentI_id'] = self.segment_iid
        if self.segment_position is not None:
            result['segment_position'] = self.segment_position.to_map()
        if self.stop_arr_time is not None:
            result['stop_arr_time'] = self.stop_arr_time
        if self.stop_city is not None:
            result['stop_city'] = self.stop_city
        if self.stop_dep_time is not None:
            result['stop_dep_time'] = self.stop_dep_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('airline_icon_url') is not None:
            self.airline_icon_url = m.get('airline_icon_url')
        if m.get('airline_name') is not None:
            self.airline_name = m.get('airline_name')
        if m.get('arr_airport_code') is not None:
            self.arr_airport_code = m.get('arr_airport_code')
        if m.get('arr_airport_name') is not None:
            self.arr_airport_name = m.get('arr_airport_name')
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('arr_city_name') is not None:
            self.arr_city_name = m.get('arr_city_name')
        if m.get('arr_terminal') is not None:
            self.arr_terminal = m.get('arr_terminal')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('cabin') is not None:
            self.cabin = m.get('cabin')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('cabin_class_name') is not None:
            self.cabin_class_name = m.get('cabin_class_name')
        if m.get('cabin_discount') is not None:
            self.cabin_discount = m.get('cabin_discount')
        if m.get('carrier_airline_code') is not None:
            self.carrier_airline_code = m.get('carrier_airline_code')
        if m.get('carrier_airline_icon_url') is not None:
            self.carrier_airline_icon_url = m.get('carrier_airline_icon_url')
        if m.get('carrier_airline_name') is not None:
            self.carrier_airline_name = m.get('carrier_airline_name')
        if m.get('carrier_flight_no') is not None:
            self.carrier_flight_no = m.get('carrier_flight_no')
        if m.get('dep_airport_code') is not None:
            self.dep_airport_code = m.get('dep_airport_code')
        if m.get('dep_airport_name') is not None:
            self.dep_airport_name = m.get('dep_airport_name')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_city_name') is not None:
            self.dep_city_name = m.get('dep_city_name')
        if m.get('dep_terminal') is not None:
            self.dep_terminal = m.get('dep_terminal')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        if m.get('flight_type') is not None:
            self.flight_type = m.get('flight_type')
        if m.get('meal_desc') is not None:
            self.meal_desc = m.get('meal_desc')
        if m.get('segmentI_id') is not None:
            self.segment_iid = m.get('segmentI_id')
        if m.get('segment_position') is not None:
            temp_model = FlightModifyOrderDetailV2ResponseBodyModuleDestFlightInfoDTOSSegmentPosition()
            self.segment_position = temp_model.from_map(m['segment_position'])
        if m.get('stop_arr_time') is not None:
            self.stop_arr_time = m.get('stop_arr_time')
        if m.get('stop_city') is not None:
            self.stop_city = m.get('stop_city')
        if m.get('stop_dep_time') is not None:
            self.stop_dep_time = m.get('stop_dep_time')
        return self


class FlightModifyOrderDetailV2ResponseBodyModuleTravelerInfoDTOSChangeFee(TeaModel):
    def __init__(self, change_fee=None, service_fee=None, upgrade_price=None):
        self.change_fee = change_fee  # type: long
        self.service_fee = service_fee  # type: long
        self.upgrade_price = upgrade_price  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightModifyOrderDetailV2ResponseBodyModuleTravelerInfoDTOSChangeFee, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.change_fee is not None:
            result['change_fee'] = self.change_fee
        if self.service_fee is not None:
            result['service_fee'] = self.service_fee
        if self.upgrade_price is not None:
            result['upgrade_price'] = self.upgrade_price
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('change_fee') is not None:
            self.change_fee = m.get('change_fee')
        if m.get('service_fee') is not None:
            self.service_fee = m.get('service_fee')
        if m.get('upgrade_price') is not None:
            self.upgrade_price = m.get('upgrade_price')
        return self


class FlightModifyOrderDetailV2ResponseBodyModuleTravelerInfoDTOS(TeaModel):
    def __init__(self, birth_date=None, cert_no=None, cert_type=None, change_fee=None, gender=None,
                 origin_ticket_nos=None, passenger_id=None, passenger_name=None, passenger_type=None, phone=None, pid=None,
                 ticket_nos=None):
        self.birth_date = birth_date  # type: str
        self.cert_no = cert_no  # type: str
        self.cert_type = cert_type  # type: int
        self.change_fee = change_fee  # type: FlightModifyOrderDetailV2ResponseBodyModuleTravelerInfoDTOSChangeFee
        self.gender = gender  # type: int
        self.origin_ticket_nos = origin_ticket_nos  # type: list[str]
        self.passenger_id = passenger_id  # type: str
        self.passenger_name = passenger_name  # type: str
        self.passenger_type = passenger_type  # type: int
        self.phone = phone  # type: str
        self.pid = pid  # type: long
        self.ticket_nos = ticket_nos  # type: list[str]

    def validate(self):
        if self.change_fee:
            self.change_fee.validate()

    def to_map(self):
        _map = super(FlightModifyOrderDetailV2ResponseBodyModuleTravelerInfoDTOS, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.birth_date is not None:
            result['birth_date'] = self.birth_date
        if self.cert_no is not None:
            result['cert_no'] = self.cert_no
        if self.cert_type is not None:
            result['cert_type'] = self.cert_type
        if self.change_fee is not None:
            result['change_fee'] = self.change_fee.to_map()
        if self.gender is not None:
            result['gender'] = self.gender
        if self.origin_ticket_nos is not None:
            result['origin_ticket_nos'] = self.origin_ticket_nos
        if self.passenger_id is not None:
            result['passenger_id'] = self.passenger_id
        if self.passenger_name is not None:
            result['passenger_name'] = self.passenger_name
        if self.passenger_type is not None:
            result['passenger_type'] = self.passenger_type
        if self.phone is not None:
            result['phone'] = self.phone
        if self.pid is not None:
            result['pid'] = self.pid
        if self.ticket_nos is not None:
            result['ticket_nos'] = self.ticket_nos
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('birth_date') is not None:
            self.birth_date = m.get('birth_date')
        if m.get('cert_no') is not None:
            self.cert_no = m.get('cert_no')
        if m.get('cert_type') is not None:
            self.cert_type = m.get('cert_type')
        if m.get('change_fee') is not None:
            temp_model = FlightModifyOrderDetailV2ResponseBodyModuleTravelerInfoDTOSChangeFee()
            self.change_fee = temp_model.from_map(m['change_fee'])
        if m.get('gender') is not None:
            self.gender = m.get('gender')
        if m.get('origin_ticket_nos') is not None:
            self.origin_ticket_nos = m.get('origin_ticket_nos')
        if m.get('passenger_id') is not None:
            self.passenger_id = m.get('passenger_id')
        if m.get('passenger_name') is not None:
            self.passenger_name = m.get('passenger_name')
        if m.get('passenger_type') is not None:
            self.passenger_type = m.get('passenger_type')
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        if m.get('pid') is not None:
            self.pid = m.get('pid')
        if m.get('ticket_nos') is not None:
            self.ticket_nos = m.get('ticket_nos')
        return self


class FlightModifyOrderDetailV2ResponseBodyModule(TeaModel):
    def __init__(self, apply_time=None, book_user_email=None, book_user_name=None, bookuser_phone=None,
                 change_fail_reason=None, contact_info_dto=None, dest_flight_info_dtos=None, last_pay_time=None, order_id=None,
                 out_order_id=None, out_sub_order_id=None, pay_time=None, reason=None, status=None, sub_order_id=None,
                 ticket_time=None, total_price=None, total_service_fee_price=None, traveler_info_dtos=None):
        self.apply_time = apply_time  # type: str
        self.book_user_email = book_user_email  # type: str
        self.book_user_name = book_user_name  # type: str
        self.bookuser_phone = bookuser_phone  # type: str
        self.change_fail_reason = change_fail_reason  # type: str
        self.contact_info_dto = contact_info_dto  # type: FlightModifyOrderDetailV2ResponseBodyModuleContactInfoDTO
        self.dest_flight_info_dtos = dest_flight_info_dtos  # type: list[FlightModifyOrderDetailV2ResponseBodyModuleDestFlightInfoDTOS]
        self.last_pay_time = last_pay_time  # type: str
        self.order_id = order_id  # type: long
        self.out_order_id = out_order_id  # type: str
        self.out_sub_order_id = out_sub_order_id  # type: str
        self.pay_time = pay_time  # type: str
        self.reason = reason  # type: str
        self.status = status  # type: int
        self.sub_order_id = sub_order_id  # type: long
        self.ticket_time = ticket_time  # type: str
        self.total_price = total_price  # type: long
        self.total_service_fee_price = total_service_fee_price  # type: long
        self.traveler_info_dtos = traveler_info_dtos  # type: list[FlightModifyOrderDetailV2ResponseBodyModuleTravelerInfoDTOS]

    def validate(self):
        if self.contact_info_dto:
            self.contact_info_dto.validate()
        if self.dest_flight_info_dtos:
            for k in self.dest_flight_info_dtos:
                if k:
                    k.validate()
        if self.traveler_info_dtos:
            for k in self.traveler_info_dtos:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightModifyOrderDetailV2ResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_time is not None:
            result['apply_time'] = self.apply_time
        if self.book_user_email is not None:
            result['book_user_email'] = self.book_user_email
        if self.book_user_name is not None:
            result['book_user_name'] = self.book_user_name
        if self.bookuser_phone is not None:
            result['bookuser_phone'] = self.bookuser_phone
        if self.change_fail_reason is not None:
            result['change_fail_reason'] = self.change_fail_reason
        if self.contact_info_dto is not None:
            result['contact_info_d_t_o'] = self.contact_info_dto.to_map()
        result['dest_flight_info_d_t_o_s'] = []
        if self.dest_flight_info_dtos is not None:
            for k in self.dest_flight_info_dtos:
                result['dest_flight_info_d_t_o_s'].append(k.to_map() if k else None)
        if self.last_pay_time is not None:
            result['last_pay_time'] = self.last_pay_time
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        if self.out_sub_order_id is not None:
            result['out_sub_order_id'] = self.out_sub_order_id
        if self.pay_time is not None:
            result['pay_time'] = self.pay_time
        if self.reason is not None:
            result['reason'] = self.reason
        if self.status is not None:
            result['status'] = self.status
        if self.sub_order_id is not None:
            result['sub_order_id'] = self.sub_order_id
        if self.ticket_time is not None:
            result['ticket_time'] = self.ticket_time
        if self.total_price is not None:
            result['total_price'] = self.total_price
        if self.total_service_fee_price is not None:
            result['total_service_fee_price'] = self.total_service_fee_price
        result['traveler_info_d_t_o_s'] = []
        if self.traveler_info_dtos is not None:
            for k in self.traveler_info_dtos:
                result['traveler_info_d_t_o_s'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('apply_time') is not None:
            self.apply_time = m.get('apply_time')
        if m.get('book_user_email') is not None:
            self.book_user_email = m.get('book_user_email')
        if m.get('book_user_name') is not None:
            self.book_user_name = m.get('book_user_name')
        if m.get('bookuser_phone') is not None:
            self.bookuser_phone = m.get('bookuser_phone')
        if m.get('change_fail_reason') is not None:
            self.change_fail_reason = m.get('change_fail_reason')
        if m.get('contact_info_d_t_o') is not None:
            temp_model = FlightModifyOrderDetailV2ResponseBodyModuleContactInfoDTO()
            self.contact_info_dto = temp_model.from_map(m['contact_info_d_t_o'])
        self.dest_flight_info_dtos = []
        if m.get('dest_flight_info_d_t_o_s') is not None:
            for k in m.get('dest_flight_info_d_t_o_s'):
                temp_model = FlightModifyOrderDetailV2ResponseBodyModuleDestFlightInfoDTOS()
                self.dest_flight_info_dtos.append(temp_model.from_map(k))
        if m.get('last_pay_time') is not None:
            self.last_pay_time = m.get('last_pay_time')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        if m.get('out_sub_order_id') is not None:
            self.out_sub_order_id = m.get('out_sub_order_id')
        if m.get('pay_time') is not None:
            self.pay_time = m.get('pay_time')
        if m.get('reason') is not None:
            self.reason = m.get('reason')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('sub_order_id') is not None:
            self.sub_order_id = m.get('sub_order_id')
        if m.get('ticket_time') is not None:
            self.ticket_time = m.get('ticket_time')
        if m.get('total_price') is not None:
            self.total_price = m.get('total_price')
        if m.get('total_service_fee_price') is not None:
            self.total_service_fee_price = m.get('total_service_fee_price')
        self.traveler_info_dtos = []
        if m.get('traveler_info_d_t_o_s') is not None:
            for k in m.get('traveler_info_d_t_o_s'):
                temp_model = FlightModifyOrderDetailV2ResponseBodyModuleTravelerInfoDTOS()
                self.traveler_info_dtos.append(temp_model.from_map(k))
        return self


class FlightModifyOrderDetailV2ResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        # module
        self.module = module  # type: FlightModifyOrderDetailV2ResponseBodyModule
        # requestId
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        # traceId
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(FlightModifyOrderDetailV2ResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = FlightModifyOrderDetailV2ResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightModifyOrderDetailV2Response(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: FlightModifyOrderDetailV2ResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(FlightModifyOrderDetailV2Response, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightModifyOrderDetailV2ResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightModifyOtaSearchV2Headers(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightModifyOtaSearchV2Headers, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class FlightModifyOtaSearchV2RequestPassengerSegmentRelations(TeaModel):
    def __init__(self, passenger_id=None, segment_id_list=None):
        self.passenger_id = passenger_id  # type: str
        self.segment_id_list = segment_id_list  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightModifyOtaSearchV2RequestPassengerSegmentRelations, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.passenger_id is not None:
            result['passenger_id'] = self.passenger_id
        if self.segment_id_list is not None:
            result['segment_id_list'] = self.segment_id_list
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('passenger_id') is not None:
            self.passenger_id = m.get('passenger_id')
        if m.get('segment_id_list') is not None:
            self.segment_id_list = m.get('segment_id_list')
        return self


class FlightModifyOtaSearchV2RequestSelectedSegments(TeaModel):
    def __init__(self, arr_city_code=None, dep_city_code=None, dep_date_time=None, journey_seq=None,
                 marketing_flight_no=None, operating_flight_no=None, segment_seq=None):
        self.arr_city_code = arr_city_code  # type: str
        self.dep_city_code = dep_city_code  # type: str
        self.dep_date_time = dep_date_time  # type: str
        self.journey_seq = journey_seq  # type: int
        self.marketing_flight_no = marketing_flight_no  # type: str
        self.operating_flight_no = operating_flight_no  # type: str
        self.segment_seq = segment_seq  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightModifyOtaSearchV2RequestSelectedSegments, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_date_time is not None:
            result['dep_date_time'] = self.dep_date_time
        if self.journey_seq is not None:
            result['journey_seq'] = self.journey_seq
        if self.marketing_flight_no is not None:
            result['marketing_flight_no'] = self.marketing_flight_no
        if self.operating_flight_no is not None:
            result['operating_flight_no'] = self.operating_flight_no
        if self.segment_seq is not None:
            result['segment_seq'] = self.segment_seq
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_date_time') is not None:
            self.dep_date_time = m.get('dep_date_time')
        if m.get('journey_seq') is not None:
            self.journey_seq = m.get('journey_seq')
        if m.get('marketing_flight_no') is not None:
            self.marketing_flight_no = m.get('marketing_flight_no')
        if m.get('operating_flight_no') is not None:
            self.operating_flight_no = m.get('operating_flight_no')
        if m.get('segment_seq') is not None:
            self.segment_seq = m.get('segment_seq')
        return self


class FlightModifyOtaSearchV2Request(TeaModel):
    def __init__(self, cabin_class=None, dep_date=None, isv_name=None, order_id=None, out_order_id=None,
                 passenger_segment_relations=None, selected_segments=None, session_id=None, voluntary=None):
        self.cabin_class = cabin_class  # type: list[int]
        self.dep_date = dep_date  # type: list[str]
        self.isv_name = isv_name  # type: str
        self.order_id = order_id  # type: long
        self.out_order_id = out_order_id  # type: str
        self.passenger_segment_relations = passenger_segment_relations  # type: list[FlightModifyOtaSearchV2RequestPassengerSegmentRelations]
        self.selected_segments = selected_segments  # type: list[FlightModifyOtaSearchV2RequestSelectedSegments]
        self.session_id = session_id  # type: str
        self.voluntary = voluntary  # type: bool

    def validate(self):
        if self.passenger_segment_relations:
            for k in self.passenger_segment_relations:
                if k:
                    k.validate()
        if self.selected_segments:
            for k in self.selected_segments:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightModifyOtaSearchV2Request, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        result['passenger_segment_relations'] = []
        if self.passenger_segment_relations is not None:
            for k in self.passenger_segment_relations:
                result['passenger_segment_relations'].append(k.to_map() if k else None)
        result['selected_segments'] = []
        if self.selected_segments is not None:
            for k in self.selected_segments:
                result['selected_segments'].append(k.to_map() if k else None)
        if self.session_id is not None:
            result['session_id'] = self.session_id
        if self.voluntary is not None:
            result['voluntary'] = self.voluntary
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        self.passenger_segment_relations = []
        if m.get('passenger_segment_relations') is not None:
            for k in m.get('passenger_segment_relations'):
                temp_model = FlightModifyOtaSearchV2RequestPassengerSegmentRelations()
                self.passenger_segment_relations.append(temp_model.from_map(k))
        self.selected_segments = []
        if m.get('selected_segments') is not None:
            for k in m.get('selected_segments'):
                temp_model = FlightModifyOtaSearchV2RequestSelectedSegments()
                self.selected_segments.append(temp_model.from_map(k))
        if m.get('session_id') is not None:
            self.session_id = m.get('session_id')
        if m.get('voluntary') is not None:
            self.voluntary = m.get('voluntary')
        return self


class FlightModifyOtaSearchV2ShrinkRequest(TeaModel):
    def __init__(self, cabin_class_shrink=None, dep_date_shrink=None, isv_name=None, order_id=None,
                 out_order_id=None, passenger_segment_relations_shrink=None, selected_segments_shrink=None, session_id=None,
                 voluntary=None):
        self.cabin_class_shrink = cabin_class_shrink  # type: str
        self.dep_date_shrink = dep_date_shrink  # type: str
        self.isv_name = isv_name  # type: str
        self.order_id = order_id  # type: long
        self.out_order_id = out_order_id  # type: str
        self.passenger_segment_relations_shrink = passenger_segment_relations_shrink  # type: str
        self.selected_segments_shrink = selected_segments_shrink  # type: str
        self.session_id = session_id  # type: str
        self.voluntary = voluntary  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightModifyOtaSearchV2ShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cabin_class_shrink is not None:
            result['cabin_class'] = self.cabin_class_shrink
        if self.dep_date_shrink is not None:
            result['dep_date'] = self.dep_date_shrink
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        if self.passenger_segment_relations_shrink is not None:
            result['passenger_segment_relations'] = self.passenger_segment_relations_shrink
        if self.selected_segments_shrink is not None:
            result['selected_segments'] = self.selected_segments_shrink
        if self.session_id is not None:
            result['session_id'] = self.session_id
        if self.voluntary is not None:
            result['voluntary'] = self.voluntary
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('cabin_class') is not None:
            self.cabin_class_shrink = m.get('cabin_class')
        if m.get('dep_date') is not None:
            self.dep_date_shrink = m.get('dep_date')
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        if m.get('passenger_segment_relations') is not None:
            self.passenger_segment_relations_shrink = m.get('passenger_segment_relations')
        if m.get('selected_segments') is not None:
            self.selected_segments_shrink = m.get('selected_segments')
        if m.get('session_id') is not None:
            self.session_id = m.get('session_id')
        if m.get('voluntary') is not None:
            self.voluntary = m.get('voluntary')
        return self


class FlightModifyOtaSearchV2ResponseBodyModuleAgentInfoCabinClassInfo(TeaModel):
    def __init__(self, cabin_class=None, class_name=None, inner_cabin_class=None, quantity=None):
        self.cabin_class = cabin_class  # type: str
        self.class_name = class_name  # type: str
        # inner_cabin_class
        self.inner_cabin_class = inner_cabin_class  # type: int
        self.quantity = quantity  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightModifyOtaSearchV2ResponseBodyModuleAgentInfoCabinClassInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.class_name is not None:
            result['class_name'] = self.class_name
        if self.inner_cabin_class is not None:
            result['inner_cabin_class'] = self.inner_cabin_class
        if self.quantity is not None:
            result['quantity'] = self.quantity
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('class_name') is not None:
            self.class_name = m.get('class_name')
        if m.get('inner_cabin_class') is not None:
            self.inner_cabin_class = m.get('inner_cabin_class')
        if m.get('quantity') is not None:
            self.quantity = m.get('quantity')
        return self


class FlightModifyOtaSearchV2ResponseBodyModuleAgentInfoPriceInfoDTOReShopPriceInfoDTO(TeaModel):
    def __init__(self, re_shop_adult_change_fee=None, re_shop_adult_price=None, re_shop_adult_price_gap=None,
                 re_shop_child_change_fee=None, re_shop_child_price=None, re_shop_child_price_gap=None, re_shop_inf_change_fee=None,
                 re_shop_inf_price=None, re_shop_inf_price_gap=None):
        self.re_shop_adult_change_fee = re_shop_adult_change_fee  # type: int
        self.re_shop_adult_price = re_shop_adult_price  # type: int
        self.re_shop_adult_price_gap = re_shop_adult_price_gap  # type: int
        self.re_shop_child_change_fee = re_shop_child_change_fee  # type: int
        self.re_shop_child_price = re_shop_child_price  # type: int
        self.re_shop_child_price_gap = re_shop_child_price_gap  # type: int
        self.re_shop_inf_change_fee = re_shop_inf_change_fee  # type: int
        self.re_shop_inf_price = re_shop_inf_price  # type: int
        self.re_shop_inf_price_gap = re_shop_inf_price_gap  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightModifyOtaSearchV2ResponseBodyModuleAgentInfoPriceInfoDTOReShopPriceInfoDTO, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.re_shop_adult_change_fee is not None:
            result['re_shop_adult_change_fee'] = self.re_shop_adult_change_fee
        if self.re_shop_adult_price is not None:
            result['re_shop_adult_price'] = self.re_shop_adult_price
        if self.re_shop_adult_price_gap is not None:
            result['re_shop_adult_price_gap'] = self.re_shop_adult_price_gap
        if self.re_shop_child_change_fee is not None:
            result['re_shop_child_change_fee'] = self.re_shop_child_change_fee
        if self.re_shop_child_price is not None:
            result['re_shop_child_price'] = self.re_shop_child_price
        if self.re_shop_child_price_gap is not None:
            result['re_shop_child_price_gap'] = self.re_shop_child_price_gap
        if self.re_shop_inf_change_fee is not None:
            result['re_shop_inf_change_fee'] = self.re_shop_inf_change_fee
        if self.re_shop_inf_price is not None:
            result['re_shop_inf_price'] = self.re_shop_inf_price
        if self.re_shop_inf_price_gap is not None:
            result['re_shop_inf_price_gap'] = self.re_shop_inf_price_gap
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('re_shop_adult_change_fee') is not None:
            self.re_shop_adult_change_fee = m.get('re_shop_adult_change_fee')
        if m.get('re_shop_adult_price') is not None:
            self.re_shop_adult_price = m.get('re_shop_adult_price')
        if m.get('re_shop_adult_price_gap') is not None:
            self.re_shop_adult_price_gap = m.get('re_shop_adult_price_gap')
        if m.get('re_shop_child_change_fee') is not None:
            self.re_shop_child_change_fee = m.get('re_shop_child_change_fee')
        if m.get('re_shop_child_price') is not None:
            self.re_shop_child_price = m.get('re_shop_child_price')
        if m.get('re_shop_child_price_gap') is not None:
            self.re_shop_child_price_gap = m.get('re_shop_child_price_gap')
        if m.get('re_shop_inf_change_fee') is not None:
            self.re_shop_inf_change_fee = m.get('re_shop_inf_change_fee')
        if m.get('re_shop_inf_price') is not None:
            self.re_shop_inf_price = m.get('re_shop_inf_price')
        if m.get('re_shop_inf_price_gap') is not None:
            self.re_shop_inf_price_gap = m.get('re_shop_inf_price_gap')
        return self


class FlightModifyOtaSearchV2ResponseBodyModuleAgentInfoPriceInfoDTO(TeaModel):
    def __init__(self, adult_price=None, adult_tax=None, adult_total_price=None, before_control_price=None,
                 child_price=None, child_tax=None, child_total_price=None, infant_price=None, infant_tax=None,
                 infant_total_price=None, original_adult_price=None, original_adult_total_price=None, re_shop_price_info_dto=None):
        self.adult_price = adult_price  # type: int
        self.adult_tax = adult_tax  # type: int
        self.adult_total_price = adult_total_price  # type: int
        self.before_control_price = before_control_price  # type: int
        self.child_price = child_price  # type: int
        self.child_tax = child_tax  # type: int
        self.child_total_price = child_total_price  # type: int
        self.infant_price = infant_price  # type: int
        self.infant_tax = infant_tax  # type: int
        self.infant_total_price = infant_total_price  # type: int
        self.original_adult_price = original_adult_price  # type: int
        self.original_adult_total_price = original_adult_total_price  # type: int
        self.re_shop_price_info_dto = re_shop_price_info_dto  # type: FlightModifyOtaSearchV2ResponseBodyModuleAgentInfoPriceInfoDTOReShopPriceInfoDTO

    def validate(self):
        if self.re_shop_price_info_dto:
            self.re_shop_price_info_dto.validate()

    def to_map(self):
        _map = super(FlightModifyOtaSearchV2ResponseBodyModuleAgentInfoPriceInfoDTO, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.adult_price is not None:
            result['adult_price'] = self.adult_price
        if self.adult_tax is not None:
            result['adult_tax'] = self.adult_tax
        if self.adult_total_price is not None:
            result['adult_total_price'] = self.adult_total_price
        if self.before_control_price is not None:
            result['before_control_price'] = self.before_control_price
        if self.child_price is not None:
            result['child_price'] = self.child_price
        if self.child_tax is not None:
            result['child_tax'] = self.child_tax
        if self.child_total_price is not None:
            result['child_total_price'] = self.child_total_price
        if self.infant_price is not None:
            result['infant_price'] = self.infant_price
        if self.infant_tax is not None:
            result['infant_tax'] = self.infant_tax
        if self.infant_total_price is not None:
            result['infant_total_price'] = self.infant_total_price
        if self.original_adult_price is not None:
            result['original_adult_price'] = self.original_adult_price
        if self.original_adult_total_price is not None:
            result['original_adult_total_price'] = self.original_adult_total_price
        if self.re_shop_price_info_dto is not None:
            result['re_shop_price_info_d_t_o'] = self.re_shop_price_info_dto.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('adult_price') is not None:
            self.adult_price = m.get('adult_price')
        if m.get('adult_tax') is not None:
            self.adult_tax = m.get('adult_tax')
        if m.get('adult_total_price') is not None:
            self.adult_total_price = m.get('adult_total_price')
        if m.get('before_control_price') is not None:
            self.before_control_price = m.get('before_control_price')
        if m.get('child_price') is not None:
            self.child_price = m.get('child_price')
        if m.get('child_tax') is not None:
            self.child_tax = m.get('child_tax')
        if m.get('child_total_price') is not None:
            self.child_total_price = m.get('child_total_price')
        if m.get('infant_price') is not None:
            self.infant_price = m.get('infant_price')
        if m.get('infant_tax') is not None:
            self.infant_tax = m.get('infant_tax')
        if m.get('infant_total_price') is not None:
            self.infant_total_price = m.get('infant_total_price')
        if m.get('original_adult_price') is not None:
            self.original_adult_price = m.get('original_adult_price')
        if m.get('original_adult_total_price') is not None:
            self.original_adult_total_price = m.get('original_adult_total_price')
        if m.get('re_shop_price_info_d_t_o') is not None:
            temp_model = FlightModifyOtaSearchV2ResponseBodyModuleAgentInfoPriceInfoDTOReShopPriceInfoDTO()
            self.re_shop_price_info_dto = temp_model.from_map(m['re_shop_price_info_d_t_o'])
        return self


class FlightModifyOtaSearchV2ResponseBodyModuleAgentInfo(TeaModel):
    def __init__(self, attribute_show_info_map=None, best_discount=None, cabin_class_info=None, cabin_code=None,
                 cabin_name=None, item_id=None, modify_type_desc=None, modify_type_name=None, price_info_dto=None,
                 quantity=None, support_child_ticket=None):
        self.attribute_show_info_map = attribute_show_info_map  # type: dict[str, list[ModuleAgentInfoAttributeShowInfoMapValue]]
        self.best_discount = best_discount  # type: float
        self.cabin_class_info = cabin_class_info  # type: FlightModifyOtaSearchV2ResponseBodyModuleAgentInfoCabinClassInfo
        self.cabin_code = cabin_code  # type: int
        self.cabin_name = cabin_name  # type: str
        # item_id
        self.item_id = item_id  # type: str
        self.modify_type_desc = modify_type_desc  # type: str
        self.modify_type_name = modify_type_name  # type: str
        self.price_info_dto = price_info_dto  # type: FlightModifyOtaSearchV2ResponseBodyModuleAgentInfoPriceInfoDTO
        self.quantity = quantity  # type: int
        self.support_child_ticket = support_child_ticket  # type: bool

    def validate(self):
        if self.attribute_show_info_map:
            for v in self.attribute_show_info_map.values():
                for k1 in v:
                    if k1:
                        k1.validate()
        if self.cabin_class_info:
            self.cabin_class_info.validate()
        if self.price_info_dto:
            self.price_info_dto.validate()

    def to_map(self):
        _map = super(FlightModifyOtaSearchV2ResponseBodyModuleAgentInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['attribute_show_info_map'] = {}
        if self.attribute_show_info_map is not None:
            for k, v in self.attribute_show_info_map.items():
                l1 = []
                for k1 in v:
                    l1.append(k1.to_map() if k1 else None)
                result['attributeShowInfoMap'][k] = l1
        if self.best_discount is not None:
            result['best_discount'] = self.best_discount
        if self.cabin_class_info is not None:
            result['cabin_class_info'] = self.cabin_class_info.to_map()
        if self.cabin_code is not None:
            result['cabin_code'] = self.cabin_code
        if self.cabin_name is not None:
            result['cabin_name'] = self.cabin_name
        if self.item_id is not None:
            result['item_id'] = self.item_id
        if self.modify_type_desc is not None:
            result['modify_type_desc'] = self.modify_type_desc
        if self.modify_type_name is not None:
            result['modify_type_name'] = self.modify_type_name
        if self.price_info_dto is not None:
            result['price_info_d_t_o'] = self.price_info_dto.to_map()
        if self.quantity is not None:
            result['quantity'] = self.quantity
        if self.support_child_ticket is not None:
            result['support_child_ticket'] = self.support_child_ticket
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.attribute_show_info_map = {}
        if m.get('attribute_show_info_map') is not None:
            for k, v in m.get('attribute_show_info_map').items():
                l1 = []
                for k1 in v:
                    temp_model = ModuleAgentInfoAttributeShowInfoMapValue()
                    l1.append(temp_model.from_map(k1))
                self.attribute_show_info_map['k'] = l1
        if m.get('best_discount') is not None:
            self.best_discount = m.get('best_discount')
        if m.get('cabin_class_info') is not None:
            temp_model = FlightModifyOtaSearchV2ResponseBodyModuleAgentInfoCabinClassInfo()
            self.cabin_class_info = temp_model.from_map(m['cabin_class_info'])
        if m.get('cabin_code') is not None:
            self.cabin_code = m.get('cabin_code')
        if m.get('cabin_name') is not None:
            self.cabin_name = m.get('cabin_name')
        if m.get('item_id') is not None:
            self.item_id = m.get('item_id')
        if m.get('modify_type_desc') is not None:
            self.modify_type_desc = m.get('modify_type_desc')
        if m.get('modify_type_name') is not None:
            self.modify_type_name = m.get('modify_type_name')
        if m.get('price_info_d_t_o') is not None:
            temp_model = FlightModifyOtaSearchV2ResponseBodyModuleAgentInfoPriceInfoDTO()
            self.price_info_dto = temp_model.from_map(m['price_info_d_t_o'])
        if m.get('quantity') is not None:
            self.quantity = m.get('quantity')
        if m.get('support_child_ticket') is not None:
            self.support_child_ticket = m.get('support_child_ticket')
        return self


class FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosDepAirportInfo(TeaModel):
    def __init__(self, airport_code=None, airport_name=None, airport_short_name=None, terminal=None):
        self.airport_code = airport_code  # type: str
        self.airport_name = airport_name  # type: str
        self.airport_short_name = airport_short_name  # type: str
        self.terminal = terminal  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosDepAirportInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airport_code is not None:
            result['airport_code'] = self.airport_code
        if self.airport_name is not None:
            result['airport_name'] = self.airport_name
        if self.airport_short_name is not None:
            result['airport_short_name'] = self.airport_short_name
        if self.terminal is not None:
            result['terminal'] = self.terminal
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('airport_code') is not None:
            self.airport_code = m.get('airport_code')
        if m.get('airport_name') is not None:
            self.airport_name = m.get('airport_name')
        if m.get('airport_short_name') is not None:
            self.airport_short_name = m.get('airport_short_name')
        if m.get('terminal') is not None:
            self.terminal = m.get('terminal')
        return self


class FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosArrAirportInfo(TeaModel):
    def __init__(self, airport_code=None, airport_name=None, airport_short_name=None, terminal=None):
        self.airport_code = airport_code  # type: str
        self.airport_name = airport_name  # type: str
        self.airport_short_name = airport_short_name  # type: str
        self.terminal = terminal  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosArrAirportInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airport_code is not None:
            result['airport_code'] = self.airport_code
        if self.airport_name is not None:
            result['airport_name'] = self.airport_name
        if self.airport_short_name is not None:
            result['airport_short_name'] = self.airport_short_name
        if self.terminal is not None:
            result['terminal'] = self.terminal
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('airport_code') is not None:
            self.airport_code = m.get('airport_code')
        if m.get('airport_name') is not None:
            self.airport_name = m.get('airport_name')
        if m.get('airport_short_name') is not None:
            self.airport_short_name = m.get('airport_short_name')
        if m.get('terminal') is not None:
            self.terminal = m.get('terminal')
        return self


class FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosAirlineInfo(TeaModel):
    def __init__(self, airline_code=None, airline_chinese_name=None, airline_chinese_short_name=None,
                 airline_icon=None, cheap_flight=None):
        self.airline_code = airline_code  # type: str
        self.airline_chinese_name = airline_chinese_name  # type: str
        self.airline_chinese_short_name = airline_chinese_short_name  # type: str
        self.airline_icon = airline_icon  # type: str
        self.cheap_flight = cheap_flight  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosAirlineInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.airline_chinese_name is not None:
            result['airline_chinese_name'] = self.airline_chinese_name
        if self.airline_chinese_short_name is not None:
            result['airline_chinese_short_name'] = self.airline_chinese_short_name
        if self.airline_icon is not None:
            result['airline_icon'] = self.airline_icon
        if self.cheap_flight is not None:
            result['cheap_flight'] = self.cheap_flight
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('airline_chinese_name') is not None:
            self.airline_chinese_name = m.get('airline_chinese_name')
        if m.get('airline_chinese_short_name') is not None:
            self.airline_chinese_short_name = m.get('airline_chinese_short_name')
        if m.get('airline_icon') is not None:
            self.airline_icon = m.get('airline_icon')
        if m.get('cheap_flight') is not None:
            self.cheap_flight = m.get('cheap_flight')
        return self


class FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosFlightSharedInfoOperatingAirlineInfo(TeaModel):
    def __init__(self, airline_code=None, airline_chinese_name=None, airline_chinese_short_name=None,
                 airline_icon=None, cheap_flight=None):
        self.airline_code = airline_code  # type: str
        self.airline_chinese_name = airline_chinese_name  # type: str
        self.airline_chinese_short_name = airline_chinese_short_name  # type: str
        self.airline_icon = airline_icon  # type: str
        self.cheap_flight = cheap_flight  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosFlightSharedInfoOperatingAirlineInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.airline_chinese_name is not None:
            result['airline_chinese_name'] = self.airline_chinese_name
        if self.airline_chinese_short_name is not None:
            result['airline_chinese_short_name'] = self.airline_chinese_short_name
        if self.airline_icon is not None:
            result['airline_icon'] = self.airline_icon
        if self.cheap_flight is not None:
            result['cheap_flight'] = self.cheap_flight
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('airline_chinese_name') is not None:
            self.airline_chinese_name = m.get('airline_chinese_name')
        if m.get('airline_chinese_short_name') is not None:
            self.airline_chinese_short_name = m.get('airline_chinese_short_name')
        if m.get('airline_icon') is not None:
            self.airline_icon = m.get('airline_icon')
        if m.get('cheap_flight') is not None:
            self.cheap_flight = m.get('cheap_flight')
        return self


class FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosFlightSharedInfo(TeaModel):
    def __init__(self, operating_flight_no=None, operating_airline_info=None):
        self.operating_flight_no = operating_flight_no  # type: str
        self.operating_airline_info = operating_airline_info  # type: FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosFlightSharedInfoOperatingAirlineInfo

    def validate(self):
        if self.operating_airline_info:
            self.operating_airline_info.validate()

    def to_map(self):
        _map = super(FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosFlightSharedInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.operating_flight_no is not None:
            result['operating_flight_no'] = self.operating_flight_no
        if self.operating_airline_info is not None:
            result['operating_airline_info'] = self.operating_airline_info.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('operating_flight_no') is not None:
            self.operating_flight_no = m.get('operating_flight_no')
        if m.get('operating_airline_info') is not None:
            temp_model = FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosFlightSharedInfoOperatingAirlineInfo()
            self.operating_airline_info = temp_model.from_map(m['operating_airline_info'])
        return self


class FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosFlightStopInfo(TeaModel):
    def __init__(self, stop_city_name=None, stop_arr_time=None, stop_dep_time=None, stop_city_code=None,
                 stop_airport=None, stop_arr_term=None, stop_dep_term=None):
        self.stop_city_name = stop_city_name  # type: str
        self.stop_arr_time = stop_arr_time  # type: str
        self.stop_dep_time = stop_dep_time  # type: str
        self.stop_city_code = stop_city_code  # type: str
        self.stop_airport = stop_airport  # type: str
        self.stop_arr_term = stop_arr_term  # type: str
        self.stop_dep_term = stop_dep_term  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosFlightStopInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.stop_city_name is not None:
            result['stop_city_name'] = self.stop_city_name
        if self.stop_arr_time is not None:
            result['stop_arr_time'] = self.stop_arr_time
        if self.stop_dep_time is not None:
            result['stop_dep_time'] = self.stop_dep_time
        if self.stop_city_code is not None:
            result['stop_city_code'] = self.stop_city_code
        if self.stop_airport is not None:
            result['stop_airport'] = self.stop_airport
        if self.stop_arr_term is not None:
            result['stop_arr_term'] = self.stop_arr_term
        if self.stop_dep_term is not None:
            result['stop_dep_term'] = self.stop_dep_term
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('stop_city_name') is not None:
            self.stop_city_name = m.get('stop_city_name')
        if m.get('stop_arr_time') is not None:
            self.stop_arr_time = m.get('stop_arr_time')
        if m.get('stop_dep_time') is not None:
            self.stop_dep_time = m.get('stop_dep_time')
        if m.get('stop_city_code') is not None:
            self.stop_city_code = m.get('stop_city_code')
        if m.get('stop_airport') is not None:
            self.stop_airport = m.get('stop_airport')
        if m.get('stop_arr_term') is not None:
            self.stop_arr_term = m.get('stop_arr_term')
        if m.get('stop_dep_term') is not None:
            self.stop_dep_term = m.get('stop_dep_term')
        return self


class FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfos(TeaModel):
    def __init__(self, journey_seq=None, segment_seq=None, flight_no=None, dep_city_code=None, arr_city_code=None,
                 dep_city_name=None, arr_city_name=None, dep_airport_info=None, arr_airport_info=None, dep_time=None,
                 arr_time=None, airline_info=None, share=None, flight_shared_info=None, stop=None, flight_stop_info=None,
                 transfer_time=None, duration=None, manufacturer=None, flight_type=None, flight_size=None, meal_desc=None,
                 on_time_rate=None):
        self.journey_seq = journey_seq  # type: int
        self.segment_seq = segment_seq  # type: int
        self.flight_no = flight_no  # type: str
        self.dep_city_code = dep_city_code  # type: str
        self.arr_city_code = arr_city_code  # type: str
        self.dep_city_name = dep_city_name  # type: str
        self.arr_city_name = arr_city_name  # type: str
        self.dep_airport_info = dep_airport_info  # type: FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosDepAirportInfo
        self.arr_airport_info = arr_airport_info  # type: FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosArrAirportInfo
        self.dep_time = dep_time  # type: str
        self.arr_time = arr_time  # type: str
        self.airline_info = airline_info  # type: FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosAirlineInfo
        self.share = share  # type: bool
        self.flight_shared_info = flight_shared_info  # type: FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosFlightSharedInfo
        self.stop = stop  # type: bool
        self.flight_stop_info = flight_stop_info  # type: FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosFlightStopInfo
        self.transfer_time = transfer_time  # type: int
        self.duration = duration  # type: int
        self.manufacturer = manufacturer  # type: str
        self.flight_type = flight_type  # type: str
        self.flight_size = flight_size  # type: str
        self.meal_desc = meal_desc  # type: str
        self.on_time_rate = on_time_rate  # type: str

    def validate(self):
        if self.dep_airport_info:
            self.dep_airport_info.validate()
        if self.arr_airport_info:
            self.arr_airport_info.validate()
        if self.airline_info:
            self.airline_info.validate()
        if self.flight_shared_info:
            self.flight_shared_info.validate()
        if self.flight_stop_info:
            self.flight_stop_info.validate()

    def to_map(self):
        _map = super(FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfos, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.journey_seq is not None:
            result['journey_seq'] = self.journey_seq
        if self.segment_seq is not None:
            result['segment_seq'] = self.segment_seq
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.dep_city_name is not None:
            result['dep_city_name'] = self.dep_city_name
        if self.arr_city_name is not None:
            result['arr_city_name'] = self.arr_city_name
        if self.dep_airport_info is not None:
            result['dep_airport_info'] = self.dep_airport_info.to_map()
        if self.arr_airport_info is not None:
            result['arr_airport_info'] = self.arr_airport_info.to_map()
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.airline_info is not None:
            result['airline_info'] = self.airline_info.to_map()
        if self.share is not None:
            result['share'] = self.share
        if self.flight_shared_info is not None:
            result['flight_shared_info'] = self.flight_shared_info.to_map()
        if self.stop is not None:
            result['stop'] = self.stop
        if self.flight_stop_info is not None:
            result['flight_stop_info'] = self.flight_stop_info.to_map()
        if self.transfer_time is not None:
            result['transfer_time'] = self.transfer_time
        if self.duration is not None:
            result['duration'] = self.duration
        if self.manufacturer is not None:
            result['manufacturer'] = self.manufacturer
        if self.flight_type is not None:
            result['flight_type'] = self.flight_type
        if self.flight_size is not None:
            result['flight_size'] = self.flight_size
        if self.meal_desc is not None:
            result['meal_desc'] = self.meal_desc
        if self.on_time_rate is not None:
            result['on_time_rate'] = self.on_time_rate
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('journey_seq') is not None:
            self.journey_seq = m.get('journey_seq')
        if m.get('segment_seq') is not None:
            self.segment_seq = m.get('segment_seq')
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('dep_city_name') is not None:
            self.dep_city_name = m.get('dep_city_name')
        if m.get('arr_city_name') is not None:
            self.arr_city_name = m.get('arr_city_name')
        if m.get('dep_airport_info') is not None:
            temp_model = FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosDepAirportInfo()
            self.dep_airport_info = temp_model.from_map(m['dep_airport_info'])
        if m.get('arr_airport_info') is not None:
            temp_model = FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosArrAirportInfo()
            self.arr_airport_info = temp_model.from_map(m['arr_airport_info'])
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('airline_info') is not None:
            temp_model = FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosAirlineInfo()
            self.airline_info = temp_model.from_map(m['airline_info'])
        if m.get('share') is not None:
            self.share = m.get('share')
        if m.get('flight_shared_info') is not None:
            temp_model = FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosFlightSharedInfo()
            self.flight_shared_info = temp_model.from_map(m['flight_shared_info'])
        if m.get('stop') is not None:
            self.stop = m.get('stop')
        if m.get('flight_stop_info') is not None:
            temp_model = FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosFlightStopInfo()
            self.flight_stop_info = temp_model.from_map(m['flight_stop_info'])
        if m.get('transfer_time') is not None:
            self.transfer_time = m.get('transfer_time')
        if m.get('duration') is not None:
            self.duration = m.get('duration')
        if m.get('manufacturer') is not None:
            self.manufacturer = m.get('manufacturer')
        if m.get('flight_type') is not None:
            self.flight_type = m.get('flight_type')
        if m.get('flight_size') is not None:
            self.flight_size = m.get('flight_size')
        if m.get('meal_desc') is not None:
            self.meal_desc = m.get('meal_desc')
        if m.get('on_time_rate') is not None:
            self.on_time_rate = m.get('on_time_rate')
        return self


class FlightModifyOtaSearchV2ResponseBodyModulePassengerCount(TeaModel):
    def __init__(self, adult_passenger_num=None, child_passenger_num=None, infant_passenger_num=None):
        self.adult_passenger_num = adult_passenger_num  # type: int
        self.child_passenger_num = child_passenger_num  # type: int
        self.infant_passenger_num = infant_passenger_num  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightModifyOtaSearchV2ResponseBodyModulePassengerCount, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.adult_passenger_num is not None:
            result['adult_passenger_num'] = self.adult_passenger_num
        if self.child_passenger_num is not None:
            result['child_passenger_num'] = self.child_passenger_num
        if self.infant_passenger_num is not None:
            result['infant_passenger_num'] = self.infant_passenger_num
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('adult_passenger_num') is not None:
            self.adult_passenger_num = m.get('adult_passenger_num')
        if m.get('child_passenger_num') is not None:
            self.child_passenger_num = m.get('child_passenger_num')
        if m.get('infant_passenger_num') is not None:
            self.infant_passenger_num = m.get('infant_passenger_num')
        return self


class FlightModifyOtaSearchV2ResponseBodyModule(TeaModel):
    def __init__(self, agent_info=None, cache_key=None, flight_segment_infos=None, passenger_count=None,
                 session_id=None):
        self.agent_info = agent_info  # type: FlightModifyOtaSearchV2ResponseBodyModuleAgentInfo
        self.cache_key = cache_key  # type: str
        self.flight_segment_infos = flight_segment_infos  # type: list[list[FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfos]]
        self.passenger_count = passenger_count  # type: FlightModifyOtaSearchV2ResponseBodyModulePassengerCount
        self.session_id = session_id  # type: str

    def validate(self):
        if self.agent_info:
            self.agent_info.validate()
        if self.flight_segment_infos:
            for k in self.flight_segment_infos:
                for k1 in k:
                    if k1:
                        k1.validate()
        if self.passenger_count:
            self.passenger_count.validate()

    def to_map(self):
        _map = super(FlightModifyOtaSearchV2ResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_info is not None:
            result['agent_info'] = self.agent_info.to_map()
        if self.cache_key is not None:
            result['cache_key'] = self.cache_key
        result['flight_segment_infos'] = []
        if self.flight_segment_infos is not None:
            for k in self.flight_segment_infos:
                l1 = []
                for k1 in k:
                    l1.append(k1.to_map() if k1 else None)
                result['flightSegmentInfos'].append(l1)
        if self.passenger_count is not None:
            result['passenger_count'] = self.passenger_count.to_map()
        if self.session_id is not None:
            result['session_id'] = self.session_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('agent_info') is not None:
            temp_model = FlightModifyOtaSearchV2ResponseBodyModuleAgentInfo()
            self.agent_info = temp_model.from_map(m['agent_info'])
        if m.get('cache_key') is not None:
            self.cache_key = m.get('cache_key')
        self.flight_segment_infos = []
        if m.get('flight_segment_infos') is not None:
            for k in m.get('flight_segment_infos'):
                l1 = []
                for k1 in k:
                    temp_model = FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfos()
                    l1.append(temp_model.from_map(k1))
                self.flight_segment_infos.append(l1)
        if m.get('passenger_count') is not None:
            temp_model = FlightModifyOtaSearchV2ResponseBodyModulePassengerCount()
            self.passenger_count = temp_model.from_map(m['passenger_count'])
        if m.get('session_id') is not None:
            self.session_id = m.get('session_id')
        return self


class FlightModifyOtaSearchV2ResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        # module
        self.module = module  # type: FlightModifyOtaSearchV2ResponseBodyModule
        # requestId
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        # traceId
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(FlightModifyOtaSearchV2ResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = FlightModifyOtaSearchV2ResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightModifyOtaSearchV2Response(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: FlightModifyOtaSearchV2ResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(FlightModifyOtaSearchV2Response, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightModifyOtaSearchV2ResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightModifyPayV2Headers(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightModifyPayV2Headers, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class FlightModifyPayV2Request(TeaModel):
    def __init__(self, ext_params=None, isv_name=None, modify_pay_amount=None, order_id=None, out_order_id=None,
                 out_sub_order_id=None, sub_order_id=None):
        self.ext_params = ext_params  # type: dict[str, any]
        self.isv_name = isv_name  # type: str
        self.modify_pay_amount = modify_pay_amount  # type: long
        self.order_id = order_id  # type: long
        self.out_order_id = out_order_id  # type: str
        self.out_sub_order_id = out_sub_order_id  # type: str
        self.sub_order_id = sub_order_id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightModifyPayV2Request, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ext_params is not None:
            result['ext_params'] = self.ext_params
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.modify_pay_amount is not None:
            result['modify_pay_amount'] = self.modify_pay_amount
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        if self.out_sub_order_id is not None:
            result['out_sub_order_id'] = self.out_sub_order_id
        if self.sub_order_id is not None:
            result['sub_order_id'] = self.sub_order_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ext_params') is not None:
            self.ext_params = m.get('ext_params')
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('modify_pay_amount') is not None:
            self.modify_pay_amount = m.get('modify_pay_amount')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        if m.get('out_sub_order_id') is not None:
            self.out_sub_order_id = m.get('out_sub_order_id')
        if m.get('sub_order_id') is not None:
            self.sub_order_id = m.get('sub_order_id')
        return self


class FlightModifyPayV2ShrinkRequest(TeaModel):
    def __init__(self, ext_params_shrink=None, isv_name=None, modify_pay_amount=None, order_id=None,
                 out_order_id=None, out_sub_order_id=None, sub_order_id=None):
        self.ext_params_shrink = ext_params_shrink  # type: str
        self.isv_name = isv_name  # type: str
        self.modify_pay_amount = modify_pay_amount  # type: long
        self.order_id = order_id  # type: long
        self.out_order_id = out_order_id  # type: str
        self.out_sub_order_id = out_sub_order_id  # type: str
        self.sub_order_id = sub_order_id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightModifyPayV2ShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ext_params_shrink is not None:
            result['ext_params'] = self.ext_params_shrink
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.modify_pay_amount is not None:
            result['modify_pay_amount'] = self.modify_pay_amount
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        if self.out_sub_order_id is not None:
            result['out_sub_order_id'] = self.out_sub_order_id
        if self.sub_order_id is not None:
            result['sub_order_id'] = self.sub_order_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ext_params') is not None:
            self.ext_params_shrink = m.get('ext_params')
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('modify_pay_amount') is not None:
            self.modify_pay_amount = m.get('modify_pay_amount')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        if m.get('out_sub_order_id') is not None:
            self.out_sub_order_id = m.get('out_sub_order_id')
        if m.get('sub_order_id') is not None:
            self.sub_order_id = m.get('sub_order_id')
        return self


class FlightModifyPayV2ResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        # module
        self.module = module  # type: dict[str, any]
        # requestId
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        # traceId
        self.trace_id = trace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightModifyPayV2ResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            self.module = m.get('module')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightModifyPayV2Response(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: FlightModifyPayV2ResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(FlightModifyPayV2Response, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightModifyPayV2ResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightOrderDetailInfoHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOrderDetailInfoHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class FlightOrderDetailInfoRequest(TeaModel):
    def __init__(self, dis_order_id=None):
        self.dis_order_id = dis_order_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOrderDetailInfoRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        return self


class FlightOrderDetailInfoResponseBodyModuleFlightInfoList(TeaModel):
    def __init__(self, airline_code=None, airline_name=None, airline_simple_name=None, arr_airport=None,
                 arr_airport_code=None, arr_airport_code_name=None, arr_city=None, arr_city_code=None, arr_terminal=None,
                 arr_time=None, baggage=None, build_price=None, cabin=None, cabin_class=None, carrier=None, dep_airport=None,
                 dep_airport_code=None, dep_airport_code_name=None, dep_city=None, dep_city_code=None, dep_terminal=None,
                 dep_time=None, flight_no=None, last_cabin=None, last_flight_no=None, meal=None, oil_price=None,
                 segment_type=None, stop_arr_time=None, stop_city=None, stop_dep_time=None, ticket_price=None,
                 tuigaiqian_info=None):
        self.airline_code = airline_code  # type: str
        self.airline_name = airline_name  # type: str
        self.airline_simple_name = airline_simple_name  # type: str
        self.arr_airport = arr_airport  # type: str
        self.arr_airport_code = arr_airport_code  # type: str
        self.arr_airport_code_name = arr_airport_code_name  # type: str
        self.arr_city = arr_city  # type: str
        self.arr_city_code = arr_city_code  # type: str
        self.arr_terminal = arr_terminal  # type: str
        self.arr_time = arr_time  # type: str
        self.baggage = baggage  # type: str
        self.build_price = build_price  # type: long
        self.cabin = cabin  # type: str
        self.cabin_class = cabin_class  # type: str
        self.carrier = carrier  # type: str
        self.dep_airport = dep_airport  # type: str
        self.dep_airport_code = dep_airport_code  # type: str
        self.dep_airport_code_name = dep_airport_code_name  # type: str
        self.dep_city = dep_city  # type: str
        self.dep_city_code = dep_city_code  # type: str
        self.dep_terminal = dep_terminal  # type: str
        self.dep_time = dep_time  # type: str
        self.flight_no = flight_no  # type: str
        self.last_cabin = last_cabin  # type: str
        self.last_flight_no = last_flight_no  # type: str
        self.meal = meal  # type: str
        self.oil_price = oil_price  # type: long
        self.segment_type = segment_type  # type: int
        self.stop_arr_time = stop_arr_time  # type: str
        self.stop_city = stop_city  # type: str
        self.stop_dep_time = stop_dep_time  # type: str
        self.ticket_price = ticket_price  # type: long
        self.tuigaiqian_info = tuigaiqian_info  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOrderDetailInfoResponseBodyModuleFlightInfoList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.airline_name is not None:
            result['airline_name'] = self.airline_name
        if self.airline_simple_name is not None:
            result['airline_simple_name'] = self.airline_simple_name
        if self.arr_airport is not None:
            result['arr_airport'] = self.arr_airport
        if self.arr_airport_code is not None:
            result['arr_airport_code'] = self.arr_airport_code
        if self.arr_airport_code_name is not None:
            result['arr_airport_code_name'] = self.arr_airport_code_name
        if self.arr_city is not None:
            result['arr_city'] = self.arr_city
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.arr_terminal is not None:
            result['arr_terminal'] = self.arr_terminal
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.baggage is not None:
            result['baggage'] = self.baggage
        if self.build_price is not None:
            result['build_price'] = self.build_price
        if self.cabin is not None:
            result['cabin'] = self.cabin
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.carrier is not None:
            result['carrier'] = self.carrier
        if self.dep_airport is not None:
            result['dep_airport'] = self.dep_airport
        if self.dep_airport_code is not None:
            result['dep_airport_code'] = self.dep_airport_code
        if self.dep_airport_code_name is not None:
            result['dep_airport_code_name'] = self.dep_airport_code_name
        if self.dep_city is not None:
            result['dep_city'] = self.dep_city
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_terminal is not None:
            result['dep_terminal'] = self.dep_terminal
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        if self.last_cabin is not None:
            result['last_cabin'] = self.last_cabin
        if self.last_flight_no is not None:
            result['last_flight_no'] = self.last_flight_no
        if self.meal is not None:
            result['meal'] = self.meal
        if self.oil_price is not None:
            result['oil_price'] = self.oil_price
        if self.segment_type is not None:
            result['segment_type'] = self.segment_type
        if self.stop_arr_time is not None:
            result['stop_arr_time'] = self.stop_arr_time
        if self.stop_city is not None:
            result['stop_city'] = self.stop_city
        if self.stop_dep_time is not None:
            result['stop_dep_time'] = self.stop_dep_time
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.tuigaiqian_info is not None:
            result['tuigaiqian_info'] = self.tuigaiqian_info
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('airline_name') is not None:
            self.airline_name = m.get('airline_name')
        if m.get('airline_simple_name') is not None:
            self.airline_simple_name = m.get('airline_simple_name')
        if m.get('arr_airport') is not None:
            self.arr_airport = m.get('arr_airport')
        if m.get('arr_airport_code') is not None:
            self.arr_airport_code = m.get('arr_airport_code')
        if m.get('arr_airport_code_name') is not None:
            self.arr_airport_code_name = m.get('arr_airport_code_name')
        if m.get('arr_city') is not None:
            self.arr_city = m.get('arr_city')
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('arr_terminal') is not None:
            self.arr_terminal = m.get('arr_terminal')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('baggage') is not None:
            self.baggage = m.get('baggage')
        if m.get('build_price') is not None:
            self.build_price = m.get('build_price')
        if m.get('cabin') is not None:
            self.cabin = m.get('cabin')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('carrier') is not None:
            self.carrier = m.get('carrier')
        if m.get('dep_airport') is not None:
            self.dep_airport = m.get('dep_airport')
        if m.get('dep_airport_code') is not None:
            self.dep_airport_code = m.get('dep_airport_code')
        if m.get('dep_airport_code_name') is not None:
            self.dep_airport_code_name = m.get('dep_airport_code_name')
        if m.get('dep_city') is not None:
            self.dep_city = m.get('dep_city')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_terminal') is not None:
            self.dep_terminal = m.get('dep_terminal')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        if m.get('last_cabin') is not None:
            self.last_cabin = m.get('last_cabin')
        if m.get('last_flight_no') is not None:
            self.last_flight_no = m.get('last_flight_no')
        if m.get('meal') is not None:
            self.meal = m.get('meal')
        if m.get('oil_price') is not None:
            self.oil_price = m.get('oil_price')
        if m.get('segment_type') is not None:
            self.segment_type = m.get('segment_type')
        if m.get('stop_arr_time') is not None:
            self.stop_arr_time = m.get('stop_arr_time')
        if m.get('stop_city') is not None:
            self.stop_city = m.get('stop_city')
        if m.get('stop_dep_time') is not None:
            self.stop_dep_time = m.get('stop_dep_time')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('tuigaiqian_info') is not None:
            self.tuigaiqian_info = m.get('tuigaiqian_info')
        return self


class FlightOrderDetailInfoResponseBodyModuleTicketInfoList(TeaModel):
    def __init__(self, open_ticket_status=None, pnr_code=None, ticket_no=None, ticket_status=None):
        self.open_ticket_status = open_ticket_status  # type: str
        self.pnr_code = pnr_code  # type: str
        self.ticket_no = ticket_no  # type: str
        self.ticket_status = ticket_status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOrderDetailInfoResponseBodyModuleTicketInfoList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.open_ticket_status is not None:
            result['open_ticket_status'] = self.open_ticket_status
        if self.pnr_code is not None:
            result['pnr_code'] = self.pnr_code
        if self.ticket_no is not None:
            result['ticket_no'] = self.ticket_no
        if self.ticket_status is not None:
            result['ticket_status'] = self.ticket_status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('open_ticket_status') is not None:
            self.open_ticket_status = m.get('open_ticket_status')
        if m.get('pnr_code') is not None:
            self.pnr_code = m.get('pnr_code')
        if m.get('ticket_no') is not None:
            self.ticket_no = m.get('ticket_no')
        if m.get('ticket_status') is not None:
            self.ticket_status = m.get('ticket_status')
        return self


class FlightOrderDetailInfoResponseBodyModuleTravelerInfoList(TeaModel):
    def __init__(self, birth_date=None, cert_no=None, cert_type=None, open_ticket_status=None, passenger_name=None,
                 passenger_type=None, phone=None, ticket_no=None, user_id=None):
        self.birth_date = birth_date  # type: str
        self.cert_no = cert_no  # type: str
        self.cert_type = cert_type  # type: str
        self.open_ticket_status = open_ticket_status  # type: int
        self.passenger_name = passenger_name  # type: str
        self.passenger_type = passenger_type  # type: str
        self.phone = phone  # type: str
        self.ticket_no = ticket_no  # type: str
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOrderDetailInfoResponseBodyModuleTravelerInfoList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.birth_date is not None:
            result['birth_date'] = self.birth_date
        if self.cert_no is not None:
            result['cert_no'] = self.cert_no
        if self.cert_type is not None:
            result['cert_type'] = self.cert_type
        if self.open_ticket_status is not None:
            result['open_ticket_status'] = self.open_ticket_status
        if self.passenger_name is not None:
            result['passenger_name'] = self.passenger_name
        if self.passenger_type is not None:
            result['passenger_type'] = self.passenger_type
        if self.phone is not None:
            result['phone'] = self.phone
        if self.ticket_no is not None:
            result['ticket_no'] = self.ticket_no
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('birth_date') is not None:
            self.birth_date = m.get('birth_date')
        if m.get('cert_no') is not None:
            self.cert_no = m.get('cert_no')
        if m.get('cert_type') is not None:
            self.cert_type = m.get('cert_type')
        if m.get('open_ticket_status') is not None:
            self.open_ticket_status = m.get('open_ticket_status')
        if m.get('passenger_name') is not None:
            self.passenger_name = m.get('passenger_name')
        if m.get('passenger_type') is not None:
            self.passenger_type = m.get('passenger_type')
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        if m.get('ticket_no') is not None:
            self.ticket_no = m.get('ticket_no')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class FlightOrderDetailInfoResponseBodyModule(TeaModel):
    def __init__(self, alipay_trade_no=None, book_user_id=None, btrip_order_id=None, contact_name=None,
                 contact_phone=None, dis_order_id=None, extra=None, flight_info_list=None, last_pay_time=None, pay_status=None,
                 pay_time=None, promotion_price=None, settle_amount=None, settle_type=None, status=None,
                 ticket_info_list=None, total_build_price=None, total_oil_price=None, total_order_price=None,
                 traveler_info_list=None):
        self.alipay_trade_no = alipay_trade_no  # type: str
        self.book_user_id = book_user_id  # type: str
        self.btrip_order_id = btrip_order_id  # type: long
        self.contact_name = contact_name  # type: str
        self.contact_phone = contact_phone  # type: str
        self.dis_order_id = dis_order_id  # type: str
        self.extra = extra  # type: str
        self.flight_info_list = flight_info_list  # type: list[FlightOrderDetailInfoResponseBodyModuleFlightInfoList]
        self.last_pay_time = last_pay_time  # type: str
        self.pay_status = pay_status  # type: int
        self.pay_time = pay_time  # type: str
        self.promotion_price = promotion_price  # type: long
        self.settle_amount = settle_amount  # type: long
        self.settle_type = settle_type  # type: int
        self.status = status  # type: int
        self.ticket_info_list = ticket_info_list  # type: list[FlightOrderDetailInfoResponseBodyModuleTicketInfoList]
        self.total_build_price = total_build_price  # type: long
        self.total_oil_price = total_oil_price  # type: long
        self.total_order_price = total_order_price  # type: long
        self.traveler_info_list = traveler_info_list  # type: list[FlightOrderDetailInfoResponseBodyModuleTravelerInfoList]

    def validate(self):
        if self.flight_info_list:
            for k in self.flight_info_list:
                if k:
                    k.validate()
        if self.ticket_info_list:
            for k in self.ticket_info_list:
                if k:
                    k.validate()
        if self.traveler_info_list:
            for k in self.traveler_info_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightOrderDetailInfoResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alipay_trade_no is not None:
            result['alipay_trade_no'] = self.alipay_trade_no
        if self.book_user_id is not None:
            result['book_user_id'] = self.book_user_id
        if self.btrip_order_id is not None:
            result['btrip_order_id'] = self.btrip_order_id
        if self.contact_name is not None:
            result['contact_name'] = self.contact_name
        if self.contact_phone is not None:
            result['contact_phone'] = self.contact_phone
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        if self.extra is not None:
            result['extra'] = self.extra
        result['flight_info_list'] = []
        if self.flight_info_list is not None:
            for k in self.flight_info_list:
                result['flight_info_list'].append(k.to_map() if k else None)
        if self.last_pay_time is not None:
            result['last_pay_time'] = self.last_pay_time
        if self.pay_status is not None:
            result['pay_status'] = self.pay_status
        if self.pay_time is not None:
            result['pay_time'] = self.pay_time
        if self.promotion_price is not None:
            result['promotion_price'] = self.promotion_price
        if self.settle_amount is not None:
            result['settle_amount'] = self.settle_amount
        if self.settle_type is not None:
            result['settle_type'] = self.settle_type
        if self.status is not None:
            result['status'] = self.status
        result['ticket_info_list'] = []
        if self.ticket_info_list is not None:
            for k in self.ticket_info_list:
                result['ticket_info_list'].append(k.to_map() if k else None)
        if self.total_build_price is not None:
            result['total_build_price'] = self.total_build_price
        if self.total_oil_price is not None:
            result['total_oil_price'] = self.total_oil_price
        if self.total_order_price is not None:
            result['total_order_price'] = self.total_order_price
        result['traveler_info_list'] = []
        if self.traveler_info_list is not None:
            for k in self.traveler_info_list:
                result['traveler_info_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('alipay_trade_no') is not None:
            self.alipay_trade_no = m.get('alipay_trade_no')
        if m.get('book_user_id') is not None:
            self.book_user_id = m.get('book_user_id')
        if m.get('btrip_order_id') is not None:
            self.btrip_order_id = m.get('btrip_order_id')
        if m.get('contact_name') is not None:
            self.contact_name = m.get('contact_name')
        if m.get('contact_phone') is not None:
            self.contact_phone = m.get('contact_phone')
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        if m.get('extra') is not None:
            self.extra = m.get('extra')
        self.flight_info_list = []
        if m.get('flight_info_list') is not None:
            for k in m.get('flight_info_list'):
                temp_model = FlightOrderDetailInfoResponseBodyModuleFlightInfoList()
                self.flight_info_list.append(temp_model.from_map(k))
        if m.get('last_pay_time') is not None:
            self.last_pay_time = m.get('last_pay_time')
        if m.get('pay_status') is not None:
            self.pay_status = m.get('pay_status')
        if m.get('pay_time') is not None:
            self.pay_time = m.get('pay_time')
        if m.get('promotion_price') is not None:
            self.promotion_price = m.get('promotion_price')
        if m.get('settle_amount') is not None:
            self.settle_amount = m.get('settle_amount')
        if m.get('settle_type') is not None:
            self.settle_type = m.get('settle_type')
        if m.get('status') is not None:
            self.status = m.get('status')
        self.ticket_info_list = []
        if m.get('ticket_info_list') is not None:
            for k in m.get('ticket_info_list'):
                temp_model = FlightOrderDetailInfoResponseBodyModuleTicketInfoList()
                self.ticket_info_list.append(temp_model.from_map(k))
        if m.get('total_build_price') is not None:
            self.total_build_price = m.get('total_build_price')
        if m.get('total_oil_price') is not None:
            self.total_oil_price = m.get('total_oil_price')
        if m.get('total_order_price') is not None:
            self.total_order_price = m.get('total_order_price')
        self.traveler_info_list = []
        if m.get('traveler_info_list') is not None:
            for k in m.get('traveler_info_list'):
                temp_model = FlightOrderDetailInfoResponseBodyModuleTravelerInfoList()
                self.traveler_info_list.append(temp_model.from_map(k))
        return self


class FlightOrderDetailInfoResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: FlightOrderDetailInfoResponseBodyModule
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(FlightOrderDetailInfoResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = FlightOrderDetailInfoResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightOrderDetailInfoResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: FlightOrderDetailInfoResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(FlightOrderDetailInfoResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightOrderDetailInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightOrderDetailV2Headers(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOrderDetailV2Headers, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class FlightOrderDetailV2Request(TeaModel):
    def __init__(self, isv_name=None, order_id=None, out_order_id=None):
        self.isv_name = isv_name  # type: str
        self.order_id = order_id  # type: long
        self.out_order_id = out_order_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOrderDetailV2Request, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        return self


class FlightOrderDetailV2ResponseBodyModuleContactInfoDTO(TeaModel):
    def __init__(self, contact_email=None, contact_name=None, contact_phone=None, send_msg_to_passenger=None):
        self.contact_email = contact_email  # type: str
        self.contact_name = contact_name  # type: str
        self.contact_phone = contact_phone  # type: str
        self.send_msg_to_passenger = send_msg_to_passenger  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOrderDetailV2ResponseBodyModuleContactInfoDTO, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_email is not None:
            result['contact_email'] = self.contact_email
        if self.contact_name is not None:
            result['contact_name'] = self.contact_name
        if self.contact_phone is not None:
            result['contact_phone'] = self.contact_phone
        if self.send_msg_to_passenger is not None:
            result['send_msg_to_passenger'] = self.send_msg_to_passenger
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('contact_email') is not None:
            self.contact_email = m.get('contact_email')
        if m.get('contact_name') is not None:
            self.contact_name = m.get('contact_name')
        if m.get('contact_phone') is not None:
            self.contact_phone = m.get('contact_phone')
        if m.get('send_msg_to_passenger') is not None:
            self.send_msg_to_passenger = m.get('send_msg_to_passenger')
        return self


class FlightOrderDetailV2ResponseBodyModuleFlightTaleInfoDTOJourneysSegmentListFlightChange(TeaModel):
    def __init__(self, change_desc=None, change_status=None, change_status_code=None, new_segment=None,
                 passenger_names=None):
        self.change_desc = change_desc  # type: str
        self.change_status = change_status  # type: str
        self.change_status_code = change_status_code  # type: str
        self.new_segment = new_segment  # type: any
        self.passenger_names = passenger_names  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOrderDetailV2ResponseBodyModuleFlightTaleInfoDTOJourneysSegmentListFlightChange, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.change_desc is not None:
            result['change_desc'] = self.change_desc
        if self.change_status is not None:
            result['change_status'] = self.change_status
        if self.change_status_code is not None:
            result['change_status_code'] = self.change_status_code
        if self.new_segment is not None:
            result['new_segment'] = self.new_segment
        if self.passenger_names is not None:
            result['passenger_names'] = self.passenger_names
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('change_desc') is not None:
            self.change_desc = m.get('change_desc')
        if m.get('change_status') is not None:
            self.change_status = m.get('change_status')
        if m.get('change_status_code') is not None:
            self.change_status_code = m.get('change_status_code')
        if m.get('new_segment') is not None:
            self.new_segment = m.get('new_segment')
        if m.get('passenger_names') is not None:
            self.passenger_names = m.get('passenger_names')
        return self


class FlightOrderDetailV2ResponseBodyModuleFlightTaleInfoDTOJourneysSegmentListSegmentPosition(TeaModel):
    def __init__(self, journey_index=None, segment_index=None):
        self.journey_index = journey_index  # type: int
        self.segment_index = segment_index  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOrderDetailV2ResponseBodyModuleFlightTaleInfoDTOJourneysSegmentListSegmentPosition, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.journey_index is not None:
            result['journey_index'] = self.journey_index
        if self.segment_index is not None:
            result['segment_index'] = self.segment_index
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('journey_index') is not None:
            self.journey_index = m.get('journey_index')
        if m.get('segment_index') is not None:
            self.segment_index = m.get('segment_index')
        return self


class FlightOrderDetailV2ResponseBodyModuleFlightTaleInfoDTOJourneysSegmentList(TeaModel):
    def __init__(self, air_line_code=None, air_line_english_name=None, air_line_name=None, air_line_phone=None,
                 airline_icon_url=None, airline_short_name=None, arr_airport_code=None, arr_airport_name=None, arr_city_code=None,
                 arr_city_name=None, arr_time=None, arrive_terminal=None, cabin=None, cabin_and_discount=None, cabin_class=None,
                 cabin_class_name=None, code_share=None, deadline_text=None, dep_airport_code=None, dep_airport_name=None,
                 dep_city_code=None, dep_city_name=None, dep_date=None, dep_time=None, depart_terminal=None, discount=None,
                 flight_change=None, flight_no=None, flight_type=None, fly_duration=None, manufacturer=None, meal_desc=None,
                 on_time_rate=None, operating_air_short_name=None, operating_airline_code=None,
                 operating_airline_english_name=None, operating_airline_icon_url=None, operating_airline_name=None, operating_airline_phone=None,
                 operating_flight_no=None, plane_type=None, raise_price=None, segment_id=None, segment_index=None,
                 segment_position=None, stop_airport=None, stop_arr_time=None, stop_city=None, stop_city_name=None,
                 stop_dep_time=None, stop_quantity=None):
        self.air_line_code = air_line_code  # type: str
        self.air_line_english_name = air_line_english_name  # type: str
        self.air_line_name = air_line_name  # type: str
        self.air_line_phone = air_line_phone  # type: str
        self.airline_icon_url = airline_icon_url  # type: str
        self.airline_short_name = airline_short_name  # type: str
        self.arr_airport_code = arr_airport_code  # type: str
        self.arr_airport_name = arr_airport_name  # type: str
        self.arr_city_code = arr_city_code  # type: str
        self.arr_city_name = arr_city_name  # type: str
        self.arr_time = arr_time  # type: str
        self.arrive_terminal = arrive_terminal  # type: str
        # cabin
        self.cabin = cabin  # type: str
        self.cabin_and_discount = cabin_and_discount  # type: str
        # cabin_class
        self.cabin_class = cabin_class  # type: str
        # cabin_class_name
        self.cabin_class_name = cabin_class_name  # type: str
        self.code_share = code_share  # type: bool
        self.deadline_text = deadline_text  # type: str
        self.dep_airport_code = dep_airport_code  # type: str
        self.dep_airport_name = dep_airport_name  # type: str
        self.dep_city_code = dep_city_code  # type: str
        self.dep_city_name = dep_city_name  # type: str
        self.dep_date = dep_date  # type: str
        self.dep_time = dep_time  # type: str
        self.depart_terminal = depart_terminal  # type: str
        self.discount = discount  # type: float
        self.flight_change = flight_change  # type: FlightOrderDetailV2ResponseBodyModuleFlightTaleInfoDTOJourneysSegmentListFlightChange
        self.flight_no = flight_no  # type: str
        self.flight_type = flight_type  # type: str
        self.fly_duration = fly_duration  # type: int
        self.manufacturer = manufacturer  # type: str
        self.meal_desc = meal_desc  # type: str
        self.on_time_rate = on_time_rate  # type: str
        self.operating_air_short_name = operating_air_short_name  # type: str
        self.operating_airline_code = operating_airline_code  # type: str
        self.operating_airline_english_name = operating_airline_english_name  # type: str
        self.operating_airline_icon_url = operating_airline_icon_url  # type: str
        self.operating_airline_name = operating_airline_name  # type: str
        self.operating_airline_phone = operating_airline_phone  # type: str
        self.operating_flight_no = operating_flight_no  # type: str
        self.plane_type = plane_type  # type: str
        self.raise_price = raise_price  # type: long
        self.segment_id = segment_id  # type: str
        # segmentIndex
        self.segment_index = segment_index  # type: int
        self.segment_position = segment_position  # type: FlightOrderDetailV2ResponseBodyModuleFlightTaleInfoDTOJourneysSegmentListSegmentPosition
        self.stop_airport = stop_airport  # type: str
        self.stop_arr_time = stop_arr_time  # type: str
        self.stop_city = stop_city  # type: str
        self.stop_city_name = stop_city_name  # type: str
        self.stop_dep_time = stop_dep_time  # type: str
        self.stop_quantity = stop_quantity  # type: int

    def validate(self):
        if self.flight_change:
            self.flight_change.validate()
        if self.segment_position:
            self.segment_position.validate()

    def to_map(self):
        _map = super(FlightOrderDetailV2ResponseBodyModuleFlightTaleInfoDTOJourneysSegmentList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.air_line_code is not None:
            result['air_line_code'] = self.air_line_code
        if self.air_line_english_name is not None:
            result['air_line_english_name'] = self.air_line_english_name
        if self.air_line_name is not None:
            result['air_line_name'] = self.air_line_name
        if self.air_line_phone is not None:
            result['air_line_phone'] = self.air_line_phone
        if self.airline_icon_url is not None:
            result['airline_icon_url'] = self.airline_icon_url
        if self.airline_short_name is not None:
            result['airline_short_name'] = self.airline_short_name
        if self.arr_airport_code is not None:
            result['arr_airport_code'] = self.arr_airport_code
        if self.arr_airport_name is not None:
            result['arr_airport_name'] = self.arr_airport_name
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.arr_city_name is not None:
            result['arr_city_name'] = self.arr_city_name
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.arrive_terminal is not None:
            result['arrive_terminal'] = self.arrive_terminal
        if self.cabin is not None:
            result['cabin'] = self.cabin
        if self.cabin_and_discount is not None:
            result['cabin_and_discount'] = self.cabin_and_discount
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.cabin_class_name is not None:
            result['cabin_class_name'] = self.cabin_class_name
        if self.code_share is not None:
            result['code_share'] = self.code_share
        if self.deadline_text is not None:
            result['deadline_text'] = self.deadline_text
        if self.dep_airport_code is not None:
            result['dep_airport_code'] = self.dep_airport_code
        if self.dep_airport_name is not None:
            result['dep_airport_name'] = self.dep_airport_name
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_city_name is not None:
            result['dep_city_name'] = self.dep_city_name
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.depart_terminal is not None:
            result['depart_terminal'] = self.depart_terminal
        if self.discount is not None:
            result['discount'] = self.discount
        if self.flight_change is not None:
            result['flight_change'] = self.flight_change.to_map()
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        if self.flight_type is not None:
            result['flight_type'] = self.flight_type
        if self.fly_duration is not None:
            result['fly_duration'] = self.fly_duration
        if self.manufacturer is not None:
            result['manufacturer'] = self.manufacturer
        if self.meal_desc is not None:
            result['meal_desc'] = self.meal_desc
        if self.on_time_rate is not None:
            result['on_time_rate'] = self.on_time_rate
        if self.operating_air_short_name is not None:
            result['operating_air_short_name'] = self.operating_air_short_name
        if self.operating_airline_code is not None:
            result['operating_airline_code'] = self.operating_airline_code
        if self.operating_airline_english_name is not None:
            result['operating_airline_english_name'] = self.operating_airline_english_name
        if self.operating_airline_icon_url is not None:
            result['operating_airline_icon_url'] = self.operating_airline_icon_url
        if self.operating_airline_name is not None:
            result['operating_airline_name'] = self.operating_airline_name
        if self.operating_airline_phone is not None:
            result['operating_airline_phone'] = self.operating_airline_phone
        if self.operating_flight_no is not None:
            result['operating_flight_no'] = self.operating_flight_no
        if self.plane_type is not None:
            result['plane_type'] = self.plane_type
        if self.raise_price is not None:
            result['raise_price'] = self.raise_price
        if self.segment_id is not None:
            result['segment_id'] = self.segment_id
        if self.segment_index is not None:
            result['segment_index'] = self.segment_index
        if self.segment_position is not None:
            result['segment_position'] = self.segment_position.to_map()
        if self.stop_airport is not None:
            result['stop_airport'] = self.stop_airport
        if self.stop_arr_time is not None:
            result['stop_arr_time'] = self.stop_arr_time
        if self.stop_city is not None:
            result['stop_city'] = self.stop_city
        if self.stop_city_name is not None:
            result['stop_city_name'] = self.stop_city_name
        if self.stop_dep_time is not None:
            result['stop_dep_time'] = self.stop_dep_time
        if self.stop_quantity is not None:
            result['stop_quantity'] = self.stop_quantity
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('air_line_code') is not None:
            self.air_line_code = m.get('air_line_code')
        if m.get('air_line_english_name') is not None:
            self.air_line_english_name = m.get('air_line_english_name')
        if m.get('air_line_name') is not None:
            self.air_line_name = m.get('air_line_name')
        if m.get('air_line_phone') is not None:
            self.air_line_phone = m.get('air_line_phone')
        if m.get('airline_icon_url') is not None:
            self.airline_icon_url = m.get('airline_icon_url')
        if m.get('airline_short_name') is not None:
            self.airline_short_name = m.get('airline_short_name')
        if m.get('arr_airport_code') is not None:
            self.arr_airport_code = m.get('arr_airport_code')
        if m.get('arr_airport_name') is not None:
            self.arr_airport_name = m.get('arr_airport_name')
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('arr_city_name') is not None:
            self.arr_city_name = m.get('arr_city_name')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('arrive_terminal') is not None:
            self.arrive_terminal = m.get('arrive_terminal')
        if m.get('cabin') is not None:
            self.cabin = m.get('cabin')
        if m.get('cabin_and_discount') is not None:
            self.cabin_and_discount = m.get('cabin_and_discount')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('cabin_class_name') is not None:
            self.cabin_class_name = m.get('cabin_class_name')
        if m.get('code_share') is not None:
            self.code_share = m.get('code_share')
        if m.get('deadline_text') is not None:
            self.deadline_text = m.get('deadline_text')
        if m.get('dep_airport_code') is not None:
            self.dep_airport_code = m.get('dep_airport_code')
        if m.get('dep_airport_name') is not None:
            self.dep_airport_name = m.get('dep_airport_name')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_city_name') is not None:
            self.dep_city_name = m.get('dep_city_name')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('depart_terminal') is not None:
            self.depart_terminal = m.get('depart_terminal')
        if m.get('discount') is not None:
            self.discount = m.get('discount')
        if m.get('flight_change') is not None:
            temp_model = FlightOrderDetailV2ResponseBodyModuleFlightTaleInfoDTOJourneysSegmentListFlightChange()
            self.flight_change = temp_model.from_map(m['flight_change'])
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        if m.get('flight_type') is not None:
            self.flight_type = m.get('flight_type')
        if m.get('fly_duration') is not None:
            self.fly_duration = m.get('fly_duration')
        if m.get('manufacturer') is not None:
            self.manufacturer = m.get('manufacturer')
        if m.get('meal_desc') is not None:
            self.meal_desc = m.get('meal_desc')
        if m.get('on_time_rate') is not None:
            self.on_time_rate = m.get('on_time_rate')
        if m.get('operating_air_short_name') is not None:
            self.operating_air_short_name = m.get('operating_air_short_name')
        if m.get('operating_airline_code') is not None:
            self.operating_airline_code = m.get('operating_airline_code')
        if m.get('operating_airline_english_name') is not None:
            self.operating_airline_english_name = m.get('operating_airline_english_name')
        if m.get('operating_airline_icon_url') is not None:
            self.operating_airline_icon_url = m.get('operating_airline_icon_url')
        if m.get('operating_airline_name') is not None:
            self.operating_airline_name = m.get('operating_airline_name')
        if m.get('operating_airline_phone') is not None:
            self.operating_airline_phone = m.get('operating_airline_phone')
        if m.get('operating_flight_no') is not None:
            self.operating_flight_no = m.get('operating_flight_no')
        if m.get('plane_type') is not None:
            self.plane_type = m.get('plane_type')
        if m.get('raise_price') is not None:
            self.raise_price = m.get('raise_price')
        if m.get('segment_id') is not None:
            self.segment_id = m.get('segment_id')
        if m.get('segment_index') is not None:
            self.segment_index = m.get('segment_index')
        if m.get('segment_position') is not None:
            temp_model = FlightOrderDetailV2ResponseBodyModuleFlightTaleInfoDTOJourneysSegmentListSegmentPosition()
            self.segment_position = temp_model.from_map(m['segment_position'])
        if m.get('stop_airport') is not None:
            self.stop_airport = m.get('stop_airport')
        if m.get('stop_arr_time') is not None:
            self.stop_arr_time = m.get('stop_arr_time')
        if m.get('stop_city') is not None:
            self.stop_city = m.get('stop_city')
        if m.get('stop_city_name') is not None:
            self.stop_city_name = m.get('stop_city_name')
        if m.get('stop_dep_time') is not None:
            self.stop_dep_time = m.get('stop_dep_time')
        if m.get('stop_quantity') is not None:
            self.stop_quantity = m.get('stop_quantity')
        return self


class FlightOrderDetailV2ResponseBodyModuleFlightTaleInfoDTOJourneys(TeaModel):
    def __init__(self, all_fly_duration=None, all_fly_duration_after_change=None, apply_id=None,
                 arr_city_code=None, arr_city_name=None, arr_time=None, baggage_details=None, dep_city_code=None,
                 dep_city_name=None, dep_time=None, flight_status=None, iata_no=None, is_reshop_journey=None, is_transfer=None,
                 journey_title=None, refund_change_details=None, segment_list=None):
        self.all_fly_duration = all_fly_duration  # type: long
        self.all_fly_duration_after_change = all_fly_duration_after_change  # type: long
        self.apply_id = apply_id  # type: long
        self.arr_city_code = arr_city_code  # type: str
        self.arr_city_name = arr_city_name  # type: str
        self.arr_time = arr_time  # type: str
        self.baggage_details = baggage_details  # type: str
        self.dep_city_code = dep_city_code  # type: str
        self.dep_city_name = dep_city_name  # type: str
        self.dep_time = dep_time  # type: str
        self.flight_status = flight_status  # type: str
        # iata_no
        self.iata_no = iata_no  # type: str
        self.is_reshop_journey = is_reshop_journey  # type: bool
        self.is_transfer = is_transfer  # type: bool
        self.journey_title = journey_title  # type: str
        self.refund_change_details = refund_change_details  # type: str
        self.segment_list = segment_list  # type: list[FlightOrderDetailV2ResponseBodyModuleFlightTaleInfoDTOJourneysSegmentList]

    def validate(self):
        if self.segment_list:
            for k in self.segment_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightOrderDetailV2ResponseBodyModuleFlightTaleInfoDTOJourneys, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.all_fly_duration is not None:
            result['all_fly_duration'] = self.all_fly_duration
        if self.all_fly_duration_after_change is not None:
            result['all_fly_duration_after_change'] = self.all_fly_duration_after_change
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.arr_city_name is not None:
            result['arr_city_name'] = self.arr_city_name
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.baggage_details is not None:
            result['baggage_details'] = self.baggage_details
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_city_name is not None:
            result['dep_city_name'] = self.dep_city_name
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.flight_status is not None:
            result['flight_status'] = self.flight_status
        if self.iata_no is not None:
            result['iata_no'] = self.iata_no
        if self.is_reshop_journey is not None:
            result['is_reshop_journey'] = self.is_reshop_journey
        if self.is_transfer is not None:
            result['is_transfer'] = self.is_transfer
        if self.journey_title is not None:
            result['journey_title'] = self.journey_title
        if self.refund_change_details is not None:
            result['refund_change_details'] = self.refund_change_details
        result['segment_list'] = []
        if self.segment_list is not None:
            for k in self.segment_list:
                result['segment_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('all_fly_duration') is not None:
            self.all_fly_duration = m.get('all_fly_duration')
        if m.get('all_fly_duration_after_change') is not None:
            self.all_fly_duration_after_change = m.get('all_fly_duration_after_change')
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('arr_city_name') is not None:
            self.arr_city_name = m.get('arr_city_name')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('baggage_details') is not None:
            self.baggage_details = m.get('baggage_details')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_city_name') is not None:
            self.dep_city_name = m.get('dep_city_name')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('flight_status') is not None:
            self.flight_status = m.get('flight_status')
        if m.get('iata_no') is not None:
            self.iata_no = m.get('iata_no')
        if m.get('is_reshop_journey') is not None:
            self.is_reshop_journey = m.get('is_reshop_journey')
        if m.get('is_transfer') is not None:
            self.is_transfer = m.get('is_transfer')
        if m.get('journey_title') is not None:
            self.journey_title = m.get('journey_title')
        if m.get('refund_change_details') is not None:
            self.refund_change_details = m.get('refund_change_details')
        self.segment_list = []
        if m.get('segment_list') is not None:
            for k in m.get('segment_list'):
                temp_model = FlightOrderDetailV2ResponseBodyModuleFlightTaleInfoDTOJourneysSegmentList()
                self.segment_list.append(temp_model.from_map(k))
        return self


class FlightOrderDetailV2ResponseBodyModuleFlightTaleInfoDTO(TeaModel):
    def __init__(self, journeys=None, notice_tips=None, trip_type=None, trip_type_code=None):
        self.journeys = journeys  # type: list[FlightOrderDetailV2ResponseBodyModuleFlightTaleInfoDTOJourneys]
        self.notice_tips = notice_tips  # type: str
        self.trip_type = trip_type  # type: str
        self.trip_type_code = trip_type_code  # type: int

    def validate(self):
        if self.journeys:
            for k in self.journeys:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightOrderDetailV2ResponseBodyModuleFlightTaleInfoDTO, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['journeys'] = []
        if self.journeys is not None:
            for k in self.journeys:
                result['journeys'].append(k.to_map() if k else None)
        if self.notice_tips is not None:
            result['notice_tips'] = self.notice_tips
        if self.trip_type is not None:
            result['trip_type'] = self.trip_type
        if self.trip_type_code is not None:
            result['trip_type_code'] = self.trip_type_code
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.journeys = []
        if m.get('journeys') is not None:
            for k in m.get('journeys'):
                temp_model = FlightOrderDetailV2ResponseBodyModuleFlightTaleInfoDTOJourneys()
                self.journeys.append(temp_model.from_map(k))
        if m.get('notice_tips') is not None:
            self.notice_tips = m.get('notice_tips')
        if m.get('trip_type') is not None:
            self.trip_type = m.get('trip_type')
        if m.get('trip_type_code') is not None:
            self.trip_type_code = m.get('trip_type_code')
        return self


class FlightOrderDetailV2ResponseBodyModulePassengerListCredential(TeaModel):
    def __init__(self, birth_date=None, cert_issue_date=None, cert_issue_place=None, credential_no=None,
                 drive_licence_first=None, drive_licence_type=None, expire_date=None, holder_nationality=None, id=None,
                 id_check_code=None, issue_country=None, type=None):
        self.birth_date = birth_date  # type: str
        self.cert_issue_date = cert_issue_date  # type: str
        self.cert_issue_place = cert_issue_place  # type: str
        self.credential_no = credential_no  # type: str
        self.drive_licence_first = drive_licence_first  # type: str
        self.drive_licence_type = drive_licence_type  # type: str
        self.expire_date = expire_date  # type: str
        self.holder_nationality = holder_nationality  # type: str
        self.id = id  # type: long
        self.id_check_code = id_check_code  # type: str
        self.issue_country = issue_country  # type: str
        self.type = type  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOrderDetailV2ResponseBodyModulePassengerListCredential, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.birth_date is not None:
            result['birth_date'] = self.birth_date
        if self.cert_issue_date is not None:
            result['cert_issue_date'] = self.cert_issue_date
        if self.cert_issue_place is not None:
            result['cert_issue_place'] = self.cert_issue_place
        if self.credential_no is not None:
            result['credential_no'] = self.credential_no
        if self.drive_licence_first is not None:
            result['drive_licence_first'] = self.drive_licence_first
        if self.drive_licence_type is not None:
            result['drive_licence_type'] = self.drive_licence_type
        if self.expire_date is not None:
            result['expire_date'] = self.expire_date
        if self.holder_nationality is not None:
            result['holder_nationality'] = self.holder_nationality
        if self.id is not None:
            result['id'] = self.id
        if self.id_check_code is not None:
            result['id_check_code'] = self.id_check_code
        if self.issue_country is not None:
            result['issue_country'] = self.issue_country
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('birth_date') is not None:
            self.birth_date = m.get('birth_date')
        if m.get('cert_issue_date') is not None:
            self.cert_issue_date = m.get('cert_issue_date')
        if m.get('cert_issue_place') is not None:
            self.cert_issue_place = m.get('cert_issue_place')
        if m.get('credential_no') is not None:
            self.credential_no = m.get('credential_no')
        if m.get('drive_licence_first') is not None:
            self.drive_licence_first = m.get('drive_licence_first')
        if m.get('drive_licence_type') is not None:
            self.drive_licence_type = m.get('drive_licence_type')
        if m.get('expire_date') is not None:
            self.expire_date = m.get('expire_date')
        if m.get('holder_nationality') is not None:
            self.holder_nationality = m.get('holder_nationality')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('id_check_code') is not None:
            self.id_check_code = m.get('id_check_code')
        if m.get('issue_country') is not None:
            self.issue_country = m.get('issue_country')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class FlightOrderDetailV2ResponseBodyModulePassengerListCredentials(TeaModel):
    def __init__(self, birth_date=None, cert_issue_date=None, cert_issue_place=None, credential_no=None,
                 drive_licence_first=None, drive_licence_type=None, expire_date=None, holder_nationality=None, id=None,
                 id_check_code=None, issue_country=None, type=None):
        self.birth_date = birth_date  # type: str
        self.cert_issue_date = cert_issue_date  # type: str
        self.cert_issue_place = cert_issue_place  # type: str
        self.credential_no = credential_no  # type: str
        self.drive_licence_first = drive_licence_first  # type: str
        self.drive_licence_type = drive_licence_type  # type: str
        self.expire_date = expire_date  # type: str
        self.holder_nationality = holder_nationality  # type: str
        self.id = id  # type: long
        self.id_check_code = id_check_code  # type: str
        self.issue_country = issue_country  # type: str
        self.type = type  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOrderDetailV2ResponseBodyModulePassengerListCredentials, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.birth_date is not None:
            result['birth_date'] = self.birth_date
        if self.cert_issue_date is not None:
            result['cert_issue_date'] = self.cert_issue_date
        if self.cert_issue_place is not None:
            result['cert_issue_place'] = self.cert_issue_place
        if self.credential_no is not None:
            result['credential_no'] = self.credential_no
        if self.drive_licence_first is not None:
            result['drive_licence_first'] = self.drive_licence_first
        if self.drive_licence_type is not None:
            result['drive_licence_type'] = self.drive_licence_type
        if self.expire_date is not None:
            result['expire_date'] = self.expire_date
        if self.holder_nationality is not None:
            result['holder_nationality'] = self.holder_nationality
        if self.id is not None:
            result['id'] = self.id
        if self.id_check_code is not None:
            result['id_check_code'] = self.id_check_code
        if self.issue_country is not None:
            result['issue_country'] = self.issue_country
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('birth_date') is not None:
            self.birth_date = m.get('birth_date')
        if m.get('cert_issue_date') is not None:
            self.cert_issue_date = m.get('cert_issue_date')
        if m.get('cert_issue_place') is not None:
            self.cert_issue_place = m.get('cert_issue_place')
        if m.get('credential_no') is not None:
            self.credential_no = m.get('credential_no')
        if m.get('drive_licence_first') is not None:
            self.drive_licence_first = m.get('drive_licence_first')
        if m.get('drive_licence_type') is not None:
            self.drive_licence_type = m.get('drive_licence_type')
        if m.get('expire_date') is not None:
            self.expire_date = m.get('expire_date')
        if m.get('holder_nationality') is not None:
            self.holder_nationality = m.get('holder_nationality')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('id_check_code') is not None:
            self.id_check_code = m.get('id_check_code')
        if m.get('issue_country') is not None:
            self.issue_country = m.get('issue_country')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class FlightOrderDetailV2ResponseBodyModulePassengerListTicketsSegmentOpenTicketList(TeaModel):
    def __init__(self, journey_index=None, open_ticket_status=None, segment_index=None):
        self.journey_index = journey_index  # type: int
        self.open_ticket_status = open_ticket_status  # type: int
        self.segment_index = segment_index  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOrderDetailV2ResponseBodyModulePassengerListTicketsSegmentOpenTicketList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.journey_index is not None:
            result['journey_index'] = self.journey_index
        if self.open_ticket_status is not None:
            result['open_ticket_status'] = self.open_ticket_status
        if self.segment_index is not None:
            result['segment_index'] = self.segment_index
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('journey_index') is not None:
            self.journey_index = m.get('journey_index')
        if m.get('open_ticket_status') is not None:
            self.open_ticket_status = m.get('open_ticket_status')
        if m.get('segment_index') is not None:
            self.segment_index = m.get('segment_index')
        return self


class FlightOrderDetailV2ResponseBodyModulePassengerListTickets(TeaModel):
    def __init__(self, channel=None, journey_title=None, open_ticket_status=None, pcc=None,
                 segment_open_ticket_list=None, ticket_auth_memo=None, ticket_auth_status=None, ticket_no=None, ticket_price=None,
                 ticket_status=None):
        self.channel = channel  # type: str
        self.journey_title = journey_title  # type: str
        self.open_ticket_status = open_ticket_status  # type: str
        # pcc/office
        self.pcc = pcc  # type: str
        self.segment_open_ticket_list = segment_open_ticket_list  # type: list[FlightOrderDetailV2ResponseBodyModulePassengerListTicketsSegmentOpenTicketList]
        self.ticket_auth_memo = ticket_auth_memo  # type: str
        self.ticket_auth_status = ticket_auth_status  # type: int
        self.ticket_no = ticket_no  # type: str
        self.ticket_price = ticket_price  # type: long
        self.ticket_status = ticket_status  # type: str

    def validate(self):
        if self.segment_open_ticket_list:
            for k in self.segment_open_ticket_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightOrderDetailV2ResponseBodyModulePassengerListTickets, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.channel is not None:
            result['channel'] = self.channel
        if self.journey_title is not None:
            result['journey_title'] = self.journey_title
        if self.open_ticket_status is not None:
            result['open_ticket_status'] = self.open_ticket_status
        if self.pcc is not None:
            result['pcc'] = self.pcc
        result['segment_open_ticket_list'] = []
        if self.segment_open_ticket_list is not None:
            for k in self.segment_open_ticket_list:
                result['segment_open_ticket_list'].append(k.to_map() if k else None)
        if self.ticket_auth_memo is not None:
            result['ticket_auth_memo'] = self.ticket_auth_memo
        if self.ticket_auth_status is not None:
            result['ticket_auth_status'] = self.ticket_auth_status
        if self.ticket_no is not None:
            result['ticket_no'] = self.ticket_no
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.ticket_status is not None:
            result['ticket_status'] = self.ticket_status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('channel') is not None:
            self.channel = m.get('channel')
        if m.get('journey_title') is not None:
            self.journey_title = m.get('journey_title')
        if m.get('open_ticket_status') is not None:
            self.open_ticket_status = m.get('open_ticket_status')
        if m.get('pcc') is not None:
            self.pcc = m.get('pcc')
        self.segment_open_ticket_list = []
        if m.get('segment_open_ticket_list') is not None:
            for k in m.get('segment_open_ticket_list'):
                temp_model = FlightOrderDetailV2ResponseBodyModulePassengerListTicketsSegmentOpenTicketList()
                self.segment_open_ticket_list.append(temp_model.from_map(k))
        if m.get('ticket_auth_memo') is not None:
            self.ticket_auth_memo = m.get('ticket_auth_memo')
        if m.get('ticket_auth_status') is not None:
            self.ticket_auth_status = m.get('ticket_auth_status')
        if m.get('ticket_no') is not None:
            self.ticket_no = m.get('ticket_no')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('ticket_status') is not None:
            self.ticket_status = m.get('ticket_status')
        return self


class FlightOrderDetailV2ResponseBodyModulePassengerList(TeaModel):
    def __init__(self, birthday=None, btrip_user_id=None, code=None, country=None, country_code=None,
                 credential=None, credentials=None, email=None, en_first_name=None, en_last_name=None, english_name=None,
                 gender=None, id=None, is_complete=None, is_frequently=None, memo=None, mobile_country_code=None,
                 mobile_phone_number=None, name=None, oneself=None, order_name=None, out_passenger_id=None, phone=None,
                 sheng_pi_pinyin=None, ticket_nos=None, tickets=None, type=None, user_id=None):
        self.birthday = birthday  # type: str
        self.btrip_user_id = btrip_user_id  # type: str
        self.code = code  # type: int
        self.country = country  # type: str
        self.country_code = country_code  # type: str
        self.credential = credential  # type: FlightOrderDetailV2ResponseBodyModulePassengerListCredential
        self.credentials = credentials  # type: list[FlightOrderDetailV2ResponseBodyModulePassengerListCredentials]
        self.email = email  # type: str
        self.en_first_name = en_first_name  # type: str
        self.en_last_name = en_last_name  # type: str
        self.english_name = english_name  # type: str
        self.gender = gender  # type: int
        self.id = id  # type: str
        self.is_complete = is_complete  # type: bool
        self.is_frequently = is_frequently  # type: bool
        self.memo = memo  # type: str
        self.mobile_country_code = mobile_country_code  # type: str
        self.mobile_phone_number = mobile_phone_number  # type: str
        self.name = name  # type: str
        self.oneself = oneself  # type: bool
        self.order_name = order_name  # type: str
        self.out_passenger_id = out_passenger_id  # type: str
        self.phone = phone  # type: str
        self.sheng_pi_pinyin = sheng_pi_pinyin  # type: str
        self.ticket_nos = ticket_nos  # type: list[str]
        self.tickets = tickets  # type: list[FlightOrderDetailV2ResponseBodyModulePassengerListTickets]
        self.type = type  # type: int
        self.user_id = user_id  # type: str

    def validate(self):
        if self.credential:
            self.credential.validate()
        if self.credentials:
            for k in self.credentials:
                if k:
                    k.validate()
        if self.tickets:
            for k in self.tickets:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightOrderDetailV2ResponseBodyModulePassengerList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.birthday is not None:
            result['birthday'] = self.birthday
        if self.btrip_user_id is not None:
            result['btrip_user_id'] = self.btrip_user_id
        if self.code is not None:
            result['code'] = self.code
        if self.country is not None:
            result['country'] = self.country
        if self.country_code is not None:
            result['country_code'] = self.country_code
        if self.credential is not None:
            result['credential'] = self.credential.to_map()
        result['credentials'] = []
        if self.credentials is not None:
            for k in self.credentials:
                result['credentials'].append(k.to_map() if k else None)
        if self.email is not None:
            result['email'] = self.email
        if self.en_first_name is not None:
            result['en_first_name'] = self.en_first_name
        if self.en_last_name is not None:
            result['en_last_name'] = self.en_last_name
        if self.english_name is not None:
            result['english_name'] = self.english_name
        if self.gender is not None:
            result['gender'] = self.gender
        if self.id is not None:
            result['id'] = self.id
        if self.is_complete is not None:
            result['is_complete'] = self.is_complete
        if self.is_frequently is not None:
            result['is_frequently'] = self.is_frequently
        if self.memo is not None:
            result['memo'] = self.memo
        if self.mobile_country_code is not None:
            result['mobile_country_code'] = self.mobile_country_code
        if self.mobile_phone_number is not None:
            result['mobile_phone_number'] = self.mobile_phone_number
        if self.name is not None:
            result['name'] = self.name
        if self.oneself is not None:
            result['oneself'] = self.oneself
        if self.order_name is not None:
            result['order_name'] = self.order_name
        if self.out_passenger_id is not None:
            result['out_passenger_id'] = self.out_passenger_id
        if self.phone is not None:
            result['phone'] = self.phone
        if self.sheng_pi_pinyin is not None:
            result['sheng_pi_pinyin'] = self.sheng_pi_pinyin
        if self.ticket_nos is not None:
            result['ticket_nos'] = self.ticket_nos
        result['tickets'] = []
        if self.tickets is not None:
            for k in self.tickets:
                result['tickets'].append(k.to_map() if k else None)
        if self.type is not None:
            result['type'] = self.type
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('birthday') is not None:
            self.birthday = m.get('birthday')
        if m.get('btrip_user_id') is not None:
            self.btrip_user_id = m.get('btrip_user_id')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('country') is not None:
            self.country = m.get('country')
        if m.get('country_code') is not None:
            self.country_code = m.get('country_code')
        if m.get('credential') is not None:
            temp_model = FlightOrderDetailV2ResponseBodyModulePassengerListCredential()
            self.credential = temp_model.from_map(m['credential'])
        self.credentials = []
        if m.get('credentials') is not None:
            for k in m.get('credentials'):
                temp_model = FlightOrderDetailV2ResponseBodyModulePassengerListCredentials()
                self.credentials.append(temp_model.from_map(k))
        if m.get('email') is not None:
            self.email = m.get('email')
        if m.get('en_first_name') is not None:
            self.en_first_name = m.get('en_first_name')
        if m.get('en_last_name') is not None:
            self.en_last_name = m.get('en_last_name')
        if m.get('english_name') is not None:
            self.english_name = m.get('english_name')
        if m.get('gender') is not None:
            self.gender = m.get('gender')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('is_complete') is not None:
            self.is_complete = m.get('is_complete')
        if m.get('is_frequently') is not None:
            self.is_frequently = m.get('is_frequently')
        if m.get('memo') is not None:
            self.memo = m.get('memo')
        if m.get('mobile_country_code') is not None:
            self.mobile_country_code = m.get('mobile_country_code')
        if m.get('mobile_phone_number') is not None:
            self.mobile_phone_number = m.get('mobile_phone_number')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('oneself') is not None:
            self.oneself = m.get('oneself')
        if m.get('order_name') is not None:
            self.order_name = m.get('order_name')
        if m.get('out_passenger_id') is not None:
            self.out_passenger_id = m.get('out_passenger_id')
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        if m.get('sheng_pi_pinyin') is not None:
            self.sheng_pi_pinyin = m.get('sheng_pi_pinyin')
        if m.get('ticket_nos') is not None:
            self.ticket_nos = m.get('ticket_nos')
        self.tickets = []
        if m.get('tickets') is not None:
            for k in m.get('tickets'):
                temp_model = FlightOrderDetailV2ResponseBodyModulePassengerListTickets()
                self.tickets.append(temp_model.from_map(k))
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class FlightOrderDetailV2ResponseBodyModule(TeaModel):
    def __init__(self, b_2g_vip_code=None, book_succ_time=None, book_user_id=None, book_user_name=None,
                 build_price=None, contact_info_dto=None, create_time=None, facevalue=None, flight_tale_info_dto=None,
                 is_protocol=None, isemergency=None, issendmessage=None, oil_price=None, order_id=None, order_price=None,
                 out_order_id=None, passenger_list=None, passenger_segment_map=None, pay_time=None, saleprice=None,
                 sendcpsms=None, status=None, total_service_fee_price=None):
        self.b_2g_vip_code = b_2g_vip_code  # type: str
        self.book_succ_time = book_succ_time  # type: str
        self.book_user_id = book_user_id  # type: str
        self.book_user_name = book_user_name  # type: str
        self.build_price = build_price  # type: long
        self.contact_info_dto = contact_info_dto  # type: FlightOrderDetailV2ResponseBodyModuleContactInfoDTO
        self.create_time = create_time  # type: str
        self.facevalue = facevalue  # type: long
        self.flight_tale_info_dto = flight_tale_info_dto  # type: FlightOrderDetailV2ResponseBodyModuleFlightTaleInfoDTO
        self.is_protocol = is_protocol  # type: bool
        self.isemergency = isemergency  # type: bool
        self.issendmessage = issendmessage  # type: bool
        self.oil_price = oil_price  # type: long
        self.order_id = order_id  # type: long
        self.order_price = order_price  # type: long
        self.out_order_id = out_order_id  # type: str
        self.passenger_list = passenger_list  # type: list[FlightOrderDetailV2ResponseBodyModulePassengerList]
        # key :passengerId
        # 
        # value :segmentId
        self.passenger_segment_map = passenger_segment_map  # type: dict[str, str]
        self.pay_time = pay_time  # type: str
        self.saleprice = saleprice  # type: long
        self.sendcpsms = sendcpsms  # type: bool
        self.status = status  # type: int
        self.total_service_fee_price = total_service_fee_price  # type: long

    def validate(self):
        if self.contact_info_dto:
            self.contact_info_dto.validate()
        if self.flight_tale_info_dto:
            self.flight_tale_info_dto.validate()
        if self.passenger_list:
            for k in self.passenger_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightOrderDetailV2ResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.b_2g_vip_code is not None:
            result['b2g_vip_code'] = self.b_2g_vip_code
        if self.book_succ_time is not None:
            result['book_succ_time'] = self.book_succ_time
        if self.book_user_id is not None:
            result['book_user_id'] = self.book_user_id
        if self.book_user_name is not None:
            result['book_user_name'] = self.book_user_name
        if self.build_price is not None:
            result['build_price'] = self.build_price
        if self.contact_info_dto is not None:
            result['contact_info_d_t_o'] = self.contact_info_dto.to_map()
        if self.create_time is not None:
            result['create_time'] = self.create_time
        if self.facevalue is not None:
            result['facevalue'] = self.facevalue
        if self.flight_tale_info_dto is not None:
            result['flight_tale_info_d_t_o'] = self.flight_tale_info_dto.to_map()
        if self.is_protocol is not None:
            result['is_protocol'] = self.is_protocol
        if self.isemergency is not None:
            result['isemergency'] = self.isemergency
        if self.issendmessage is not None:
            result['issendmessage'] = self.issendmessage
        if self.oil_price is not None:
            result['oil_price'] = self.oil_price
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.order_price is not None:
            result['order_price'] = self.order_price
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        result['passenger_list'] = []
        if self.passenger_list is not None:
            for k in self.passenger_list:
                result['passenger_list'].append(k.to_map() if k else None)
        if self.passenger_segment_map is not None:
            result['passenger_segment_map'] = self.passenger_segment_map
        if self.pay_time is not None:
            result['pay_time'] = self.pay_time
        if self.saleprice is not None:
            result['saleprice'] = self.saleprice
        if self.sendcpsms is not None:
            result['sendcpsms'] = self.sendcpsms
        if self.status is not None:
            result['status'] = self.status
        if self.total_service_fee_price is not None:
            result['total_service_fee_price'] = self.total_service_fee_price
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('b2g_vip_code') is not None:
            self.b_2g_vip_code = m.get('b2g_vip_code')
        if m.get('book_succ_time') is not None:
            self.book_succ_time = m.get('book_succ_time')
        if m.get('book_user_id') is not None:
            self.book_user_id = m.get('book_user_id')
        if m.get('book_user_name') is not None:
            self.book_user_name = m.get('book_user_name')
        if m.get('build_price') is not None:
            self.build_price = m.get('build_price')
        if m.get('contact_info_d_t_o') is not None:
            temp_model = FlightOrderDetailV2ResponseBodyModuleContactInfoDTO()
            self.contact_info_dto = temp_model.from_map(m['contact_info_d_t_o'])
        if m.get('create_time') is not None:
            self.create_time = m.get('create_time')
        if m.get('facevalue') is not None:
            self.facevalue = m.get('facevalue')
        if m.get('flight_tale_info_d_t_o') is not None:
            temp_model = FlightOrderDetailV2ResponseBodyModuleFlightTaleInfoDTO()
            self.flight_tale_info_dto = temp_model.from_map(m['flight_tale_info_d_t_o'])
        if m.get('is_protocol') is not None:
            self.is_protocol = m.get('is_protocol')
        if m.get('isemergency') is not None:
            self.isemergency = m.get('isemergency')
        if m.get('issendmessage') is not None:
            self.issendmessage = m.get('issendmessage')
        if m.get('oil_price') is not None:
            self.oil_price = m.get('oil_price')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('order_price') is not None:
            self.order_price = m.get('order_price')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        self.passenger_list = []
        if m.get('passenger_list') is not None:
            for k in m.get('passenger_list'):
                temp_model = FlightOrderDetailV2ResponseBodyModulePassengerList()
                self.passenger_list.append(temp_model.from_map(k))
        if m.get('passenger_segment_map') is not None:
            self.passenger_segment_map = m.get('passenger_segment_map')
        if m.get('pay_time') is not None:
            self.pay_time = m.get('pay_time')
        if m.get('saleprice') is not None:
            self.saleprice = m.get('saleprice')
        if m.get('sendcpsms') is not None:
            self.sendcpsms = m.get('sendcpsms')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('total_service_fee_price') is not None:
            self.total_service_fee_price = m.get('total_service_fee_price')
        return self


class FlightOrderDetailV2ResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        # module
        self.module = module  # type: FlightOrderDetailV2ResponseBodyModule
        # requestId
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        # traceId
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(FlightOrderDetailV2ResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = FlightOrderDetailV2ResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightOrderDetailV2Response(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: FlightOrderDetailV2ResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(FlightOrderDetailV2Response, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightOrderDetailV2ResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightOrderListQueryHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_so_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOrderListQueryHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class FlightOrderListQueryRequest(TeaModel):
    def __init__(self, all_apply=None, apply_id=None, depart_id=None, end_time=None, page=None, page_size=None,
                 start_time=None, thirdpart_apply_id=None, update_end_time=None, update_start_time=None, user_id=None):
        self.all_apply = all_apply  # type: bool
        self.apply_id = apply_id  # type: long
        self.depart_id = depart_id  # type: str
        self.end_time = end_time  # type: str
        self.page = page  # type: int
        self.page_size = page_size  # type: int
        self.start_time = start_time  # type: str
        self.thirdpart_apply_id = thirdpart_apply_id  # type: str
        self.update_end_time = update_end_time  # type: str
        self.update_start_time = update_start_time  # type: str
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOrderListQueryRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.all_apply is not None:
            result['all_apply'] = self.all_apply
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.depart_id is not None:
            result['depart_id'] = self.depart_id
        if self.end_time is not None:
            result['end_time'] = self.end_time
        if self.page is not None:
            result['page'] = self.page
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.start_time is not None:
            result['start_time'] = self.start_time
        if self.thirdpart_apply_id is not None:
            result['thirdpart_apply_id'] = self.thirdpart_apply_id
        if self.update_end_time is not None:
            result['update_end_time'] = self.update_end_time
        if self.update_start_time is not None:
            result['update_start_time'] = self.update_start_time
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('all_apply') is not None:
            self.all_apply = m.get('all_apply')
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('depart_id') is not None:
            self.depart_id = m.get('depart_id')
        if m.get('end_time') is not None:
            self.end_time = m.get('end_time')
        if m.get('page') is not None:
            self.page = m.get('page')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('start_time') is not None:
            self.start_time = m.get('start_time')
        if m.get('thirdpart_apply_id') is not None:
            self.thirdpart_apply_id = m.get('thirdpart_apply_id')
        if m.get('update_end_time') is not None:
            self.update_end_time = m.get('update_end_time')
        if m.get('update_start_time') is not None:
            self.update_start_time = m.get('update_start_time')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class FlightOrderListQueryResponseBodyModuleCostCenter(TeaModel):
    def __init__(self, corp_id=None, id=None, name=None, number=None):
        self.corp_id = corp_id  # type: str
        self.id = id  # type: long
        self.name = name  # type: str
        self.number = number  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOrderListQueryResponseBodyModuleCostCenter, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        if self.number is not None:
            result['number'] = self.number
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('number') is not None:
            self.number = m.get('number')
        return self


class FlightOrderListQueryResponseBodyModuleInsureInfoList(TeaModel):
    def __init__(self, insure_no=None, name=None, status=None):
        self.insure_no = insure_no  # type: str
        self.name = name  # type: str
        self.status = status  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOrderListQueryResponseBodyModuleInsureInfoList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.insure_no is not None:
            result['insure_no'] = self.insure_no
        if self.name is not None:
            result['name'] = self.name
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('insure_no') is not None:
            self.insure_no = m.get('insure_no')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class FlightOrderListQueryResponseBodyModuleInvoice(TeaModel):
    def __init__(self, id=None, title=None):
        self.id = id  # type: long
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOrderListQueryResponseBodyModuleInvoice, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightOrderListQueryResponseBodyModulePriceInfoList(TeaModel):
    def __init__(self, category_code=None, category_type=None, change_flight_no=None, discount=None, end_time=None,
                 gmt_create=None, original_ticket_no=None, passenger_name=None, pay_type=None, price=None, start_time=None,
                 ticket_no=None, trade_id=None, type=None):
        self.category_code = category_code  # type: int
        self.category_type = category_type  # type: int
        self.change_flight_no = change_flight_no  # type: str
        self.discount = discount  # type: str
        self.end_time = end_time  # type: str
        self.gmt_create = gmt_create  # type: str
        self.original_ticket_no = original_ticket_no  # type: str
        self.passenger_name = passenger_name  # type: str
        self.pay_type = pay_type  # type: int
        self.price = price  # type: float
        self.start_time = start_time  # type: str
        self.ticket_no = ticket_no  # type: str
        self.trade_id = trade_id  # type: str
        self.type = type  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOrderListQueryResponseBodyModulePriceInfoList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category_code is not None:
            result['category_code'] = self.category_code
        if self.category_type is not None:
            result['category_type'] = self.category_type
        if self.change_flight_no is not None:
            result['change_flight_no'] = self.change_flight_no
        if self.discount is not None:
            result['discount'] = self.discount
        if self.end_time is not None:
            result['end_time'] = self.end_time
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.original_ticket_no is not None:
            result['original_ticket_no'] = self.original_ticket_no
        if self.passenger_name is not None:
            result['passenger_name'] = self.passenger_name
        if self.pay_type is not None:
            result['pay_type'] = self.pay_type
        if self.price is not None:
            result['price'] = self.price
        if self.start_time is not None:
            result['start_time'] = self.start_time
        if self.ticket_no is not None:
            result['ticket_no'] = self.ticket_no
        if self.trade_id is not None:
            result['trade_id'] = self.trade_id
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('category_code') is not None:
            self.category_code = m.get('category_code')
        if m.get('category_type') is not None:
            self.category_type = m.get('category_type')
        if m.get('change_flight_no') is not None:
            self.change_flight_no = m.get('change_flight_no')
        if m.get('discount') is not None:
            self.discount = m.get('discount')
        if m.get('end_time') is not None:
            self.end_time = m.get('end_time')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('original_ticket_no') is not None:
            self.original_ticket_no = m.get('original_ticket_no')
        if m.get('passenger_name') is not None:
            self.passenger_name = m.get('passenger_name')
        if m.get('pay_type') is not None:
            self.pay_type = m.get('pay_type')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('start_time') is not None:
            self.start_time = m.get('start_time')
        if m.get('ticket_no') is not None:
            self.ticket_no = m.get('ticket_no')
        if m.get('trade_id') is not None:
            self.trade_id = m.get('trade_id')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class FlightOrderListQueryResponseBodyModuleUserAffiliateList(TeaModel):
    def __init__(self, user_id=None, user_name=None):
        self.user_id = user_id  # type: str
        self.user_name = user_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOrderListQueryResponseBodyModuleUserAffiliateList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class FlightOrderListQueryResponseBodyModule(TeaModel):
    def __init__(self, apply_id=None, arr_airport=None, arr_city=None, arr_city_ad_code=None, btrip_title=None,
                 cabin_class=None, contact_name=None, corp_id=None, corp_name=None, cost_center=None, dep_airport=None,
                 dep_city=None, dep_city_ad_code=None, dep_date=None, depart_id=None, depart_name=None, discount=None,
                 flight_no=None, gmt_create=None, gmt_modified=None, id=None, insure_info_list=None, invoice=None,
                 passenger_count=None, passenger_name=None, price_info_list=None, project_code=None, project_id=None,
                 project_title=None, ret_date=None, status=None, third_part_project_id=None, thirdpart_apply_id=None,
                 thirdpart_itinerary_id=None, trip_type=None, user_affiliate_list=None, user_id=None, user_name=None):
        self.apply_id = apply_id  # type: long
        self.arr_airport = arr_airport  # type: str
        self.arr_city = arr_city  # type: str
        self.arr_city_ad_code = arr_city_ad_code  # type: str
        self.btrip_title = btrip_title  # type: str
        self.cabin_class = cabin_class  # type: str
        self.contact_name = contact_name  # type: str
        self.corp_id = corp_id  # type: str
        self.corp_name = corp_name  # type: str
        self.cost_center = cost_center  # type: FlightOrderListQueryResponseBodyModuleCostCenter
        self.dep_airport = dep_airport  # type: str
        self.dep_city = dep_city  # type: str
        self.dep_city_ad_code = dep_city_ad_code  # type: str
        self.dep_date = dep_date  # type: str
        self.depart_id = depart_id  # type: str
        self.depart_name = depart_name  # type: str
        self.discount = discount  # type: str
        self.flight_no = flight_no  # type: str
        self.gmt_create = gmt_create  # type: str
        self.gmt_modified = gmt_modified  # type: str
        self.id = id  # type: long
        self.insure_info_list = insure_info_list  # type: list[FlightOrderListQueryResponseBodyModuleInsureInfoList]
        self.invoice = invoice  # type: FlightOrderListQueryResponseBodyModuleInvoice
        self.passenger_count = passenger_count  # type: int
        self.passenger_name = passenger_name  # type: str
        self.price_info_list = price_info_list  # type: list[FlightOrderListQueryResponseBodyModulePriceInfoList]
        self.project_code = project_code  # type: str
        self.project_id = project_id  # type: long
        self.project_title = project_title  # type: str
        self.ret_date = ret_date  # type: str
        self.status = status  # type: int
        self.third_part_project_id = third_part_project_id  # type: str
        self.thirdpart_apply_id = thirdpart_apply_id  # type: str
        self.thirdpart_itinerary_id = thirdpart_itinerary_id  # type: str
        self.trip_type = trip_type  # type: int
        self.user_affiliate_list = user_affiliate_list  # type: list[FlightOrderListQueryResponseBodyModuleUserAffiliateList]
        self.user_id = user_id  # type: str
        self.user_name = user_name  # type: str

    def validate(self):
        if self.cost_center:
            self.cost_center.validate()
        if self.insure_info_list:
            for k in self.insure_info_list:
                if k:
                    k.validate()
        if self.invoice:
            self.invoice.validate()
        if self.price_info_list:
            for k in self.price_info_list:
                if k:
                    k.validate()
        if self.user_affiliate_list:
            for k in self.user_affiliate_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightOrderListQueryResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.arr_airport is not None:
            result['arr_airport'] = self.arr_airport
        if self.arr_city is not None:
            result['arr_city'] = self.arr_city
        if self.arr_city_ad_code is not None:
            result['arr_city_ad_code'] = self.arr_city_ad_code
        if self.btrip_title is not None:
            result['btrip_title'] = self.btrip_title
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.contact_name is not None:
            result['contact_name'] = self.contact_name
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        if self.corp_name is not None:
            result['corp_name'] = self.corp_name
        if self.cost_center is not None:
            result['cost_center'] = self.cost_center.to_map()
        if self.dep_airport is not None:
            result['dep_airport'] = self.dep_airport
        if self.dep_city is not None:
            result['dep_city'] = self.dep_city
        if self.dep_city_ad_code is not None:
            result['dep_city_ad_code'] = self.dep_city_ad_code
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        if self.depart_id is not None:
            result['depart_id'] = self.depart_id
        if self.depart_name is not None:
            result['depart_name'] = self.depart_name
        if self.discount is not None:
            result['discount'] = self.discount
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.gmt_modified is not None:
            result['gmt_modified'] = self.gmt_modified
        if self.id is not None:
            result['id'] = self.id
        result['insure_info_list'] = []
        if self.insure_info_list is not None:
            for k in self.insure_info_list:
                result['insure_info_list'].append(k.to_map() if k else None)
        if self.invoice is not None:
            result['invoice'] = self.invoice.to_map()
        if self.passenger_count is not None:
            result['passenger_count'] = self.passenger_count
        if self.passenger_name is not None:
            result['passenger_name'] = self.passenger_name
        result['price_info_list'] = []
        if self.price_info_list is not None:
            for k in self.price_info_list:
                result['price_info_list'].append(k.to_map() if k else None)
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_id is not None:
            result['project_id'] = self.project_id
        if self.project_title is not None:
            result['project_title'] = self.project_title
        if self.ret_date is not None:
            result['ret_date'] = self.ret_date
        if self.status is not None:
            result['status'] = self.status
        if self.third_part_project_id is not None:
            result['third_part_project_id'] = self.third_part_project_id
        if self.thirdpart_apply_id is not None:
            result['thirdpart_apply_id'] = self.thirdpart_apply_id
        if self.thirdpart_itinerary_id is not None:
            result['thirdpart_itinerary_id'] = self.thirdpart_itinerary_id
        if self.trip_type is not None:
            result['trip_type'] = self.trip_type
        result['user_affiliate_list'] = []
        if self.user_affiliate_list is not None:
            for k in self.user_affiliate_list:
                result['user_affiliate_list'].append(k.to_map() if k else None)
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('arr_airport') is not None:
            self.arr_airport = m.get('arr_airport')
        if m.get('arr_city') is not None:
            self.arr_city = m.get('arr_city')
        if m.get('arr_city_ad_code') is not None:
            self.arr_city_ad_code = m.get('arr_city_ad_code')
        if m.get('btrip_title') is not None:
            self.btrip_title = m.get('btrip_title')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('contact_name') is not None:
            self.contact_name = m.get('contact_name')
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        if m.get('corp_name') is not None:
            self.corp_name = m.get('corp_name')
        if m.get('cost_center') is not None:
            temp_model = FlightOrderListQueryResponseBodyModuleCostCenter()
            self.cost_center = temp_model.from_map(m['cost_center'])
        if m.get('dep_airport') is not None:
            self.dep_airport = m.get('dep_airport')
        if m.get('dep_city') is not None:
            self.dep_city = m.get('dep_city')
        if m.get('dep_city_ad_code') is not None:
            self.dep_city_ad_code = m.get('dep_city_ad_code')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        if m.get('depart_id') is not None:
            self.depart_id = m.get('depart_id')
        if m.get('depart_name') is not None:
            self.depart_name = m.get('depart_name')
        if m.get('discount') is not None:
            self.discount = m.get('discount')
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('gmt_modified') is not None:
            self.gmt_modified = m.get('gmt_modified')
        if m.get('id') is not None:
            self.id = m.get('id')
        self.insure_info_list = []
        if m.get('insure_info_list') is not None:
            for k in m.get('insure_info_list'):
                temp_model = FlightOrderListQueryResponseBodyModuleInsureInfoList()
                self.insure_info_list.append(temp_model.from_map(k))
        if m.get('invoice') is not None:
            temp_model = FlightOrderListQueryResponseBodyModuleInvoice()
            self.invoice = temp_model.from_map(m['invoice'])
        if m.get('passenger_count') is not None:
            self.passenger_count = m.get('passenger_count')
        if m.get('passenger_name') is not None:
            self.passenger_name = m.get('passenger_name')
        self.price_info_list = []
        if m.get('price_info_list') is not None:
            for k in m.get('price_info_list'):
                temp_model = FlightOrderListQueryResponseBodyModulePriceInfoList()
                self.price_info_list.append(temp_model.from_map(k))
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_id') is not None:
            self.project_id = m.get('project_id')
        if m.get('project_title') is not None:
            self.project_title = m.get('project_title')
        if m.get('ret_date') is not None:
            self.ret_date = m.get('ret_date')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('third_part_project_id') is not None:
            self.third_part_project_id = m.get('third_part_project_id')
        if m.get('thirdpart_apply_id') is not None:
            self.thirdpart_apply_id = m.get('thirdpart_apply_id')
        if m.get('thirdpart_itinerary_id') is not None:
            self.thirdpart_itinerary_id = m.get('thirdpart_itinerary_id')
        if m.get('trip_type') is not None:
            self.trip_type = m.get('trip_type')
        self.user_affiliate_list = []
        if m.get('user_affiliate_list') is not None:
            for k in m.get('user_affiliate_list'):
                temp_model = FlightOrderListQueryResponseBodyModuleUserAffiliateList()
                self.user_affiliate_list.append(temp_model.from_map(k))
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class FlightOrderListQueryResponseBodyPageInfo(TeaModel):
    def __init__(self, page=None, page_size=None, total_number=None):
        self.page = page  # type: int
        self.page_size = page_size  # type: int
        self.total_number = total_number  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOrderListQueryResponseBodyPageInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page is not None:
            result['page'] = self.page
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.total_number is not None:
            result['total_number'] = self.total_number
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('page') is not None:
            self.page = m.get('page')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('total_number') is not None:
            self.total_number = m.get('total_number')
        return self


class FlightOrderListQueryResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, page_info=None, request_id=None, success=None,
                 trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: list[FlightOrderListQueryResponseBodyModule]
        self.page_info = page_info  # type: FlightOrderListQueryResponseBodyPageInfo
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            for k in self.module:
                if k:
                    k.validate()
        if self.page_info:
            self.page_info.validate()

    def to_map(self):
        _map = super(FlightOrderListQueryResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        result['module'] = []
        if self.module is not None:
            for k in self.module:
                result['module'].append(k.to_map() if k else None)
        if self.page_info is not None:
            result['page_info'] = self.page_info.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        self.module = []
        if m.get('module') is not None:
            for k in m.get('module'):
                temp_model = FlightOrderListQueryResponseBodyModule()
                self.module.append(temp_model.from_map(k))
        if m.get('page_info') is not None:
            temp_model = FlightOrderListQueryResponseBodyPageInfo()
            self.page_info = temp_model.from_map(m['page_info'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightOrderListQueryResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: FlightOrderListQueryResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(FlightOrderListQueryResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightOrderListQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightOrderQueryHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_so_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOrderQueryHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class FlightOrderQueryRequest(TeaModel):
    def __init__(self, order_id=None, user_id=None):
        self.order_id = order_id  # type: long
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOrderQueryRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class FlightOrderQueryResponseBodyModuleFlightChangeTicketInfoList(TeaModel):
    def __init__(self, arr_time=None, change_cabin=None, change_cabin_level=None, change_fee=None,
                 change_flight_no=None, change_order_id=None, change_reason=None, change_type=None, dep_time=None, gmt_create=None,
                 gmt_modify=None, origin_ticket_no=None, ticket_no=None, upgrade_fee=None):
        self.arr_time = arr_time  # type: str
        self.change_cabin = change_cabin  # type: str
        self.change_cabin_level = change_cabin_level  # type: str
        self.change_fee = change_fee  # type: float
        self.change_flight_no = change_flight_no  # type: str
        self.change_order_id = change_order_id  # type: long
        self.change_reason = change_reason  # type: str
        self.change_type = change_type  # type: int
        self.dep_time = dep_time  # type: str
        self.gmt_create = gmt_create  # type: str
        self.gmt_modify = gmt_modify  # type: str
        self.origin_ticket_no = origin_ticket_no  # type: str
        self.ticket_no = ticket_no  # type: str
        self.upgrade_fee = upgrade_fee  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOrderQueryResponseBodyModuleFlightChangeTicketInfoList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.change_cabin is not None:
            result['change_cabin'] = self.change_cabin
        if self.change_cabin_level is not None:
            result['change_cabin_level'] = self.change_cabin_level
        if self.change_fee is not None:
            result['change_fee'] = self.change_fee
        if self.change_flight_no is not None:
            result['change_flight_no'] = self.change_flight_no
        if self.change_order_id is not None:
            result['change_order_id'] = self.change_order_id
        if self.change_reason is not None:
            result['change_reason'] = self.change_reason
        if self.change_type is not None:
            result['change_type'] = self.change_type
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.gmt_modify is not None:
            result['gmt_modify'] = self.gmt_modify
        if self.origin_ticket_no is not None:
            result['origin_ticket_no'] = self.origin_ticket_no
        if self.ticket_no is not None:
            result['ticket_no'] = self.ticket_no
        if self.upgrade_fee is not None:
            result['upgrade_fee'] = self.upgrade_fee
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('change_cabin') is not None:
            self.change_cabin = m.get('change_cabin')
        if m.get('change_cabin_level') is not None:
            self.change_cabin_level = m.get('change_cabin_level')
        if m.get('change_fee') is not None:
            self.change_fee = m.get('change_fee')
        if m.get('change_flight_no') is not None:
            self.change_flight_no = m.get('change_flight_no')
        if m.get('change_order_id') is not None:
            self.change_order_id = m.get('change_order_id')
        if m.get('change_reason') is not None:
            self.change_reason = m.get('change_reason')
        if m.get('change_type') is not None:
            self.change_type = m.get('change_type')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('gmt_modify') is not None:
            self.gmt_modify = m.get('gmt_modify')
        if m.get('origin_ticket_no') is not None:
            self.origin_ticket_no = m.get('origin_ticket_no')
        if m.get('ticket_no') is not None:
            self.ticket_no = m.get('ticket_no')
        if m.get('upgrade_fee') is not None:
            self.upgrade_fee = m.get('upgrade_fee')
        return self


class FlightOrderQueryResponseBodyModuleFlightInfoList(TeaModel):
    def __init__(self, airline_code=None, airline_name=None, arr_airport_code=None, arr_airport_name=None,
                 arr_city_ad_code=None, arr_city_code=None, arr_city_name=None, arr_time=None, cabin=None, cabin_level=None,
                 dep_airport_code=None, dep_airport_name=None, dep_city_ad_code=None, dep_city_code=None, dep_city_name=None,
                 dep_time=None, flight_mile=None, flight_no=None):
        self.airline_code = airline_code  # type: str
        self.airline_name = airline_name  # type: str
        self.arr_airport_code = arr_airport_code  # type: str
        self.arr_airport_name = arr_airport_name  # type: str
        self.arr_city_ad_code = arr_city_ad_code  # type: str
        self.arr_city_code = arr_city_code  # type: str
        self.arr_city_name = arr_city_name  # type: str
        self.arr_time = arr_time  # type: str
        self.cabin = cabin  # type: str
        self.cabin_level = cabin_level  # type: str
        self.dep_airport_code = dep_airport_code  # type: str
        self.dep_airport_name = dep_airport_name  # type: str
        self.dep_city_ad_code = dep_city_ad_code  # type: str
        self.dep_city_code = dep_city_code  # type: str
        self.dep_city_name = dep_city_name  # type: str
        self.dep_time = dep_time  # type: str
        self.flight_mile = flight_mile  # type: int
        self.flight_no = flight_no  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOrderQueryResponseBodyModuleFlightInfoList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.airline_name is not None:
            result['airline_name'] = self.airline_name
        if self.arr_airport_code is not None:
            result['arr_airport_code'] = self.arr_airport_code
        if self.arr_airport_name is not None:
            result['arr_airport_name'] = self.arr_airport_name
        if self.arr_city_ad_code is not None:
            result['arr_city_ad_code'] = self.arr_city_ad_code
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.arr_city_name is not None:
            result['arr_city_name'] = self.arr_city_name
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.cabin is not None:
            result['cabin'] = self.cabin
        if self.cabin_level is not None:
            result['cabin_level'] = self.cabin_level
        if self.dep_airport_code is not None:
            result['dep_airport_code'] = self.dep_airport_code
        if self.dep_airport_name is not None:
            result['dep_airport_name'] = self.dep_airport_name
        if self.dep_city_ad_code is not None:
            result['dep_city_ad_code'] = self.dep_city_ad_code
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_city_name is not None:
            result['dep_city_name'] = self.dep_city_name
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.flight_mile is not None:
            result['flight_mile'] = self.flight_mile
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('airline_name') is not None:
            self.airline_name = m.get('airline_name')
        if m.get('arr_airport_code') is not None:
            self.arr_airport_code = m.get('arr_airport_code')
        if m.get('arr_airport_name') is not None:
            self.arr_airport_name = m.get('arr_airport_name')
        if m.get('arr_city_ad_code') is not None:
            self.arr_city_ad_code = m.get('arr_city_ad_code')
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('arr_city_name') is not None:
            self.arr_city_name = m.get('arr_city_name')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('cabin') is not None:
            self.cabin = m.get('cabin')
        if m.get('cabin_level') is not None:
            self.cabin_level = m.get('cabin_level')
        if m.get('dep_airport_code') is not None:
            self.dep_airport_code = m.get('dep_airport_code')
        if m.get('dep_airport_name') is not None:
            self.dep_airport_name = m.get('dep_airport_name')
        if m.get('dep_city_ad_code') is not None:
            self.dep_city_ad_code = m.get('dep_city_ad_code')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_city_name') is not None:
            self.dep_city_name = m.get('dep_city_name')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('flight_mile') is not None:
            self.flight_mile = m.get('flight_mile')
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        return self


class FlightOrderQueryResponseBodyModuleFlightRefundTicketInfoList(TeaModel):
    def __init__(self, gmt_create=None, gmt_modify=None, refund_order_id=None, refund_reason=None,
                 refund_ticket_fee=None, refund_type=None, ticket_no=None):
        self.gmt_create = gmt_create  # type: str
        self.gmt_modify = gmt_modify  # type: str
        self.refund_order_id = refund_order_id  # type: long
        self.refund_reason = refund_reason  # type: str
        self.refund_ticket_fee = refund_ticket_fee  # type: float
        self.refund_type = refund_type  # type: int
        self.ticket_no = ticket_no  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOrderQueryResponseBodyModuleFlightRefundTicketInfoList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.gmt_modify is not None:
            result['gmt_modify'] = self.gmt_modify
        if self.refund_order_id is not None:
            result['refund_order_id'] = self.refund_order_id
        if self.refund_reason is not None:
            result['refund_reason'] = self.refund_reason
        if self.refund_ticket_fee is not None:
            result['refund_ticket_fee'] = self.refund_ticket_fee
        if self.refund_type is not None:
            result['refund_type'] = self.refund_type
        if self.ticket_no is not None:
            result['ticket_no'] = self.ticket_no
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('gmt_modify') is not None:
            self.gmt_modify = m.get('gmt_modify')
        if m.get('refund_order_id') is not None:
            self.refund_order_id = m.get('refund_order_id')
        if m.get('refund_reason') is not None:
            self.refund_reason = m.get('refund_reason')
        if m.get('refund_ticket_fee') is not None:
            self.refund_ticket_fee = m.get('refund_ticket_fee')
        if m.get('refund_type') is not None:
            self.refund_type = m.get('refund_type')
        if m.get('ticket_no') is not None:
            self.ticket_no = m.get('ticket_no')
        return self


class FlightOrderQueryResponseBodyModuleFlightTicketInfoList(TeaModel):
    def __init__(self, build_price=None, changed=None, discount=None, gmt_create=None, gmt_modify=None,
                 oil_price=None, pay_type=None, settle_price=None, ticket_no=None, ticket_price=None, ticket_status=None,
                 ticket_status_code=None, user_id=None):
        self.build_price = build_price  # type: float
        self.changed = changed  # type: bool
        self.discount = discount  # type: int
        self.gmt_create = gmt_create  # type: str
        self.gmt_modify = gmt_modify  # type: str
        self.oil_price = oil_price  # type: float
        self.pay_type = pay_type  # type: int
        self.settle_price = settle_price  # type: float
        self.ticket_no = ticket_no  # type: str
        self.ticket_price = ticket_price  # type: float
        self.ticket_status = ticket_status  # type: str
        self.ticket_status_code = ticket_status_code  # type: int
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOrderQueryResponseBodyModuleFlightTicketInfoList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.build_price is not None:
            result['build_price'] = self.build_price
        if self.changed is not None:
            result['changed'] = self.changed
        if self.discount is not None:
            result['discount'] = self.discount
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.gmt_modify is not None:
            result['gmt_modify'] = self.gmt_modify
        if self.oil_price is not None:
            result['oil_price'] = self.oil_price
        if self.pay_type is not None:
            result['pay_type'] = self.pay_type
        if self.settle_price is not None:
            result['settle_price'] = self.settle_price
        if self.ticket_no is not None:
            result['ticket_no'] = self.ticket_no
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.ticket_status is not None:
            result['ticket_status'] = self.ticket_status
        if self.ticket_status_code is not None:
            result['ticket_status_code'] = self.ticket_status_code
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('build_price') is not None:
            self.build_price = m.get('build_price')
        if m.get('changed') is not None:
            self.changed = m.get('changed')
        if m.get('discount') is not None:
            self.discount = m.get('discount')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('gmt_modify') is not None:
            self.gmt_modify = m.get('gmt_modify')
        if m.get('oil_price') is not None:
            self.oil_price = m.get('oil_price')
        if m.get('pay_type') is not None:
            self.pay_type = m.get('pay_type')
        if m.get('settle_price') is not None:
            self.settle_price = m.get('settle_price')
        if m.get('ticket_no') is not None:
            self.ticket_no = m.get('ticket_no')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('ticket_status') is not None:
            self.ticket_status = m.get('ticket_status')
        if m.get('ticket_status_code') is not None:
            self.ticket_status_code = m.get('ticket_status_code')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class FlightOrderQueryResponseBodyModuleInsuranceInfoList(TeaModel):
    def __init__(self, amount=None, insurance_no=None, status=None, type=None):
        self.amount = amount  # type: float
        self.insurance_no = insurance_no  # type: str
        self.status = status  # type: int
        self.type = type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOrderQueryResponseBodyModuleInsuranceInfoList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.amount is not None:
            result['amount'] = self.amount
        if self.insurance_no is not None:
            result['insurance_no'] = self.insurance_no
        if self.status is not None:
            result['status'] = self.status
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('amount') is not None:
            self.amount = m.get('amount')
        if m.get('insurance_no') is not None:
            self.insurance_no = m.get('insurance_no')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class FlightOrderQueryResponseBodyModuleInvoiceInfo(TeaModel):
    def __init__(self, id=None, title=None):
        self.id = id  # type: long
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOrderQueryResponseBodyModuleInvoiceInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightOrderQueryResponseBodyModuleOrderBaseInfo(TeaModel):
    def __init__(self, apply_id=None, btrip_title=None, contact_name=None, corp_id=None, corp_name=None,
                 depart_id=None, depart_name=None, gmt_create=None, gmt_modify=None, itinerary_id=None, order_id=None,
                 order_status=None, thirdpart_apply_id=None, thirdpart_corp_id=None, thirdpart_itinerary_id=None,
                 trip_type=None, user_id=None):
        self.apply_id = apply_id  # type: str
        self.btrip_title = btrip_title  # type: str
        self.contact_name = contact_name  # type: str
        self.corp_id = corp_id  # type: str
        self.corp_name = corp_name  # type: str
        self.depart_id = depart_id  # type: str
        self.depart_name = depart_name  # type: str
        self.gmt_create = gmt_create  # type: str
        self.gmt_modify = gmt_modify  # type: str
        self.itinerary_id = itinerary_id  # type: str
        self.order_id = order_id  # type: long
        self.order_status = order_status  # type: int
        self.thirdpart_apply_id = thirdpart_apply_id  # type: str
        self.thirdpart_corp_id = thirdpart_corp_id  # type: str
        self.thirdpart_itinerary_id = thirdpart_itinerary_id  # type: str
        self.trip_type = trip_type  # type: int
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOrderQueryResponseBodyModuleOrderBaseInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.btrip_title is not None:
            result['btrip_title'] = self.btrip_title
        if self.contact_name is not None:
            result['contact_name'] = self.contact_name
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        if self.corp_name is not None:
            result['corp_name'] = self.corp_name
        if self.depart_id is not None:
            result['depart_id'] = self.depart_id
        if self.depart_name is not None:
            result['depart_name'] = self.depart_name
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.gmt_modify is not None:
            result['gmt_modify'] = self.gmt_modify
        if self.itinerary_id is not None:
            result['itinerary_id'] = self.itinerary_id
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.order_status is not None:
            result['order_status'] = self.order_status
        if self.thirdpart_apply_id is not None:
            result['thirdpart_apply_id'] = self.thirdpart_apply_id
        if self.thirdpart_corp_id is not None:
            result['thirdpart_corp_id'] = self.thirdpart_corp_id
        if self.thirdpart_itinerary_id is not None:
            result['thirdpart_itinerary_id'] = self.thirdpart_itinerary_id
        if self.trip_type is not None:
            result['trip_type'] = self.trip_type
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('btrip_title') is not None:
            self.btrip_title = m.get('btrip_title')
        if m.get('contact_name') is not None:
            self.contact_name = m.get('contact_name')
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        if m.get('corp_name') is not None:
            self.corp_name = m.get('corp_name')
        if m.get('depart_id') is not None:
            self.depart_id = m.get('depart_id')
        if m.get('depart_name') is not None:
            self.depart_name = m.get('depart_name')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('gmt_modify') is not None:
            self.gmt_modify = m.get('gmt_modify')
        if m.get('itinerary_id') is not None:
            self.itinerary_id = m.get('itinerary_id')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('order_status') is not None:
            self.order_status = m.get('order_status')
        if m.get('thirdpart_apply_id') is not None:
            self.thirdpart_apply_id = m.get('thirdpart_apply_id')
        if m.get('thirdpart_corp_id') is not None:
            self.thirdpart_corp_id = m.get('thirdpart_corp_id')
        if m.get('thirdpart_itinerary_id') is not None:
            self.thirdpart_itinerary_id = m.get('thirdpart_itinerary_id')
        if m.get('trip_type') is not None:
            self.trip_type = m.get('trip_type')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class FlightOrderQueryResponseBodyModulePassengerInfoList(TeaModel):
    def __init__(self, cost_center_id=None, cost_center_name=None, cost_center_number=None, project_code=None,
                 project_id=None, project_title=None, thirdpart_project_id=None, user_id=None, user_name=None, user_type=None):
        self.cost_center_id = cost_center_id  # type: long
        self.cost_center_name = cost_center_name  # type: str
        self.cost_center_number = cost_center_number  # type: str
        self.project_code = project_code  # type: str
        self.project_id = project_id  # type: long
        self.project_title = project_title  # type: str
        self.thirdpart_project_id = thirdpart_project_id  # type: str
        self.user_id = user_id  # type: str
        self.user_name = user_name  # type: str
        self.user_type = user_type  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOrderQueryResponseBodyModulePassengerInfoList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cost_center_id is not None:
            result['cost_center_id'] = self.cost_center_id
        if self.cost_center_name is not None:
            result['cost_center_name'] = self.cost_center_name
        if self.cost_center_number is not None:
            result['cost_center_number'] = self.cost_center_number
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_id is not None:
            result['project_id'] = self.project_id
        if self.project_title is not None:
            result['project_title'] = self.project_title
        if self.thirdpart_project_id is not None:
            result['thirdpart_project_id'] = self.thirdpart_project_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        if self.user_type is not None:
            result['user_type'] = self.user_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('cost_center_id') is not None:
            self.cost_center_id = m.get('cost_center_id')
        if m.get('cost_center_name') is not None:
            self.cost_center_name = m.get('cost_center_name')
        if m.get('cost_center_number') is not None:
            self.cost_center_number = m.get('cost_center_number')
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_id') is not None:
            self.project_id = m.get('project_id')
        if m.get('project_title') is not None:
            self.project_title = m.get('project_title')
        if m.get('thirdpart_project_id') is not None:
            self.thirdpart_project_id = m.get('thirdpart_project_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        if m.get('user_type') is not None:
            self.user_type = m.get('user_type')
        return self


class FlightOrderQueryResponseBodyModulePriceInfoList(TeaModel):
    def __init__(self, category_code=None, gmt_create=None, passenger_name=None, pay_type=None, price=None,
                 trade_id=None, type=None):
        self.category_code = category_code  # type: int
        self.gmt_create = gmt_create  # type: str
        self.passenger_name = passenger_name  # type: str
        self.pay_type = pay_type  # type: int
        self.price = price  # type: float
        self.trade_id = trade_id  # type: str
        self.type = type  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOrderQueryResponseBodyModulePriceInfoList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category_code is not None:
            result['category_code'] = self.category_code
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.passenger_name is not None:
            result['passenger_name'] = self.passenger_name
        if self.pay_type is not None:
            result['pay_type'] = self.pay_type
        if self.price is not None:
            result['price'] = self.price
        if self.trade_id is not None:
            result['trade_id'] = self.trade_id
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('category_code') is not None:
            self.category_code = m.get('category_code')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('passenger_name') is not None:
            self.passenger_name = m.get('passenger_name')
        if m.get('pay_type') is not None:
            self.pay_type = m.get('pay_type')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('trade_id') is not None:
            self.trade_id = m.get('trade_id')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class FlightOrderQueryResponseBodyModule(TeaModel):
    def __init__(self, flight_change_ticket_info_list=None, flight_info_list=None,
                 flight_refund_ticket_info_list=None, flight_ticket_info_list=None, insurance_info_list=None, invoice_info=None,
                 order_base_info=None, passenger_info_list=None, price_info_list=None):
        self.flight_change_ticket_info_list = flight_change_ticket_info_list  # type: list[FlightOrderQueryResponseBodyModuleFlightChangeTicketInfoList]
        self.flight_info_list = flight_info_list  # type: list[FlightOrderQueryResponseBodyModuleFlightInfoList]
        self.flight_refund_ticket_info_list = flight_refund_ticket_info_list  # type: list[FlightOrderQueryResponseBodyModuleFlightRefundTicketInfoList]
        self.flight_ticket_info_list = flight_ticket_info_list  # type: list[FlightOrderQueryResponseBodyModuleFlightTicketInfoList]
        self.insurance_info_list = insurance_info_list  # type: list[FlightOrderQueryResponseBodyModuleInsuranceInfoList]
        self.invoice_info = invoice_info  # type: FlightOrderQueryResponseBodyModuleInvoiceInfo
        self.order_base_info = order_base_info  # type: FlightOrderQueryResponseBodyModuleOrderBaseInfo
        self.passenger_info_list = passenger_info_list  # type: list[FlightOrderQueryResponseBodyModulePassengerInfoList]
        self.price_info_list = price_info_list  # type: list[FlightOrderQueryResponseBodyModulePriceInfoList]

    def validate(self):
        if self.flight_change_ticket_info_list:
            for k in self.flight_change_ticket_info_list:
                if k:
                    k.validate()
        if self.flight_info_list:
            for k in self.flight_info_list:
                if k:
                    k.validate()
        if self.flight_refund_ticket_info_list:
            for k in self.flight_refund_ticket_info_list:
                if k:
                    k.validate()
        if self.flight_ticket_info_list:
            for k in self.flight_ticket_info_list:
                if k:
                    k.validate()
        if self.insurance_info_list:
            for k in self.insurance_info_list:
                if k:
                    k.validate()
        if self.invoice_info:
            self.invoice_info.validate()
        if self.order_base_info:
            self.order_base_info.validate()
        if self.passenger_info_list:
            for k in self.passenger_info_list:
                if k:
                    k.validate()
        if self.price_info_list:
            for k in self.price_info_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightOrderQueryResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['flight_change_ticket_info_list'] = []
        if self.flight_change_ticket_info_list is not None:
            for k in self.flight_change_ticket_info_list:
                result['flight_change_ticket_info_list'].append(k.to_map() if k else None)
        result['flight_info_list'] = []
        if self.flight_info_list is not None:
            for k in self.flight_info_list:
                result['flight_info_list'].append(k.to_map() if k else None)
        result['flight_refund_ticket_info_list'] = []
        if self.flight_refund_ticket_info_list is not None:
            for k in self.flight_refund_ticket_info_list:
                result['flight_refund_ticket_info_list'].append(k.to_map() if k else None)
        result['flight_ticket_info_list'] = []
        if self.flight_ticket_info_list is not None:
            for k in self.flight_ticket_info_list:
                result['flight_ticket_info_list'].append(k.to_map() if k else None)
        result['insurance_info_list'] = []
        if self.insurance_info_list is not None:
            for k in self.insurance_info_list:
                result['insurance_info_list'].append(k.to_map() if k else None)
        if self.invoice_info is not None:
            result['invoice_info'] = self.invoice_info.to_map()
        if self.order_base_info is not None:
            result['order_base_info'] = self.order_base_info.to_map()
        result['passenger_info_list'] = []
        if self.passenger_info_list is not None:
            for k in self.passenger_info_list:
                result['passenger_info_list'].append(k.to_map() if k else None)
        result['price_info_list'] = []
        if self.price_info_list is not None:
            for k in self.price_info_list:
                result['price_info_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.flight_change_ticket_info_list = []
        if m.get('flight_change_ticket_info_list') is not None:
            for k in m.get('flight_change_ticket_info_list'):
                temp_model = FlightOrderQueryResponseBodyModuleFlightChangeTicketInfoList()
                self.flight_change_ticket_info_list.append(temp_model.from_map(k))
        self.flight_info_list = []
        if m.get('flight_info_list') is not None:
            for k in m.get('flight_info_list'):
                temp_model = FlightOrderQueryResponseBodyModuleFlightInfoList()
                self.flight_info_list.append(temp_model.from_map(k))
        self.flight_refund_ticket_info_list = []
        if m.get('flight_refund_ticket_info_list') is not None:
            for k in m.get('flight_refund_ticket_info_list'):
                temp_model = FlightOrderQueryResponseBodyModuleFlightRefundTicketInfoList()
                self.flight_refund_ticket_info_list.append(temp_model.from_map(k))
        self.flight_ticket_info_list = []
        if m.get('flight_ticket_info_list') is not None:
            for k in m.get('flight_ticket_info_list'):
                temp_model = FlightOrderQueryResponseBodyModuleFlightTicketInfoList()
                self.flight_ticket_info_list.append(temp_model.from_map(k))
        self.insurance_info_list = []
        if m.get('insurance_info_list') is not None:
            for k in m.get('insurance_info_list'):
                temp_model = FlightOrderQueryResponseBodyModuleInsuranceInfoList()
                self.insurance_info_list.append(temp_model.from_map(k))
        if m.get('invoice_info') is not None:
            temp_model = FlightOrderQueryResponseBodyModuleInvoiceInfo()
            self.invoice_info = temp_model.from_map(m['invoice_info'])
        if m.get('order_base_info') is not None:
            temp_model = FlightOrderQueryResponseBodyModuleOrderBaseInfo()
            self.order_base_info = temp_model.from_map(m['order_base_info'])
        self.passenger_info_list = []
        if m.get('passenger_info_list') is not None:
            for k in m.get('passenger_info_list'):
                temp_model = FlightOrderQueryResponseBodyModulePassengerInfoList()
                self.passenger_info_list.append(temp_model.from_map(k))
        self.price_info_list = []
        if m.get('price_info_list') is not None:
            for k in m.get('price_info_list'):
                temp_model = FlightOrderQueryResponseBodyModulePriceInfoList()
                self.price_info_list.append(temp_model.from_map(k))
        return self


class FlightOrderQueryResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: FlightOrderQueryResponseBodyModule
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(FlightOrderQueryResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = FlightOrderQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightOrderQueryResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: FlightOrderQueryResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(FlightOrderQueryResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightOrderQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightOtaItemDetailHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOtaItemDetailHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class FlightOtaItemDetailRequest(TeaModel):
    def __init__(self, isv_name=None, ota_item_id=None):
        self.isv_name = isv_name  # type: str
        self.ota_item_id = ota_item_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOtaItemDetailRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.ota_item_id is not None:
            result['ota_item_id'] = self.ota_item_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('ota_item_id') is not None:
            self.ota_item_id = m.get('ota_item_id')
        return self


class FlightOtaItemDetailResponseBodyModuleBaggageRuleBaggageSubItemsBaggageSubContentVisualizesDescription(TeaModel):
    def __init__(self, desc=None, icon=None, image=None, title=None):
        self.desc = desc  # type: str
        self.icon = icon  # type: str
        self.image = image  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOtaItemDetailResponseBodyModuleBaggageRuleBaggageSubItemsBaggageSubContentVisualizesDescription, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.desc is not None:
            result['desc'] = self.desc
        if self.icon is not None:
            result['icon'] = self.icon
        if self.image is not None:
            result['image'] = self.image
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('desc') is not None:
            self.desc = m.get('desc')
        if m.get('icon') is not None:
            self.icon = m.get('icon')
        if m.get('image') is not None:
            self.image = m.get('image')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightOtaItemDetailResponseBodyModuleBaggageRuleBaggageSubItemsBaggageSubContentVisualizesImageDO(TeaModel):
    def __init__(self, image=None, largest=None, middle=None, smallest=None):
        self.image = image  # type: str
        self.largest = largest  # type: str
        self.middle = middle  # type: str
        self.smallest = smallest  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOtaItemDetailResponseBodyModuleBaggageRuleBaggageSubItemsBaggageSubContentVisualizesImageDO, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.image is not None:
            result['image'] = self.image
        if self.largest is not None:
            result['largest'] = self.largest
        if self.middle is not None:
            result['middle'] = self.middle
        if self.smallest is not None:
            result['smallest'] = self.smallest
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('image') is not None:
            self.image = m.get('image')
        if m.get('largest') is not None:
            self.largest = m.get('largest')
        if m.get('middle') is not None:
            self.middle = m.get('middle')
        if m.get('smallest') is not None:
            self.smallest = m.get('smallest')
        return self


class FlightOtaItemDetailResponseBodyModuleBaggageRuleBaggageSubItemsBaggageSubContentVisualizes(TeaModel):
    def __init__(self, baggage_desc=None, baggage_sub_content_type=None, description=None, image_do=None,
                 is_highlight=None, sub_title=None):
        # baggage_desc
        self.baggage_desc = baggage_desc  # type: list[str]
        self.baggage_sub_content_type = baggage_sub_content_type  # type: int
        self.description = description  # type: FlightOtaItemDetailResponseBodyModuleBaggageRuleBaggageSubItemsBaggageSubContentVisualizesDescription
        self.image_do = image_do  # type: FlightOtaItemDetailResponseBodyModuleBaggageRuleBaggageSubItemsBaggageSubContentVisualizesImageDO
        self.is_highlight = is_highlight  # type: bool
        self.sub_title = sub_title  # type: str

    def validate(self):
        if self.description:
            self.description.validate()
        if self.image_do:
            self.image_do.validate()

    def to_map(self):
        _map = super(FlightOtaItemDetailResponseBodyModuleBaggageRuleBaggageSubItemsBaggageSubContentVisualizes, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.baggage_desc is not None:
            result['baggage_desc'] = self.baggage_desc
        if self.baggage_sub_content_type is not None:
            result['baggage_sub_content_type'] = self.baggage_sub_content_type
        if self.description is not None:
            result['description'] = self.description.to_map()
        if self.image_do is not None:
            result['image_d_o'] = self.image_do.to_map()
        if self.is_highlight is not None:
            result['is_highlight'] = self.is_highlight
        if self.sub_title is not None:
            result['sub_title'] = self.sub_title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('baggage_desc') is not None:
            self.baggage_desc = m.get('baggage_desc')
        if m.get('baggage_sub_content_type') is not None:
            self.baggage_sub_content_type = m.get('baggage_sub_content_type')
        if m.get('description') is not None:
            temp_model = FlightOtaItemDetailResponseBodyModuleBaggageRuleBaggageSubItemsBaggageSubContentVisualizesDescription()
            self.description = temp_model.from_map(m['description'])
        if m.get('image_d_o') is not None:
            temp_model = FlightOtaItemDetailResponseBodyModuleBaggageRuleBaggageSubItemsBaggageSubContentVisualizesImageDO()
            self.image_do = temp_model.from_map(m['image_d_o'])
        if m.get('is_highlight') is not None:
            self.is_highlight = m.get('is_highlight')
        if m.get('sub_title') is not None:
            self.sub_title = m.get('sub_title')
        return self


class FlightOtaItemDetailResponseBodyModuleBaggageRuleBaggageSubItems(TeaModel):
    def __init__(self, baggage_sub_content_visualizes=None, extra_content_visualizes=None, is_struct=None,
                 ptc=None, title=None):
        self.baggage_sub_content_visualizes = baggage_sub_content_visualizes  # type: list[FlightOtaItemDetailResponseBodyModuleBaggageRuleBaggageSubItemsBaggageSubContentVisualizes]
        self.extra_content_visualizes = extra_content_visualizes  # type: list[any]
        self.is_struct = is_struct  # type: bool
        self.ptc = ptc  # type: str
        self.title = title  # type: str

    def validate(self):
        if self.baggage_sub_content_visualizes:
            for k in self.baggage_sub_content_visualizes:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightOtaItemDetailResponseBodyModuleBaggageRuleBaggageSubItems, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['baggage_sub_content_visualizes'] = []
        if self.baggage_sub_content_visualizes is not None:
            for k in self.baggage_sub_content_visualizes:
                result['baggage_sub_content_visualizes'].append(k.to_map() if k else None)
        if self.extra_content_visualizes is not None:
            result['extra_content_visualizes'] = self.extra_content_visualizes
        if self.is_struct is not None:
            result['is_struct'] = self.is_struct
        if self.ptc is not None:
            result['ptc'] = self.ptc
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.baggage_sub_content_visualizes = []
        if m.get('baggage_sub_content_visualizes') is not None:
            for k in m.get('baggage_sub_content_visualizes'):
                temp_model = FlightOtaItemDetailResponseBodyModuleBaggageRuleBaggageSubItemsBaggageSubContentVisualizes()
                self.baggage_sub_content_visualizes.append(temp_model.from_map(k))
        if m.get('extra_content_visualizes') is not None:
            self.extra_content_visualizes = m.get('extra_content_visualizes')
        if m.get('is_struct') is not None:
            self.is_struct = m.get('is_struct')
        if m.get('ptc') is not None:
            self.ptc = m.get('ptc')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightOtaItemDetailResponseBodyModuleBaggageRuleTips(TeaModel):
    def __init__(self, logo=None, tips_desc=None, tips_image=None):
        self.logo = logo  # type: str
        self.tips_desc = tips_desc  # type: str
        self.tips_image = tips_image  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOtaItemDetailResponseBodyModuleBaggageRuleTips, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.logo is not None:
            result['logo'] = self.logo
        if self.tips_desc is not None:
            result['tips_desc'] = self.tips_desc
        if self.tips_image is not None:
            result['tips_image'] = self.tips_image
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('logo') is not None:
            self.logo = m.get('logo')
        if m.get('tips_desc') is not None:
            self.tips_desc = m.get('tips_desc')
        if m.get('tips_image') is not None:
            self.tips_image = m.get('tips_image')
        return self


class FlightOtaItemDetailResponseBodyModuleBaggageRule(TeaModel):
    def __init__(self, baggage_sub_items=None, index=None, table_head=None, tips=None, title=None, type=None):
        self.baggage_sub_items = baggage_sub_items  # type: list[FlightOtaItemDetailResponseBodyModuleBaggageRuleBaggageSubItems]
        self.index = index  # type: int
        self.table_head = table_head  # type: str
        self.tips = tips  # type: FlightOtaItemDetailResponseBodyModuleBaggageRuleTips
        self.title = title  # type: str
        self.type = type  # type: int

    def validate(self):
        if self.baggage_sub_items:
            for k in self.baggage_sub_items:
                if k:
                    k.validate()
        if self.tips:
            self.tips.validate()

    def to_map(self):
        _map = super(FlightOtaItemDetailResponseBodyModuleBaggageRule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['baggage_sub_items'] = []
        if self.baggage_sub_items is not None:
            for k in self.baggage_sub_items:
                result['baggage_sub_items'].append(k.to_map() if k else None)
        if self.index is not None:
            result['index'] = self.index
        if self.table_head is not None:
            result['table_head'] = self.table_head
        if self.tips is not None:
            result['tips'] = self.tips.to_map()
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.baggage_sub_items = []
        if m.get('baggage_sub_items') is not None:
            for k in m.get('baggage_sub_items'):
                temp_model = FlightOtaItemDetailResponseBodyModuleBaggageRuleBaggageSubItems()
                self.baggage_sub_items.append(temp_model.from_map(k))
        if m.get('index') is not None:
            self.index = m.get('index')
        if m.get('table_head') is not None:
            self.table_head = m.get('table_head')
        if m.get('tips') is not None:
            temp_model = FlightOtaItemDetailResponseBodyModuleBaggageRuleTips()
            self.tips = temp_model.from_map(m['tips'])
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class FlightOtaItemDetailResponseBodyModuleChangeRuleExtraContents(TeaModel):
    def __init__(self, content=None, title=None):
        self.content = content  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOtaItemDetailResponseBodyModuleChangeRuleExtraContents, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightOtaItemDetailResponseBodyModuleChangeRuleRefundSubItemsRefundSubContents(TeaModel):
    def __init__(self, fee_desc=None, fee_range=None, style=None):
        self.fee_desc = fee_desc  # type: str
        self.fee_range = fee_range  # type: str
        self.style = style  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOtaItemDetailResponseBodyModuleChangeRuleRefundSubItemsRefundSubContents, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.fee_desc is not None:
            result['fee_desc'] = self.fee_desc
        if self.fee_range is not None:
            result['fee_range'] = self.fee_range
        if self.style is not None:
            result['style'] = self.style
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('fee_desc') is not None:
            self.fee_desc = m.get('fee_desc')
        if m.get('fee_range') is not None:
            self.fee_range = m.get('fee_range')
        if m.get('style') is not None:
            self.style = m.get('style')
        return self


class FlightOtaItemDetailResponseBodyModuleChangeRuleRefundSubItems(TeaModel):
    def __init__(self, is_struct=None, ptc=None, refund_sub_contents=None, title=None):
        self.is_struct = is_struct  # type: bool
        self.ptc = ptc  # type: str
        self.refund_sub_contents = refund_sub_contents  # type: list[FlightOtaItemDetailResponseBodyModuleChangeRuleRefundSubItemsRefundSubContents]
        self.title = title  # type: str

    def validate(self):
        if self.refund_sub_contents:
            for k in self.refund_sub_contents:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightOtaItemDetailResponseBodyModuleChangeRuleRefundSubItems, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.is_struct is not None:
            result['is_struct'] = self.is_struct
        if self.ptc is not None:
            result['ptc'] = self.ptc
        result['refund_sub_contents'] = []
        if self.refund_sub_contents is not None:
            for k in self.refund_sub_contents:
                result['refund_sub_contents'].append(k.to_map() if k else None)
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('is_struct') is not None:
            self.is_struct = m.get('is_struct')
        if m.get('ptc') is not None:
            self.ptc = m.get('ptc')
        self.refund_sub_contents = []
        if m.get('refund_sub_contents') is not None:
            for k in m.get('refund_sub_contents'):
                temp_model = FlightOtaItemDetailResponseBodyModuleChangeRuleRefundSubItemsRefundSubContents()
                self.refund_sub_contents.append(temp_model.from_map(k))
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightOtaItemDetailResponseBodyModuleChangeRule(TeaModel):
    def __init__(self, extra_contents=None, flight_no=None, free_baggage=None, index=None, level=None,
                 refund_sub_items=None, sub_table_head=None, table_head=None, title=None, type=None):
        self.extra_contents = extra_contents  # type: list[FlightOtaItemDetailResponseBodyModuleChangeRuleExtraContents]
        self.flight_no = flight_no  # type: str
        self.free_baggage = free_baggage  # type: int
        self.index = index  # type: int
        self.level = level  # type: int
        self.refund_sub_items = refund_sub_items  # type: list[FlightOtaItemDetailResponseBodyModuleChangeRuleRefundSubItems]
        # subTableHead
        self.sub_table_head = sub_table_head  # type: list[str]
        self.table_head = table_head  # type: str
        self.title = title  # type: str
        self.type = type  # type: int

    def validate(self):
        if self.extra_contents:
            for k in self.extra_contents:
                if k:
                    k.validate()
        if self.refund_sub_items:
            for k in self.refund_sub_items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightOtaItemDetailResponseBodyModuleChangeRule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['extra_contents'] = []
        if self.extra_contents is not None:
            for k in self.extra_contents:
                result['extra_contents'].append(k.to_map() if k else None)
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        if self.free_baggage is not None:
            result['free_baggage'] = self.free_baggage
        if self.index is not None:
            result['index'] = self.index
        if self.level is not None:
            result['level'] = self.level
        result['refund_sub_items'] = []
        if self.refund_sub_items is not None:
            for k in self.refund_sub_items:
                result['refund_sub_items'].append(k.to_map() if k else None)
        if self.sub_table_head is not None:
            result['sub_table_head'] = self.sub_table_head
        if self.table_head is not None:
            result['table_head'] = self.table_head
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.extra_contents = []
        if m.get('extra_contents') is not None:
            for k in m.get('extra_contents'):
                temp_model = FlightOtaItemDetailResponseBodyModuleChangeRuleExtraContents()
                self.extra_contents.append(temp_model.from_map(k))
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        if m.get('free_baggage') is not None:
            self.free_baggage = m.get('free_baggage')
        if m.get('index') is not None:
            self.index = m.get('index')
        if m.get('level') is not None:
            self.level = m.get('level')
        self.refund_sub_items = []
        if m.get('refund_sub_items') is not None:
            for k in m.get('refund_sub_items'):
                temp_model = FlightOtaItemDetailResponseBodyModuleChangeRuleRefundSubItems()
                self.refund_sub_items.append(temp_model.from_map(k))
        if m.get('sub_table_head') is not None:
            self.sub_table_head = m.get('sub_table_head')
        if m.get('table_head') is not None:
            self.table_head = m.get('table_head')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class FlightOtaItemDetailResponseBodyModuleRefundRuleExtraContents(TeaModel):
    def __init__(self, content=None, title=None):
        self.content = content  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOtaItemDetailResponseBodyModuleRefundRuleExtraContents, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightOtaItemDetailResponseBodyModuleRefundRuleRefundSubItemsRefundSubContents(TeaModel):
    def __init__(self, fee_desc=None, fee_range=None, style=None):
        self.fee_desc = fee_desc  # type: str
        self.fee_range = fee_range  # type: str
        self.style = style  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOtaItemDetailResponseBodyModuleRefundRuleRefundSubItemsRefundSubContents, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.fee_desc is not None:
            result['fee_desc'] = self.fee_desc
        if self.fee_range is not None:
            result['fee_range'] = self.fee_range
        if self.style is not None:
            result['style'] = self.style
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('fee_desc') is not None:
            self.fee_desc = m.get('fee_desc')
        if m.get('fee_range') is not None:
            self.fee_range = m.get('fee_range')
        if m.get('style') is not None:
            self.style = m.get('style')
        return self


class FlightOtaItemDetailResponseBodyModuleRefundRuleRefundSubItems(TeaModel):
    def __init__(self, is_struct=None, ptc=None, refund_sub_contents=None, title=None):
        self.is_struct = is_struct  # type: bool
        self.ptc = ptc  # type: str
        self.refund_sub_contents = refund_sub_contents  # type: list[FlightOtaItemDetailResponseBodyModuleRefundRuleRefundSubItemsRefundSubContents]
        self.title = title  # type: str

    def validate(self):
        if self.refund_sub_contents:
            for k in self.refund_sub_contents:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightOtaItemDetailResponseBodyModuleRefundRuleRefundSubItems, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.is_struct is not None:
            result['is_struct'] = self.is_struct
        if self.ptc is not None:
            result['ptc'] = self.ptc
        result['refund_sub_contents'] = []
        if self.refund_sub_contents is not None:
            for k in self.refund_sub_contents:
                result['refund_sub_contents'].append(k.to_map() if k else None)
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('is_struct') is not None:
            self.is_struct = m.get('is_struct')
        if m.get('ptc') is not None:
            self.ptc = m.get('ptc')
        self.refund_sub_contents = []
        if m.get('refund_sub_contents') is not None:
            for k in m.get('refund_sub_contents'):
                temp_model = FlightOtaItemDetailResponseBodyModuleRefundRuleRefundSubItemsRefundSubContents()
                self.refund_sub_contents.append(temp_model.from_map(k))
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightOtaItemDetailResponseBodyModuleRefundRule(TeaModel):
    def __init__(self, extra_contents=None, flight_no=None, free_baggage=None, index=None, level=None,
                 refund_sub_items=None, sub_table_head=None, table_head=None, title=None, type=None):
        self.extra_contents = extra_contents  # type: list[FlightOtaItemDetailResponseBodyModuleRefundRuleExtraContents]
        self.flight_no = flight_no  # type: str
        self.free_baggage = free_baggage  # type: int
        self.index = index  # type: int
        self.level = level  # type: int
        self.refund_sub_items = refund_sub_items  # type: list[FlightOtaItemDetailResponseBodyModuleRefundRuleRefundSubItems]
        # subTableHead
        self.sub_table_head = sub_table_head  # type: list[str]
        self.table_head = table_head  # type: str
        self.title = title  # type: str
        self.type = type  # type: int

    def validate(self):
        if self.extra_contents:
            for k in self.extra_contents:
                if k:
                    k.validate()
        if self.refund_sub_items:
            for k in self.refund_sub_items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightOtaItemDetailResponseBodyModuleRefundRule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['extra_contents'] = []
        if self.extra_contents is not None:
            for k in self.extra_contents:
                result['extra_contents'].append(k.to_map() if k else None)
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        if self.free_baggage is not None:
            result['free_baggage'] = self.free_baggage
        if self.index is not None:
            result['index'] = self.index
        if self.level is not None:
            result['level'] = self.level
        result['refund_sub_items'] = []
        if self.refund_sub_items is not None:
            for k in self.refund_sub_items:
                result['refund_sub_items'].append(k.to_map() if k else None)
        if self.sub_table_head is not None:
            result['sub_table_head'] = self.sub_table_head
        if self.table_head is not None:
            result['table_head'] = self.table_head
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.extra_contents = []
        if m.get('extra_contents') is not None:
            for k in m.get('extra_contents'):
                temp_model = FlightOtaItemDetailResponseBodyModuleRefundRuleExtraContents()
                self.extra_contents.append(temp_model.from_map(k))
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        if m.get('free_baggage') is not None:
            self.free_baggage = m.get('free_baggage')
        if m.get('index') is not None:
            self.index = m.get('index')
        if m.get('level') is not None:
            self.level = m.get('level')
        self.refund_sub_items = []
        if m.get('refund_sub_items') is not None:
            for k in m.get('refund_sub_items'):
                temp_model = FlightOtaItemDetailResponseBodyModuleRefundRuleRefundSubItems()
                self.refund_sub_items.append(temp_model.from_map(k))
        if m.get('sub_table_head') is not None:
            self.sub_table_head = m.get('sub_table_head')
        if m.get('table_head') is not None:
            self.table_head = m.get('table_head')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class FlightOtaItemDetailResponseBodyModule(TeaModel):
    def __init__(self, baggage_rule=None, change_rule=None, refund_rule=None, sell_price=None, sell_price_list=None,
                 trip_type=None):
        self.baggage_rule = baggage_rule  # type: list[FlightOtaItemDetailResponseBodyModuleBaggageRule]
        self.change_rule = change_rule  # type: list[FlightOtaItemDetailResponseBodyModuleChangeRule]
        self.refund_rule = refund_rule  # type: list[FlightOtaItemDetailResponseBodyModuleRefundRule]
        self.sell_price = sell_price  # type: int
        self.sell_price_list = sell_price_list  # type: list[int]
        self.trip_type = trip_type  # type: int

    def validate(self):
        if self.baggage_rule:
            for k in self.baggage_rule:
                if k:
                    k.validate()
        if self.change_rule:
            for k in self.change_rule:
                if k:
                    k.validate()
        if self.refund_rule:
            for k in self.refund_rule:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightOtaItemDetailResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['baggage_rule'] = []
        if self.baggage_rule is not None:
            for k in self.baggage_rule:
                result['baggage_rule'].append(k.to_map() if k else None)
        result['change_rule'] = []
        if self.change_rule is not None:
            for k in self.change_rule:
                result['change_rule'].append(k.to_map() if k else None)
        result['refund_rule'] = []
        if self.refund_rule is not None:
            for k in self.refund_rule:
                result['refund_rule'].append(k.to_map() if k else None)
        if self.sell_price is not None:
            result['sell_price'] = self.sell_price
        if self.sell_price_list is not None:
            result['sell_price_list'] = self.sell_price_list
        if self.trip_type is not None:
            result['trip_type'] = self.trip_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.baggage_rule = []
        if m.get('baggage_rule') is not None:
            for k in m.get('baggage_rule'):
                temp_model = FlightOtaItemDetailResponseBodyModuleBaggageRule()
                self.baggage_rule.append(temp_model.from_map(k))
        self.change_rule = []
        if m.get('change_rule') is not None:
            for k in m.get('change_rule'):
                temp_model = FlightOtaItemDetailResponseBodyModuleChangeRule()
                self.change_rule.append(temp_model.from_map(k))
        self.refund_rule = []
        if m.get('refund_rule') is not None:
            for k in m.get('refund_rule'):
                temp_model = FlightOtaItemDetailResponseBodyModuleRefundRule()
                self.refund_rule.append(temp_model.from_map(k))
        if m.get('sell_price') is not None:
            self.sell_price = m.get('sell_price')
        if m.get('sell_price_list') is not None:
            self.sell_price_list = m.get('sell_price_list')
        if m.get('trip_type') is not None:
            self.trip_type = m.get('trip_type')
        return self


class FlightOtaItemDetailResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        # module
        self.module = module  # type: FlightOtaItemDetailResponseBodyModule
        # requestId
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        # traceId
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(FlightOtaItemDetailResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = FlightOtaItemDetailResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightOtaItemDetailResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: FlightOtaItemDetailResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(FlightOtaItemDetailResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightOtaItemDetailResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightOtaSearchHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOtaSearchHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class FlightOtaSearchRequest(TeaModel):
    def __init__(self, airline_code=None, arr_city_code=None, cabin_class=None, carrier_flight_no=None,
                 dep_city_code=None, dep_date=None, flight_no=None):
        self.airline_code = airline_code  # type: str
        self.arr_city_code = arr_city_code  # type: str
        self.cabin_class = cabin_class  # type: str
        self.carrier_flight_no = carrier_flight_no  # type: str
        self.dep_city_code = dep_city_code  # type: str
        self.dep_date = dep_date  # type: str
        self.flight_no = flight_no  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOtaSearchRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.carrier_flight_no is not None:
            result['carrier_flight_no'] = self.carrier_flight_no
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('carrier_flight_no') is not None:
            self.carrier_flight_no = m.get('carrier_flight_no')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        return self


class FlightOtaSearchResponseBodyModuleFlightListAirlineInfo(TeaModel):
    def __init__(self, airline_code=None, airline_name=None, airline_simple_name=None):
        self.airline_code = airline_code  # type: str
        self.airline_name = airline_name  # type: str
        self.airline_simple_name = airline_simple_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOtaSearchResponseBodyModuleFlightListAirlineInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.airline_name is not None:
            result['airline_name'] = self.airline_name
        if self.airline_simple_name is not None:
            result['airline_simple_name'] = self.airline_simple_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('airline_name') is not None:
            self.airline_name = m.get('airline_name')
        if m.get('airline_simple_name') is not None:
            self.airline_simple_name = m.get('airline_simple_name')
        return self


class FlightOtaSearchResponseBodyModuleFlightListArrAirportInfo(TeaModel):
    def __init__(self, airport_code=None, airport_name=None, city_code=None, city_name=None, terminal=None):
        self.airport_code = airport_code  # type: str
        self.airport_name = airport_name  # type: str
        self.city_code = city_code  # type: str
        self.city_name = city_name  # type: str
        self.terminal = terminal  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOtaSearchResponseBodyModuleFlightListArrAirportInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airport_code is not None:
            result['airport_code'] = self.airport_code
        if self.airport_name is not None:
            result['airport_name'] = self.airport_name
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.terminal is not None:
            result['terminal'] = self.terminal
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('airport_code') is not None:
            self.airport_code = m.get('airport_code')
        if m.get('airport_name') is not None:
            self.airport_name = m.get('airport_name')
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('terminal') is not None:
            self.terminal = m.get('terminal')
        return self


class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription(TeaModel):
    def __init__(self, desc=None, icon=None, image=None, title=None):
        self.desc = desc  # type: str
        self.icon = icon  # type: str
        self.image = image  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.desc is not None:
            result['desc'] = self.desc
        if self.icon is not None:
            result['icon'] = self.icon
        if self.image is not None:
            result['image'] = self.image
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('desc') is not None:
            self.desc = m.get('desc')
        if m.get('icon') is not None:
            self.icon = m.get('icon')
        if m.get('image') is not None:
            self.image = m.get('image')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO(TeaModel):
    def __init__(self, image=None, largest=None, middle=None, smallest=None):
        self.image = image  # type: str
        self.largest = largest  # type: str
        self.middle = middle  # type: str
        self.smallest = smallest  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.image is not None:
            result['image'] = self.image
        if self.largest is not None:
            result['largest'] = self.largest
        if self.middle is not None:
            result['middle'] = self.middle
        if self.smallest is not None:
            result['smallest'] = self.smallest
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('image') is not None:
            self.image = m.get('image')
        if m.get('largest') is not None:
            self.largest = m.get('largest')
        if m.get('middle') is not None:
            self.middle = m.get('middle')
        if m.get('smallest') is not None:
            self.smallest = m.get('smallest')
        return self


class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes(TeaModel):
    def __init__(self, baggage_desc=None, baggage_sub_content_type=None, description=None, image_do=None,
                 is_highlight=None, sub_title=None):
        self.baggage_desc = baggage_desc  # type: list[str]
        self.baggage_sub_content_type = baggage_sub_content_type  # type: int
        self.description = description  # type: FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription
        self.image_do = image_do  # type: FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO
        self.is_highlight = is_highlight  # type: bool
        self.sub_title = sub_title  # type: str

    def validate(self):
        if self.description:
            self.description.validate()
        if self.image_do:
            self.image_do.validate()

    def to_map(self):
        _map = super(FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.baggage_desc is not None:
            result['baggage_desc'] = self.baggage_desc
        if self.baggage_sub_content_type is not None:
            result['baggage_sub_content_type'] = self.baggage_sub_content_type
        if self.description is not None:
            result['description'] = self.description.to_map()
        if self.image_do is not None:
            result['image_d_o'] = self.image_do.to_map()
        if self.is_highlight is not None:
            result['is_highlight'] = self.is_highlight
        if self.sub_title is not None:
            result['sub_title'] = self.sub_title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('baggage_desc') is not None:
            self.baggage_desc = m.get('baggage_desc')
        if m.get('baggage_sub_content_type') is not None:
            self.baggage_sub_content_type = m.get('baggage_sub_content_type')
        if m.get('description') is not None:
            temp_model = FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription()
            self.description = temp_model.from_map(m['description'])
        if m.get('image_d_o') is not None:
            temp_model = FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO()
            self.image_do = temp_model.from_map(m['image_d_o'])
        if m.get('is_highlight') is not None:
            self.is_highlight = m.get('is_highlight')
        if m.get('sub_title') is not None:
            self.sub_title = m.get('sub_title')
        return self


class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItems(TeaModel):
    def __init__(self, baggage_sub_content_visualizes=None, extra_content_visualizes=None, is_struct=None,
                 ptc=None, title=None):
        self.baggage_sub_content_visualizes = baggage_sub_content_visualizes  # type: list[FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes]
        self.extra_content_visualizes = extra_content_visualizes  # type: list[any]
        self.is_struct = is_struct  # type: bool
        # PTC
        self.ptc = ptc  # type: str
        self.title = title  # type: str

    def validate(self):
        if self.baggage_sub_content_visualizes:
            for k in self.baggage_sub_content_visualizes:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItems, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['baggage_sub_content_visualizes'] = []
        if self.baggage_sub_content_visualizes is not None:
            for k in self.baggage_sub_content_visualizes:
                result['baggage_sub_content_visualizes'].append(k.to_map() if k else None)
        if self.extra_content_visualizes is not None:
            result['extra_content_visualizes'] = self.extra_content_visualizes
        if self.is_struct is not None:
            result['is_struct'] = self.is_struct
        if self.ptc is not None:
            result['ptc'] = self.ptc
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.baggage_sub_content_visualizes = []
        if m.get('baggage_sub_content_visualizes') is not None:
            for k in m.get('baggage_sub_content_visualizes'):
                temp_model = FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes()
                self.baggage_sub_content_visualizes.append(temp_model.from_map(k))
        if m.get('extra_content_visualizes') is not None:
            self.extra_content_visualizes = m.get('extra_content_visualizes')
        if m.get('is_struct') is not None:
            self.is_struct = m.get('is_struct')
        if m.get('ptc') is not None:
            self.ptc = m.get('ptc')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemTips(TeaModel):
    def __init__(self, logo=None, tips_desc=None, tips_image=None):
        self.logo = logo  # type: str
        self.tips_desc = tips_desc  # type: str
        self.tips_image = tips_image  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemTips, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.logo is not None:
            result['logo'] = self.logo
        if self.tips_desc is not None:
            result['tips_desc'] = self.tips_desc
        if self.tips_image is not None:
            result['tips_image'] = self.tips_image
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('logo') is not None:
            self.logo = m.get('logo')
        if m.get('tips_desc') is not None:
            self.tips_desc = m.get('tips_desc')
        if m.get('tips_image') is not None:
            self.tips_image = m.get('tips_image')
        return self


class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItem(TeaModel):
    def __init__(self, baggage_sub_items=None, index=None, table_head=None, tips=None, title=None, type=None):
        self.baggage_sub_items = baggage_sub_items  # type: list[FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItems]
        self.index = index  # type: int
        self.table_head = table_head  # type: str
        self.tips = tips  # type: FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemTips
        self.title = title  # type: str
        self.type = type  # type: int

    def validate(self):
        if self.baggage_sub_items:
            for k in self.baggage_sub_items:
                if k:
                    k.validate()
        if self.tips:
            self.tips.validate()

    def to_map(self):
        _map = super(FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItem, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['baggage_sub_items'] = []
        if self.baggage_sub_items is not None:
            for k in self.baggage_sub_items:
                result['baggage_sub_items'].append(k.to_map() if k else None)
        if self.index is not None:
            result['index'] = self.index
        if self.table_head is not None:
            result['table_head'] = self.table_head
        if self.tips is not None:
            result['tips'] = self.tips.to_map()
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.baggage_sub_items = []
        if m.get('baggage_sub_items') is not None:
            for k in m.get('baggage_sub_items'):
                temp_model = FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItems()
                self.baggage_sub_items.append(temp_model.from_map(k))
        if m.get('index') is not None:
            self.index = m.get('index')
        if m.get('table_head') is not None:
            self.table_head = m.get('table_head')
        if m.get('tips') is not None:
            temp_model = FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemTips()
            self.tips = temp_model.from_map(m['tips'])
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleInfo(TeaModel):
    def __init__(self, content=None, cost=None, cost_percent=None, time_stamp=None, time_type=None, title=None):
        self.content = content  # type: str
        self.cost = cost  # type: int
        self.cost_percent = cost_percent  # type: int
        self.time_stamp = time_stamp  # type: int
        self.time_type = time_type  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.cost is not None:
            result['cost'] = self.cost
        if self.cost_percent is not None:
            result['cost_percent'] = self.cost_percent
        if self.time_stamp is not None:
            result['time_stamp'] = self.time_stamp
        if self.time_type is not None:
            result['time_type'] = self.time_type
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('cost_percent') is not None:
            self.cost_percent = m.get('cost_percent')
        if m.get('time_stamp') is not None:
            self.time_stamp = m.get('time_stamp')
        if m.get('time_type') is not None:
            self.time_type = m.get('time_type')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRule(TeaModel):
    def __init__(self, able=None, info=None):
        self.able = able  # type: bool
        self.info = info  # type: list[FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleInfo]

    def validate(self):
        if self.info:
            for k in self.info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.able is not None:
            result['able'] = self.able
        result['info'] = []
        if self.info is not None:
            for k in self.info:
                result['info'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('able') is not None:
            self.able = m.get('able')
        self.info = []
        if m.get('info') is not None:
            for k in m.get('info'):
                temp_model = FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleInfo()
                self.info.append(temp_model.from_map(k))
        return self


class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemExtraContents(TeaModel):
    def __init__(self, content=None, title=None):
        self.content = content  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemExtraContents, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents(TeaModel):
    def __init__(self, fee_desc=None, fee_range=None, style=None):
        self.fee_desc = fee_desc  # type: str
        self.fee_range = fee_range  # type: str
        self.style = style  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.fee_desc is not None:
            result['fee_desc'] = self.fee_desc
        if self.fee_range is not None:
            result['fee_range'] = self.fee_range
        if self.style is not None:
            result['style'] = self.style
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('fee_desc') is not None:
            self.fee_desc = m.get('fee_desc')
        if m.get('fee_range') is not None:
            self.fee_range = m.get('fee_range')
        if m.get('style') is not None:
            self.style = m.get('style')
        return self


class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItems(TeaModel):
    def __init__(self, is_struct=None, ptc=None, refund_sub_contents=None, title=None):
        self.is_struct = is_struct  # type: bool
        # PTC
        self.ptc = ptc  # type: str
        self.refund_sub_contents = refund_sub_contents  # type: list[FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents]
        self.title = title  # type: str

    def validate(self):
        if self.refund_sub_contents:
            for k in self.refund_sub_contents:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItems, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.is_struct is not None:
            result['is_struct'] = self.is_struct
        if self.ptc is not None:
            result['ptc'] = self.ptc
        result['refund_sub_contents'] = []
        if self.refund_sub_contents is not None:
            for k in self.refund_sub_contents:
                result['refund_sub_contents'].append(k.to_map() if k else None)
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('is_struct') is not None:
            self.is_struct = m.get('is_struct')
        if m.get('ptc') is not None:
            self.ptc = m.get('ptc')
        self.refund_sub_contents = []
        if m.get('refund_sub_contents') is not None:
            for k in m.get('refund_sub_contents'):
                temp_model = FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents()
                self.refund_sub_contents.append(temp_model.from_map(k))
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItem(TeaModel):
    def __init__(self, extra_contents=None, index=None, refund_sub_items=None, sub_table_head=None, table_head=None,
                 title=None, type=None):
        self.extra_contents = extra_contents  # type: list[FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemExtraContents]
        self.index = index  # type: int
        self.refund_sub_items = refund_sub_items  # type: list[FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItems]
        self.sub_table_head = sub_table_head  # type: list[str]
        self.table_head = table_head  # type: str
        self.title = title  # type: str
        self.type = type  # type: int

    def validate(self):
        if self.extra_contents:
            for k in self.extra_contents:
                if k:
                    k.validate()
        if self.refund_sub_items:
            for k in self.refund_sub_items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItem, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['extra_contents'] = []
        if self.extra_contents is not None:
            for k in self.extra_contents:
                result['extra_contents'].append(k.to_map() if k else None)
        if self.index is not None:
            result['index'] = self.index
        result['refund_sub_items'] = []
        if self.refund_sub_items is not None:
            for k in self.refund_sub_items:
                result['refund_sub_items'].append(k.to_map() if k else None)
        if self.sub_table_head is not None:
            result['sub_table_head'] = self.sub_table_head
        if self.table_head is not None:
            result['table_head'] = self.table_head
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.extra_contents = []
        if m.get('extra_contents') is not None:
            for k in m.get('extra_contents'):
                temp_model = FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemExtraContents()
                self.extra_contents.append(temp_model.from_map(k))
        if m.get('index') is not None:
            self.index = m.get('index')
        self.refund_sub_items = []
        if m.get('refund_sub_items') is not None:
            for k in m.get('refund_sub_items'):
                temp_model = FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItems()
                self.refund_sub_items.append(temp_model.from_map(k))
        if m.get('sub_table_head') is not None:
            self.sub_table_head = m.get('sub_table_head')
        if m.get('table_head') is not None:
            self.table_head = m.get('table_head')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleInfo(TeaModel):
    def __init__(self, content=None, cost=None, cost_percent=None, time_stamp=None, time_type=None, title=None):
        self.content = content  # type: str
        self.cost = cost  # type: int
        self.cost_percent = cost_percent  # type: int
        self.time_stamp = time_stamp  # type: int
        self.time_type = time_type  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.cost is not None:
            result['cost'] = self.cost
        if self.cost_percent is not None:
            result['cost_percent'] = self.cost_percent
        if self.time_stamp is not None:
            result['time_stamp'] = self.time_stamp
        if self.time_type is not None:
            result['time_type'] = self.time_type
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('cost_percent') is not None:
            self.cost_percent = m.get('cost_percent')
        if m.get('time_stamp') is not None:
            self.time_stamp = m.get('time_stamp')
        if m.get('time_type') is not None:
            self.time_type = m.get('time_type')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRule(TeaModel):
    def __init__(self, able=None, info=None):
        self.able = able  # type: bool
        self.info = info  # type: list[FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleInfo]

    def validate(self):
        if self.info:
            for k in self.info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.able is not None:
            result['able'] = self.able
        result['info'] = []
        if self.info is not None:
            for k in self.info:
                result['info'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('able') is not None:
            self.able = m.get('able')
        self.info = []
        if m.get('info') is not None:
            for k in m.get('info'):
                temp_model = FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleInfo()
                self.info.append(temp_model.from_map(k))
        return self


class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemExtraContents(TeaModel):
    def __init__(self, content=None, title=None):
        self.content = content  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemExtraContents, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents(TeaModel):
    def __init__(self, fee_desc=None, fee_range=None, style=None):
        self.fee_desc = fee_desc  # type: str
        self.fee_range = fee_range  # type: str
        self.style = style  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.fee_desc is not None:
            result['fee_desc'] = self.fee_desc
        if self.fee_range is not None:
            result['fee_range'] = self.fee_range
        if self.style is not None:
            result['style'] = self.style
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('fee_desc') is not None:
            self.fee_desc = m.get('fee_desc')
        if m.get('fee_range') is not None:
            self.fee_range = m.get('fee_range')
        if m.get('style') is not None:
            self.style = m.get('style')
        return self


class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItems(TeaModel):
    def __init__(self, is_struct=None, ptc=None, refund_sub_contents=None, title=None):
        self.is_struct = is_struct  # type: bool
        # PTC
        self.ptc = ptc  # type: str
        self.refund_sub_contents = refund_sub_contents  # type: list[FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents]
        self.title = title  # type: str

    def validate(self):
        if self.refund_sub_contents:
            for k in self.refund_sub_contents:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItems, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.is_struct is not None:
            result['is_struct'] = self.is_struct
        if self.ptc is not None:
            result['ptc'] = self.ptc
        result['refund_sub_contents'] = []
        if self.refund_sub_contents is not None:
            for k in self.refund_sub_contents:
                result['refund_sub_contents'].append(k.to_map() if k else None)
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('is_struct') is not None:
            self.is_struct = m.get('is_struct')
        if m.get('ptc') is not None:
            self.ptc = m.get('ptc')
        self.refund_sub_contents = []
        if m.get('refund_sub_contents') is not None:
            for k in m.get('refund_sub_contents'):
                temp_model = FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents()
                self.refund_sub_contents.append(temp_model.from_map(k))
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItem(TeaModel):
    def __init__(self, extra_contents=None, index=None, refund_sub_items=None, sub_table_head=None, table_head=None,
                 title=None, type=None):
        self.extra_contents = extra_contents  # type: list[FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemExtraContents]
        self.index = index  # type: int
        self.refund_sub_items = refund_sub_items  # type: list[FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItems]
        self.sub_table_head = sub_table_head  # type: list[str]
        self.table_head = table_head  # type: str
        self.title = title  # type: str
        self.type = type  # type: int

    def validate(self):
        if self.extra_contents:
            for k in self.extra_contents:
                if k:
                    k.validate()
        if self.refund_sub_items:
            for k in self.refund_sub_items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItem, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['extra_contents'] = []
        if self.extra_contents is not None:
            for k in self.extra_contents:
                result['extra_contents'].append(k.to_map() if k else None)
        if self.index is not None:
            result['index'] = self.index
        result['refund_sub_items'] = []
        if self.refund_sub_items is not None:
            for k in self.refund_sub_items:
                result['refund_sub_items'].append(k.to_map() if k else None)
        if self.sub_table_head is not None:
            result['sub_table_head'] = self.sub_table_head
        if self.table_head is not None:
            result['table_head'] = self.table_head
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.extra_contents = []
        if m.get('extra_contents') is not None:
            for k in m.get('extra_contents'):
                temp_model = FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemExtraContents()
                self.extra_contents.append(temp_model.from_map(k))
        if m.get('index') is not None:
            self.index = m.get('index')
        self.refund_sub_items = []
        if m.get('refund_sub_items') is not None:
            for k in m.get('refund_sub_items'):
                temp_model = FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItems()
                self.refund_sub_items.append(temp_model.from_map(k))
        if m.get('sub_table_head') is not None:
            self.sub_table_head = m.get('sub_table_head')
        if m.get('table_head') is not None:
            self.table_head = m.get('table_head')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRuleInfo(TeaModel):
    def __init__(self, content=None, cost=None, cost_percent=None, time_stamp=None, time_type=None, title=None):
        self.content = content  # type: str
        self.cost = cost  # type: int
        self.cost_percent = cost_percent  # type: int
        self.time_stamp = time_stamp  # type: int
        self.time_type = time_type  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRuleInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.cost is not None:
            result['cost'] = self.cost
        if self.cost_percent is not None:
            result['cost_percent'] = self.cost_percent
        if self.time_stamp is not None:
            result['time_stamp'] = self.time_stamp
        if self.time_type is not None:
            result['time_type'] = self.time_type
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('cost_percent') is not None:
            self.cost_percent = m.get('cost_percent')
        if m.get('time_stamp') is not None:
            self.time_stamp = m.get('time_stamp')
        if m.get('time_type') is not None:
            self.time_type = m.get('time_type')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRule(TeaModel):
    def __init__(self, able=None, info=None):
        self.able = able  # type: bool
        self.info = info  # type: list[FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRuleInfo]

    def validate(self):
        if self.info:
            for k in self.info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.able is not None:
            result['able'] = self.able
        result['info'] = []
        if self.info is not None:
            for k in self.info:
                result['info'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('able') is not None:
            self.able = m.get('able')
        self.info = []
        if m.get('info') is not None:
            for k in m.get('info'):
                temp_model = FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRuleInfo()
                self.info.append(temp_model.from_map(k))
        return self


class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRuleInfo(TeaModel):
    def __init__(self, content=None, cost=None, cost_percent=None, time_stamp=None, time_type=None, title=None):
        self.content = content  # type: str
        self.cost = cost  # type: int
        self.cost_percent = cost_percent  # type: int
        self.time_stamp = time_stamp  # type: int
        self.time_type = time_type  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRuleInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.cost is not None:
            result['cost'] = self.cost
        if self.cost_percent is not None:
            result['cost_percent'] = self.cost_percent
        if self.time_stamp is not None:
            result['time_stamp'] = self.time_stamp
        if self.time_type is not None:
            result['time_type'] = self.time_type
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('cost_percent') is not None:
            self.cost_percent = m.get('cost_percent')
        if m.get('time_stamp') is not None:
            self.time_stamp = m.get('time_stamp')
        if m.get('time_type') is not None:
            self.time_type = m.get('time_type')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRule(TeaModel):
    def __init__(self, able=None, info=None):
        self.able = able  # type: bool
        self.info = info  # type: list[FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRuleInfo]

    def validate(self):
        if self.info:
            for k in self.info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.able is not None:
            result['able'] = self.able
        result['info'] = []
        if self.info is not None:
            for k in self.info:
                result['info'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('able') is not None:
            self.able = m.get('able')
        self.info = []
        if m.get('info') is not None:
            for k in m.get('info'):
                temp_model = FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRuleInfo()
                self.info.append(temp_model.from_map(k))
        return self


class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleList(TeaModel):
    def __init__(self, baggage_info=None, baggage_item=None, change_rule=None, change_rule_item=None, extra=None,
                 refund_rule=None, refund_rule_item=None, sign_rule=None, tuigaiqian_info=None, upgrade_rule=None):
        self.baggage_info = baggage_info  # type: str
        self.baggage_item = baggage_item  # type: FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItem
        self.change_rule = change_rule  # type: FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRule
        self.change_rule_item = change_rule_item  # type: FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItem
        self.extra = extra  # type: str
        self.refund_rule = refund_rule  # type: FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRule
        self.refund_rule_item = refund_rule_item  # type: FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItem
        self.sign_rule = sign_rule  # type: FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRule
        self.tuigaiqian_info = tuigaiqian_info  # type: str
        self.upgrade_rule = upgrade_rule  # type: FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRule

    def validate(self):
        if self.baggage_item:
            self.baggage_item.validate()
        if self.change_rule:
            self.change_rule.validate()
        if self.change_rule_item:
            self.change_rule_item.validate()
        if self.refund_rule:
            self.refund_rule.validate()
        if self.refund_rule_item:
            self.refund_rule_item.validate()
        if self.sign_rule:
            self.sign_rule.validate()
        if self.upgrade_rule:
            self.upgrade_rule.validate()

    def to_map(self):
        _map = super(FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.baggage_info is not None:
            result['baggage_info'] = self.baggage_info
        if self.baggage_item is not None:
            result['baggage_item'] = self.baggage_item.to_map()
        if self.change_rule is not None:
            result['change_rule'] = self.change_rule.to_map()
        if self.change_rule_item is not None:
            result['change_rule_item'] = self.change_rule_item.to_map()
        if self.extra is not None:
            result['extra'] = self.extra
        if self.refund_rule is not None:
            result['refund_rule'] = self.refund_rule.to_map()
        if self.refund_rule_item is not None:
            result['refund_rule_item'] = self.refund_rule_item.to_map()
        if self.sign_rule is not None:
            result['sign_rule'] = self.sign_rule.to_map()
        if self.tuigaiqian_info is not None:
            result['tuigaiqian_info'] = self.tuigaiqian_info
        if self.upgrade_rule is not None:
            result['upgrade_rule'] = self.upgrade_rule.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('baggage_info') is not None:
            self.baggage_info = m.get('baggage_info')
        if m.get('baggage_item') is not None:
            temp_model = FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItem()
            self.baggage_item = temp_model.from_map(m['baggage_item'])
        if m.get('change_rule') is not None:
            temp_model = FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRule()
            self.change_rule = temp_model.from_map(m['change_rule'])
        if m.get('change_rule_item') is not None:
            temp_model = FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItem()
            self.change_rule_item = temp_model.from_map(m['change_rule_item'])
        if m.get('extra') is not None:
            self.extra = m.get('extra')
        if m.get('refund_rule') is not None:
            temp_model = FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRule()
            self.refund_rule = temp_model.from_map(m['refund_rule'])
        if m.get('refund_rule_item') is not None:
            temp_model = FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItem()
            self.refund_rule_item = temp_model.from_map(m['refund_rule_item'])
        if m.get('sign_rule') is not None:
            temp_model = FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRule()
            self.sign_rule = temp_model.from_map(m['sign_rule'])
        if m.get('tuigaiqian_info') is not None:
            self.tuigaiqian_info = m.get('tuigaiqian_info')
        if m.get('upgrade_rule') is not None:
            temp_model = FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRule()
            self.upgrade_rule = temp_model.from_map(m['upgrade_rule'])
        return self


class FlightOtaSearchResponseBodyModuleFlightListCabinInfoList(TeaModel):
    def __init__(self, agent_id=None, basic_cabin_price=None, build_price=None, cabin=None, cabin_class=None,
                 cabin_class_name=None, child_cabin=None, class_name=None, class_rule=None, discount=None, flight_rule_list=None,
                 flight_rule_list_str=None, invoice_type=None, is_protocol=None, oil_price=None, order_params=None, ota_item_id=None,
                 price=None, product_type=None, product_type_desc=None, promotion_price=None, remained_seat_count=None,
                 ticket_price=None, total_price=None):
        self.agent_id = agent_id  # type: long
        self.basic_cabin_price = basic_cabin_price  # type: int
        self.build_price = build_price  # type: int
        self.cabin = cabin  # type: str
        self.cabin_class = cabin_class  # type: str
        self.cabin_class_name = cabin_class_name  # type: str
        self.child_cabin = child_cabin  # type: str
        self.class_name = class_name  # type: str
        self.class_rule = class_rule  # type: str
        self.discount = discount  # type: str
        self.flight_rule_list = flight_rule_list  # type: list[FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleList]
        self.flight_rule_list_str = flight_rule_list_str  # type: str
        self.invoice_type = invoice_type  # type: int
        self.is_protocol = is_protocol  # type: bool
        self.oil_price = oil_price  # type: int
        self.order_params = order_params  # type: str
        self.ota_item_id = ota_item_id  # type: str
        self.price = price  # type: int
        self.product_type = product_type  # type: long
        self.product_type_desc = product_type_desc  # type: str
        self.promotion_price = promotion_price  # type: str
        self.remained_seat_count = remained_seat_count  # type: str
        self.ticket_price = ticket_price  # type: int
        self.total_price = total_price  # type: int

    def validate(self):
        if self.flight_rule_list:
            for k in self.flight_rule_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightOtaSearchResponseBodyModuleFlightListCabinInfoList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_id is not None:
            result['agent_id'] = self.agent_id
        if self.basic_cabin_price is not None:
            result['basic_cabin_price'] = self.basic_cabin_price
        if self.build_price is not None:
            result['build_price'] = self.build_price
        if self.cabin is not None:
            result['cabin'] = self.cabin
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.cabin_class_name is not None:
            result['cabin_class_name'] = self.cabin_class_name
        if self.child_cabin is not None:
            result['child_cabin'] = self.child_cabin
        if self.class_name is not None:
            result['class_name'] = self.class_name
        if self.class_rule is not None:
            result['class_rule'] = self.class_rule
        if self.discount is not None:
            result['discount'] = self.discount
        result['flight_rule_list'] = []
        if self.flight_rule_list is not None:
            for k in self.flight_rule_list:
                result['flight_rule_list'].append(k.to_map() if k else None)
        if self.flight_rule_list_str is not None:
            result['flight_rule_list_str'] = self.flight_rule_list_str
        if self.invoice_type is not None:
            result['invoice_type'] = self.invoice_type
        if self.is_protocol is not None:
            result['is_protocol'] = self.is_protocol
        if self.oil_price is not None:
            result['oil_price'] = self.oil_price
        if self.order_params is not None:
            result['order_params'] = self.order_params
        if self.ota_item_id is not None:
            result['ota_item_id'] = self.ota_item_id
        if self.price is not None:
            result['price'] = self.price
        if self.product_type is not None:
            result['product_type'] = self.product_type
        if self.product_type_desc is not None:
            result['product_type_desc'] = self.product_type_desc
        if self.promotion_price is not None:
            result['promotion_price'] = self.promotion_price
        if self.remained_seat_count is not None:
            result['remained_seat_count'] = self.remained_seat_count
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.total_price is not None:
            result['total_price'] = self.total_price
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('agent_id') is not None:
            self.agent_id = m.get('agent_id')
        if m.get('basic_cabin_price') is not None:
            self.basic_cabin_price = m.get('basic_cabin_price')
        if m.get('build_price') is not None:
            self.build_price = m.get('build_price')
        if m.get('cabin') is not None:
            self.cabin = m.get('cabin')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('cabin_class_name') is not None:
            self.cabin_class_name = m.get('cabin_class_name')
        if m.get('child_cabin') is not None:
            self.child_cabin = m.get('child_cabin')
        if m.get('class_name') is not None:
            self.class_name = m.get('class_name')
        if m.get('class_rule') is not None:
            self.class_rule = m.get('class_rule')
        if m.get('discount') is not None:
            self.discount = m.get('discount')
        self.flight_rule_list = []
        if m.get('flight_rule_list') is not None:
            for k in m.get('flight_rule_list'):
                temp_model = FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleList()
                self.flight_rule_list.append(temp_model.from_map(k))
        if m.get('flight_rule_list_str') is not None:
            self.flight_rule_list_str = m.get('flight_rule_list_str')
        if m.get('invoice_type') is not None:
            self.invoice_type = m.get('invoice_type')
        if m.get('is_protocol') is not None:
            self.is_protocol = m.get('is_protocol')
        if m.get('oil_price') is not None:
            self.oil_price = m.get('oil_price')
        if m.get('order_params') is not None:
            self.order_params = m.get('order_params')
        if m.get('ota_item_id') is not None:
            self.ota_item_id = m.get('ota_item_id')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('product_type') is not None:
            self.product_type = m.get('product_type')
        if m.get('product_type_desc') is not None:
            self.product_type_desc = m.get('product_type_desc')
        if m.get('promotion_price') is not None:
            self.promotion_price = m.get('promotion_price')
        if m.get('remained_seat_count') is not None:
            self.remained_seat_count = m.get('remained_seat_count')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('total_price') is not None:
            self.total_price = m.get('total_price')
        return self


class FlightOtaSearchResponseBodyModuleFlightListDepAirportInfo(TeaModel):
    def __init__(self, airport_code=None, airport_name=None, city_code=None, city_name=None, terminal=None):
        self.airport_code = airport_code  # type: str
        self.airport_name = airport_name  # type: str
        self.city_code = city_code  # type: str
        self.city_name = city_name  # type: str
        self.terminal = terminal  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOtaSearchResponseBodyModuleFlightListDepAirportInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airport_code is not None:
            result['airport_code'] = self.airport_code
        if self.airport_name is not None:
            result['airport_name'] = self.airport_name
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.terminal is not None:
            result['terminal'] = self.terminal
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('airport_code') is not None:
            self.airport_code = m.get('airport_code')
        if m.get('airport_name') is not None:
            self.airport_name = m.get('airport_name')
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('terminal') is not None:
            self.terminal = m.get('terminal')
        return self


class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription(TeaModel):
    def __init__(self, desc=None, icon=None, image=None, title=None):
        self.desc = desc  # type: str
        self.icon = icon  # type: str
        self.image = image  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.desc is not None:
            result['desc'] = self.desc
        if self.icon is not None:
            result['icon'] = self.icon
        if self.image is not None:
            result['image'] = self.image
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('desc') is not None:
            self.desc = m.get('desc')
        if m.get('icon') is not None:
            self.icon = m.get('icon')
        if m.get('image') is not None:
            self.image = m.get('image')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO(TeaModel):
    def __init__(self, image=None, largest=None, middle=None, smallest=None):
        self.image = image  # type: str
        self.largest = largest  # type: str
        self.middle = middle  # type: str
        self.smallest = smallest  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.image is not None:
            result['image'] = self.image
        if self.largest is not None:
            result['largest'] = self.largest
        if self.middle is not None:
            result['middle'] = self.middle
        if self.smallest is not None:
            result['smallest'] = self.smallest
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('image') is not None:
            self.image = m.get('image')
        if m.get('largest') is not None:
            self.largest = m.get('largest')
        if m.get('middle') is not None:
            self.middle = m.get('middle')
        if m.get('smallest') is not None:
            self.smallest = m.get('smallest')
        return self


class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes(TeaModel):
    def __init__(self, baggage_desc=None, baggage_sub_content_type=None, description=None, image_do=None,
                 is_highlight=None, sub_title=None):
        self.baggage_desc = baggage_desc  # type: list[str]
        self.baggage_sub_content_type = baggage_sub_content_type  # type: int
        self.description = description  # type: FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription
        self.image_do = image_do  # type: FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO
        self.is_highlight = is_highlight  # type: bool
        self.sub_title = sub_title  # type: str

    def validate(self):
        if self.description:
            self.description.validate()
        if self.image_do:
            self.image_do.validate()

    def to_map(self):
        _map = super(FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.baggage_desc is not None:
            result['baggage_desc'] = self.baggage_desc
        if self.baggage_sub_content_type is not None:
            result['baggage_sub_content_type'] = self.baggage_sub_content_type
        if self.description is not None:
            result['description'] = self.description.to_map()
        if self.image_do is not None:
            result['image_d_o'] = self.image_do.to_map()
        if self.is_highlight is not None:
            result['is_highlight'] = self.is_highlight
        if self.sub_title is not None:
            result['sub_title'] = self.sub_title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('baggage_desc') is not None:
            self.baggage_desc = m.get('baggage_desc')
        if m.get('baggage_sub_content_type') is not None:
            self.baggage_sub_content_type = m.get('baggage_sub_content_type')
        if m.get('description') is not None:
            temp_model = FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription()
            self.description = temp_model.from_map(m['description'])
        if m.get('image_d_o') is not None:
            temp_model = FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO()
            self.image_do = temp_model.from_map(m['image_d_o'])
        if m.get('is_highlight') is not None:
            self.is_highlight = m.get('is_highlight')
        if m.get('sub_title') is not None:
            self.sub_title = m.get('sub_title')
        return self


class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems(TeaModel):
    def __init__(self, baggage_sub_content_visualizes=None, extra_content_visualizes=None, is_struct=None,
                 ptc=None, title=None):
        self.baggage_sub_content_visualizes = baggage_sub_content_visualizes  # type: list[FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes]
        self.extra_content_visualizes = extra_content_visualizes  # type: list[any]
        self.is_struct = is_struct  # type: bool
        # PTC
        self.ptc = ptc  # type: str
        self.title = title  # type: str

    def validate(self):
        if self.baggage_sub_content_visualizes:
            for k in self.baggage_sub_content_visualizes:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['baggage_sub_content_visualizes'] = []
        if self.baggage_sub_content_visualizes is not None:
            for k in self.baggage_sub_content_visualizes:
                result['baggage_sub_content_visualizes'].append(k.to_map() if k else None)
        if self.extra_content_visualizes is not None:
            result['extra_content_visualizes'] = self.extra_content_visualizes
        if self.is_struct is not None:
            result['is_struct'] = self.is_struct
        if self.ptc is not None:
            result['ptc'] = self.ptc
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.baggage_sub_content_visualizes = []
        if m.get('baggage_sub_content_visualizes') is not None:
            for k in m.get('baggage_sub_content_visualizes'):
                temp_model = FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes()
                self.baggage_sub_content_visualizes.append(temp_model.from_map(k))
        if m.get('extra_content_visualizes') is not None:
            self.extra_content_visualizes = m.get('extra_content_visualizes')
        if m.get('is_struct') is not None:
            self.is_struct = m.get('is_struct')
        if m.get('ptc') is not None:
            self.ptc = m.get('ptc')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemTips(TeaModel):
    def __init__(self, logo=None, tips_desc=None, tips_image=None):
        self.logo = logo  # type: str
        self.tips_desc = tips_desc  # type: str
        self.tips_image = tips_image  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemTips, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.logo is not None:
            result['logo'] = self.logo
        if self.tips_desc is not None:
            result['tips_desc'] = self.tips_desc
        if self.tips_image is not None:
            result['tips_image'] = self.tips_image
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('logo') is not None:
            self.logo = m.get('logo')
        if m.get('tips_desc') is not None:
            self.tips_desc = m.get('tips_desc')
        if m.get('tips_image') is not None:
            self.tips_image = m.get('tips_image')
        return self


class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItem(TeaModel):
    def __init__(self, baggage_sub_items=None, index=None, table_head=None, tips=None, title=None, type=None):
        self.baggage_sub_items = baggage_sub_items  # type: list[FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems]
        self.index = index  # type: int
        self.table_head = table_head  # type: str
        self.tips = tips  # type: FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemTips
        self.title = title  # type: str
        self.type = type  # type: int

    def validate(self):
        if self.baggage_sub_items:
            for k in self.baggage_sub_items:
                if k:
                    k.validate()
        if self.tips:
            self.tips.validate()

    def to_map(self):
        _map = super(FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItem, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['baggage_sub_items'] = []
        if self.baggage_sub_items is not None:
            for k in self.baggage_sub_items:
                result['baggage_sub_items'].append(k.to_map() if k else None)
        if self.index is not None:
            result['index'] = self.index
        if self.table_head is not None:
            result['table_head'] = self.table_head
        if self.tips is not None:
            result['tips'] = self.tips.to_map()
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.baggage_sub_items = []
        if m.get('baggage_sub_items') is not None:
            for k in m.get('baggage_sub_items'):
                temp_model = FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems()
                self.baggage_sub_items.append(temp_model.from_map(k))
        if m.get('index') is not None:
            self.index = m.get('index')
        if m.get('table_head') is not None:
            self.table_head = m.get('table_head')
        if m.get('tips') is not None:
            temp_model = FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemTips()
            self.tips = temp_model.from_map(m['tips'])
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleInfo(TeaModel):
    def __init__(self, content=None, cost=None, cost_percent=None, time_stamp=None, time_type=None, title=None):
        self.content = content  # type: str
        self.cost = cost  # type: int
        self.cost_percent = cost_percent  # type: int
        self.time_stamp = time_stamp  # type: int
        self.time_type = time_type  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.cost is not None:
            result['cost'] = self.cost
        if self.cost_percent is not None:
            result['cost_percent'] = self.cost_percent
        if self.time_stamp is not None:
            result['time_stamp'] = self.time_stamp
        if self.time_type is not None:
            result['time_type'] = self.time_type
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('cost_percent') is not None:
            self.cost_percent = m.get('cost_percent')
        if m.get('time_stamp') is not None:
            self.time_stamp = m.get('time_stamp')
        if m.get('time_type') is not None:
            self.time_type = m.get('time_type')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRule(TeaModel):
    def __init__(self, able=None, info=None):
        self.able = able  # type: bool
        self.info = info  # type: list[FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleInfo]

    def validate(self):
        if self.info:
            for k in self.info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.able is not None:
            result['able'] = self.able
        result['info'] = []
        if self.info is not None:
            for k in self.info:
                result['info'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('able') is not None:
            self.able = m.get('able')
        self.info = []
        if m.get('info') is not None:
            for k in m.get('info'):
                temp_model = FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleInfo()
                self.info.append(temp_model.from_map(k))
        return self


class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemExtraContents(TeaModel):
    def __init__(self, content=None, title=None):
        self.content = content  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemExtraContents, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents(TeaModel):
    def __init__(self, fee_desc=None, fee_range=None, style=None):
        self.fee_desc = fee_desc  # type: str
        self.fee_range = fee_range  # type: str
        self.style = style  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.fee_desc is not None:
            result['fee_desc'] = self.fee_desc
        if self.fee_range is not None:
            result['fee_range'] = self.fee_range
        if self.style is not None:
            result['style'] = self.style
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('fee_desc') is not None:
            self.fee_desc = m.get('fee_desc')
        if m.get('fee_range') is not None:
            self.fee_range = m.get('fee_range')
        if m.get('style') is not None:
            self.style = m.get('style')
        return self


class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems(TeaModel):
    def __init__(self, is_struct=None, ptc=None, refund_sub_contents=None, title=None):
        # isStruct : true
        self.is_struct = is_struct  # type: bool
        # PTC
        self.ptc = ptc  # type: str
        self.refund_sub_contents = refund_sub_contents  # type: list[FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents]
        self.title = title  # type: str

    def validate(self):
        if self.refund_sub_contents:
            for k in self.refund_sub_contents:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.is_struct is not None:
            result['is_struct'] = self.is_struct
        if self.ptc is not None:
            result['ptc'] = self.ptc
        result['refund_sub_contents'] = []
        if self.refund_sub_contents is not None:
            for k in self.refund_sub_contents:
                result['refund_sub_contents'].append(k.to_map() if k else None)
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('is_struct') is not None:
            self.is_struct = m.get('is_struct')
        if m.get('ptc') is not None:
            self.ptc = m.get('ptc')
        self.refund_sub_contents = []
        if m.get('refund_sub_contents') is not None:
            for k in m.get('refund_sub_contents'):
                temp_model = FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents()
                self.refund_sub_contents.append(temp_model.from_map(k))
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItem(TeaModel):
    def __init__(self, extra_contents=None, index=None, refund_sub_items=None, sub_table_head=None, table_head=None,
                 title=None, type=None):
        self.extra_contents = extra_contents  # type: list[FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemExtraContents]
        self.index = index  # type: int
        self.refund_sub_items = refund_sub_items  # type: list[FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems]
        self.sub_table_head = sub_table_head  # type: list[str]
        self.table_head = table_head  # type: str
        self.title = title  # type: str
        self.type = type  # type: int

    def validate(self):
        if self.extra_contents:
            for k in self.extra_contents:
                if k:
                    k.validate()
        if self.refund_sub_items:
            for k in self.refund_sub_items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItem, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['extra_contents'] = []
        if self.extra_contents is not None:
            for k in self.extra_contents:
                result['extra_contents'].append(k.to_map() if k else None)
        if self.index is not None:
            result['index'] = self.index
        result['refund_sub_items'] = []
        if self.refund_sub_items is not None:
            for k in self.refund_sub_items:
                result['refund_sub_items'].append(k.to_map() if k else None)
        if self.sub_table_head is not None:
            result['sub_table_head'] = self.sub_table_head
        if self.table_head is not None:
            result['table_head'] = self.table_head
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.extra_contents = []
        if m.get('extra_contents') is not None:
            for k in m.get('extra_contents'):
                temp_model = FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemExtraContents()
                self.extra_contents.append(temp_model.from_map(k))
        if m.get('index') is not None:
            self.index = m.get('index')
        self.refund_sub_items = []
        if m.get('refund_sub_items') is not None:
            for k in m.get('refund_sub_items'):
                temp_model = FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems()
                self.refund_sub_items.append(temp_model.from_map(k))
        if m.get('sub_table_head') is not None:
            self.sub_table_head = m.get('sub_table_head')
        if m.get('table_head') is not None:
            self.table_head = m.get('table_head')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleInfo(TeaModel):
    def __init__(self, content=None, cost=None, cost_percent=None, time_stamp=None, time_type=None, title=None):
        self.content = content  # type: str
        self.cost = cost  # type: int
        self.cost_percent = cost_percent  # type: int
        self.time_stamp = time_stamp  # type: int
        self.time_type = time_type  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.cost is not None:
            result['cost'] = self.cost
        if self.cost_percent is not None:
            result['cost_percent'] = self.cost_percent
        if self.time_stamp is not None:
            result['time_stamp'] = self.time_stamp
        if self.time_type is not None:
            result['time_type'] = self.time_type
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('cost_percent') is not None:
            self.cost_percent = m.get('cost_percent')
        if m.get('time_stamp') is not None:
            self.time_stamp = m.get('time_stamp')
        if m.get('time_type') is not None:
            self.time_type = m.get('time_type')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRule(TeaModel):
    def __init__(self, able=None, info=None):
        self.able = able  # type: bool
        self.info = info  # type: list[FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleInfo]

    def validate(self):
        if self.info:
            for k in self.info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.able is not None:
            result['able'] = self.able
        result['info'] = []
        if self.info is not None:
            for k in self.info:
                result['info'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('able') is not None:
            self.able = m.get('able')
        self.info = []
        if m.get('info') is not None:
            for k in m.get('info'):
                temp_model = FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleInfo()
                self.info.append(temp_model.from_map(k))
        return self


class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemExtraContents(TeaModel):
    def __init__(self, content=None, title=None):
        self.content = content  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemExtraContents, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents(TeaModel):
    def __init__(self, fee_desc=None, fee_range=None, style=None):
        self.fee_desc = fee_desc  # type: str
        self.fee_range = fee_range  # type: str
        self.style = style  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.fee_desc is not None:
            result['fee_desc'] = self.fee_desc
        if self.fee_range is not None:
            result['fee_range'] = self.fee_range
        if self.style is not None:
            result['style'] = self.style
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('fee_desc') is not None:
            self.fee_desc = m.get('fee_desc')
        if m.get('fee_range') is not None:
            self.fee_range = m.get('fee_range')
        if m.get('style') is not None:
            self.style = m.get('style')
        return self


class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems(TeaModel):
    def __init__(self, is_struct=None, ptc=None, refund_sub_contents=None, title=None):
        self.is_struct = is_struct  # type: bool
        # PTC
        self.ptc = ptc  # type: str
        self.refund_sub_contents = refund_sub_contents  # type: list[FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents]
        self.title = title  # type: str

    def validate(self):
        if self.refund_sub_contents:
            for k in self.refund_sub_contents:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.is_struct is not None:
            result['is_struct'] = self.is_struct
        if self.ptc is not None:
            result['ptc'] = self.ptc
        result['refund_sub_contents'] = []
        if self.refund_sub_contents is not None:
            for k in self.refund_sub_contents:
                result['refund_sub_contents'].append(k.to_map() if k else None)
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('is_struct') is not None:
            self.is_struct = m.get('is_struct')
        if m.get('ptc') is not None:
            self.ptc = m.get('ptc')
        self.refund_sub_contents = []
        if m.get('refund_sub_contents') is not None:
            for k in m.get('refund_sub_contents'):
                temp_model = FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents()
                self.refund_sub_contents.append(temp_model.from_map(k))
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItem(TeaModel):
    def __init__(self, extra_contents=None, index=None, refund_sub_items=None, sub_table_head=None, table_head=None,
                 title=None, type=None):
        self.extra_contents = extra_contents  # type: list[FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemExtraContents]
        self.index = index  # type: int
        self.refund_sub_items = refund_sub_items  # type: list[FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems]
        self.sub_table_head = sub_table_head  # type: list[str]
        self.table_head = table_head  # type: str
        self.title = title  # type: str
        self.type = type  # type: int

    def validate(self):
        if self.extra_contents:
            for k in self.extra_contents:
                if k:
                    k.validate()
        if self.refund_sub_items:
            for k in self.refund_sub_items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItem, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['extra_contents'] = []
        if self.extra_contents is not None:
            for k in self.extra_contents:
                result['extra_contents'].append(k.to_map() if k else None)
        if self.index is not None:
            result['index'] = self.index
        result['refund_sub_items'] = []
        if self.refund_sub_items is not None:
            for k in self.refund_sub_items:
                result['refund_sub_items'].append(k.to_map() if k else None)
        if self.sub_table_head is not None:
            result['sub_table_head'] = self.sub_table_head
        if self.table_head is not None:
            result['table_head'] = self.table_head
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.extra_contents = []
        if m.get('extra_contents') is not None:
            for k in m.get('extra_contents'):
                temp_model = FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemExtraContents()
                self.extra_contents.append(temp_model.from_map(k))
        if m.get('index') is not None:
            self.index = m.get('index')
        self.refund_sub_items = []
        if m.get('refund_sub_items') is not None:
            for k in m.get('refund_sub_items'):
                temp_model = FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems()
                self.refund_sub_items.append(temp_model.from_map(k))
        if m.get('sub_table_head') is not None:
            self.sub_table_head = m.get('sub_table_head')
        if m.get('table_head') is not None:
            self.table_head = m.get('table_head')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListSignRuleInfo(TeaModel):
    def __init__(self, content=None, cost=None, cost_percent=None, time_stamp=None, time_type=None, title=None):
        self.content = content  # type: str
        self.cost = cost  # type: int
        self.cost_percent = cost_percent  # type: int
        self.time_stamp = time_stamp  # type: int
        self.time_type = time_type  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOtaSearchResponseBodyModuleFlightListFlightRuleListSignRuleInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.cost is not None:
            result['cost'] = self.cost
        if self.cost_percent is not None:
            result['cost_percent'] = self.cost_percent
        if self.time_stamp is not None:
            result['time_stamp'] = self.time_stamp
        if self.time_type is not None:
            result['time_type'] = self.time_type
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('cost_percent') is not None:
            self.cost_percent = m.get('cost_percent')
        if m.get('time_stamp') is not None:
            self.time_stamp = m.get('time_stamp')
        if m.get('time_type') is not None:
            self.time_type = m.get('time_type')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListSignRule(TeaModel):
    def __init__(self, able=None, info=None):
        self.able = able  # type: bool
        self.info = info  # type: list[FlightOtaSearchResponseBodyModuleFlightListFlightRuleListSignRuleInfo]

    def validate(self):
        if self.info:
            for k in self.info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightOtaSearchResponseBodyModuleFlightListFlightRuleListSignRule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.able is not None:
            result['able'] = self.able
        result['info'] = []
        if self.info is not None:
            for k in self.info:
                result['info'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('able') is not None:
            self.able = m.get('able')
        self.info = []
        if m.get('info') is not None:
            for k in m.get('info'):
                temp_model = FlightOtaSearchResponseBodyModuleFlightListFlightRuleListSignRuleInfo()
                self.info.append(temp_model.from_map(k))
        return self


class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo(TeaModel):
    def __init__(self, content=None, cost=None, cost_percent=None, time_stamp=None, time_type=None, title=None):
        self.content = content  # type: str
        self.cost = cost  # type: int
        self.cost_percent = cost_percent  # type: int
        self.time_stamp = time_stamp  # type: int
        self.time_type = time_type  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOtaSearchResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.cost is not None:
            result['cost'] = self.cost
        if self.cost_percent is not None:
            result['cost_percent'] = self.cost_percent
        if self.time_stamp is not None:
            result['time_stamp'] = self.time_stamp
        if self.time_type is not None:
            result['time_type'] = self.time_type
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('cost_percent') is not None:
            self.cost_percent = m.get('cost_percent')
        if m.get('time_stamp') is not None:
            self.time_stamp = m.get('time_stamp')
        if m.get('time_type') is not None:
            self.time_type = m.get('time_type')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListUpgradeRule(TeaModel):
    def __init__(self, able=None, info=None):
        self.able = able  # type: bool
        self.info = info  # type: list[FlightOtaSearchResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo]

    def validate(self):
        if self.info:
            for k in self.info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightOtaSearchResponseBodyModuleFlightListFlightRuleListUpgradeRule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.able is not None:
            result['able'] = self.able
        result['info'] = []
        if self.info is not None:
            for k in self.info:
                result['info'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('able') is not None:
            self.able = m.get('able')
        self.info = []
        if m.get('info') is not None:
            for k in m.get('info'):
                temp_model = FlightOtaSearchResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo()
                self.info.append(temp_model.from_map(k))
        return self


class FlightOtaSearchResponseBodyModuleFlightListFlightRuleList(TeaModel):
    def __init__(self, baggage_info=None, baggage_item=None, change_rule=None, change_rule_item=None, extra=None,
                 refund_rule=None, refund_rule_item=None, sign_rule=None, tuigaiqian_info=None, upgrade_rule=None):
        self.baggage_info = baggage_info  # type: str
        self.baggage_item = baggage_item  # type: FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItem
        self.change_rule = change_rule  # type: FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRule
        self.change_rule_item = change_rule_item  # type: FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItem
        self.extra = extra  # type: str
        self.refund_rule = refund_rule  # type: FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRule
        self.refund_rule_item = refund_rule_item  # type: FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItem
        self.sign_rule = sign_rule  # type: FlightOtaSearchResponseBodyModuleFlightListFlightRuleListSignRule
        self.tuigaiqian_info = tuigaiqian_info  # type: str
        self.upgrade_rule = upgrade_rule  # type: FlightOtaSearchResponseBodyModuleFlightListFlightRuleListUpgradeRule

    def validate(self):
        if self.baggage_item:
            self.baggage_item.validate()
        if self.change_rule:
            self.change_rule.validate()
        if self.change_rule_item:
            self.change_rule_item.validate()
        if self.refund_rule:
            self.refund_rule.validate()
        if self.refund_rule_item:
            self.refund_rule_item.validate()
        if self.sign_rule:
            self.sign_rule.validate()
        if self.upgrade_rule:
            self.upgrade_rule.validate()

    def to_map(self):
        _map = super(FlightOtaSearchResponseBodyModuleFlightListFlightRuleList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.baggage_info is not None:
            result['baggage_info'] = self.baggage_info
        if self.baggage_item is not None:
            result['baggage_item'] = self.baggage_item.to_map()
        if self.change_rule is not None:
            result['change_rule'] = self.change_rule.to_map()
        if self.change_rule_item is not None:
            result['change_rule_item'] = self.change_rule_item.to_map()
        if self.extra is not None:
            result['extra'] = self.extra
        if self.refund_rule is not None:
            result['refund_rule'] = self.refund_rule.to_map()
        if self.refund_rule_item is not None:
            result['refund_rule_item'] = self.refund_rule_item.to_map()
        if self.sign_rule is not None:
            result['sign_rule'] = self.sign_rule.to_map()
        if self.tuigaiqian_info is not None:
            result['tuigaiqian_info'] = self.tuigaiqian_info
        if self.upgrade_rule is not None:
            result['upgrade_rule'] = self.upgrade_rule.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('baggage_info') is not None:
            self.baggage_info = m.get('baggage_info')
        if m.get('baggage_item') is not None:
            temp_model = FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItem()
            self.baggage_item = temp_model.from_map(m['baggage_item'])
        if m.get('change_rule') is not None:
            temp_model = FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRule()
            self.change_rule = temp_model.from_map(m['change_rule'])
        if m.get('change_rule_item') is not None:
            temp_model = FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItem()
            self.change_rule_item = temp_model.from_map(m['change_rule_item'])
        if m.get('extra') is not None:
            self.extra = m.get('extra')
        if m.get('refund_rule') is not None:
            temp_model = FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRule()
            self.refund_rule = temp_model.from_map(m['refund_rule'])
        if m.get('refund_rule_item') is not None:
            temp_model = FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItem()
            self.refund_rule_item = temp_model.from_map(m['refund_rule_item'])
        if m.get('sign_rule') is not None:
            temp_model = FlightOtaSearchResponseBodyModuleFlightListFlightRuleListSignRule()
            self.sign_rule = temp_model.from_map(m['sign_rule'])
        if m.get('tuigaiqian_info') is not None:
            self.tuigaiqian_info = m.get('tuigaiqian_info')
        if m.get('upgrade_rule') is not None:
            temp_model = FlightOtaSearchResponseBodyModuleFlightListFlightRuleListUpgradeRule()
            self.upgrade_rule = temp_model.from_map(m['upgrade_rule'])
        return self


class FlightOtaSearchResponseBodyModuleFlightList(TeaModel):
    def __init__(self, airline_info=None, arr_airport_info=None, arr_date=None, build_price=None, cabin=None,
                 cabin_class=None, cabin_info_list=None, carrier_airline=None, carrier_no=None, dep_airport_info=None,
                 dep_city_code=None, dep_date=None, discount=None, flight_no=None, flight_rule_list=None,
                 flight_rule_list_str=None, flight_size=None, flight_type=None, invoice_type=None, is_protocol=None, is_share=None,
                 is_stop=None, is_transfer=None, meal_desc=None, oil_price=None, ota_item_id=None, price=None,
                 product_type=None, product_type_desc=None, promotion_price=None, remained_seat_count=None, secret_params=None,
                 segment_number=None, stop_arr_time=None, stop_city=None, stop_dep_time=None, ticket_price=None, total_price=None,
                 trip_type=None):
        self.airline_info = airline_info  # type: FlightOtaSearchResponseBodyModuleFlightListAirlineInfo
        self.arr_airport_info = arr_airport_info  # type: FlightOtaSearchResponseBodyModuleFlightListArrAirportInfo
        self.arr_date = arr_date  # type: str
        self.build_price = build_price  # type: int
        self.cabin = cabin  # type: str
        self.cabin_class = cabin_class  # type: str
        self.cabin_info_list = cabin_info_list  # type: list[FlightOtaSearchResponseBodyModuleFlightListCabinInfoList]
        self.carrier_airline = carrier_airline  # type: str
        self.carrier_no = carrier_no  # type: str
        self.dep_airport_info = dep_airport_info  # type: FlightOtaSearchResponseBodyModuleFlightListDepAirportInfo
        self.dep_city_code = dep_city_code  # type: str
        self.dep_date = dep_date  # type: str
        self.discount = discount  # type: int
        self.flight_no = flight_no  # type: str
        self.flight_rule_list = flight_rule_list  # type: list[FlightOtaSearchResponseBodyModuleFlightListFlightRuleList]
        self.flight_rule_list_str = flight_rule_list_str  # type: str
        self.flight_size = flight_size  # type: str
        self.flight_type = flight_type  # type: str
        self.invoice_type = invoice_type  # type: int
        self.is_protocol = is_protocol  # type: bool
        self.is_share = is_share  # type: bool
        self.is_stop = is_stop  # type: bool
        self.is_transfer = is_transfer  # type: bool
        self.meal_desc = meal_desc  # type: str
        self.oil_price = oil_price  # type: int
        self.ota_item_id = ota_item_id  # type: str
        self.price = price  # type: int
        self.product_type = product_type  # type: long
        self.product_type_desc = product_type_desc  # type: str
        self.promotion_price = promotion_price  # type: str
        self.remained_seat_count = remained_seat_count  # type: str
        self.secret_params = secret_params  # type: str
        self.segment_number = segment_number  # type: str
        self.stop_arr_time = stop_arr_time  # type: str
        self.stop_city = stop_city  # type: str
        self.stop_dep_time = stop_dep_time  # type: str
        self.ticket_price = ticket_price  # type: int
        self.total_price = total_price  # type: str
        self.trip_type = trip_type  # type: int

    def validate(self):
        if self.airline_info:
            self.airline_info.validate()
        if self.arr_airport_info:
            self.arr_airport_info.validate()
        if self.cabin_info_list:
            for k in self.cabin_info_list:
                if k:
                    k.validate()
        if self.dep_airport_info:
            self.dep_airport_info.validate()
        if self.flight_rule_list:
            for k in self.flight_rule_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightOtaSearchResponseBodyModuleFlightList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_info is not None:
            result['airline_info'] = self.airline_info.to_map()
        if self.arr_airport_info is not None:
            result['arr_airport_info'] = self.arr_airport_info.to_map()
        if self.arr_date is not None:
            result['arr_date'] = self.arr_date
        if self.build_price is not None:
            result['build_price'] = self.build_price
        if self.cabin is not None:
            result['cabin'] = self.cabin
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        result['cabin_info_list'] = []
        if self.cabin_info_list is not None:
            for k in self.cabin_info_list:
                result['cabin_info_list'].append(k.to_map() if k else None)
        if self.carrier_airline is not None:
            result['carrier_airline'] = self.carrier_airline
        if self.carrier_no is not None:
            result['carrier_no'] = self.carrier_no
        if self.dep_airport_info is not None:
            result['dep_airport_info'] = self.dep_airport_info.to_map()
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        if self.discount is not None:
            result['discount'] = self.discount
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        result['flight_rule_list'] = []
        if self.flight_rule_list is not None:
            for k in self.flight_rule_list:
                result['flight_rule_list'].append(k.to_map() if k else None)
        if self.flight_rule_list_str is not None:
            result['flight_rule_list_str'] = self.flight_rule_list_str
        if self.flight_size is not None:
            result['flight_size'] = self.flight_size
        if self.flight_type is not None:
            result['flight_type'] = self.flight_type
        if self.invoice_type is not None:
            result['invoice_type'] = self.invoice_type
        if self.is_protocol is not None:
            result['is_protocol'] = self.is_protocol
        if self.is_share is not None:
            result['is_share'] = self.is_share
        if self.is_stop is not None:
            result['is_stop'] = self.is_stop
        if self.is_transfer is not None:
            result['is_transfer'] = self.is_transfer
        if self.meal_desc is not None:
            result['meal_desc'] = self.meal_desc
        if self.oil_price is not None:
            result['oil_price'] = self.oil_price
        if self.ota_item_id is not None:
            result['ota_item_id'] = self.ota_item_id
        if self.price is not None:
            result['price'] = self.price
        if self.product_type is not None:
            result['product_type'] = self.product_type
        if self.product_type_desc is not None:
            result['product_type_desc'] = self.product_type_desc
        if self.promotion_price is not None:
            result['promotion_price'] = self.promotion_price
        if self.remained_seat_count is not None:
            result['remained_seat_count'] = self.remained_seat_count
        if self.secret_params is not None:
            result['secret_params'] = self.secret_params
        if self.segment_number is not None:
            result['segment_number'] = self.segment_number
        if self.stop_arr_time is not None:
            result['stop_arr_time'] = self.stop_arr_time
        if self.stop_city is not None:
            result['stop_city'] = self.stop_city
        if self.stop_dep_time is not None:
            result['stop_dep_time'] = self.stop_dep_time
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.total_price is not None:
            result['total_price'] = self.total_price
        if self.trip_type is not None:
            result['trip_type'] = self.trip_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('airline_info') is not None:
            temp_model = FlightOtaSearchResponseBodyModuleFlightListAirlineInfo()
            self.airline_info = temp_model.from_map(m['airline_info'])
        if m.get('arr_airport_info') is not None:
            temp_model = FlightOtaSearchResponseBodyModuleFlightListArrAirportInfo()
            self.arr_airport_info = temp_model.from_map(m['arr_airport_info'])
        if m.get('arr_date') is not None:
            self.arr_date = m.get('arr_date')
        if m.get('build_price') is not None:
            self.build_price = m.get('build_price')
        if m.get('cabin') is not None:
            self.cabin = m.get('cabin')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        self.cabin_info_list = []
        if m.get('cabin_info_list') is not None:
            for k in m.get('cabin_info_list'):
                temp_model = FlightOtaSearchResponseBodyModuleFlightListCabinInfoList()
                self.cabin_info_list.append(temp_model.from_map(k))
        if m.get('carrier_airline') is not None:
            self.carrier_airline = m.get('carrier_airline')
        if m.get('carrier_no') is not None:
            self.carrier_no = m.get('carrier_no')
        if m.get('dep_airport_info') is not None:
            temp_model = FlightOtaSearchResponseBodyModuleFlightListDepAirportInfo()
            self.dep_airport_info = temp_model.from_map(m['dep_airport_info'])
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        if m.get('discount') is not None:
            self.discount = m.get('discount')
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        self.flight_rule_list = []
        if m.get('flight_rule_list') is not None:
            for k in m.get('flight_rule_list'):
                temp_model = FlightOtaSearchResponseBodyModuleFlightListFlightRuleList()
                self.flight_rule_list.append(temp_model.from_map(k))
        if m.get('flight_rule_list_str') is not None:
            self.flight_rule_list_str = m.get('flight_rule_list_str')
        if m.get('flight_size') is not None:
            self.flight_size = m.get('flight_size')
        if m.get('flight_type') is not None:
            self.flight_type = m.get('flight_type')
        if m.get('invoice_type') is not None:
            self.invoice_type = m.get('invoice_type')
        if m.get('is_protocol') is not None:
            self.is_protocol = m.get('is_protocol')
        if m.get('is_share') is not None:
            self.is_share = m.get('is_share')
        if m.get('is_stop') is not None:
            self.is_stop = m.get('is_stop')
        if m.get('is_transfer') is not None:
            self.is_transfer = m.get('is_transfer')
        if m.get('meal_desc') is not None:
            self.meal_desc = m.get('meal_desc')
        if m.get('oil_price') is not None:
            self.oil_price = m.get('oil_price')
        if m.get('ota_item_id') is not None:
            self.ota_item_id = m.get('ota_item_id')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('product_type') is not None:
            self.product_type = m.get('product_type')
        if m.get('product_type_desc') is not None:
            self.product_type_desc = m.get('product_type_desc')
        if m.get('promotion_price') is not None:
            self.promotion_price = m.get('promotion_price')
        if m.get('remained_seat_count') is not None:
            self.remained_seat_count = m.get('remained_seat_count')
        if m.get('secret_params') is not None:
            self.secret_params = m.get('secret_params')
        if m.get('segment_number') is not None:
            self.segment_number = m.get('segment_number')
        if m.get('stop_arr_time') is not None:
            self.stop_arr_time = m.get('stop_arr_time')
        if m.get('stop_city') is not None:
            self.stop_city = m.get('stop_city')
        if m.get('stop_dep_time') is not None:
            self.stop_dep_time = m.get('stop_dep_time')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('total_price') is not None:
            self.total_price = m.get('total_price')
        if m.get('trip_type') is not None:
            self.trip_type = m.get('trip_type')
        return self


class FlightOtaSearchResponseBodyModule(TeaModel):
    def __init__(self, flight_list=None):
        self.flight_list = flight_list  # type: list[FlightOtaSearchResponseBodyModuleFlightList]

    def validate(self):
        if self.flight_list:
            for k in self.flight_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightOtaSearchResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['flight_list'] = []
        if self.flight_list is not None:
            for k in self.flight_list:
                result['flight_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.flight_list = []
        if m.get('flight_list') is not None:
            for k in m.get('flight_list'):
                temp_model = FlightOtaSearchResponseBodyModuleFlightList()
                self.flight_list.append(temp_model.from_map(k))
        return self


class FlightOtaSearchResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: FlightOtaSearchResponseBodyModule
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(FlightOtaSearchResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = FlightOtaSearchResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightOtaSearchResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: FlightOtaSearchResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(FlightOtaSearchResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightOtaSearchResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightOtaSearchV2Headers(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOtaSearchV2Headers, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class FlightOtaSearchV2RequestSearchJourneysSelectedFlights(TeaModel):
    def __init__(self, arr_airport_code=None, arr_city_code=None, dep_airport_code=None, dep_city_code=None,
                 flight_time=None, market_flight_no=None, operate_flight_no=None):
        self.arr_airport_code = arr_airport_code  # type: str
        self.arr_city_code = arr_city_code  # type: str
        self.dep_airport_code = dep_airport_code  # type: str
        self.dep_city_code = dep_city_code  # type: str
        self.flight_time = flight_time  # type: str
        self.market_flight_no = market_flight_no  # type: str
        self.operate_flight_no = operate_flight_no  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOtaSearchV2RequestSearchJourneysSelectedFlights, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_airport_code is not None:
            result['arr_airport_code'] = self.arr_airport_code
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.dep_airport_code is not None:
            result['dep_airport_code'] = self.dep_airport_code
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.flight_time is not None:
            result['flight_time'] = self.flight_time
        if self.market_flight_no is not None:
            result['market_flight_no'] = self.market_flight_no
        if self.operate_flight_no is not None:
            result['operate_flight_no'] = self.operate_flight_no
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('arr_airport_code') is not None:
            self.arr_airport_code = m.get('arr_airport_code')
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('dep_airport_code') is not None:
            self.dep_airport_code = m.get('dep_airport_code')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('flight_time') is not None:
            self.flight_time = m.get('flight_time')
        if m.get('market_flight_no') is not None:
            self.market_flight_no = m.get('market_flight_no')
        if m.get('operate_flight_no') is not None:
            self.operate_flight_no = m.get('operate_flight_no')
        return self


class FlightOtaSearchV2RequestSearchJourneys(TeaModel):
    def __init__(self, arr_city_code=None, dep_city_code=None, dep_date=None, selected_flights=None):
        self.arr_city_code = arr_city_code  # type: str
        self.dep_city_code = dep_city_code  # type: str
        self.dep_date = dep_date  # type: str
        self.selected_flights = selected_flights  # type: list[FlightOtaSearchV2RequestSearchJourneysSelectedFlights]

    def validate(self):
        if self.selected_flights:
            for k in self.selected_flights:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightOtaSearchV2RequestSearchJourneys, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        result['selected_flights'] = []
        if self.selected_flights is not None:
            for k in self.selected_flights:
                result['selected_flights'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        self.selected_flights = []
        if m.get('selected_flights') is not None:
            for k in m.get('selected_flights'):
                temp_model = FlightOtaSearchV2RequestSearchJourneysSelectedFlights()
                self.selected_flights.append(temp_model.from_map(k))
        return self


class FlightOtaSearchV2Request(TeaModel):
    def __init__(self, cabin_type_list=None, direct_only=None, isv_name=None, need_share_flight=None,
                 search_journeys=None, search_mode=None, trip_type=None):
        self.cabin_type_list = cabin_type_list  # type: list[int]
        self.direct_only = direct_only  # type: bool
        self.isv_name = isv_name  # type: str
        self.need_share_flight = need_share_flight  # type: bool
        self.search_journeys = search_journeys  # type: list[FlightOtaSearchV2RequestSearchJourneys]
        self.search_mode = search_mode  # type: int
        self.trip_type = trip_type  # type: int

    def validate(self):
        if self.search_journeys:
            for k in self.search_journeys:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightOtaSearchV2Request, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cabin_type_list is not None:
            result['cabin_type_list'] = self.cabin_type_list
        if self.direct_only is not None:
            result['direct_only'] = self.direct_only
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.need_share_flight is not None:
            result['need_share_flight'] = self.need_share_flight
        result['search_journeys'] = []
        if self.search_journeys is not None:
            for k in self.search_journeys:
                result['search_journeys'].append(k.to_map() if k else None)
        if self.search_mode is not None:
            result['search_mode'] = self.search_mode
        if self.trip_type is not None:
            result['trip_type'] = self.trip_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('cabin_type_list') is not None:
            self.cabin_type_list = m.get('cabin_type_list')
        if m.get('direct_only') is not None:
            self.direct_only = m.get('direct_only')
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('need_share_flight') is not None:
            self.need_share_flight = m.get('need_share_flight')
        self.search_journeys = []
        if m.get('search_journeys') is not None:
            for k in m.get('search_journeys'):
                temp_model = FlightOtaSearchV2RequestSearchJourneys()
                self.search_journeys.append(temp_model.from_map(k))
        if m.get('search_mode') is not None:
            self.search_mode = m.get('search_mode')
        if m.get('trip_type') is not None:
            self.trip_type = m.get('trip_type')
        return self


class FlightOtaSearchV2ShrinkRequest(TeaModel):
    def __init__(self, cabin_type_list_shrink=None, direct_only=None, isv_name=None, need_share_flight=None,
                 search_journeys_shrink=None, search_mode=None, trip_type=None):
        self.cabin_type_list_shrink = cabin_type_list_shrink  # type: str
        self.direct_only = direct_only  # type: bool
        self.isv_name = isv_name  # type: str
        self.need_share_flight = need_share_flight  # type: bool
        self.search_journeys_shrink = search_journeys_shrink  # type: str
        self.search_mode = search_mode  # type: int
        self.trip_type = trip_type  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOtaSearchV2ShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cabin_type_list_shrink is not None:
            result['cabin_type_list'] = self.cabin_type_list_shrink
        if self.direct_only is not None:
            result['direct_only'] = self.direct_only
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.need_share_flight is not None:
            result['need_share_flight'] = self.need_share_flight
        if self.search_journeys_shrink is not None:
            result['search_journeys'] = self.search_journeys_shrink
        if self.search_mode is not None:
            result['search_mode'] = self.search_mode
        if self.trip_type is not None:
            result['trip_type'] = self.trip_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('cabin_type_list') is not None:
            self.cabin_type_list_shrink = m.get('cabin_type_list')
        if m.get('direct_only') is not None:
            self.direct_only = m.get('direct_only')
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('need_share_flight') is not None:
            self.need_share_flight = m.get('need_share_flight')
        if m.get('search_journeys') is not None:
            self.search_journeys_shrink = m.get('search_journeys')
        if m.get('search_mode') is not None:
            self.search_mode = m.get('search_mode')
        if m.get('trip_type') is not None:
            self.trip_type = m.get('trip_type')
        return self


class FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosAirlineInfo(TeaModel):
    def __init__(self, airline_chinese_name=None, airline_chinese_short_name=None, airline_code=None,
                 airline_icon=None, cheap_flight=None):
        self.airline_chinese_name = airline_chinese_name  # type: str
        self.airline_chinese_short_name = airline_chinese_short_name  # type: str
        self.airline_code = airline_code  # type: str
        self.airline_icon = airline_icon  # type: str
        self.cheap_flight = cheap_flight  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosAirlineInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_chinese_name is not None:
            result['airline_chinese_name'] = self.airline_chinese_name
        if self.airline_chinese_short_name is not None:
            result['airline_chinese_short_name'] = self.airline_chinese_short_name
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.airline_icon is not None:
            result['airline_icon'] = self.airline_icon
        if self.cheap_flight is not None:
            result['cheap_flight'] = self.cheap_flight
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('airline_chinese_name') is not None:
            self.airline_chinese_name = m.get('airline_chinese_name')
        if m.get('airline_chinese_short_name') is not None:
            self.airline_chinese_short_name = m.get('airline_chinese_short_name')
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('airline_icon') is not None:
            self.airline_icon = m.get('airline_icon')
        if m.get('cheap_flight') is not None:
            self.cheap_flight = m.get('cheap_flight')
        return self


class FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosArrAirportInfo(TeaModel):
    def __init__(self, airport_code=None, airport_name=None, airport_name_color=None, airport_short_name=None,
                 terminal=None):
        self.airport_code = airport_code  # type: str
        self.airport_name = airport_name  # type: str
        self.airport_name_color = airport_name_color  # type: str
        self.airport_short_name = airport_short_name  # type: str
        self.terminal = terminal  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosArrAirportInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airport_code is not None:
            result['airport_code'] = self.airport_code
        if self.airport_name is not None:
            result['airport_name'] = self.airport_name
        if self.airport_name_color is not None:
            result['airport_name_color'] = self.airport_name_color
        if self.airport_short_name is not None:
            result['airport_short_name'] = self.airport_short_name
        if self.terminal is not None:
            result['terminal'] = self.terminal
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('airport_code') is not None:
            self.airport_code = m.get('airport_code')
        if m.get('airport_name') is not None:
            self.airport_name = m.get('airport_name')
        if m.get('airport_name_color') is not None:
            self.airport_name_color = m.get('airport_name_color')
        if m.get('airport_short_name') is not None:
            self.airport_short_name = m.get('airport_short_name')
        if m.get('terminal') is not None:
            self.terminal = m.get('terminal')
        return self


class FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosDepAirportInfo(TeaModel):
    def __init__(self, airport_code=None, airport_name=None, airport_name_color=None, airport_short_name=None,
                 terminal=None):
        self.airport_code = airport_code  # type: str
        self.airport_name = airport_name  # type: str
        self.airport_name_color = airport_name_color  # type: str
        self.airport_short_name = airport_short_name  # type: str
        self.terminal = terminal  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosDepAirportInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airport_code is not None:
            result['airport_code'] = self.airport_code
        if self.airport_name is not None:
            result['airport_name'] = self.airport_name
        if self.airport_name_color is not None:
            result['airport_name_color'] = self.airport_name_color
        if self.airport_short_name is not None:
            result['airport_short_name'] = self.airport_short_name
        if self.terminal is not None:
            result['terminal'] = self.terminal
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('airport_code') is not None:
            self.airport_code = m.get('airport_code')
        if m.get('airport_name') is not None:
            self.airport_name = m.get('airport_name')
        if m.get('airport_name_color') is not None:
            self.airport_name_color = m.get('airport_name_color')
        if m.get('airport_short_name') is not None:
            self.airport_short_name = m.get('airport_short_name')
        if m.get('terminal') is not None:
            self.terminal = m.get('terminal')
        return self


class FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightShareInfoOperatingAirlineInfo(TeaModel):
    def __init__(self, airline_chinese_name=None, airline_chinese_short_name=None, airline_code=None,
                 airline_icon=None, cheap_flight=None):
        self.airline_chinese_name = airline_chinese_name  # type: str
        self.airline_chinese_short_name = airline_chinese_short_name  # type: str
        self.airline_code = airline_code  # type: str
        self.airline_icon = airline_icon  # type: str
        self.cheap_flight = cheap_flight  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightShareInfoOperatingAirlineInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_chinese_name is not None:
            result['airline_chinese_name'] = self.airline_chinese_name
        if self.airline_chinese_short_name is not None:
            result['airline_chinese_short_name'] = self.airline_chinese_short_name
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.airline_icon is not None:
            result['airline_icon'] = self.airline_icon
        if self.cheap_flight is not None:
            result['cheap_flight'] = self.cheap_flight
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('airline_chinese_name') is not None:
            self.airline_chinese_name = m.get('airline_chinese_name')
        if m.get('airline_chinese_short_name') is not None:
            self.airline_chinese_short_name = m.get('airline_chinese_short_name')
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('airline_icon') is not None:
            self.airline_icon = m.get('airline_icon')
        if m.get('cheap_flight') is not None:
            self.cheap_flight = m.get('cheap_flight')
        return self


class FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightShareInfo(TeaModel):
    def __init__(self, operating_airline_info=None, operating_flight_no=None):
        self.operating_airline_info = operating_airline_info  # type: FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightShareInfoOperatingAirlineInfo
        self.operating_flight_no = operating_flight_no  # type: str

    def validate(self):
        if self.operating_airline_info:
            self.operating_airline_info.validate()

    def to_map(self):
        _map = super(FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightShareInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.operating_airline_info is not None:
            result['operating_airline_info'] = self.operating_airline_info.to_map()
        if self.operating_flight_no is not None:
            result['operating_flight_no'] = self.operating_flight_no
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('operating_airline_info') is not None:
            temp_model = FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightShareInfoOperatingAirlineInfo()
            self.operating_airline_info = temp_model.from_map(m['operating_airline_info'])
        if m.get('operating_flight_no') is not None:
            self.operating_flight_no = m.get('operating_flight_no')
        return self


class FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightStopInfo(TeaModel):
    def __init__(self, stop_airport=None, stop_airport_name=None, stop_arr_term=None, stop_arr_time=None,
                 stop_city_code=None, stop_city_name=None, stop_city_names=None, stop_dep_term=None, stop_dep_time=None,
                 stop_time=None):
        self.stop_airport = stop_airport  # type: str
        self.stop_airport_name = stop_airport_name  # type: str
        self.stop_arr_term = stop_arr_term  # type: str
        self.stop_arr_time = stop_arr_time  # type: str
        self.stop_city_code = stop_city_code  # type: str
        self.stop_city_name = stop_city_name  # type: str
        self.stop_city_names = stop_city_names  # type: list[str]
        self.stop_dep_term = stop_dep_term  # type: str
        self.stop_dep_time = stop_dep_time  # type: str
        self.stop_time = stop_time  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightStopInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.stop_airport is not None:
            result['stop_airport'] = self.stop_airport
        if self.stop_airport_name is not None:
            result['stop_airport_name'] = self.stop_airport_name
        if self.stop_arr_term is not None:
            result['stop_arr_term'] = self.stop_arr_term
        if self.stop_arr_time is not None:
            result['stop_arr_time'] = self.stop_arr_time
        if self.stop_city_code is not None:
            result['stop_city_code'] = self.stop_city_code
        if self.stop_city_name is not None:
            result['stop_city_name'] = self.stop_city_name
        if self.stop_city_names is not None:
            result['stop_city_names'] = self.stop_city_names
        if self.stop_dep_term is not None:
            result['stop_dep_term'] = self.stop_dep_term
        if self.stop_dep_time is not None:
            result['stop_dep_time'] = self.stop_dep_time
        if self.stop_time is not None:
            result['stop_time'] = self.stop_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('stop_airport') is not None:
            self.stop_airport = m.get('stop_airport')
        if m.get('stop_airport_name') is not None:
            self.stop_airport_name = m.get('stop_airport_name')
        if m.get('stop_arr_term') is not None:
            self.stop_arr_term = m.get('stop_arr_term')
        if m.get('stop_arr_time') is not None:
            self.stop_arr_time = m.get('stop_arr_time')
        if m.get('stop_city_code') is not None:
            self.stop_city_code = m.get('stop_city_code')
        if m.get('stop_city_name') is not None:
            self.stop_city_name = m.get('stop_city_name')
        if m.get('stop_city_names') is not None:
            self.stop_city_names = m.get('stop_city_names')
        if m.get('stop_dep_term') is not None:
            self.stop_dep_term = m.get('stop_dep_term')
        if m.get('stop_dep_time') is not None:
            self.stop_dep_time = m.get('stop_dep_time')
        if m.get('stop_time') is not None:
            self.stop_time = m.get('stop_time')
        return self


class FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfos(TeaModel):
    def __init__(self, airline_info=None, arr_airport_info=None, arr_city_code=None, arr_city_name=None,
                 arr_time=None, baggage_desc=None, dep_airport_info=None, dep_city_code=None, dep_city_name=None,
                 dep_time=None, duration=None, extra_info=None, flight_no=None, flight_share_info=None, flight_size=None,
                 flight_stop_info=None, flight_type=None, manufacturer=None, meal_desc=None, miles=None, on_time_rate=None,
                 one_more=None, one_more_show=None, segment_index=None, share=None, short_flight_size=None, stop=None,
                 total_time=None, transfer_time=None, transfer_time_number=None):
        self.airline_info = airline_info  # type: FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosAirlineInfo
        self.arr_airport_info = arr_airport_info  # type: FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosArrAirportInfo
        self.arr_city_code = arr_city_code  # type: str
        self.arr_city_name = arr_city_name  # type: str
        self.arr_time = arr_time  # type: str
        self.baggage_desc = baggage_desc  # type: str
        self.dep_airport_info = dep_airport_info  # type: FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosDepAirportInfo
        self.dep_city_code = dep_city_code  # type: str
        self.dep_city_name = dep_city_name  # type: str
        self.dep_time = dep_time  # type: str
        # duration
        self.duration = duration  # type: int
        self.extra_info = extra_info  # type: dict[str, any]
        self.flight_no = flight_no  # type: str
        self.flight_share_info = flight_share_info  # type: FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightShareInfo
        self.flight_size = flight_size  # type: str
        self.flight_stop_info = flight_stop_info  # type: FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightStopInfo
        self.flight_type = flight_type  # type: str
        self.manufacturer = manufacturer  # type: str
        self.meal_desc = meal_desc  # type: str
        self.miles = miles  # type: int
        self.on_time_rate = on_time_rate  # type: str
        self.one_more = one_more  # type: int
        self.one_more_show = one_more_show  # type: str
        self.segment_index = segment_index  # type: int
        self.share = share  # type: bool
        self.short_flight_size = short_flight_size  # type: str
        self.stop = stop  # type: bool
        self.total_time = total_time  # type: str
        self.transfer_time = transfer_time  # type: str
        self.transfer_time_number = transfer_time_number  # type: int

    def validate(self):
        if self.airline_info:
            self.airline_info.validate()
        if self.arr_airport_info:
            self.arr_airport_info.validate()
        if self.dep_airport_info:
            self.dep_airport_info.validate()
        if self.flight_share_info:
            self.flight_share_info.validate()
        if self.flight_stop_info:
            self.flight_stop_info.validate()

    def to_map(self):
        _map = super(FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfos, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_info is not None:
            result['airline_info'] = self.airline_info.to_map()
        if self.arr_airport_info is not None:
            result['arr_airport_info'] = self.arr_airport_info.to_map()
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.arr_city_name is not None:
            result['arr_city_name'] = self.arr_city_name
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.baggage_desc is not None:
            result['baggage_desc'] = self.baggage_desc
        if self.dep_airport_info is not None:
            result['dep_airport_info'] = self.dep_airport_info.to_map()
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_city_name is not None:
            result['dep_city_name'] = self.dep_city_name
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.duration is not None:
            result['duration'] = self.duration
        if self.extra_info is not None:
            result['extra_info'] = self.extra_info
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        if self.flight_share_info is not None:
            result['flight_share_info'] = self.flight_share_info.to_map()
        if self.flight_size is not None:
            result['flight_size'] = self.flight_size
        if self.flight_stop_info is not None:
            result['flight_stop_info'] = self.flight_stop_info.to_map()
        if self.flight_type is not None:
            result['flight_type'] = self.flight_type
        if self.manufacturer is not None:
            result['manufacturer'] = self.manufacturer
        if self.meal_desc is not None:
            result['meal_desc'] = self.meal_desc
        if self.miles is not None:
            result['miles'] = self.miles
        if self.on_time_rate is not None:
            result['on_time_rate'] = self.on_time_rate
        if self.one_more is not None:
            result['one_more'] = self.one_more
        if self.one_more_show is not None:
            result['one_more_show'] = self.one_more_show
        if self.segment_index is not None:
            result['segment_index'] = self.segment_index
        if self.share is not None:
            result['share'] = self.share
        if self.short_flight_size is not None:
            result['short_flight_size'] = self.short_flight_size
        if self.stop is not None:
            result['stop'] = self.stop
        if self.total_time is not None:
            result['total_time'] = self.total_time
        if self.transfer_time is not None:
            result['transfer_time'] = self.transfer_time
        if self.transfer_time_number is not None:
            result['transfer_time_number'] = self.transfer_time_number
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('airline_info') is not None:
            temp_model = FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosAirlineInfo()
            self.airline_info = temp_model.from_map(m['airline_info'])
        if m.get('arr_airport_info') is not None:
            temp_model = FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosArrAirportInfo()
            self.arr_airport_info = temp_model.from_map(m['arr_airport_info'])
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('arr_city_name') is not None:
            self.arr_city_name = m.get('arr_city_name')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('baggage_desc') is not None:
            self.baggage_desc = m.get('baggage_desc')
        if m.get('dep_airport_info') is not None:
            temp_model = FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosDepAirportInfo()
            self.dep_airport_info = temp_model.from_map(m['dep_airport_info'])
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_city_name') is not None:
            self.dep_city_name = m.get('dep_city_name')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('duration') is not None:
            self.duration = m.get('duration')
        if m.get('extra_info') is not None:
            self.extra_info = m.get('extra_info')
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        if m.get('flight_share_info') is not None:
            temp_model = FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightShareInfo()
            self.flight_share_info = temp_model.from_map(m['flight_share_info'])
        if m.get('flight_size') is not None:
            self.flight_size = m.get('flight_size')
        if m.get('flight_stop_info') is not None:
            temp_model = FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightStopInfo()
            self.flight_stop_info = temp_model.from_map(m['flight_stop_info'])
        if m.get('flight_type') is not None:
            self.flight_type = m.get('flight_type')
        if m.get('manufacturer') is not None:
            self.manufacturer = m.get('manufacturer')
        if m.get('meal_desc') is not None:
            self.meal_desc = m.get('meal_desc')
        if m.get('miles') is not None:
            self.miles = m.get('miles')
        if m.get('on_time_rate') is not None:
            self.on_time_rate = m.get('on_time_rate')
        if m.get('one_more') is not None:
            self.one_more = m.get('one_more')
        if m.get('one_more_show') is not None:
            self.one_more_show = m.get('one_more_show')
        if m.get('segment_index') is not None:
            self.segment_index = m.get('segment_index')
        if m.get('share') is not None:
            self.share = m.get('share')
        if m.get('short_flight_size') is not None:
            self.short_flight_size = m.get('short_flight_size')
        if m.get('stop') is not None:
            self.stop = m.get('stop')
        if m.get('total_time') is not None:
            self.total_time = m.get('total_time')
        if m.get('transfer_time') is not None:
            self.transfer_time = m.get('transfer_time')
        if m.get('transfer_time_number') is not None:
            self.transfer_time_number = m.get('transfer_time_number')
        return self


class FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfos(TeaModel):
    def __init__(self, arr_city_code=None, arr_city_name=None, arr_time=None, dep_city_code=None,
                 dep_city_name=None, dep_time=None, duration=None, extensions=None, flight_segment_infos=None, journey_index=None,
                 transfer_time=None):
        self.arr_city_code = arr_city_code  # type: str
        self.arr_city_name = arr_city_name  # type: str
        self.arr_time = arr_time  # type: str
        self.dep_city_code = dep_city_code  # type: str
        self.dep_city_name = dep_city_name  # type: str
        self.dep_time = dep_time  # type: str
        self.duration = duration  # type: int
        self.extensions = extensions  # type: dict[str, str]
        self.flight_segment_infos = flight_segment_infos  # type: list[FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfos]
        self.journey_index = journey_index  # type: int
        self.transfer_time = transfer_time  # type: int

    def validate(self):
        if self.flight_segment_infos:
            for k in self.flight_segment_infos:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfos, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.arr_city_name is not None:
            result['arr_city_name'] = self.arr_city_name
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_city_name is not None:
            result['dep_city_name'] = self.dep_city_name
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.duration is not None:
            result['duration'] = self.duration
        if self.extensions is not None:
            result['extensions'] = self.extensions
        result['flight_segment_infos'] = []
        if self.flight_segment_infos is not None:
            for k in self.flight_segment_infos:
                result['flight_segment_infos'].append(k.to_map() if k else None)
        if self.journey_index is not None:
            result['journey_index'] = self.journey_index
        if self.transfer_time is not None:
            result['transfer_time'] = self.transfer_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('arr_city_name') is not None:
            self.arr_city_name = m.get('arr_city_name')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_city_name') is not None:
            self.dep_city_name = m.get('dep_city_name')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('duration') is not None:
            self.duration = m.get('duration')
        if m.get('extensions') is not None:
            self.extensions = m.get('extensions')
        self.flight_segment_infos = []
        if m.get('flight_segment_infos') is not None:
            for k in m.get('flight_segment_infos'):
                temp_model = FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfos()
                self.flight_segment_infos.append(temp_model.from_map(k))
        if m.get('journey_index') is not None:
            self.journey_index = m.get('journey_index')
        if m.get('transfer_time') is not None:
            self.transfer_time = m.get('transfer_time')
        return self


class FlightOtaSearchV2ResponseBodyModuleItemListSubItems(TeaModel):
    def __init__(self, shopping_item_map=None, uniq_key=None):
        self.shopping_item_map = shopping_item_map  # type: dict[str, ModuleItemListSubItemsShoppingItemMapValue]
        self.uniq_key = uniq_key  # type: str

    def validate(self):
        if self.shopping_item_map:
            for v in self.shopping_item_map.values():
                if v:
                    v.validate()

    def to_map(self):
        _map = super(FlightOtaSearchV2ResponseBodyModuleItemListSubItems, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['shopping_item_map'] = {}
        if self.shopping_item_map is not None:
            for k, v in self.shopping_item_map.items():
                result['shopping_item_map'][k] = v.to_map()
        if self.uniq_key is not None:
            result['uniq_key'] = self.uniq_key
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.shopping_item_map = {}
        if m.get('shopping_item_map') is not None:
            for k, v in m.get('shopping_item_map').items():
                temp_model = ModuleItemListSubItemsShoppingItemMapValue()
                self.shopping_item_map[k] = temp_model.from_map(v)
        if m.get('uniq_key') is not None:
            self.uniq_key = m.get('uniq_key')
        return self


class FlightOtaSearchV2ResponseBodyModuleItemList(TeaModel):
    def __init__(self, flight_rule_infos=None, item_id=None, shopping_item_map=None, sub_item_position_map=None,
                 sub_items=None):
        self.flight_rule_infos = flight_rule_infos  # type: dict[str, ModuleItemListFlightRuleInfosValue]
        self.item_id = item_id  # type: str
        self.shopping_item_map = shopping_item_map  # type: dict[str, ModuleItemListShoppingItemMapValue]
        self.sub_item_position_map = sub_item_position_map  # type: dict[str, list[ModuleItemListSubItemPositionMapValue]]
        self.sub_items = sub_items  # type: list[FlightOtaSearchV2ResponseBodyModuleItemListSubItems]

    def validate(self):
        if self.flight_rule_infos:
            for v in self.flight_rule_infos.values():
                if v:
                    v.validate()
        if self.shopping_item_map:
            for v in self.shopping_item_map.values():
                if v:
                    v.validate()
        if self.sub_item_position_map:
            for v in self.sub_item_position_map.values():
                for k1 in v:
                    if k1:
                        k1.validate()
        if self.sub_items:
            for k in self.sub_items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightOtaSearchV2ResponseBodyModuleItemList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['flight_rule_infos'] = {}
        if self.flight_rule_infos is not None:
            for k, v in self.flight_rule_infos.items():
                result['flight_rule_infos'][k] = v.to_map()
        if self.item_id is not None:
            result['item_id'] = self.item_id
        result['shopping_item_map'] = {}
        if self.shopping_item_map is not None:
            for k, v in self.shopping_item_map.items():
                result['shopping_item_map'][k] = v.to_map()
        result['sub_item_position_map'] = {}
        if self.sub_item_position_map is not None:
            for k, v in self.sub_item_position_map.items():
                l1 = []
                for k1 in v:
                    l1.append(k1.to_map() if k1 else None)
                result['subItemPositionMap'][k] = l1
        result['sub_items'] = []
        if self.sub_items is not None:
            for k in self.sub_items:
                result['sub_items'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.flight_rule_infos = {}
        if m.get('flight_rule_infos') is not None:
            for k, v in m.get('flight_rule_infos').items():
                temp_model = ModuleItemListFlightRuleInfosValue()
                self.flight_rule_infos[k] = temp_model.from_map(v)
        if m.get('item_id') is not None:
            self.item_id = m.get('item_id')
        self.shopping_item_map = {}
        if m.get('shopping_item_map') is not None:
            for k, v in m.get('shopping_item_map').items():
                temp_model = ModuleItemListShoppingItemMapValue()
                self.shopping_item_map[k] = temp_model.from_map(v)
        self.sub_item_position_map = {}
        if m.get('sub_item_position_map') is not None:
            for k, v in m.get('sub_item_position_map').items():
                l1 = []
                for k1 in v:
                    temp_model = ModuleItemListSubItemPositionMapValue()
                    l1.append(temp_model.from_map(k1))
                self.sub_item_position_map['k'] = l1
        self.sub_items = []
        if m.get('sub_items') is not None:
            for k in m.get('sub_items'):
                temp_model = FlightOtaSearchV2ResponseBodyModuleItemListSubItems()
                self.sub_items.append(temp_model.from_map(k))
        return self


class FlightOtaSearchV2ResponseBodyModule(TeaModel):
    def __init__(self, flight_journey_infos=None, item_list=None, search_mode=None, trip_type=None):
        self.flight_journey_infos = flight_journey_infos  # type: list[FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfos]
        self.item_list = item_list  # type: list[FlightOtaSearchV2ResponseBodyModuleItemList]
        self.search_mode = search_mode  # type: int
        self.trip_type = trip_type  # type: int

    def validate(self):
        if self.flight_journey_infos:
            for k in self.flight_journey_infos:
                if k:
                    k.validate()
        if self.item_list:
            for k in self.item_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightOtaSearchV2ResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['flight_journey_infos'] = []
        if self.flight_journey_infos is not None:
            for k in self.flight_journey_infos:
                result['flight_journey_infos'].append(k.to_map() if k else None)
        result['item_list'] = []
        if self.item_list is not None:
            for k in self.item_list:
                result['item_list'].append(k.to_map() if k else None)
        if self.search_mode is not None:
            result['search_mode'] = self.search_mode
        if self.trip_type is not None:
            result['trip_type'] = self.trip_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.flight_journey_infos = []
        if m.get('flight_journey_infos') is not None:
            for k in m.get('flight_journey_infos'):
                temp_model = FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfos()
                self.flight_journey_infos.append(temp_model.from_map(k))
        self.item_list = []
        if m.get('item_list') is not None:
            for k in m.get('item_list'):
                temp_model = FlightOtaSearchV2ResponseBodyModuleItemList()
                self.item_list.append(temp_model.from_map(k))
        if m.get('search_mode') is not None:
            self.search_mode = m.get('search_mode')
        if m.get('trip_type') is not None:
            self.trip_type = m.get('trip_type')
        return self


class FlightOtaSearchV2ResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        # module
        self.module = module  # type: FlightOtaSearchV2ResponseBodyModule
        # requestId
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        # traceId
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(FlightOtaSearchV2ResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = FlightOtaSearchV2ResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightOtaSearchV2Response(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: FlightOtaSearchV2ResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(FlightOtaSearchV2Response, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightOtaSearchV2ResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightPayOrderHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightPayOrderHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class FlightPayOrderRequest(TeaModel):
    def __init__(self, corp_pay_price=None, dis_order_id=None, extra=None, personal_pay_price=None,
                 total_pay_price=None):
        self.corp_pay_price = corp_pay_price  # type: long
        self.dis_order_id = dis_order_id  # type: str
        self.extra = extra  # type: dict[str, str]
        self.personal_pay_price = personal_pay_price  # type: long
        self.total_pay_price = total_pay_price  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightPayOrderRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_pay_price is not None:
            result['corp_pay_price'] = self.corp_pay_price
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        if self.extra is not None:
            result['extra'] = self.extra
        if self.personal_pay_price is not None:
            result['personal_pay_price'] = self.personal_pay_price
        if self.total_pay_price is not None:
            result['total_pay_price'] = self.total_pay_price
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('corp_pay_price') is not None:
            self.corp_pay_price = m.get('corp_pay_price')
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        if m.get('extra') is not None:
            self.extra = m.get('extra')
        if m.get('personal_pay_price') is not None:
            self.personal_pay_price = m.get('personal_pay_price')
        if m.get('total_pay_price') is not None:
            self.total_pay_price = m.get('total_pay_price')
        return self


class FlightPayOrderShrinkRequest(TeaModel):
    def __init__(self, corp_pay_price=None, dis_order_id=None, extra_shrink=None, personal_pay_price=None,
                 total_pay_price=None):
        self.corp_pay_price = corp_pay_price  # type: long
        self.dis_order_id = dis_order_id  # type: str
        self.extra_shrink = extra_shrink  # type: str
        self.personal_pay_price = personal_pay_price  # type: long
        self.total_pay_price = total_pay_price  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightPayOrderShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_pay_price is not None:
            result['corp_pay_price'] = self.corp_pay_price
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        if self.extra_shrink is not None:
            result['extra'] = self.extra_shrink
        if self.personal_pay_price is not None:
            result['personal_pay_price'] = self.personal_pay_price
        if self.total_pay_price is not None:
            result['total_pay_price'] = self.total_pay_price
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('corp_pay_price') is not None:
            self.corp_pay_price = m.get('corp_pay_price')
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        if m.get('extra') is not None:
            self.extra_shrink = m.get('extra')
        if m.get('personal_pay_price') is not None:
            self.personal_pay_price = m.get('personal_pay_price')
        if m.get('total_pay_price') is not None:
            self.total_pay_price = m.get('total_pay_price')
        return self


class FlightPayOrderResponseBodyModule(TeaModel):
    def __init__(self, actual_pay_price=None, alipay_trade_no=None, last_pay_time=None, pay_status=None):
        self.actual_pay_price = actual_pay_price  # type: long
        self.alipay_trade_no = alipay_trade_no  # type: str
        self.last_pay_time = last_pay_time  # type: str
        self.pay_status = pay_status  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightPayOrderResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.actual_pay_price is not None:
            result['actual_pay_price'] = self.actual_pay_price
        if self.alipay_trade_no is not None:
            result['alipay_trade_no'] = self.alipay_trade_no
        if self.last_pay_time is not None:
            result['last_pay_time'] = self.last_pay_time
        if self.pay_status is not None:
            result['pay_status'] = self.pay_status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('actual_pay_price') is not None:
            self.actual_pay_price = m.get('actual_pay_price')
        if m.get('alipay_trade_no') is not None:
            self.alipay_trade_no = m.get('alipay_trade_no')
        if m.get('last_pay_time') is not None:
            self.last_pay_time = m.get('last_pay_time')
        if m.get('pay_status') is not None:
            self.pay_status = m.get('pay_status')
        return self


class FlightPayOrderResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: FlightPayOrderResponseBodyModule
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(FlightPayOrderResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = FlightPayOrderResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightPayOrderResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: FlightPayOrderResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(FlightPayOrderResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightPayOrderResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightPayOrderV2Headers(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightPayOrderV2Headers, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class FlightPayOrderV2Request(TeaModel):
    def __init__(self, isv_name=None, order_id=None, out_order_id=None, total_price=None,
                 total_service_fee_price=None):
        self.isv_name = isv_name  # type: str
        self.order_id = order_id  # type: str
        self.out_order_id = out_order_id  # type: str
        self.total_price = total_price  # type: long
        self.total_service_fee_price = total_service_fee_price  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightPayOrderV2Request, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        if self.total_price is not None:
            result['total_price'] = self.total_price
        if self.total_service_fee_price is not None:
            result['total_service_fee_price'] = self.total_service_fee_price
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        if m.get('total_price') is not None:
            self.total_price = m.get('total_price')
        if m.get('total_service_fee_price') is not None:
            self.total_service_fee_price = m.get('total_service_fee_price')
        return self


class FlightPayOrderV2ResponseBodyModule(TeaModel):
    def __init__(self, price=None):
        self.price = price  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightPayOrderV2ResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.price is not None:
            result['price'] = self.price
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('price') is not None:
            self.price = m.get('price')
        return self


class FlightPayOrderV2ResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        # module
        self.module = module  # type: FlightPayOrderV2ResponseBodyModule
        # requestId
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        # traceId
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(FlightPayOrderV2ResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = FlightPayOrderV2ResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightPayOrderV2Response(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: FlightPayOrderV2ResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(FlightPayOrderV2Response, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightPayOrderV2ResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightRefundApplyHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightRefundApplyHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class FlightRefundApplyRequestPassengerSegmentInfoList(TeaModel):
    def __init__(self, flight_no=None, passenger_name=None, user_id=None):
        self.flight_no = flight_no  # type: str
        self.passenger_name = passenger_name  # type: str
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightRefundApplyRequestPassengerSegmentInfoList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        if self.passenger_name is not None:
            result['passenger_name'] = self.passenger_name
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        if m.get('passenger_name') is not None:
            self.passenger_name = m.get('passenger_name')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class FlightRefundApplyRequest(TeaModel):
    def __init__(self, corp_refund_price=None, dis_order_id=None, dis_sub_order_id=None, display_refund_money=None,
                 extra=None, is_voluntary=None, item_unit_ids=None, passenger_segment_info_list=None,
                 personal_refund_price=None, reason_detail=None, reason_type=None, refund_voucher_info=None, session_id=None,
                 total_refund_price=None):
        self.corp_refund_price = corp_refund_price  # type: long
        self.dis_order_id = dis_order_id  # type: str
        self.dis_sub_order_id = dis_sub_order_id  # type: str
        self.display_refund_money = display_refund_money  # type: str
        self.extra = extra  # type: dict[str, str]
        self.is_voluntary = is_voluntary  # type: int
        self.item_unit_ids = item_unit_ids  # type: str
        self.passenger_segment_info_list = passenger_segment_info_list  # type: list[FlightRefundApplyRequestPassengerSegmentInfoList]
        self.personal_refund_price = personal_refund_price  # type: long
        self.reason_detail = reason_detail  # type: str
        self.reason_type = reason_type  # type: int
        self.refund_voucher_info = refund_voucher_info  # type: list[str]
        self.session_id = session_id  # type: str
        self.total_refund_price = total_refund_price  # type: long

    def validate(self):
        if self.passenger_segment_info_list:
            for k in self.passenger_segment_info_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightRefundApplyRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_refund_price is not None:
            result['corp_refund_price'] = self.corp_refund_price
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        if self.dis_sub_order_id is not None:
            result['dis_sub_order_id'] = self.dis_sub_order_id
        if self.display_refund_money is not None:
            result['display_refund_money'] = self.display_refund_money
        if self.extra is not None:
            result['extra'] = self.extra
        if self.is_voluntary is not None:
            result['is_voluntary'] = self.is_voluntary
        if self.item_unit_ids is not None:
            result['item_unit_ids'] = self.item_unit_ids
        result['passenger_segment_info_list'] = []
        if self.passenger_segment_info_list is not None:
            for k in self.passenger_segment_info_list:
                result['passenger_segment_info_list'].append(k.to_map() if k else None)
        if self.personal_refund_price is not None:
            result['personal_refund_price'] = self.personal_refund_price
        if self.reason_detail is not None:
            result['reason_detail'] = self.reason_detail
        if self.reason_type is not None:
            result['reason_type'] = self.reason_type
        if self.refund_voucher_info is not None:
            result['refund_voucher_info'] = self.refund_voucher_info
        if self.session_id is not None:
            result['session_id'] = self.session_id
        if self.total_refund_price is not None:
            result['total_refund_price'] = self.total_refund_price
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('corp_refund_price') is not None:
            self.corp_refund_price = m.get('corp_refund_price')
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        if m.get('dis_sub_order_id') is not None:
            self.dis_sub_order_id = m.get('dis_sub_order_id')
        if m.get('display_refund_money') is not None:
            self.display_refund_money = m.get('display_refund_money')
        if m.get('extra') is not None:
            self.extra = m.get('extra')
        if m.get('is_voluntary') is not None:
            self.is_voluntary = m.get('is_voluntary')
        if m.get('item_unit_ids') is not None:
            self.item_unit_ids = m.get('item_unit_ids')
        self.passenger_segment_info_list = []
        if m.get('passenger_segment_info_list') is not None:
            for k in m.get('passenger_segment_info_list'):
                temp_model = FlightRefundApplyRequestPassengerSegmentInfoList()
                self.passenger_segment_info_list.append(temp_model.from_map(k))
        if m.get('personal_refund_price') is not None:
            self.personal_refund_price = m.get('personal_refund_price')
        if m.get('reason_detail') is not None:
            self.reason_detail = m.get('reason_detail')
        if m.get('reason_type') is not None:
            self.reason_type = m.get('reason_type')
        if m.get('refund_voucher_info') is not None:
            self.refund_voucher_info = m.get('refund_voucher_info')
        if m.get('session_id') is not None:
            self.session_id = m.get('session_id')
        if m.get('total_refund_price') is not None:
            self.total_refund_price = m.get('total_refund_price')
        return self


class FlightRefundApplyShrinkRequest(TeaModel):
    def __init__(self, corp_refund_price=None, dis_order_id=None, dis_sub_order_id=None, display_refund_money=None,
                 extra_shrink=None, is_voluntary=None, item_unit_ids=None, passenger_segment_info_list_shrink=None,
                 personal_refund_price=None, reason_detail=None, reason_type=None, refund_voucher_info_shrink=None, session_id=None,
                 total_refund_price=None):
        self.corp_refund_price = corp_refund_price  # type: long
        self.dis_order_id = dis_order_id  # type: str
        self.dis_sub_order_id = dis_sub_order_id  # type: str
        self.display_refund_money = display_refund_money  # type: str
        self.extra_shrink = extra_shrink  # type: str
        self.is_voluntary = is_voluntary  # type: int
        self.item_unit_ids = item_unit_ids  # type: str
        self.passenger_segment_info_list_shrink = passenger_segment_info_list_shrink  # type: str
        self.personal_refund_price = personal_refund_price  # type: long
        self.reason_detail = reason_detail  # type: str
        self.reason_type = reason_type  # type: int
        self.refund_voucher_info_shrink = refund_voucher_info_shrink  # type: str
        self.session_id = session_id  # type: str
        self.total_refund_price = total_refund_price  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightRefundApplyShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_refund_price is not None:
            result['corp_refund_price'] = self.corp_refund_price
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        if self.dis_sub_order_id is not None:
            result['dis_sub_order_id'] = self.dis_sub_order_id
        if self.display_refund_money is not None:
            result['display_refund_money'] = self.display_refund_money
        if self.extra_shrink is not None:
            result['extra'] = self.extra_shrink
        if self.is_voluntary is not None:
            result['is_voluntary'] = self.is_voluntary
        if self.item_unit_ids is not None:
            result['item_unit_ids'] = self.item_unit_ids
        if self.passenger_segment_info_list_shrink is not None:
            result['passenger_segment_info_list'] = self.passenger_segment_info_list_shrink
        if self.personal_refund_price is not None:
            result['personal_refund_price'] = self.personal_refund_price
        if self.reason_detail is not None:
            result['reason_detail'] = self.reason_detail
        if self.reason_type is not None:
            result['reason_type'] = self.reason_type
        if self.refund_voucher_info_shrink is not None:
            result['refund_voucher_info'] = self.refund_voucher_info_shrink
        if self.session_id is not None:
            result['session_id'] = self.session_id
        if self.total_refund_price is not None:
            result['total_refund_price'] = self.total_refund_price
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('corp_refund_price') is not None:
            self.corp_refund_price = m.get('corp_refund_price')
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        if m.get('dis_sub_order_id') is not None:
            self.dis_sub_order_id = m.get('dis_sub_order_id')
        if m.get('display_refund_money') is not None:
            self.display_refund_money = m.get('display_refund_money')
        if m.get('extra') is not None:
            self.extra_shrink = m.get('extra')
        if m.get('is_voluntary') is not None:
            self.is_voluntary = m.get('is_voluntary')
        if m.get('item_unit_ids') is not None:
            self.item_unit_ids = m.get('item_unit_ids')
        if m.get('passenger_segment_info_list') is not None:
            self.passenger_segment_info_list_shrink = m.get('passenger_segment_info_list')
        if m.get('personal_refund_price') is not None:
            self.personal_refund_price = m.get('personal_refund_price')
        if m.get('reason_detail') is not None:
            self.reason_detail = m.get('reason_detail')
        if m.get('reason_type') is not None:
            self.reason_type = m.get('reason_type')
        if m.get('refund_voucher_info') is not None:
            self.refund_voucher_info_shrink = m.get('refund_voucher_info')
        if m.get('session_id') is not None:
            self.session_id = m.get('session_id')
        if m.get('total_refund_price') is not None:
            self.total_refund_price = m.get('total_refund_price')
        return self


class FlightRefundApplyResponseBodyModule(TeaModel):
    def __init__(self, dis_order_id=None, dis_sub_order_id=None, refund_apply_id=None, refund_fee=None,
                 refund_money=None):
        self.dis_order_id = dis_order_id  # type: str
        self.dis_sub_order_id = dis_sub_order_id  # type: str
        self.refund_apply_id = refund_apply_id  # type: long
        self.refund_fee = refund_fee  # type: long
        self.refund_money = refund_money  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightRefundApplyResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        if self.dis_sub_order_id is not None:
            result['dis_sub_order_id'] = self.dis_sub_order_id
        if self.refund_apply_id is not None:
            result['refund_apply_id'] = self.refund_apply_id
        if self.refund_fee is not None:
            result['refund_fee'] = self.refund_fee
        if self.refund_money is not None:
            result['refund_money'] = self.refund_money
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        if m.get('dis_sub_order_id') is not None:
            self.dis_sub_order_id = m.get('dis_sub_order_id')
        if m.get('refund_apply_id') is not None:
            self.refund_apply_id = m.get('refund_apply_id')
        if m.get('refund_fee') is not None:
            self.refund_fee = m.get('refund_fee')
        if m.get('refund_money') is not None:
            self.refund_money = m.get('refund_money')
        return self


class FlightRefundApplyResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: FlightRefundApplyResponseBodyModule
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(FlightRefundApplyResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = FlightRefundApplyResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightRefundApplyResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: FlightRefundApplyResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(FlightRefundApplyResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightRefundApplyResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightRefundApplyV2Headers(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightRefundApplyV2Headers, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class FlightRefundApplyV2RequestPassengerSegmentRelations(TeaModel):
    def __init__(self, passenger_id=None, segment_id_list=None):
        self.passenger_id = passenger_id  # type: str
        self.segment_id_list = segment_id_list  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightRefundApplyV2RequestPassengerSegmentRelations, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.passenger_id is not None:
            result['passenger_id'] = self.passenger_id
        if self.segment_id_list is not None:
            result['segment_id_list'] = self.segment_id_list
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('passenger_id') is not None:
            self.passenger_id = m.get('passenger_id')
        if m.get('segment_id_list') is not None:
            self.segment_id_list = m.get('segment_id_list')
        return self


class FlightRefundApplyV2Request(TeaModel):
    def __init__(self, isv_name=None, order_id=None, out_order_id=None, out_sub_order_id=None,
                 passenger_segment_relations=None, pre_cal_type=None, refund_reason=None, refund_reason_type=None, ticket_nos=None,
                 total_refund_price=None, upload_pict_urls=None, voluntary=None):
        self.isv_name = isv_name  # type: str
        self.order_id = order_id  # type: str
        self.out_order_id = out_order_id  # type: str
        self.out_sub_order_id = out_sub_order_id  # type: str
        self.passenger_segment_relations = passenger_segment_relations  # type: list[FlightRefundApplyV2RequestPassengerSegmentRelations]
        self.pre_cal_type = pre_cal_type  # type: int
        self.refund_reason = refund_reason  # type: str
        self.refund_reason_type = refund_reason_type  # type: int
        self.ticket_nos = ticket_nos  # type: list[str]
        self.total_refund_price = total_refund_price  # type: long
        self.upload_pict_urls = upload_pict_urls  # type: str
        self.voluntary = voluntary  # type: bool

    def validate(self):
        if self.passenger_segment_relations:
            for k in self.passenger_segment_relations:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightRefundApplyV2Request, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        if self.out_sub_order_id is not None:
            result['out_sub_order_id'] = self.out_sub_order_id
        result['passenger_segment_relations'] = []
        if self.passenger_segment_relations is not None:
            for k in self.passenger_segment_relations:
                result['passenger_segment_relations'].append(k.to_map() if k else None)
        if self.pre_cal_type is not None:
            result['pre_cal_type'] = self.pre_cal_type
        if self.refund_reason is not None:
            result['refund_reason'] = self.refund_reason
        if self.refund_reason_type is not None:
            result['refund_reason_type'] = self.refund_reason_type
        if self.ticket_nos is not None:
            result['ticket_nos'] = self.ticket_nos
        if self.total_refund_price is not None:
            result['total_refund_price'] = self.total_refund_price
        if self.upload_pict_urls is not None:
            result['upload_pict_urls'] = self.upload_pict_urls
        if self.voluntary is not None:
            result['voluntary'] = self.voluntary
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        if m.get('out_sub_order_id') is not None:
            self.out_sub_order_id = m.get('out_sub_order_id')
        self.passenger_segment_relations = []
        if m.get('passenger_segment_relations') is not None:
            for k in m.get('passenger_segment_relations'):
                temp_model = FlightRefundApplyV2RequestPassengerSegmentRelations()
                self.passenger_segment_relations.append(temp_model.from_map(k))
        if m.get('pre_cal_type') is not None:
            self.pre_cal_type = m.get('pre_cal_type')
        if m.get('refund_reason') is not None:
            self.refund_reason = m.get('refund_reason')
        if m.get('refund_reason_type') is not None:
            self.refund_reason_type = m.get('refund_reason_type')
        if m.get('ticket_nos') is not None:
            self.ticket_nos = m.get('ticket_nos')
        if m.get('total_refund_price') is not None:
            self.total_refund_price = m.get('total_refund_price')
        if m.get('upload_pict_urls') is not None:
            self.upload_pict_urls = m.get('upload_pict_urls')
        if m.get('voluntary') is not None:
            self.voluntary = m.get('voluntary')
        return self


class FlightRefundApplyV2ShrinkRequest(TeaModel):
    def __init__(self, isv_name=None, order_id=None, out_order_id=None, out_sub_order_id=None,
                 passenger_segment_relations_shrink=None, pre_cal_type=None, refund_reason=None, refund_reason_type=None, ticket_nos_shrink=None,
                 total_refund_price=None, upload_pict_urls=None, voluntary=None):
        self.isv_name = isv_name  # type: str
        self.order_id = order_id  # type: str
        self.out_order_id = out_order_id  # type: str
        self.out_sub_order_id = out_sub_order_id  # type: str
        self.passenger_segment_relations_shrink = passenger_segment_relations_shrink  # type: str
        self.pre_cal_type = pre_cal_type  # type: int
        self.refund_reason = refund_reason  # type: str
        self.refund_reason_type = refund_reason_type  # type: int
        self.ticket_nos_shrink = ticket_nos_shrink  # type: str
        self.total_refund_price = total_refund_price  # type: long
        self.upload_pict_urls = upload_pict_urls  # type: str
        self.voluntary = voluntary  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightRefundApplyV2ShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        if self.out_sub_order_id is not None:
            result['out_sub_order_id'] = self.out_sub_order_id
        if self.passenger_segment_relations_shrink is not None:
            result['passenger_segment_relations'] = self.passenger_segment_relations_shrink
        if self.pre_cal_type is not None:
            result['pre_cal_type'] = self.pre_cal_type
        if self.refund_reason is not None:
            result['refund_reason'] = self.refund_reason
        if self.refund_reason_type is not None:
            result['refund_reason_type'] = self.refund_reason_type
        if self.ticket_nos_shrink is not None:
            result['ticket_nos'] = self.ticket_nos_shrink
        if self.total_refund_price is not None:
            result['total_refund_price'] = self.total_refund_price
        if self.upload_pict_urls is not None:
            result['upload_pict_urls'] = self.upload_pict_urls
        if self.voluntary is not None:
            result['voluntary'] = self.voluntary
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        if m.get('out_sub_order_id') is not None:
            self.out_sub_order_id = m.get('out_sub_order_id')
        if m.get('passenger_segment_relations') is not None:
            self.passenger_segment_relations_shrink = m.get('passenger_segment_relations')
        if m.get('pre_cal_type') is not None:
            self.pre_cal_type = m.get('pre_cal_type')
        if m.get('refund_reason') is not None:
            self.refund_reason = m.get('refund_reason')
        if m.get('refund_reason_type') is not None:
            self.refund_reason_type = m.get('refund_reason_type')
        if m.get('ticket_nos') is not None:
            self.ticket_nos_shrink = m.get('ticket_nos')
        if m.get('total_refund_price') is not None:
            self.total_refund_price = m.get('total_refund_price')
        if m.get('upload_pict_urls') is not None:
            self.upload_pict_urls = m.get('upload_pict_urls')
        if m.get('voluntary') is not None:
            self.voluntary = m.get('voluntary')
        return self


class FlightRefundApplyV2ResponseBodyModule(TeaModel):
    def __init__(self, order_id=None, out_order_id=None, out_sub_order_id=None, sub_order_id=None):
        self.order_id = order_id  # type: str
        self.out_order_id = out_order_id  # type: str
        self.out_sub_order_id = out_sub_order_id  # type: str
        self.sub_order_id = sub_order_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightRefundApplyV2ResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        if self.out_sub_order_id is not None:
            result['out_sub_order_id'] = self.out_sub_order_id
        if self.sub_order_id is not None:
            result['sub_order_id'] = self.sub_order_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        if m.get('out_sub_order_id') is not None:
            self.out_sub_order_id = m.get('out_sub_order_id')
        if m.get('sub_order_id') is not None:
            self.sub_order_id = m.get('sub_order_id')
        return self


class FlightRefundApplyV2ResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: FlightRefundApplyV2ResponseBodyModule
        # requestId
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        # traceId
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(FlightRefundApplyV2ResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = FlightRefundApplyV2ResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightRefundApplyV2Response(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: FlightRefundApplyV2ResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(FlightRefundApplyV2Response, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightRefundApplyV2ResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightRefundDetailHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightRefundDetailHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class FlightRefundDetailRequest(TeaModel):
    def __init__(self, dis_order_id=None, dis_sub_order_id=None):
        self.dis_order_id = dis_order_id  # type: str
        self.dis_sub_order_id = dis_sub_order_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightRefundDetailRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        if self.dis_sub_order_id is not None:
            result['dis_sub_order_id'] = self.dis_sub_order_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        if m.get('dis_sub_order_id') is not None:
            self.dis_sub_order_id = m.get('dis_sub_order_id')
        return self


class FlightRefundDetailResponseBodyModuleRefundFeeList(TeaModel):
    def __init__(self, alipay_trade_no=None, refund_fee=None, refund_price=None, status=None):
        self.alipay_trade_no = alipay_trade_no  # type: str
        self.refund_fee = refund_fee  # type: long
        self.refund_price = refund_price  # type: long
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightRefundDetailResponseBodyModuleRefundFeeList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alipay_trade_no is not None:
            result['alipay_trade_no'] = self.alipay_trade_no
        if self.refund_fee is not None:
            result['refund_fee'] = self.refund_fee
        if self.refund_price is not None:
            result['refund_price'] = self.refund_price
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('alipay_trade_no') is not None:
            self.alipay_trade_no = m.get('alipay_trade_no')
        if m.get('refund_fee') is not None:
            self.refund_fee = m.get('refund_fee')
        if m.get('refund_price') is not None:
            self.refund_price = m.get('refund_price')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class FlightRefundDetailResponseBodyModule(TeaModel):
    def __init__(self, btrip_order_id=None, btrip_sub_order_id=None, dis_order_id=None, dis_sub_order_id=None,
                 is_voluntary=None, reason=None, refund_fee=None, refund_fee_list=None, refund_price=None, status=None):
        self.btrip_order_id = btrip_order_id  # type: long
        self.btrip_sub_order_id = btrip_sub_order_id  # type: long
        self.dis_order_id = dis_order_id  # type: str
        self.dis_sub_order_id = dis_sub_order_id  # type: str
        self.is_voluntary = is_voluntary  # type: int
        self.reason = reason  # type: str
        self.refund_fee = refund_fee  # type: long
        self.refund_fee_list = refund_fee_list  # type: list[FlightRefundDetailResponseBodyModuleRefundFeeList]
        self.refund_price = refund_price  # type: long
        self.status = status  # type: str

    def validate(self):
        if self.refund_fee_list:
            for k in self.refund_fee_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightRefundDetailResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.btrip_order_id is not None:
            result['btrip_order_id'] = self.btrip_order_id
        if self.btrip_sub_order_id is not None:
            result['btrip_sub_order_id'] = self.btrip_sub_order_id
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        if self.dis_sub_order_id is not None:
            result['dis_sub_order_id'] = self.dis_sub_order_id
        if self.is_voluntary is not None:
            result['is_voluntary'] = self.is_voluntary
        if self.reason is not None:
            result['reason'] = self.reason
        if self.refund_fee is not None:
            result['refund_fee'] = self.refund_fee
        result['refund_fee_list'] = []
        if self.refund_fee_list is not None:
            for k in self.refund_fee_list:
                result['refund_fee_list'].append(k.to_map() if k else None)
        if self.refund_price is not None:
            result['refund_price'] = self.refund_price
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('btrip_order_id') is not None:
            self.btrip_order_id = m.get('btrip_order_id')
        if m.get('btrip_sub_order_id') is not None:
            self.btrip_sub_order_id = m.get('btrip_sub_order_id')
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        if m.get('dis_sub_order_id') is not None:
            self.dis_sub_order_id = m.get('dis_sub_order_id')
        if m.get('is_voluntary') is not None:
            self.is_voluntary = m.get('is_voluntary')
        if m.get('reason') is not None:
            self.reason = m.get('reason')
        if m.get('refund_fee') is not None:
            self.refund_fee = m.get('refund_fee')
        self.refund_fee_list = []
        if m.get('refund_fee_list') is not None:
            for k in m.get('refund_fee_list'):
                temp_model = FlightRefundDetailResponseBodyModuleRefundFeeList()
                self.refund_fee_list.append(temp_model.from_map(k))
        if m.get('refund_price') is not None:
            self.refund_price = m.get('refund_price')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class FlightRefundDetailResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: FlightRefundDetailResponseBodyModule
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(FlightRefundDetailResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = FlightRefundDetailResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightRefundDetailResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: FlightRefundDetailResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(FlightRefundDetailResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightRefundDetailResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightRefundDetailV2Headers(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightRefundDetailV2Headers, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class FlightRefundDetailV2Request(TeaModel):
    def __init__(self, isv_name=None, order_id=None, refund_apply_id=None):
        self.isv_name = isv_name  # type: str
        self.order_id = order_id  # type: str
        self.refund_apply_id = refund_apply_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightRefundDetailV2Request, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.refund_apply_id is not None:
            result['refund_apply_id'] = self.refund_apply_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('refund_apply_id') is not None:
            self.refund_apply_id = m.get('refund_apply_id')
        return self


class FlightRefundDetailV2ResponseBodyModuleContactInfoDTO(TeaModel):
    def __init__(self, contact_email=None, contact_name=None, contact_phone=None, send_msg_to_passenger=None):
        self.contact_email = contact_email  # type: str
        self.contact_name = contact_name  # type: str
        self.contact_phone = contact_phone  # type: str
        self.send_msg_to_passenger = send_msg_to_passenger  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightRefundDetailV2ResponseBodyModuleContactInfoDTO, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_email is not None:
            result['contact_email'] = self.contact_email
        if self.contact_name is not None:
            result['contact_name'] = self.contact_name
        if self.contact_phone is not None:
            result['contact_phone'] = self.contact_phone
        if self.send_msg_to_passenger is not None:
            result['send_msg_to_passenger'] = self.send_msg_to_passenger
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('contact_email') is not None:
            self.contact_email = m.get('contact_email')
        if m.get('contact_name') is not None:
            self.contact_name = m.get('contact_name')
        if m.get('contact_phone') is not None:
            self.contact_phone = m.get('contact_phone')
        if m.get('send_msg_to_passenger') is not None:
            self.send_msg_to_passenger = m.get('send_msg_to_passenger')
        return self


class FlightRefundDetailV2ResponseBodyModuleFlightInfoDTOSSegmentPosition(TeaModel):
    def __init__(self, journey_index=None, segment_index=None):
        self.journey_index = journey_index  # type: int
        self.segment_index = segment_index  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightRefundDetailV2ResponseBodyModuleFlightInfoDTOSSegmentPosition, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.journey_index is not None:
            result['journey_index'] = self.journey_index
        if self.segment_index is not None:
            result['segment_index'] = self.segment_index
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('journey_index') is not None:
            self.journey_index = m.get('journey_index')
        if m.get('segment_index') is not None:
            self.segment_index = m.get('segment_index')
        return self


class FlightRefundDetailV2ResponseBodyModuleFlightInfoDTOS(TeaModel):
    def __init__(self, airline_code=None, airline_icon_url=None, airline_name=None, arr_airport_code=None,
                 arr_airport_name=None, arr_city_code=None, arr_city_name=None, arr_terminal=None, arr_time=None, cabin=None,
                 cabin_class=None, cabin_class_name=None, cabin_discount=None, carrier_airline_code=None,
                 carrier_airline_icon_url=None, carrier_airline_name=None, carrier_flight_no=None, dep_airport_code=None,
                 dep_airport_name=None, dep_city_code=None, dep_city_name=None, dep_terminal=None, dep_time=None, flight_no=None,
                 flight_type=None, meal_desc=None, segment_id=None, segment_position=None, stop_arr_time=None, stop_city=None,
                 stop_dep_time=None):
        self.airline_code = airline_code  # type: str
        self.airline_icon_url = airline_icon_url  # type: str
        self.airline_name = airline_name  # type: str
        self.arr_airport_code = arr_airport_code  # type: str
        self.arr_airport_name = arr_airport_name  # type: str
        self.arr_city_code = arr_city_code  # type: str
        self.arr_city_name = arr_city_name  # type: str
        self.arr_terminal = arr_terminal  # type: str
        self.arr_time = arr_time  # type: str
        self.cabin = cabin  # type: str
        self.cabin_class = cabin_class  # type: str
        self.cabin_class_name = cabin_class_name  # type: str
        self.cabin_discount = cabin_discount  # type: long
        self.carrier_airline_code = carrier_airline_code  # type: str
        self.carrier_airline_icon_url = carrier_airline_icon_url  # type: str
        self.carrier_airline_name = carrier_airline_name  # type: str
        self.carrier_flight_no = carrier_flight_no  # type: str
        self.dep_airport_code = dep_airport_code  # type: str
        self.dep_airport_name = dep_airport_name  # type: str
        self.dep_city_code = dep_city_code  # type: str
        self.dep_city_name = dep_city_name  # type: str
        self.dep_terminal = dep_terminal  # type: str
        self.dep_time = dep_time  # type: str
        self.flight_no = flight_no  # type: str
        self.flight_type = flight_type  # type: str
        self.meal_desc = meal_desc  # type: str
        self.segment_id = segment_id  # type: str
        self.segment_position = segment_position  # type: FlightRefundDetailV2ResponseBodyModuleFlightInfoDTOSSegmentPosition
        self.stop_arr_time = stop_arr_time  # type: str
        self.stop_city = stop_city  # type: str
        self.stop_dep_time = stop_dep_time  # type: str

    def validate(self):
        if self.segment_position:
            self.segment_position.validate()

    def to_map(self):
        _map = super(FlightRefundDetailV2ResponseBodyModuleFlightInfoDTOS, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.airline_icon_url is not None:
            result['airline_icon_url'] = self.airline_icon_url
        if self.airline_name is not None:
            result['airline_name'] = self.airline_name
        if self.arr_airport_code is not None:
            result['arr_airport_code'] = self.arr_airport_code
        if self.arr_airport_name is not None:
            result['arr_airport_name'] = self.arr_airport_name
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.arr_city_name is not None:
            result['arr_city_name'] = self.arr_city_name
        if self.arr_terminal is not None:
            result['arr_terminal'] = self.arr_terminal
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.cabin is not None:
            result['cabin'] = self.cabin
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.cabin_class_name is not None:
            result['cabin_class_name'] = self.cabin_class_name
        if self.cabin_discount is not None:
            result['cabin_discount'] = self.cabin_discount
        if self.carrier_airline_code is not None:
            result['carrier_airline_code'] = self.carrier_airline_code
        if self.carrier_airline_icon_url is not None:
            result['carrier_airline_icon_url'] = self.carrier_airline_icon_url
        if self.carrier_airline_name is not None:
            result['carrier_airline_name'] = self.carrier_airline_name
        if self.carrier_flight_no is not None:
            result['carrier_flight_no'] = self.carrier_flight_no
        if self.dep_airport_code is not None:
            result['dep_airport_code'] = self.dep_airport_code
        if self.dep_airport_name is not None:
            result['dep_airport_name'] = self.dep_airport_name
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_city_name is not None:
            result['dep_city_name'] = self.dep_city_name
        if self.dep_terminal is not None:
            result['dep_terminal'] = self.dep_terminal
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        if self.flight_type is not None:
            result['flight_type'] = self.flight_type
        if self.meal_desc is not None:
            result['meal_desc'] = self.meal_desc
        if self.segment_id is not None:
            result['segment_id'] = self.segment_id
        if self.segment_position is not None:
            result['segment_position'] = self.segment_position.to_map()
        if self.stop_arr_time is not None:
            result['stop_arr_time'] = self.stop_arr_time
        if self.stop_city is not None:
            result['stop_city'] = self.stop_city
        if self.stop_dep_time is not None:
            result['stop_dep_time'] = self.stop_dep_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('airline_icon_url') is not None:
            self.airline_icon_url = m.get('airline_icon_url')
        if m.get('airline_name') is not None:
            self.airline_name = m.get('airline_name')
        if m.get('arr_airport_code') is not None:
            self.arr_airport_code = m.get('arr_airport_code')
        if m.get('arr_airport_name') is not None:
            self.arr_airport_name = m.get('arr_airport_name')
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('arr_city_name') is not None:
            self.arr_city_name = m.get('arr_city_name')
        if m.get('arr_terminal') is not None:
            self.arr_terminal = m.get('arr_terminal')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('cabin') is not None:
            self.cabin = m.get('cabin')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('cabin_class_name') is not None:
            self.cabin_class_name = m.get('cabin_class_name')
        if m.get('cabin_discount') is not None:
            self.cabin_discount = m.get('cabin_discount')
        if m.get('carrier_airline_code') is not None:
            self.carrier_airline_code = m.get('carrier_airline_code')
        if m.get('carrier_airline_icon_url') is not None:
            self.carrier_airline_icon_url = m.get('carrier_airline_icon_url')
        if m.get('carrier_airline_name') is not None:
            self.carrier_airline_name = m.get('carrier_airline_name')
        if m.get('carrier_flight_no') is not None:
            self.carrier_flight_no = m.get('carrier_flight_no')
        if m.get('dep_airport_code') is not None:
            self.dep_airport_code = m.get('dep_airport_code')
        if m.get('dep_airport_name') is not None:
            self.dep_airport_name = m.get('dep_airport_name')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_city_name') is not None:
            self.dep_city_name = m.get('dep_city_name')
        if m.get('dep_terminal') is not None:
            self.dep_terminal = m.get('dep_terminal')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        if m.get('flight_type') is not None:
            self.flight_type = m.get('flight_type')
        if m.get('meal_desc') is not None:
            self.meal_desc = m.get('meal_desc')
        if m.get('segment_id') is not None:
            self.segment_id = m.get('segment_id')
        if m.get('segment_position') is not None:
            temp_model = FlightRefundDetailV2ResponseBodyModuleFlightInfoDTOSSegmentPosition()
            self.segment_position = temp_model.from_map(m['segment_position'])
        if m.get('stop_arr_time') is not None:
            self.stop_arr_time = m.get('stop_arr_time')
        if m.get('stop_city') is not None:
            self.stop_city = m.get('stop_city')
        if m.get('stop_dep_time') is not None:
            self.stop_dep_time = m.get('stop_dep_time')
        return self


class FlightRefundDetailV2ResponseBodyModuleTravelerInfoDTOS(TeaModel):
    def __init__(self, birth_date=None, cert_no=None, cert_type=None, gender=None, origin_ticket_nos=None,
                 passenger_id=None, passenger_name=None, passenger_type=None, phone=None, pid=None, ticket_nos=None):
        self.birth_date = birth_date  # type: str
        self.cert_no = cert_no  # type: str
        self.cert_type = cert_type  # type: int
        self.gender = gender  # type: int
        self.origin_ticket_nos = origin_ticket_nos  # type: list[str]
        self.passenger_id = passenger_id  # type: str
        self.passenger_name = passenger_name  # type: str
        self.passenger_type = passenger_type  # type: int
        self.phone = phone  # type: str
        self.pid = pid  # type: long
        self.ticket_nos = ticket_nos  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightRefundDetailV2ResponseBodyModuleTravelerInfoDTOS, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.birth_date is not None:
            result['birth_date'] = self.birth_date
        if self.cert_no is not None:
            result['cert_no'] = self.cert_no
        if self.cert_type is not None:
            result['cert_type'] = self.cert_type
        if self.gender is not None:
            result['gender'] = self.gender
        if self.origin_ticket_nos is not None:
            result['origin_ticket_nos'] = self.origin_ticket_nos
        if self.passenger_id is not None:
            result['passenger_id'] = self.passenger_id
        if self.passenger_name is not None:
            result['passenger_name'] = self.passenger_name
        if self.passenger_type is not None:
            result['passenger_type'] = self.passenger_type
        if self.phone is not None:
            result['phone'] = self.phone
        if self.pid is not None:
            result['pid'] = self.pid
        if self.ticket_nos is not None:
            result['ticket_nos'] = self.ticket_nos
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('birth_date') is not None:
            self.birth_date = m.get('birth_date')
        if m.get('cert_no') is not None:
            self.cert_no = m.get('cert_no')
        if m.get('cert_type') is not None:
            self.cert_type = m.get('cert_type')
        if m.get('gender') is not None:
            self.gender = m.get('gender')
        if m.get('origin_ticket_nos') is not None:
            self.origin_ticket_nos = m.get('origin_ticket_nos')
        if m.get('passenger_id') is not None:
            self.passenger_id = m.get('passenger_id')
        if m.get('passenger_name') is not None:
            self.passenger_name = m.get('passenger_name')
        if m.get('passenger_type') is not None:
            self.passenger_type = m.get('passenger_type')
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        if m.get('pid') is not None:
            self.pid = m.get('pid')
        if m.get('ticket_nos') is not None:
            self.ticket_nos = m.get('ticket_nos')
        return self


class FlightRefundDetailV2ResponseBodyModule(TeaModel):
    def __init__(self, apply_time=None, contact_info_dto=None, flight_info_dtos=None, order_id=None,
                 out_order_id=None, out_sub_order_id=None, reason=None, reason_code=None, refund_fail_reason=None,
                 refund_handling_fee=None, refund_money=None, status=None, sub_order_id=None, traveler_info_dtos=None):
        self.apply_time = apply_time  # type: str
        self.contact_info_dto = contact_info_dto  # type: FlightRefundDetailV2ResponseBodyModuleContactInfoDTO
        self.flight_info_dtos = flight_info_dtos  # type: list[FlightRefundDetailV2ResponseBodyModuleFlightInfoDTOS]
        self.order_id = order_id  # type: long
        self.out_order_id = out_order_id  # type: str
        self.out_sub_order_id = out_sub_order_id  # type: str
        self.reason = reason  # type: str
        self.reason_code = reason_code  # type: str
        self.refund_fail_reason = refund_fail_reason  # type: str
        self.refund_handling_fee = refund_handling_fee  # type: long
        self.refund_money = refund_money  # type: long
        self.status = status  # type: int
        self.sub_order_id = sub_order_id  # type: long
        self.traveler_info_dtos = traveler_info_dtos  # type: list[FlightRefundDetailV2ResponseBodyModuleTravelerInfoDTOS]

    def validate(self):
        if self.contact_info_dto:
            self.contact_info_dto.validate()
        if self.flight_info_dtos:
            for k in self.flight_info_dtos:
                if k:
                    k.validate()
        if self.traveler_info_dtos:
            for k in self.traveler_info_dtos:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightRefundDetailV2ResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_time is not None:
            result['apply_time'] = self.apply_time
        if self.contact_info_dto is not None:
            result['contact_info_d_t_o'] = self.contact_info_dto.to_map()
        result['flight_info_d_t_o_s'] = []
        if self.flight_info_dtos is not None:
            for k in self.flight_info_dtos:
                result['flight_info_d_t_o_s'].append(k.to_map() if k else None)
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        if self.out_sub_order_id is not None:
            result['out_sub_order_id'] = self.out_sub_order_id
        if self.reason is not None:
            result['reason'] = self.reason
        if self.reason_code is not None:
            result['reason_code'] = self.reason_code
        if self.refund_fail_reason is not None:
            result['refund_fail_reason'] = self.refund_fail_reason
        if self.refund_handling_fee is not None:
            result['refund_handling_fee'] = self.refund_handling_fee
        if self.refund_money is not None:
            result['refund_money'] = self.refund_money
        if self.status is not None:
            result['status'] = self.status
        if self.sub_order_id is not None:
            result['sub_order_id'] = self.sub_order_id
        result['traveler_info_d_t_o_s'] = []
        if self.traveler_info_dtos is not None:
            for k in self.traveler_info_dtos:
                result['traveler_info_d_t_o_s'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('apply_time') is not None:
            self.apply_time = m.get('apply_time')
        if m.get('contact_info_d_t_o') is not None:
            temp_model = FlightRefundDetailV2ResponseBodyModuleContactInfoDTO()
            self.contact_info_dto = temp_model.from_map(m['contact_info_d_t_o'])
        self.flight_info_dtos = []
        if m.get('flight_info_d_t_o_s') is not None:
            for k in m.get('flight_info_d_t_o_s'):
                temp_model = FlightRefundDetailV2ResponseBodyModuleFlightInfoDTOS()
                self.flight_info_dtos.append(temp_model.from_map(k))
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        if m.get('out_sub_order_id') is not None:
            self.out_sub_order_id = m.get('out_sub_order_id')
        if m.get('reason') is not None:
            self.reason = m.get('reason')
        if m.get('reason_code') is not None:
            self.reason_code = m.get('reason_code')
        if m.get('refund_fail_reason') is not None:
            self.refund_fail_reason = m.get('refund_fail_reason')
        if m.get('refund_handling_fee') is not None:
            self.refund_handling_fee = m.get('refund_handling_fee')
        if m.get('refund_money') is not None:
            self.refund_money = m.get('refund_money')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('sub_order_id') is not None:
            self.sub_order_id = m.get('sub_order_id')
        self.traveler_info_dtos = []
        if m.get('traveler_info_d_t_o_s') is not None:
            for k in m.get('traveler_info_d_t_o_s'):
                temp_model = FlightRefundDetailV2ResponseBodyModuleTravelerInfoDTOS()
                self.traveler_info_dtos.append(temp_model.from_map(k))
        return self


class FlightRefundDetailV2ResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        # module
        self.module = module  # type: FlightRefundDetailV2ResponseBodyModule
        # requestId
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        # traceId
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(FlightRefundDetailV2ResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = FlightRefundDetailV2ResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightRefundDetailV2Response(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: FlightRefundDetailV2ResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(FlightRefundDetailV2Response, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightRefundDetailV2ResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightRefundPreCalHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightRefundPreCalHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class FlightRefundPreCalRequestPassengerSegmentInfoList(TeaModel):
    def __init__(self, flight_no=None, passenger_name=None, user_id=None):
        self.flight_no = flight_no  # type: str
        self.passenger_name = passenger_name  # type: str
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightRefundPreCalRequestPassengerSegmentInfoList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        if self.passenger_name is not None:
            result['passenger_name'] = self.passenger_name
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        if m.get('passenger_name') is not None:
            self.passenger_name = m.get('passenger_name')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class FlightRefundPreCalRequest(TeaModel):
    def __init__(self, dis_order_id=None, is_voluntary=None, passenger_segment_info_list=None):
        self.dis_order_id = dis_order_id  # type: str
        self.is_voluntary = is_voluntary  # type: str
        self.passenger_segment_info_list = passenger_segment_info_list  # type: list[FlightRefundPreCalRequestPassengerSegmentInfoList]

    def validate(self):
        if self.passenger_segment_info_list:
            for k in self.passenger_segment_info_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightRefundPreCalRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        if self.is_voluntary is not None:
            result['is_voluntary'] = self.is_voluntary
        result['passenger_segment_info_list'] = []
        if self.passenger_segment_info_list is not None:
            for k in self.passenger_segment_info_list:
                result['passenger_segment_info_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        if m.get('is_voluntary') is not None:
            self.is_voluntary = m.get('is_voluntary')
        self.passenger_segment_info_list = []
        if m.get('passenger_segment_info_list') is not None:
            for k in m.get('passenger_segment_info_list'):
                temp_model = FlightRefundPreCalRequestPassengerSegmentInfoList()
                self.passenger_segment_info_list.append(temp_model.from_map(k))
        return self


class FlightRefundPreCalShrinkRequest(TeaModel):
    def __init__(self, dis_order_id=None, is_voluntary=None, passenger_segment_info_list_shrink=None):
        self.dis_order_id = dis_order_id  # type: str
        self.is_voluntary = is_voluntary  # type: str
        self.passenger_segment_info_list_shrink = passenger_segment_info_list_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightRefundPreCalShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        if self.is_voluntary is not None:
            result['is_voluntary'] = self.is_voluntary
        if self.passenger_segment_info_list_shrink is not None:
            result['passenger_segment_info_list'] = self.passenger_segment_info_list_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        if m.get('is_voluntary') is not None:
            self.is_voluntary = m.get('is_voluntary')
        if m.get('passenger_segment_info_list') is not None:
            self.passenger_segment_info_list_shrink = m.get('passenger_segment_info_list')
        return self


class FlightRefundPreCalResponseBodyModuleMultiRefundCalList(TeaModel):
    def __init__(self, can_apply_refund=None, name=None, pre_refund_money=None, refund_fee=None, user_id=None):
        self.can_apply_refund = can_apply_refund  # type: bool
        self.name = name  # type: str
        self.pre_refund_money = pre_refund_money  # type: long
        self.refund_fee = refund_fee  # type: long
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightRefundPreCalResponseBodyModuleMultiRefundCalList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.can_apply_refund is not None:
            result['can_apply_refund'] = self.can_apply_refund
        if self.name is not None:
            result['name'] = self.name
        if self.pre_refund_money is not None:
            result['pre_refund_money'] = self.pre_refund_money
        if self.refund_fee is not None:
            result['refund_fee'] = self.refund_fee
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('can_apply_refund') is not None:
            self.can_apply_refund = m.get('can_apply_refund')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('pre_refund_money') is not None:
            self.pre_refund_money = m.get('pre_refund_money')
        if m.get('refund_fee') is not None:
            self.refund_fee = m.get('refund_fee')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class FlightRefundPreCalResponseBodyModuleReturnReason(TeaModel):
    def __init__(self, extend_desc=None, person=None, reason_code=None, reason_show=None, reason_type=None,
                 volunteer=None):
        self.extend_desc = extend_desc  # type: str
        self.person = person  # type: int
        self.reason_code = reason_code  # type: int
        self.reason_show = reason_show  # type: str
        self.reason_type = reason_type  # type: int
        self.volunteer = volunteer  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightRefundPreCalResponseBodyModuleReturnReason, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.extend_desc is not None:
            result['extend_desc'] = self.extend_desc
        if self.person is not None:
            result['person'] = self.person
        if self.reason_code is not None:
            result['reason_code'] = self.reason_code
        if self.reason_show is not None:
            result['reason_show'] = self.reason_show
        if self.reason_type is not None:
            result['reason_type'] = self.reason_type
        if self.volunteer is not None:
            result['volunteer'] = self.volunteer
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('extend_desc') is not None:
            self.extend_desc = m.get('extend_desc')
        if m.get('person') is not None:
            self.person = m.get('person')
        if m.get('reason_code') is not None:
            self.reason_code = m.get('reason_code')
        if m.get('reason_show') is not None:
            self.reason_show = m.get('reason_show')
        if m.get('reason_type') is not None:
            self.reason_type = m.get('reason_type')
        if m.get('volunteer') is not None:
            self.volunteer = m.get('volunteer')
        return self


class FlightRefundPreCalResponseBodyModule(TeaModel):
    def __init__(self, flight_change=None, item_unit_id=None, multi_refund_cal_list=None, pre_refund_money=None,
                 refund_fee=None, return_reason=None, session_id=None, tips=None):
        self.flight_change = flight_change  # type: bool
        self.item_unit_id = item_unit_id  # type: str
        self.multi_refund_cal_list = multi_refund_cal_list  # type: list[FlightRefundPreCalResponseBodyModuleMultiRefundCalList]
        self.pre_refund_money = pre_refund_money  # type: long
        self.refund_fee = refund_fee  # type: long
        self.return_reason = return_reason  # type: list[FlightRefundPreCalResponseBodyModuleReturnReason]
        self.session_id = session_id  # type: str
        self.tips = tips  # type: str

    def validate(self):
        if self.multi_refund_cal_list:
            for k in self.multi_refund_cal_list:
                if k:
                    k.validate()
        if self.return_reason:
            for k in self.return_reason:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightRefundPreCalResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.flight_change is not None:
            result['flight_change'] = self.flight_change
        if self.item_unit_id is not None:
            result['item_unit_id'] = self.item_unit_id
        result['multi_refund_cal_list'] = []
        if self.multi_refund_cal_list is not None:
            for k in self.multi_refund_cal_list:
                result['multi_refund_cal_list'].append(k.to_map() if k else None)
        if self.pre_refund_money is not None:
            result['pre_refund_money'] = self.pre_refund_money
        if self.refund_fee is not None:
            result['refund_fee'] = self.refund_fee
        result['return_reason'] = []
        if self.return_reason is not None:
            for k in self.return_reason:
                result['return_reason'].append(k.to_map() if k else None)
        if self.session_id is not None:
            result['session_id'] = self.session_id
        if self.tips is not None:
            result['tips'] = self.tips
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('flight_change') is not None:
            self.flight_change = m.get('flight_change')
        if m.get('item_unit_id') is not None:
            self.item_unit_id = m.get('item_unit_id')
        self.multi_refund_cal_list = []
        if m.get('multi_refund_cal_list') is not None:
            for k in m.get('multi_refund_cal_list'):
                temp_model = FlightRefundPreCalResponseBodyModuleMultiRefundCalList()
                self.multi_refund_cal_list.append(temp_model.from_map(k))
        if m.get('pre_refund_money') is not None:
            self.pre_refund_money = m.get('pre_refund_money')
        if m.get('refund_fee') is not None:
            self.refund_fee = m.get('refund_fee')
        self.return_reason = []
        if m.get('return_reason') is not None:
            for k in m.get('return_reason'):
                temp_model = FlightRefundPreCalResponseBodyModuleReturnReason()
                self.return_reason.append(temp_model.from_map(k))
        if m.get('session_id') is not None:
            self.session_id = m.get('session_id')
        if m.get('tips') is not None:
            self.tips = m.get('tips')
        return self


class FlightRefundPreCalResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: FlightRefundPreCalResponseBodyModule
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(FlightRefundPreCalResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = FlightRefundPreCalResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightRefundPreCalResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: FlightRefundPreCalResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(FlightRefundPreCalResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightRefundPreCalResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightRefundPreCalV2Headers(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightRefundPreCalV2Headers, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class FlightRefundPreCalV2RequestPassengerSegmentRelations(TeaModel):
    def __init__(self, passenger_id=None, segment_id_list=None):
        self.passenger_id = passenger_id  # type: str
        self.segment_id_list = segment_id_list  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightRefundPreCalV2RequestPassengerSegmentRelations, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.passenger_id is not None:
            result['passenger_id'] = self.passenger_id
        if self.segment_id_list is not None:
            result['segment_id_list'] = self.segment_id_list
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('passenger_id') is not None:
            self.passenger_id = m.get('passenger_id')
        if m.get('segment_id_list') is not None:
            self.segment_id_list = m.get('segment_id_list')
        return self


class FlightRefundPreCalV2Request(TeaModel):
    def __init__(self, isv_name=None, order_id=None, out_order_id=None, passenger_segment_relations=None,
                 pre_cal_type=None, ticket_nos=None, voluntary=None):
        self.isv_name = isv_name  # type: str
        self.order_id = order_id  # type: str
        self.out_order_id = out_order_id  # type: str
        self.passenger_segment_relations = passenger_segment_relations  # type: list[FlightRefundPreCalV2RequestPassengerSegmentRelations]
        self.pre_cal_type = pre_cal_type  # type: int
        self.ticket_nos = ticket_nos  # type: list[str]
        self.voluntary = voluntary  # type: bool

    def validate(self):
        if self.passenger_segment_relations:
            for k in self.passenger_segment_relations:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightRefundPreCalV2Request, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        result['passenger_segment_relations'] = []
        if self.passenger_segment_relations is not None:
            for k in self.passenger_segment_relations:
                result['passenger_segment_relations'].append(k.to_map() if k else None)
        if self.pre_cal_type is not None:
            result['pre_cal_type'] = self.pre_cal_type
        if self.ticket_nos is not None:
            result['ticket_nos'] = self.ticket_nos
        if self.voluntary is not None:
            result['voluntary'] = self.voluntary
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        self.passenger_segment_relations = []
        if m.get('passenger_segment_relations') is not None:
            for k in m.get('passenger_segment_relations'):
                temp_model = FlightRefundPreCalV2RequestPassengerSegmentRelations()
                self.passenger_segment_relations.append(temp_model.from_map(k))
        if m.get('pre_cal_type') is not None:
            self.pre_cal_type = m.get('pre_cal_type')
        if m.get('ticket_nos') is not None:
            self.ticket_nos = m.get('ticket_nos')
        if m.get('voluntary') is not None:
            self.voluntary = m.get('voluntary')
        return self


class FlightRefundPreCalV2ShrinkRequest(TeaModel):
    def __init__(self, isv_name=None, order_id=None, out_order_id=None, passenger_segment_relations_shrink=None,
                 pre_cal_type=None, ticket_nos_shrink=None, voluntary=None):
        self.isv_name = isv_name  # type: str
        self.order_id = order_id  # type: str
        self.out_order_id = out_order_id  # type: str
        self.passenger_segment_relations_shrink = passenger_segment_relations_shrink  # type: str
        self.pre_cal_type = pre_cal_type  # type: int
        self.ticket_nos_shrink = ticket_nos_shrink  # type: str
        self.voluntary = voluntary  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightRefundPreCalV2ShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        if self.passenger_segment_relations_shrink is not None:
            result['passenger_segment_relations'] = self.passenger_segment_relations_shrink
        if self.pre_cal_type is not None:
            result['pre_cal_type'] = self.pre_cal_type
        if self.ticket_nos_shrink is not None:
            result['ticket_nos'] = self.ticket_nos_shrink
        if self.voluntary is not None:
            result['voluntary'] = self.voluntary
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        if m.get('passenger_segment_relations') is not None:
            self.passenger_segment_relations_shrink = m.get('passenger_segment_relations')
        if m.get('pre_cal_type') is not None:
            self.pre_cal_type = m.get('pre_cal_type')
        if m.get('ticket_nos') is not None:
            self.ticket_nos_shrink = m.get('ticket_nos')
        if m.get('voluntary') is not None:
            self.voluntary = m.get('voluntary')
        return self


class FlightRefundPreCalV2ResponseBodyModuleMultiRefundFeeDTOS(TeaModel):
    def __init__(self, passenger_id=None, passenger_name=None, pre_refund_money=None, refund_charge_fee=None):
        self.passenger_id = passenger_id  # type: str
        self.passenger_name = passenger_name  # type: str
        self.pre_refund_money = pre_refund_money  # type: long
        self.refund_charge_fee = refund_charge_fee  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightRefundPreCalV2ResponseBodyModuleMultiRefundFeeDTOS, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.passenger_id is not None:
            result['passenger_id'] = self.passenger_id
        if self.passenger_name is not None:
            result['passenger_name'] = self.passenger_name
        if self.pre_refund_money is not None:
            result['pre_refund_money'] = self.pre_refund_money
        if self.refund_charge_fee is not None:
            result['refund_charge_fee'] = self.refund_charge_fee
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('passenger_id') is not None:
            self.passenger_id = m.get('passenger_id')
        if m.get('passenger_name') is not None:
            self.passenger_name = m.get('passenger_name')
        if m.get('pre_refund_money') is not None:
            self.pre_refund_money = m.get('pre_refund_money')
        if m.get('refund_charge_fee') is not None:
            self.refund_charge_fee = m.get('refund_charge_fee')
        return self


class FlightRefundPreCalV2ResponseBodyModuleRefundReasonOptionDTOS(TeaModel):
    def __init__(self, reason=None, reason_type=None, volunteer=None):
        self.reason = reason  # type: str
        self.reason_type = reason_type  # type: int
        self.volunteer = volunteer  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightRefundPreCalV2ResponseBodyModuleRefundReasonOptionDTOS, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.reason is not None:
            result['reason'] = self.reason
        if self.reason_type is not None:
            result['reason_type'] = self.reason_type
        if self.volunteer is not None:
            result['volunteer'] = self.volunteer
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('reason') is not None:
            self.reason = m.get('reason')
        if m.get('reason_type') is not None:
            self.reason_type = m.get('reason_type')
        if m.get('volunteer') is not None:
            self.volunteer = m.get('volunteer')
        return self


class FlightRefundPreCalV2ResponseBodyModule(TeaModel):
    def __init__(self, multi_refund_fee_dtos=None, pre_refund_money=None, refund_charge_fee=None,
                 refund_reason_option_dtos=None, service_charge_fee=None):
        self.multi_refund_fee_dtos = multi_refund_fee_dtos  # type: list[FlightRefundPreCalV2ResponseBodyModuleMultiRefundFeeDTOS]
        self.pre_refund_money = pre_refund_money  # type: long
        self.refund_charge_fee = refund_charge_fee  # type: long
        self.refund_reason_option_dtos = refund_reason_option_dtos  # type: list[FlightRefundPreCalV2ResponseBodyModuleRefundReasonOptionDTOS]
        self.service_charge_fee = service_charge_fee  # type: long

    def validate(self):
        if self.multi_refund_fee_dtos:
            for k in self.multi_refund_fee_dtos:
                if k:
                    k.validate()
        if self.refund_reason_option_dtos:
            for k in self.refund_reason_option_dtos:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightRefundPreCalV2ResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['multi_refund_fee_d_t_o_s'] = []
        if self.multi_refund_fee_dtos is not None:
            for k in self.multi_refund_fee_dtos:
                result['multi_refund_fee_d_t_o_s'].append(k.to_map() if k else None)
        if self.pre_refund_money is not None:
            result['pre_refund_money'] = self.pre_refund_money
        if self.refund_charge_fee is not None:
            result['refund_charge_fee'] = self.refund_charge_fee
        result['refund_reason_option_d_t_o_s'] = []
        if self.refund_reason_option_dtos is not None:
            for k in self.refund_reason_option_dtos:
                result['refund_reason_option_d_t_o_s'].append(k.to_map() if k else None)
        if self.service_charge_fee is not None:
            result['service_charge_fee'] = self.service_charge_fee
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.multi_refund_fee_dtos = []
        if m.get('multi_refund_fee_d_t_o_s') is not None:
            for k in m.get('multi_refund_fee_d_t_o_s'):
                temp_model = FlightRefundPreCalV2ResponseBodyModuleMultiRefundFeeDTOS()
                self.multi_refund_fee_dtos.append(temp_model.from_map(k))
        if m.get('pre_refund_money') is not None:
            self.pre_refund_money = m.get('pre_refund_money')
        if m.get('refund_charge_fee') is not None:
            self.refund_charge_fee = m.get('refund_charge_fee')
        self.refund_reason_option_dtos = []
        if m.get('refund_reason_option_d_t_o_s') is not None:
            for k in m.get('refund_reason_option_d_t_o_s'):
                temp_model = FlightRefundPreCalV2ResponseBodyModuleRefundReasonOptionDTOS()
                self.refund_reason_option_dtos.append(temp_model.from_map(k))
        if m.get('service_charge_fee') is not None:
            self.service_charge_fee = m.get('service_charge_fee')
        return self


class FlightRefundPreCalV2ResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        # module
        self.module = module  # type: FlightRefundPreCalV2ResponseBodyModule
        # requestId
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        # traceId
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(FlightRefundPreCalV2ResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = FlightRefundPreCalV2ResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightRefundPreCalV2Response(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: FlightRefundPreCalV2ResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(FlightRefundPreCalV2Response, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightRefundPreCalV2ResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightSearchListHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightSearchListHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class FlightSearchListRequest(TeaModel):
    def __init__(self, airline_code=None, arr_city_code=None, arr_city_name=None, arr_date=None, cabin_class=None,
                 dep_city_code=None, dep_city_name=None, dep_date=None, flight_no=None, need_multi_class_price=None,
                 transfer_city_code=None, transfer_flight_no=None, transfer_leave_date=None, trip_type=None):
        self.airline_code = airline_code  # type: str
        self.arr_city_code = arr_city_code  # type: str
        self.arr_city_name = arr_city_name  # type: str
        self.arr_date = arr_date  # type: str
        self.cabin_class = cabin_class  # type: str
        self.dep_city_code = dep_city_code  # type: str
        self.dep_city_name = dep_city_name  # type: str
        self.dep_date = dep_date  # type: str
        self.flight_no = flight_no  # type: str
        self.need_multi_class_price = need_multi_class_price  # type: bool
        self.transfer_city_code = transfer_city_code  # type: str
        self.transfer_flight_no = transfer_flight_no  # type: str
        self.transfer_leave_date = transfer_leave_date  # type: str
        self.trip_type = trip_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightSearchListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.arr_city_name is not None:
            result['arr_city_name'] = self.arr_city_name
        if self.arr_date is not None:
            result['arr_date'] = self.arr_date
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_city_name is not None:
            result['dep_city_name'] = self.dep_city_name
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        if self.need_multi_class_price is not None:
            result['need_multi_class_price'] = self.need_multi_class_price
        if self.transfer_city_code is not None:
            result['transfer_city_code'] = self.transfer_city_code
        if self.transfer_flight_no is not None:
            result['transfer_flight_no'] = self.transfer_flight_no
        if self.transfer_leave_date is not None:
            result['transfer_leave_date'] = self.transfer_leave_date
        if self.trip_type is not None:
            result['trip_type'] = self.trip_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('arr_city_name') is not None:
            self.arr_city_name = m.get('arr_city_name')
        if m.get('arr_date') is not None:
            self.arr_date = m.get('arr_date')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_city_name') is not None:
            self.dep_city_name = m.get('dep_city_name')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        if m.get('need_multi_class_price') is not None:
            self.need_multi_class_price = m.get('need_multi_class_price')
        if m.get('transfer_city_code') is not None:
            self.transfer_city_code = m.get('transfer_city_code')
        if m.get('transfer_flight_no') is not None:
            self.transfer_flight_no = m.get('transfer_flight_no')
        if m.get('transfer_leave_date') is not None:
            self.transfer_leave_date = m.get('transfer_leave_date')
        if m.get('trip_type') is not None:
            self.trip_type = m.get('trip_type')
        return self


class FlightSearchListResponseBodyModuleFlightListAirlineInfo(TeaModel):
    def __init__(self, airline_code=None, airline_name=None, airline_simple_name=None):
        self.airline_code = airline_code  # type: str
        self.airline_name = airline_name  # type: str
        self.airline_simple_name = airline_simple_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListAirlineInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.airline_name is not None:
            result['airline_name'] = self.airline_name
        if self.airline_simple_name is not None:
            result['airline_simple_name'] = self.airline_simple_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('airline_name') is not None:
            self.airline_name = m.get('airline_name')
        if m.get('airline_simple_name') is not None:
            self.airline_simple_name = m.get('airline_simple_name')
        return self


class FlightSearchListResponseBodyModuleFlightListArrAirportInfo(TeaModel):
    def __init__(self, airport_code=None, airport_name=None, city_code=None, city_name=None, terminal=None):
        self.airport_code = airport_code  # type: str
        self.airport_name = airport_name  # type: str
        self.city_code = city_code  # type: str
        self.city_name = city_name  # type: str
        self.terminal = terminal  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListArrAirportInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airport_code is not None:
            result['airport_code'] = self.airport_code
        if self.airport_name is not None:
            result['airport_name'] = self.airport_name
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.terminal is not None:
            result['terminal'] = self.terminal
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('airport_code') is not None:
            self.airport_code = m.get('airport_code')
        if m.get('airport_name') is not None:
            self.airport_name = m.get('airport_name')
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('terminal') is not None:
            self.terminal = m.get('terminal')
        return self


class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription(TeaModel):
    def __init__(self, desc=None, icon=None, image=None, title=None):
        self.desc = desc  # type: str
        self.icon = icon  # type: str
        self.image = image  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.desc is not None:
            result['desc'] = self.desc
        if self.icon is not None:
            result['icon'] = self.icon
        if self.image is not None:
            result['image'] = self.image
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('desc') is not None:
            self.desc = m.get('desc')
        if m.get('icon') is not None:
            self.icon = m.get('icon')
        if m.get('image') is not None:
            self.image = m.get('image')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO(TeaModel):
    def __init__(self, image=None, largest=None, middle=None, smallest=None):
        self.image = image  # type: str
        self.largest = largest  # type: str
        self.middle = middle  # type: str
        self.smallest = smallest  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.image is not None:
            result['image'] = self.image
        if self.largest is not None:
            result['largest'] = self.largest
        if self.middle is not None:
            result['middle'] = self.middle
        if self.smallest is not None:
            result['smallest'] = self.smallest
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('image') is not None:
            self.image = m.get('image')
        if m.get('largest') is not None:
            self.largest = m.get('largest')
        if m.get('middle') is not None:
            self.middle = m.get('middle')
        if m.get('smallest') is not None:
            self.smallest = m.get('smallest')
        return self


class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes(TeaModel):
    def __init__(self, baggage_desc=None, baggage_sub_content_type=None, description=None, image_do=None,
                 is_highlight=None, sub_title=None):
        self.baggage_desc = baggage_desc  # type: list[str]
        self.baggage_sub_content_type = baggage_sub_content_type  # type: int
        self.description = description  # type: FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription
        self.image_do = image_do  # type: FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO
        self.is_highlight = is_highlight  # type: bool
        self.sub_title = sub_title  # type: str

    def validate(self):
        if self.description:
            self.description.validate()
        if self.image_do:
            self.image_do.validate()

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.baggage_desc is not None:
            result['baggage_desc'] = self.baggage_desc
        if self.baggage_sub_content_type is not None:
            result['baggage_sub_content_type'] = self.baggage_sub_content_type
        if self.description is not None:
            result['description'] = self.description.to_map()
        if self.image_do is not None:
            result['image_d_o'] = self.image_do.to_map()
        if self.is_highlight is not None:
            result['is_highlight'] = self.is_highlight
        if self.sub_title is not None:
            result['sub_title'] = self.sub_title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('baggage_desc') is not None:
            self.baggage_desc = m.get('baggage_desc')
        if m.get('baggage_sub_content_type') is not None:
            self.baggage_sub_content_type = m.get('baggage_sub_content_type')
        if m.get('description') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription()
            self.description = temp_model.from_map(m['description'])
        if m.get('image_d_o') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO()
            self.image_do = temp_model.from_map(m['image_d_o'])
        if m.get('is_highlight') is not None:
            self.is_highlight = m.get('is_highlight')
        if m.get('sub_title') is not None:
            self.sub_title = m.get('sub_title')
        return self


class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItems(TeaModel):
    def __init__(self, baggage_sub_content_visualizes=None, extra_content_visualizes=None, is_struct=None,
                 ptc=None, title=None):
        self.baggage_sub_content_visualizes = baggage_sub_content_visualizes  # type: list[FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes]
        self.extra_content_visualizes = extra_content_visualizes  # type: list[any]
        self.is_struct = is_struct  # type: bool
        # PTC
        self.ptc = ptc  # type: str
        self.title = title  # type: str

    def validate(self):
        if self.baggage_sub_content_visualizes:
            for k in self.baggage_sub_content_visualizes:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItems, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['baggage_sub_content_visualizes'] = []
        if self.baggage_sub_content_visualizes is not None:
            for k in self.baggage_sub_content_visualizes:
                result['baggage_sub_content_visualizes'].append(k.to_map() if k else None)
        if self.extra_content_visualizes is not None:
            result['extra_content_visualizes'] = self.extra_content_visualizes
        if self.is_struct is not None:
            result['is_struct'] = self.is_struct
        if self.ptc is not None:
            result['ptc'] = self.ptc
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.baggage_sub_content_visualizes = []
        if m.get('baggage_sub_content_visualizes') is not None:
            for k in m.get('baggage_sub_content_visualizes'):
                temp_model = FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes()
                self.baggage_sub_content_visualizes.append(temp_model.from_map(k))
        if m.get('extra_content_visualizes') is not None:
            self.extra_content_visualizes = m.get('extra_content_visualizes')
        if m.get('is_struct') is not None:
            self.is_struct = m.get('is_struct')
        if m.get('ptc') is not None:
            self.ptc = m.get('ptc')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemTips(TeaModel):
    def __init__(self, logo=None, tips_desc=None, tips_image=None):
        self.logo = logo  # type: str
        self.tips_desc = tips_desc  # type: str
        self.tips_image = tips_image  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemTips, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.logo is not None:
            result['logo'] = self.logo
        if self.tips_desc is not None:
            result['tips_desc'] = self.tips_desc
        if self.tips_image is not None:
            result['tips_image'] = self.tips_image
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('logo') is not None:
            self.logo = m.get('logo')
        if m.get('tips_desc') is not None:
            self.tips_desc = m.get('tips_desc')
        if m.get('tips_image') is not None:
            self.tips_image = m.get('tips_image')
        return self


class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItem(TeaModel):
    def __init__(self, baggage_sub_items=None, index=None, table_head=None, tips=None, title=None, type=None):
        self.baggage_sub_items = baggage_sub_items  # type: list[FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItems]
        self.index = index  # type: int
        self.table_head = table_head  # type: str
        self.tips = tips  # type: FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemTips
        self.title = title  # type: str
        self.type = type  # type: int

    def validate(self):
        if self.baggage_sub_items:
            for k in self.baggage_sub_items:
                if k:
                    k.validate()
        if self.tips:
            self.tips.validate()

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItem, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['baggage_sub_items'] = []
        if self.baggage_sub_items is not None:
            for k in self.baggage_sub_items:
                result['baggage_sub_items'].append(k.to_map() if k else None)
        if self.index is not None:
            result['index'] = self.index
        if self.table_head is not None:
            result['table_head'] = self.table_head
        if self.tips is not None:
            result['tips'] = self.tips.to_map()
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.baggage_sub_items = []
        if m.get('baggage_sub_items') is not None:
            for k in m.get('baggage_sub_items'):
                temp_model = FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItems()
                self.baggage_sub_items.append(temp_model.from_map(k))
        if m.get('index') is not None:
            self.index = m.get('index')
        if m.get('table_head') is not None:
            self.table_head = m.get('table_head')
        if m.get('tips') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemTips()
            self.tips = temp_model.from_map(m['tips'])
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleInfo(TeaModel):
    def __init__(self, content=None, cost=None, cost_percent=None, time_stamp=None, time_type=None, title=None):
        self.content = content  # type: str
        self.cost = cost  # type: int
        self.cost_percent = cost_percent  # type: int
        self.time_stamp = time_stamp  # type: int
        self.time_type = time_type  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.cost is not None:
            result['cost'] = self.cost
        if self.cost_percent is not None:
            result['cost_percent'] = self.cost_percent
        if self.time_stamp is not None:
            result['time_stamp'] = self.time_stamp
        if self.time_type is not None:
            result['time_type'] = self.time_type
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('cost_percent') is not None:
            self.cost_percent = m.get('cost_percent')
        if m.get('time_stamp') is not None:
            self.time_stamp = m.get('time_stamp')
        if m.get('time_type') is not None:
            self.time_type = m.get('time_type')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRule(TeaModel):
    def __init__(self, able=None, info=None):
        self.able = able  # type: bool
        self.info = info  # type: list[FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleInfo]

    def validate(self):
        if self.info:
            for k in self.info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.able is not None:
            result['able'] = self.able
        result['info'] = []
        if self.info is not None:
            for k in self.info:
                result['info'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('able') is not None:
            self.able = m.get('able')
        self.info = []
        if m.get('info') is not None:
            for k in m.get('info'):
                temp_model = FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleInfo()
                self.info.append(temp_model.from_map(k))
        return self


class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemExtraContents(TeaModel):
    def __init__(self, content=None, title=None):
        self.content = content  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemExtraContents, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents(TeaModel):
    def __init__(self, fee_desc=None, fee_range=None, style=None):
        self.fee_desc = fee_desc  # type: str
        self.fee_range = fee_range  # type: str
        self.style = style  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.fee_desc is not None:
            result['fee_desc'] = self.fee_desc
        if self.fee_range is not None:
            result['fee_range'] = self.fee_range
        if self.style is not None:
            result['style'] = self.style
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('fee_desc') is not None:
            self.fee_desc = m.get('fee_desc')
        if m.get('fee_range') is not None:
            self.fee_range = m.get('fee_range')
        if m.get('style') is not None:
            self.style = m.get('style')
        return self


class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItems(TeaModel):
    def __init__(self, is_struct=None, ptc=None, refund_sub_contents=None, title=None):
        self.is_struct = is_struct  # type: bool
        # PTC
        self.ptc = ptc  # type: str
        self.refund_sub_contents = refund_sub_contents  # type: list[FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents]
        self.title = title  # type: str

    def validate(self):
        if self.refund_sub_contents:
            for k in self.refund_sub_contents:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItems, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.is_struct is not None:
            result['is_struct'] = self.is_struct
        if self.ptc is not None:
            result['ptc'] = self.ptc
        result['refund_sub_contents'] = []
        if self.refund_sub_contents is not None:
            for k in self.refund_sub_contents:
                result['refund_sub_contents'].append(k.to_map() if k else None)
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('is_struct') is not None:
            self.is_struct = m.get('is_struct')
        if m.get('ptc') is not None:
            self.ptc = m.get('ptc')
        self.refund_sub_contents = []
        if m.get('refund_sub_contents') is not None:
            for k in m.get('refund_sub_contents'):
                temp_model = FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents()
                self.refund_sub_contents.append(temp_model.from_map(k))
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItem(TeaModel):
    def __init__(self, extra_contents=None, index=None, refund_sub_items=None, sub_table_head=None, table_head=None,
                 title=None, type=None):
        self.extra_contents = extra_contents  # type: list[FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemExtraContents]
        self.index = index  # type: int
        self.refund_sub_items = refund_sub_items  # type: list[FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItems]
        self.sub_table_head = sub_table_head  # type: list[str]
        self.table_head = table_head  # type: str
        self.title = title  # type: str
        self.type = type  # type: int

    def validate(self):
        if self.extra_contents:
            for k in self.extra_contents:
                if k:
                    k.validate()
        if self.refund_sub_items:
            for k in self.refund_sub_items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItem, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['extra_contents'] = []
        if self.extra_contents is not None:
            for k in self.extra_contents:
                result['extra_contents'].append(k.to_map() if k else None)
        if self.index is not None:
            result['index'] = self.index
        result['refund_sub_items'] = []
        if self.refund_sub_items is not None:
            for k in self.refund_sub_items:
                result['refund_sub_items'].append(k.to_map() if k else None)
        if self.sub_table_head is not None:
            result['sub_table_head'] = self.sub_table_head
        if self.table_head is not None:
            result['table_head'] = self.table_head
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.extra_contents = []
        if m.get('extra_contents') is not None:
            for k in m.get('extra_contents'):
                temp_model = FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemExtraContents()
                self.extra_contents.append(temp_model.from_map(k))
        if m.get('index') is not None:
            self.index = m.get('index')
        self.refund_sub_items = []
        if m.get('refund_sub_items') is not None:
            for k in m.get('refund_sub_items'):
                temp_model = FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItems()
                self.refund_sub_items.append(temp_model.from_map(k))
        if m.get('sub_table_head') is not None:
            self.sub_table_head = m.get('sub_table_head')
        if m.get('table_head') is not None:
            self.table_head = m.get('table_head')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleInfo(TeaModel):
    def __init__(self, content=None, cost=None, cost_percent=None, time_stamp=None, time_type=None, title=None):
        self.content = content  # type: str
        self.cost = cost  # type: int
        self.cost_percent = cost_percent  # type: int
        self.time_stamp = time_stamp  # type: int
        self.time_type = time_type  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.cost is not None:
            result['cost'] = self.cost
        if self.cost_percent is not None:
            result['cost_percent'] = self.cost_percent
        if self.time_stamp is not None:
            result['time_stamp'] = self.time_stamp
        if self.time_type is not None:
            result['time_type'] = self.time_type
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('cost_percent') is not None:
            self.cost_percent = m.get('cost_percent')
        if m.get('time_stamp') is not None:
            self.time_stamp = m.get('time_stamp')
        if m.get('time_type') is not None:
            self.time_type = m.get('time_type')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRule(TeaModel):
    def __init__(self, able=None, info=None):
        self.able = able  # type: bool
        self.info = info  # type: list[FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleInfo]

    def validate(self):
        if self.info:
            for k in self.info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.able is not None:
            result['able'] = self.able
        result['info'] = []
        if self.info is not None:
            for k in self.info:
                result['info'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('able') is not None:
            self.able = m.get('able')
        self.info = []
        if m.get('info') is not None:
            for k in m.get('info'):
                temp_model = FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleInfo()
                self.info.append(temp_model.from_map(k))
        return self


class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemExtraContents(TeaModel):
    def __init__(self, content=None, title=None):
        self.content = content  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemExtraContents, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents(TeaModel):
    def __init__(self, fee_desc=None, fee_range=None, style=None):
        self.fee_desc = fee_desc  # type: str
        self.fee_range = fee_range  # type: str
        self.style = style  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.fee_desc is not None:
            result['fee_desc'] = self.fee_desc
        if self.fee_range is not None:
            result['fee_range'] = self.fee_range
        if self.style is not None:
            result['style'] = self.style
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('fee_desc') is not None:
            self.fee_desc = m.get('fee_desc')
        if m.get('fee_range') is not None:
            self.fee_range = m.get('fee_range')
        if m.get('style') is not None:
            self.style = m.get('style')
        return self


class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItems(TeaModel):
    def __init__(self, is_struct=None, ptc=None, refund_sub_contents=None, title=None):
        self.is_struct = is_struct  # type: bool
        # PTC
        self.ptc = ptc  # type: str
        self.refund_sub_contents = refund_sub_contents  # type: list[FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents]
        self.title = title  # type: str

    def validate(self):
        if self.refund_sub_contents:
            for k in self.refund_sub_contents:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItems, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.is_struct is not None:
            result['is_struct'] = self.is_struct
        if self.ptc is not None:
            result['ptc'] = self.ptc
        result['refund_sub_contents'] = []
        if self.refund_sub_contents is not None:
            for k in self.refund_sub_contents:
                result['refund_sub_contents'].append(k.to_map() if k else None)
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('is_struct') is not None:
            self.is_struct = m.get('is_struct')
        if m.get('ptc') is not None:
            self.ptc = m.get('ptc')
        self.refund_sub_contents = []
        if m.get('refund_sub_contents') is not None:
            for k in m.get('refund_sub_contents'):
                temp_model = FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents()
                self.refund_sub_contents.append(temp_model.from_map(k))
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItem(TeaModel):
    def __init__(self, extra_contents=None, index=None, refund_sub_items=None, sub_table_head=None, table_head=None,
                 title=None, type=None):
        self.extra_contents = extra_contents  # type: list[FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemExtraContents]
        self.index = index  # type: int
        self.refund_sub_items = refund_sub_items  # type: list[FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItems]
        self.sub_table_head = sub_table_head  # type: list[str]
        self.table_head = table_head  # type: str
        self.title = title  # type: str
        self.type = type  # type: int

    def validate(self):
        if self.extra_contents:
            for k in self.extra_contents:
                if k:
                    k.validate()
        if self.refund_sub_items:
            for k in self.refund_sub_items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItem, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['extra_contents'] = []
        if self.extra_contents is not None:
            for k in self.extra_contents:
                result['extra_contents'].append(k.to_map() if k else None)
        if self.index is not None:
            result['index'] = self.index
        result['refund_sub_items'] = []
        if self.refund_sub_items is not None:
            for k in self.refund_sub_items:
                result['refund_sub_items'].append(k.to_map() if k else None)
        if self.sub_table_head is not None:
            result['sub_table_head'] = self.sub_table_head
        if self.table_head is not None:
            result['table_head'] = self.table_head
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.extra_contents = []
        if m.get('extra_contents') is not None:
            for k in m.get('extra_contents'):
                temp_model = FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemExtraContents()
                self.extra_contents.append(temp_model.from_map(k))
        if m.get('index') is not None:
            self.index = m.get('index')
        self.refund_sub_items = []
        if m.get('refund_sub_items') is not None:
            for k in m.get('refund_sub_items'):
                temp_model = FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItems()
                self.refund_sub_items.append(temp_model.from_map(k))
        if m.get('sub_table_head') is not None:
            self.sub_table_head = m.get('sub_table_head')
        if m.get('table_head') is not None:
            self.table_head = m.get('table_head')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRuleInfo(TeaModel):
    def __init__(self, content=None, cost=None, cost_percent=None, time_stamp=None, time_type=None, title=None):
        self.content = content  # type: str
        self.cost = cost  # type: int
        self.cost_percent = cost_percent  # type: int
        self.time_stamp = time_stamp  # type: int
        self.time_type = time_type  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRuleInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.cost is not None:
            result['cost'] = self.cost
        if self.cost_percent is not None:
            result['cost_percent'] = self.cost_percent
        if self.time_stamp is not None:
            result['time_stamp'] = self.time_stamp
        if self.time_type is not None:
            result['time_type'] = self.time_type
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('cost_percent') is not None:
            self.cost_percent = m.get('cost_percent')
        if m.get('time_stamp') is not None:
            self.time_stamp = m.get('time_stamp')
        if m.get('time_type') is not None:
            self.time_type = m.get('time_type')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRule(TeaModel):
    def __init__(self, able=None, info=None):
        self.able = able  # type: bool
        self.info = info  # type: list[FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRuleInfo]

    def validate(self):
        if self.info:
            for k in self.info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.able is not None:
            result['able'] = self.able
        result['info'] = []
        if self.info is not None:
            for k in self.info:
                result['info'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('able') is not None:
            self.able = m.get('able')
        self.info = []
        if m.get('info') is not None:
            for k in m.get('info'):
                temp_model = FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRuleInfo()
                self.info.append(temp_model.from_map(k))
        return self


class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRuleInfo(TeaModel):
    def __init__(self, content=None, cost=None, cost_percent=None, time_stamp=None, time_type=None, title=None):
        self.content = content  # type: str
        self.cost = cost  # type: int
        self.cost_percent = cost_percent  # type: int
        self.time_stamp = time_stamp  # type: int
        self.time_type = time_type  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRuleInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.cost is not None:
            result['cost'] = self.cost
        if self.cost_percent is not None:
            result['cost_percent'] = self.cost_percent
        if self.time_stamp is not None:
            result['time_stamp'] = self.time_stamp
        if self.time_type is not None:
            result['time_type'] = self.time_type
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('cost_percent') is not None:
            self.cost_percent = m.get('cost_percent')
        if m.get('time_stamp') is not None:
            self.time_stamp = m.get('time_stamp')
        if m.get('time_type') is not None:
            self.time_type = m.get('time_type')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRule(TeaModel):
    def __init__(self, able=None, info=None):
        self.able = able  # type: bool
        self.info = info  # type: list[FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRuleInfo]

    def validate(self):
        if self.info:
            for k in self.info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.able is not None:
            result['able'] = self.able
        result['info'] = []
        if self.info is not None:
            for k in self.info:
                result['info'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('able') is not None:
            self.able = m.get('able')
        self.info = []
        if m.get('info') is not None:
            for k in m.get('info'):
                temp_model = FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRuleInfo()
                self.info.append(temp_model.from_map(k))
        return self


class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleList(TeaModel):
    def __init__(self, baggage_info=None, baggage_item=None, change_rule=None, change_rule_item=None, extra=None,
                 refund_rule=None, refund_rule_item=None, sign_rule=None, tuigaiqian_info=None, upgrade_rule=None):
        self.baggage_info = baggage_info  # type: str
        self.baggage_item = baggage_item  # type: FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItem
        self.change_rule = change_rule  # type: FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRule
        self.change_rule_item = change_rule_item  # type: FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItem
        self.extra = extra  # type: str
        self.refund_rule = refund_rule  # type: FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRule
        self.refund_rule_item = refund_rule_item  # type: FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItem
        self.sign_rule = sign_rule  # type: FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRule
        self.tuigaiqian_info = tuigaiqian_info  # type: str
        self.upgrade_rule = upgrade_rule  # type: FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRule

    def validate(self):
        if self.baggage_item:
            self.baggage_item.validate()
        if self.change_rule:
            self.change_rule.validate()
        if self.change_rule_item:
            self.change_rule_item.validate()
        if self.refund_rule:
            self.refund_rule.validate()
        if self.refund_rule_item:
            self.refund_rule_item.validate()
        if self.sign_rule:
            self.sign_rule.validate()
        if self.upgrade_rule:
            self.upgrade_rule.validate()

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.baggage_info is not None:
            result['baggage_info'] = self.baggage_info
        if self.baggage_item is not None:
            result['baggage_item'] = self.baggage_item.to_map()
        if self.change_rule is not None:
            result['change_rule'] = self.change_rule.to_map()
        if self.change_rule_item is not None:
            result['change_rule_item'] = self.change_rule_item.to_map()
        if self.extra is not None:
            result['extra'] = self.extra
        if self.refund_rule is not None:
            result['refund_rule'] = self.refund_rule.to_map()
        if self.refund_rule_item is not None:
            result['refund_rule_item'] = self.refund_rule_item.to_map()
        if self.sign_rule is not None:
            result['sign_rule'] = self.sign_rule.to_map()
        if self.tuigaiqian_info is not None:
            result['tuigaiqian_info'] = self.tuigaiqian_info
        if self.upgrade_rule is not None:
            result['upgrade_rule'] = self.upgrade_rule.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('baggage_info') is not None:
            self.baggage_info = m.get('baggage_info')
        if m.get('baggage_item') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItem()
            self.baggage_item = temp_model.from_map(m['baggage_item'])
        if m.get('change_rule') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRule()
            self.change_rule = temp_model.from_map(m['change_rule'])
        if m.get('change_rule_item') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItem()
            self.change_rule_item = temp_model.from_map(m['change_rule_item'])
        if m.get('extra') is not None:
            self.extra = m.get('extra')
        if m.get('refund_rule') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRule()
            self.refund_rule = temp_model.from_map(m['refund_rule'])
        if m.get('refund_rule_item') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItem()
            self.refund_rule_item = temp_model.from_map(m['refund_rule_item'])
        if m.get('sign_rule') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRule()
            self.sign_rule = temp_model.from_map(m['sign_rule'])
        if m.get('tuigaiqian_info') is not None:
            self.tuigaiqian_info = m.get('tuigaiqian_info')
        if m.get('upgrade_rule') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRule()
            self.upgrade_rule = temp_model.from_map(m['upgrade_rule'])
        return self


class FlightSearchListResponseBodyModuleFlightListCabinInfoList(TeaModel):
    def __init__(self, agent_id=None, basic_cabin_price=None, build_price=None, cabin=None, cabin_class=None,
                 cabin_class_name=None, child_cabin=None, class_name=None, class_rule=None, discount=None, flight_rule_list=None,
                 flight_rule_list_str=None, invoice_type=None, is_protocol=None, memo=None, oil_price=None, order_params=None,
                 ota_item_id=None, price=None, product_type=None, product_type_desc=None, promotion_price=None,
                 remained_seat_count=None, ticket_price=None, total_price=None):
        self.agent_id = agent_id  # type: long
        self.basic_cabin_price = basic_cabin_price  # type: int
        self.build_price = build_price  # type: int
        self.cabin = cabin  # type: str
        self.cabin_class = cabin_class  # type: str
        self.cabin_class_name = cabin_class_name  # type: str
        self.child_cabin = child_cabin  # type: str
        self.class_name = class_name  # type: str
        self.class_rule = class_rule  # type: str
        self.discount = discount  # type: str
        self.flight_rule_list = flight_rule_list  # type: list[FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleList]
        self.flight_rule_list_str = flight_rule_list_str  # type: str
        self.invoice_type = invoice_type  # type: int
        self.is_protocol = is_protocol  # type: bool
        self.memo = memo  # type: str
        self.oil_price = oil_price  # type: int
        self.order_params = order_params  # type: str
        self.ota_item_id = ota_item_id  # type: str
        self.price = price  # type: int
        self.product_type = product_type  # type: long
        self.product_type_desc = product_type_desc  # type: str
        self.promotion_price = promotion_price  # type: str
        self.remained_seat_count = remained_seat_count  # type: str
        self.ticket_price = ticket_price  # type: int
        self.total_price = total_price  # type: int

    def validate(self):
        if self.flight_rule_list:
            for k in self.flight_rule_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListCabinInfoList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_id is not None:
            result['agent_id'] = self.agent_id
        if self.basic_cabin_price is not None:
            result['basic_cabin_price'] = self.basic_cabin_price
        if self.build_price is not None:
            result['build_price'] = self.build_price
        if self.cabin is not None:
            result['cabin'] = self.cabin
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.cabin_class_name is not None:
            result['cabin_class_name'] = self.cabin_class_name
        if self.child_cabin is not None:
            result['child_cabin'] = self.child_cabin
        if self.class_name is not None:
            result['class_name'] = self.class_name
        if self.class_rule is not None:
            result['class_rule'] = self.class_rule
        if self.discount is not None:
            result['discount'] = self.discount
        result['flight_rule_list'] = []
        if self.flight_rule_list is not None:
            for k in self.flight_rule_list:
                result['flight_rule_list'].append(k.to_map() if k else None)
        if self.flight_rule_list_str is not None:
            result['flight_rule_list_str'] = self.flight_rule_list_str
        if self.invoice_type is not None:
            result['invoice_type'] = self.invoice_type
        if self.is_protocol is not None:
            result['is_protocol'] = self.is_protocol
        if self.memo is not None:
            result['memo'] = self.memo
        if self.oil_price is not None:
            result['oil_price'] = self.oil_price
        if self.order_params is not None:
            result['order_params'] = self.order_params
        if self.ota_item_id is not None:
            result['ota_item_id'] = self.ota_item_id
        if self.price is not None:
            result['price'] = self.price
        if self.product_type is not None:
            result['product_type'] = self.product_type
        if self.product_type_desc is not None:
            result['product_type_desc'] = self.product_type_desc
        if self.promotion_price is not None:
            result['promotion_price'] = self.promotion_price
        if self.remained_seat_count is not None:
            result['remained_seat_count'] = self.remained_seat_count
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.total_price is not None:
            result['total_price'] = self.total_price
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('agent_id') is not None:
            self.agent_id = m.get('agent_id')
        if m.get('basic_cabin_price') is not None:
            self.basic_cabin_price = m.get('basic_cabin_price')
        if m.get('build_price') is not None:
            self.build_price = m.get('build_price')
        if m.get('cabin') is not None:
            self.cabin = m.get('cabin')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('cabin_class_name') is not None:
            self.cabin_class_name = m.get('cabin_class_name')
        if m.get('child_cabin') is not None:
            self.child_cabin = m.get('child_cabin')
        if m.get('class_name') is not None:
            self.class_name = m.get('class_name')
        if m.get('class_rule') is not None:
            self.class_rule = m.get('class_rule')
        if m.get('discount') is not None:
            self.discount = m.get('discount')
        self.flight_rule_list = []
        if m.get('flight_rule_list') is not None:
            for k in m.get('flight_rule_list'):
                temp_model = FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleList()
                self.flight_rule_list.append(temp_model.from_map(k))
        if m.get('flight_rule_list_str') is not None:
            self.flight_rule_list_str = m.get('flight_rule_list_str')
        if m.get('invoice_type') is not None:
            self.invoice_type = m.get('invoice_type')
        if m.get('is_protocol') is not None:
            self.is_protocol = m.get('is_protocol')
        if m.get('memo') is not None:
            self.memo = m.get('memo')
        if m.get('oil_price') is not None:
            self.oil_price = m.get('oil_price')
        if m.get('order_params') is not None:
            self.order_params = m.get('order_params')
        if m.get('ota_item_id') is not None:
            self.ota_item_id = m.get('ota_item_id')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('product_type') is not None:
            self.product_type = m.get('product_type')
        if m.get('product_type_desc') is not None:
            self.product_type_desc = m.get('product_type_desc')
        if m.get('promotion_price') is not None:
            self.promotion_price = m.get('promotion_price')
        if m.get('remained_seat_count') is not None:
            self.remained_seat_count = m.get('remained_seat_count')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('total_price') is not None:
            self.total_price = m.get('total_price')
        return self


class FlightSearchListResponseBodyModuleFlightListDepAirportInfo(TeaModel):
    def __init__(self, airport_code=None, airport_name=None, city_code=None, city_name=None, terminal=None):
        self.airport_code = airport_code  # type: str
        self.airport_name = airport_name  # type: str
        self.city_code = city_code  # type: str
        self.city_name = city_name  # type: str
        self.terminal = terminal  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListDepAirportInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airport_code is not None:
            result['airport_code'] = self.airport_code
        if self.airport_name is not None:
            result['airport_name'] = self.airport_name
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.terminal is not None:
            result['terminal'] = self.terminal
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('airport_code') is not None:
            self.airport_code = m.get('airport_code')
        if m.get('airport_name') is not None:
            self.airport_name = m.get('airport_name')
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('terminal') is not None:
            self.terminal = m.get('terminal')
        return self


class FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription(TeaModel):
    def __init__(self, desc=None, icon=None, image=None, title=None):
        self.desc = desc  # type: str
        self.icon = icon  # type: str
        self.image = image  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.desc is not None:
            result['desc'] = self.desc
        if self.icon is not None:
            result['icon'] = self.icon
        if self.image is not None:
            result['image'] = self.image
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('desc') is not None:
            self.desc = m.get('desc')
        if m.get('icon') is not None:
            self.icon = m.get('icon')
        if m.get('image') is not None:
            self.image = m.get('image')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO(TeaModel):
    def __init__(self, image=None, largest=None, middle=None, smallest=None):
        self.image = image  # type: str
        self.largest = largest  # type: str
        self.middle = middle  # type: str
        self.smallest = smallest  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.image is not None:
            result['image'] = self.image
        if self.largest is not None:
            result['largest'] = self.largest
        if self.middle is not None:
            result['middle'] = self.middle
        if self.smallest is not None:
            result['smallest'] = self.smallest
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('image') is not None:
            self.image = m.get('image')
        if m.get('largest') is not None:
            self.largest = m.get('largest')
        if m.get('middle') is not None:
            self.middle = m.get('middle')
        if m.get('smallest') is not None:
            self.smallest = m.get('smallest')
        return self


class FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes(TeaModel):
    def __init__(self, baggage_desc=None, baggage_sub_content_type=None, description=None, image_do=None,
                 is_highlight=None, sub_title=None):
        self.baggage_desc = baggage_desc  # type: list[str]
        self.baggage_sub_content_type = baggage_sub_content_type  # type: int
        self.description = description  # type: FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription
        self.image_do = image_do  # type: FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO
        self.is_highlight = is_highlight  # type: bool
        self.sub_title = sub_title  # type: str

    def validate(self):
        if self.description:
            self.description.validate()
        if self.image_do:
            self.image_do.validate()

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.baggage_desc is not None:
            result['baggage_desc'] = self.baggage_desc
        if self.baggage_sub_content_type is not None:
            result['baggage_sub_content_type'] = self.baggage_sub_content_type
        if self.description is not None:
            result['description'] = self.description.to_map()
        if self.image_do is not None:
            result['image_d_o'] = self.image_do.to_map()
        if self.is_highlight is not None:
            result['is_highlight'] = self.is_highlight
        if self.sub_title is not None:
            result['sub_title'] = self.sub_title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('baggage_desc') is not None:
            self.baggage_desc = m.get('baggage_desc')
        if m.get('baggage_sub_content_type') is not None:
            self.baggage_sub_content_type = m.get('baggage_sub_content_type')
        if m.get('description') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription()
            self.description = temp_model.from_map(m['description'])
        if m.get('image_d_o') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO()
            self.image_do = temp_model.from_map(m['image_d_o'])
        if m.get('is_highlight') is not None:
            self.is_highlight = m.get('is_highlight')
        if m.get('sub_title') is not None:
            self.sub_title = m.get('sub_title')
        return self


class FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems(TeaModel):
    def __init__(self, baggage_sub_content_visualizes=None, extra_content_visualizes=None, is_struct=None,
                 ptc=None, title=None):
        self.baggage_sub_content_visualizes = baggage_sub_content_visualizes  # type: list[FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes]
        self.extra_content_visualizes = extra_content_visualizes  # type: list[any]
        self.is_struct = is_struct  # type: bool
        # PTC
        self.ptc = ptc  # type: str
        self.title = title  # type: str

    def validate(self):
        if self.baggage_sub_content_visualizes:
            for k in self.baggage_sub_content_visualizes:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['baggage_sub_content_visualizes'] = []
        if self.baggage_sub_content_visualizes is not None:
            for k in self.baggage_sub_content_visualizes:
                result['baggage_sub_content_visualizes'].append(k.to_map() if k else None)
        if self.extra_content_visualizes is not None:
            result['extra_content_visualizes'] = self.extra_content_visualizes
        if self.is_struct is not None:
            result['is_struct'] = self.is_struct
        if self.ptc is not None:
            result['ptc'] = self.ptc
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.baggage_sub_content_visualizes = []
        if m.get('baggage_sub_content_visualizes') is not None:
            for k in m.get('baggage_sub_content_visualizes'):
                temp_model = FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes()
                self.baggage_sub_content_visualizes.append(temp_model.from_map(k))
        if m.get('extra_content_visualizes') is not None:
            self.extra_content_visualizes = m.get('extra_content_visualizes')
        if m.get('is_struct') is not None:
            self.is_struct = m.get('is_struct')
        if m.get('ptc') is not None:
            self.ptc = m.get('ptc')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemTips(TeaModel):
    def __init__(self, logo=None, tips_desc=None, tips_image=None):
        self.logo = logo  # type: str
        self.tips_desc = tips_desc  # type: str
        self.tips_image = tips_image  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemTips, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.logo is not None:
            result['logo'] = self.logo
        if self.tips_desc is not None:
            result['tips_desc'] = self.tips_desc
        if self.tips_image is not None:
            result['tips_image'] = self.tips_image
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('logo') is not None:
            self.logo = m.get('logo')
        if m.get('tips_desc') is not None:
            self.tips_desc = m.get('tips_desc')
        if m.get('tips_image') is not None:
            self.tips_image = m.get('tips_image')
        return self


class FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItem(TeaModel):
    def __init__(self, baggage_sub_items=None, index=None, table_head=None, tips=None, title=None, type=None):
        self.baggage_sub_items = baggage_sub_items  # type: list[FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems]
        self.index = index  # type: int
        self.table_head = table_head  # type: str
        self.tips = tips  # type: FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemTips
        self.title = title  # type: str
        self.type = type  # type: int

    def validate(self):
        if self.baggage_sub_items:
            for k in self.baggage_sub_items:
                if k:
                    k.validate()
        if self.tips:
            self.tips.validate()

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItem, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['baggage_sub_items'] = []
        if self.baggage_sub_items is not None:
            for k in self.baggage_sub_items:
                result['baggage_sub_items'].append(k.to_map() if k else None)
        if self.index is not None:
            result['index'] = self.index
        if self.table_head is not None:
            result['table_head'] = self.table_head
        if self.tips is not None:
            result['tips'] = self.tips.to_map()
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.baggage_sub_items = []
        if m.get('baggage_sub_items') is not None:
            for k in m.get('baggage_sub_items'):
                temp_model = FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems()
                self.baggage_sub_items.append(temp_model.from_map(k))
        if m.get('index') is not None:
            self.index = m.get('index')
        if m.get('table_head') is not None:
            self.table_head = m.get('table_head')
        if m.get('tips') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemTips()
            self.tips = temp_model.from_map(m['tips'])
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleInfo(TeaModel):
    def __init__(self, content=None, cost=None, cost_percent=None, time_stamp=None, time_type=None, title=None):
        self.content = content  # type: str
        self.cost = cost  # type: int
        self.cost_percent = cost_percent  # type: int
        self.time_stamp = time_stamp  # type: int
        self.time_type = time_type  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.cost is not None:
            result['cost'] = self.cost
        if self.cost_percent is not None:
            result['cost_percent'] = self.cost_percent
        if self.time_stamp is not None:
            result['time_stamp'] = self.time_stamp
        if self.time_type is not None:
            result['time_type'] = self.time_type
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('cost_percent') is not None:
            self.cost_percent = m.get('cost_percent')
        if m.get('time_stamp') is not None:
            self.time_stamp = m.get('time_stamp')
        if m.get('time_type') is not None:
            self.time_type = m.get('time_type')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRule(TeaModel):
    def __init__(self, able=None, info=None):
        self.able = able  # type: bool
        self.info = info  # type: list[FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleInfo]

    def validate(self):
        if self.info:
            for k in self.info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.able is not None:
            result['able'] = self.able
        result['info'] = []
        if self.info is not None:
            for k in self.info:
                result['info'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('able') is not None:
            self.able = m.get('able')
        self.info = []
        if m.get('info') is not None:
            for k in m.get('info'):
                temp_model = FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleInfo()
                self.info.append(temp_model.from_map(k))
        return self


class FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemExtraContents(TeaModel):
    def __init__(self, content=None, title=None):
        self.content = content  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemExtraContents, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents(TeaModel):
    def __init__(self, fee_desc=None, fee_range=None, style=None):
        self.fee_desc = fee_desc  # type: str
        self.fee_range = fee_range  # type: str
        self.style = style  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.fee_desc is not None:
            result['fee_desc'] = self.fee_desc
        if self.fee_range is not None:
            result['fee_range'] = self.fee_range
        if self.style is not None:
            result['style'] = self.style
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('fee_desc') is not None:
            self.fee_desc = m.get('fee_desc')
        if m.get('fee_range') is not None:
            self.fee_range = m.get('fee_range')
        if m.get('style') is not None:
            self.style = m.get('style')
        return self


class FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems(TeaModel):
    def __init__(self, is_struct=None, ptc=None, refund_sub_contents=None, title=None):
        self.is_struct = is_struct  # type: bool
        # PTC
        self.ptc = ptc  # type: str
        self.refund_sub_contents = refund_sub_contents  # type: list[FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents]
        self.title = title  # type: str

    def validate(self):
        if self.refund_sub_contents:
            for k in self.refund_sub_contents:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.is_struct is not None:
            result['is_struct'] = self.is_struct
        if self.ptc is not None:
            result['ptc'] = self.ptc
        result['refund_sub_contents'] = []
        if self.refund_sub_contents is not None:
            for k in self.refund_sub_contents:
                result['refund_sub_contents'].append(k.to_map() if k else None)
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('is_struct') is not None:
            self.is_struct = m.get('is_struct')
        if m.get('ptc') is not None:
            self.ptc = m.get('ptc')
        self.refund_sub_contents = []
        if m.get('refund_sub_contents') is not None:
            for k in m.get('refund_sub_contents'):
                temp_model = FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents()
                self.refund_sub_contents.append(temp_model.from_map(k))
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItem(TeaModel):
    def __init__(self, extra_contents=None, index=None, refund_sub_items=None, sub_table_head=None, table_head=None,
                 title=None, type=None):
        self.extra_contents = extra_contents  # type: list[FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemExtraContents]
        self.index = index  # type: int
        self.refund_sub_items = refund_sub_items  # type: list[FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems]
        self.sub_table_head = sub_table_head  # type: list[str]
        self.table_head = table_head  # type: str
        self.title = title  # type: str
        self.type = type  # type: int

    def validate(self):
        if self.extra_contents:
            for k in self.extra_contents:
                if k:
                    k.validate()
        if self.refund_sub_items:
            for k in self.refund_sub_items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItem, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['extra_contents'] = []
        if self.extra_contents is not None:
            for k in self.extra_contents:
                result['extra_contents'].append(k.to_map() if k else None)
        if self.index is not None:
            result['index'] = self.index
        result['refund_sub_items'] = []
        if self.refund_sub_items is not None:
            for k in self.refund_sub_items:
                result['refund_sub_items'].append(k.to_map() if k else None)
        if self.sub_table_head is not None:
            result['sub_table_head'] = self.sub_table_head
        if self.table_head is not None:
            result['table_head'] = self.table_head
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.extra_contents = []
        if m.get('extra_contents') is not None:
            for k in m.get('extra_contents'):
                temp_model = FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemExtraContents()
                self.extra_contents.append(temp_model.from_map(k))
        if m.get('index') is not None:
            self.index = m.get('index')
        self.refund_sub_items = []
        if m.get('refund_sub_items') is not None:
            for k in m.get('refund_sub_items'):
                temp_model = FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems()
                self.refund_sub_items.append(temp_model.from_map(k))
        if m.get('sub_table_head') is not None:
            self.sub_table_head = m.get('sub_table_head')
        if m.get('table_head') is not None:
            self.table_head = m.get('table_head')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleInfo(TeaModel):
    def __init__(self, content=None, cost=None, cost_percent=None, time_stamp=None, time_type=None, title=None):
        self.content = content  # type: str
        self.cost = cost  # type: int
        self.cost_percent = cost_percent  # type: int
        self.time_stamp = time_stamp  # type: int
        self.time_type = time_type  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.cost is not None:
            result['cost'] = self.cost
        if self.cost_percent is not None:
            result['cost_percent'] = self.cost_percent
        if self.time_stamp is not None:
            result['time_stamp'] = self.time_stamp
        if self.time_type is not None:
            result['time_type'] = self.time_type
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('cost_percent') is not None:
            self.cost_percent = m.get('cost_percent')
        if m.get('time_stamp') is not None:
            self.time_stamp = m.get('time_stamp')
        if m.get('time_type') is not None:
            self.time_type = m.get('time_type')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRule(TeaModel):
    def __init__(self, able=None, info=None):
        self.able = able  # type: bool
        self.info = info  # type: list[FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleInfo]

    def validate(self):
        if self.info:
            for k in self.info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.able is not None:
            result['able'] = self.able
        result['info'] = []
        if self.info is not None:
            for k in self.info:
                result['info'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('able') is not None:
            self.able = m.get('able')
        self.info = []
        if m.get('info') is not None:
            for k in m.get('info'):
                temp_model = FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleInfo()
                self.info.append(temp_model.from_map(k))
        return self


class FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemExtraContents(TeaModel):
    def __init__(self, content=None, title=None):
        self.content = content  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemExtraContents, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents(TeaModel):
    def __init__(self, fee_desc=None, fee_range=None, style=None):
        self.fee_desc = fee_desc  # type: str
        self.fee_range = fee_range  # type: str
        self.style = style  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.fee_desc is not None:
            result['fee_desc'] = self.fee_desc
        if self.fee_range is not None:
            result['fee_range'] = self.fee_range
        if self.style is not None:
            result['style'] = self.style
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('fee_desc') is not None:
            self.fee_desc = m.get('fee_desc')
        if m.get('fee_range') is not None:
            self.fee_range = m.get('fee_range')
        if m.get('style') is not None:
            self.style = m.get('style')
        return self


class FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems(TeaModel):
    def __init__(self, is_struct=None, ptc=None, refund_sub_contents=None, title=None):
        self.is_struct = is_struct  # type: bool
        # PTC
        self.ptc = ptc  # type: str
        self.refund_sub_contents = refund_sub_contents  # type: list[FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents]
        self.title = title  # type: str

    def validate(self):
        if self.refund_sub_contents:
            for k in self.refund_sub_contents:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.is_struct is not None:
            result['is_struct'] = self.is_struct
        if self.ptc is not None:
            result['ptc'] = self.ptc
        result['refund_sub_contents'] = []
        if self.refund_sub_contents is not None:
            for k in self.refund_sub_contents:
                result['refund_sub_contents'].append(k.to_map() if k else None)
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('is_struct') is not None:
            self.is_struct = m.get('is_struct')
        if m.get('ptc') is not None:
            self.ptc = m.get('ptc')
        self.refund_sub_contents = []
        if m.get('refund_sub_contents') is not None:
            for k in m.get('refund_sub_contents'):
                temp_model = FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents()
                self.refund_sub_contents.append(temp_model.from_map(k))
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItem(TeaModel):
    def __init__(self, extra_contents=None, index=None, refund_sub_items=None, sub_table_head=None, table_head=None,
                 title=None, type=None):
        self.extra_contents = extra_contents  # type: list[FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemExtraContents]
        self.index = index  # type: int
        self.refund_sub_items = refund_sub_items  # type: list[FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems]
        self.sub_table_head = sub_table_head  # type: list[str]
        self.table_head = table_head  # type: str
        self.title = title  # type: str
        self.type = type  # type: int

    def validate(self):
        if self.extra_contents:
            for k in self.extra_contents:
                if k:
                    k.validate()
        if self.refund_sub_items:
            for k in self.refund_sub_items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItem, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['extra_contents'] = []
        if self.extra_contents is not None:
            for k in self.extra_contents:
                result['extra_contents'].append(k.to_map() if k else None)
        if self.index is not None:
            result['index'] = self.index
        result['refund_sub_items'] = []
        if self.refund_sub_items is not None:
            for k in self.refund_sub_items:
                result['refund_sub_items'].append(k.to_map() if k else None)
        if self.sub_table_head is not None:
            result['sub_table_head'] = self.sub_table_head
        if self.table_head is not None:
            result['table_head'] = self.table_head
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.extra_contents = []
        if m.get('extra_contents') is not None:
            for k in m.get('extra_contents'):
                temp_model = FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemExtraContents()
                self.extra_contents.append(temp_model.from_map(k))
        if m.get('index') is not None:
            self.index = m.get('index')
        self.refund_sub_items = []
        if m.get('refund_sub_items') is not None:
            for k in m.get('refund_sub_items'):
                temp_model = FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems()
                self.refund_sub_items.append(temp_model.from_map(k))
        if m.get('sub_table_head') is not None:
            self.sub_table_head = m.get('sub_table_head')
        if m.get('table_head') is not None:
            self.table_head = m.get('table_head')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class FlightSearchListResponseBodyModuleFlightListFlightRuleListSignRuleInfo(TeaModel):
    def __init__(self, content=None, cost=None, cost_percent=None, time_stamp=None, time_type=None, title=None):
        self.content = content  # type: str
        self.cost = cost  # type: int
        self.cost_percent = cost_percent  # type: int
        self.time_stamp = time_stamp  # type: int
        self.time_type = time_type  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListFlightRuleListSignRuleInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.cost is not None:
            result['cost'] = self.cost
        if self.cost_percent is not None:
            result['cost_percent'] = self.cost_percent
        if self.time_stamp is not None:
            result['time_stamp'] = self.time_stamp
        if self.time_type is not None:
            result['time_type'] = self.time_type
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('cost_percent') is not None:
            self.cost_percent = m.get('cost_percent')
        if m.get('time_stamp') is not None:
            self.time_stamp = m.get('time_stamp')
        if m.get('time_type') is not None:
            self.time_type = m.get('time_type')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListFlightRuleListSignRule(TeaModel):
    def __init__(self, able=None, info=None):
        self.able = able  # type: bool
        self.info = info  # type: list[FlightSearchListResponseBodyModuleFlightListFlightRuleListSignRuleInfo]

    def validate(self):
        if self.info:
            for k in self.info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListFlightRuleListSignRule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.able is not None:
            result['able'] = self.able
        result['info'] = []
        if self.info is not None:
            for k in self.info:
                result['info'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('able') is not None:
            self.able = m.get('able')
        self.info = []
        if m.get('info') is not None:
            for k in m.get('info'):
                temp_model = FlightSearchListResponseBodyModuleFlightListFlightRuleListSignRuleInfo()
                self.info.append(temp_model.from_map(k))
        return self


class FlightSearchListResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo(TeaModel):
    def __init__(self, content=None, cost=None, cost_percent=None, time_stamp=None, time_type=None, title=None):
        self.content = content  # type: str
        self.cost = cost  # type: int
        self.cost_percent = cost_percent  # type: int
        self.time_stamp = time_stamp  # type: int
        self.time_type = time_type  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.cost is not None:
            result['cost'] = self.cost
        if self.cost_percent is not None:
            result['cost_percent'] = self.cost_percent
        if self.time_stamp is not None:
            result['time_stamp'] = self.time_stamp
        if self.time_type is not None:
            result['time_type'] = self.time_type
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('cost_percent') is not None:
            self.cost_percent = m.get('cost_percent')
        if m.get('time_stamp') is not None:
            self.time_stamp = m.get('time_stamp')
        if m.get('time_type') is not None:
            self.time_type = m.get('time_type')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListFlightRuleListUpgradeRule(TeaModel):
    def __init__(self, able=None, info=None):
        self.able = able  # type: bool
        self.info = info  # type: list[FlightSearchListResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo]

    def validate(self):
        if self.info:
            for k in self.info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListFlightRuleListUpgradeRule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.able is not None:
            result['able'] = self.able
        result['info'] = []
        if self.info is not None:
            for k in self.info:
                result['info'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('able') is not None:
            self.able = m.get('able')
        self.info = []
        if m.get('info') is not None:
            for k in m.get('info'):
                temp_model = FlightSearchListResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo()
                self.info.append(temp_model.from_map(k))
        return self


class FlightSearchListResponseBodyModuleFlightListFlightRuleList(TeaModel):
    def __init__(self, baggage_info=None, baggage_item=None, change_rule=None, change_rule_item=None, extra=None,
                 refund_rule=None, refund_rule_item=None, sign_rule=None, tuigaiqian_info=None, upgrade_rule=None):
        self.baggage_info = baggage_info  # type: str
        self.baggage_item = baggage_item  # type: FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItem
        self.change_rule = change_rule  # type: FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRule
        self.change_rule_item = change_rule_item  # type: FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItem
        self.extra = extra  # type: str
        self.refund_rule = refund_rule  # type: FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRule
        self.refund_rule_item = refund_rule_item  # type: FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItem
        self.sign_rule = sign_rule  # type: FlightSearchListResponseBodyModuleFlightListFlightRuleListSignRule
        self.tuigaiqian_info = tuigaiqian_info  # type: str
        self.upgrade_rule = upgrade_rule  # type: FlightSearchListResponseBodyModuleFlightListFlightRuleListUpgradeRule

    def validate(self):
        if self.baggage_item:
            self.baggage_item.validate()
        if self.change_rule:
            self.change_rule.validate()
        if self.change_rule_item:
            self.change_rule_item.validate()
        if self.refund_rule:
            self.refund_rule.validate()
        if self.refund_rule_item:
            self.refund_rule_item.validate()
        if self.sign_rule:
            self.sign_rule.validate()
        if self.upgrade_rule:
            self.upgrade_rule.validate()

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListFlightRuleList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.baggage_info is not None:
            result['baggage_info'] = self.baggage_info
        if self.baggage_item is not None:
            result['baggage_item'] = self.baggage_item.to_map()
        if self.change_rule is not None:
            result['change_rule'] = self.change_rule.to_map()
        if self.change_rule_item is not None:
            result['change_rule_item'] = self.change_rule_item.to_map()
        if self.extra is not None:
            result['extra'] = self.extra
        if self.refund_rule is not None:
            result['refund_rule'] = self.refund_rule.to_map()
        if self.refund_rule_item is not None:
            result['refund_rule_item'] = self.refund_rule_item.to_map()
        if self.sign_rule is not None:
            result['sign_rule'] = self.sign_rule.to_map()
        if self.tuigaiqian_info is not None:
            result['tuigaiqian_info'] = self.tuigaiqian_info
        if self.upgrade_rule is not None:
            result['upgrade_rule'] = self.upgrade_rule.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('baggage_info') is not None:
            self.baggage_info = m.get('baggage_info')
        if m.get('baggage_item') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItem()
            self.baggage_item = temp_model.from_map(m['baggage_item'])
        if m.get('change_rule') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRule()
            self.change_rule = temp_model.from_map(m['change_rule'])
        if m.get('change_rule_item') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItem()
            self.change_rule_item = temp_model.from_map(m['change_rule_item'])
        if m.get('extra') is not None:
            self.extra = m.get('extra')
        if m.get('refund_rule') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRule()
            self.refund_rule = temp_model.from_map(m['refund_rule'])
        if m.get('refund_rule_item') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItem()
            self.refund_rule_item = temp_model.from_map(m['refund_rule_item'])
        if m.get('sign_rule') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListFlightRuleListSignRule()
            self.sign_rule = temp_model.from_map(m['sign_rule'])
        if m.get('tuigaiqian_info') is not None:
            self.tuigaiqian_info = m.get('tuigaiqian_info')
        if m.get('upgrade_rule') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListFlightRuleListUpgradeRule()
            self.upgrade_rule = temp_model.from_map(m['upgrade_rule'])
        return self


class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferAirlineInfo(TeaModel):
    def __init__(self, airline_code=None, airline_name=None, airline_simple_name=None):
        self.airline_code = airline_code  # type: str
        self.airline_name = airline_name  # type: str
        self.airline_simple_name = airline_simple_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListTransferInfoTransferAirlineInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.airline_name is not None:
            result['airline_name'] = self.airline_name
        if self.airline_simple_name is not None:
            result['airline_simple_name'] = self.airline_simple_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('airline_name') is not None:
            self.airline_name = m.get('airline_name')
        if m.get('airline_simple_name') is not None:
            self.airline_simple_name = m.get('airline_simple_name')
        return self


class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferArrAirportInfo(TeaModel):
    def __init__(self, airport_code=None, airport_name=None, city_code=None, city_name=None, terminal=None):
        self.airport_code = airport_code  # type: str
        self.airport_name = airport_name  # type: str
        self.city_code = city_code  # type: str
        self.city_name = city_name  # type: str
        self.terminal = terminal  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListTransferInfoTransferArrAirportInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airport_code is not None:
            result['airport_code'] = self.airport_code
        if self.airport_name is not None:
            result['airport_name'] = self.airport_name
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.terminal is not None:
            result['terminal'] = self.terminal
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('airport_code') is not None:
            self.airport_code = m.get('airport_code')
        if m.get('airport_name') is not None:
            self.airport_name = m.get('airport_name')
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('terminal') is not None:
            self.terminal = m.get('terminal')
        return self


class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferDepAirportInfo(TeaModel):
    def __init__(self, airport_code=None, airport_name=None, city_code=None, city_name=None, terminal=None):
        self.airport_code = airport_code  # type: str
        self.airport_name = airport_name  # type: str
        self.city_code = city_code  # type: str
        self.city_name = city_name  # type: str
        self.terminal = terminal  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListTransferInfoTransferDepAirportInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airport_code is not None:
            result['airport_code'] = self.airport_code
        if self.airport_name is not None:
            result['airport_name'] = self.airport_name
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.terminal is not None:
            result['terminal'] = self.terminal
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('airport_code') is not None:
            self.airport_code = m.get('airport_code')
        if m.get('airport_name') is not None:
            self.airport_name = m.get('airport_name')
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('terminal') is not None:
            self.terminal = m.get('terminal')
        return self


class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription(TeaModel):
    def __init__(self, desc=None, icon=None, image=None, title=None):
        self.desc = desc  # type: str
        self.icon = icon  # type: str
        self.image = image  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.desc is not None:
            result['desc'] = self.desc
        if self.icon is not None:
            result['icon'] = self.icon
        if self.image is not None:
            result['image'] = self.image
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('desc') is not None:
            self.desc = m.get('desc')
        if m.get('icon') is not None:
            self.icon = m.get('icon')
        if m.get('image') is not None:
            self.image = m.get('image')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO(TeaModel):
    def __init__(self, image=None, largest=None, middle=None, smallest=None):
        self.image = image  # type: str
        self.largest = largest  # type: str
        self.middle = middle  # type: str
        self.smallest = smallest  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.image is not None:
            result['image'] = self.image
        if self.largest is not None:
            result['largest'] = self.largest
        if self.middle is not None:
            result['middle'] = self.middle
        if self.smallest is not None:
            result['smallest'] = self.smallest
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('image') is not None:
            self.image = m.get('image')
        if m.get('largest') is not None:
            self.largest = m.get('largest')
        if m.get('middle') is not None:
            self.middle = m.get('middle')
        if m.get('smallest') is not None:
            self.smallest = m.get('smallest')
        return self


class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes(TeaModel):
    def __init__(self, baggage_desc=None, baggage_sub_content_type=None, description=None, image_do=None,
                 is_highlight=None, sub_title=None):
        self.baggage_desc = baggage_desc  # type: list[str]
        self.baggage_sub_content_type = baggage_sub_content_type  # type: int
        self.description = description  # type: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription
        self.image_do = image_do  # type: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO
        self.is_highlight = is_highlight  # type: bool
        self.sub_title = sub_title  # type: str

    def validate(self):
        if self.description:
            self.description.validate()
        if self.image_do:
            self.image_do.validate()

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.baggage_desc is not None:
            result['baggage_desc'] = self.baggage_desc
        if self.baggage_sub_content_type is not None:
            result['baggage_sub_content_type'] = self.baggage_sub_content_type
        if self.description is not None:
            result['description'] = self.description.to_map()
        if self.image_do is not None:
            result['image_d_o'] = self.image_do.to_map()
        if self.is_highlight is not None:
            result['is_highlight'] = self.is_highlight
        if self.sub_title is not None:
            result['sub_title'] = self.sub_title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('baggage_desc') is not None:
            self.baggage_desc = m.get('baggage_desc')
        if m.get('baggage_sub_content_type') is not None:
            self.baggage_sub_content_type = m.get('baggage_sub_content_type')
        if m.get('description') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription()
            self.description = temp_model.from_map(m['description'])
        if m.get('image_d_o') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO()
            self.image_do = temp_model.from_map(m['image_d_o'])
        if m.get('is_highlight') is not None:
            self.is_highlight = m.get('is_highlight')
        if m.get('sub_title') is not None:
            self.sub_title = m.get('sub_title')
        return self


class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItems(TeaModel):
    def __init__(self, baggage_sub_content_visualizes=None, extra_content_visualizes=None, is_struct=None,
                 ptc=None, title=None):
        self.baggage_sub_content_visualizes = baggage_sub_content_visualizes  # type: list[FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes]
        self.extra_content_visualizes = extra_content_visualizes  # type: list[any]
        self.is_struct = is_struct  # type: bool
        # PTC
        self.ptc = ptc  # type: str
        self.title = title  # type: str

    def validate(self):
        if self.baggage_sub_content_visualizes:
            for k in self.baggage_sub_content_visualizes:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItems, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['baggage_sub_content_visualizes'] = []
        if self.baggage_sub_content_visualizes is not None:
            for k in self.baggage_sub_content_visualizes:
                result['baggage_sub_content_visualizes'].append(k.to_map() if k else None)
        if self.extra_content_visualizes is not None:
            result['extra_content_visualizes'] = self.extra_content_visualizes
        if self.is_struct is not None:
            result['is_struct'] = self.is_struct
        if self.ptc is not None:
            result['ptc'] = self.ptc
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.baggage_sub_content_visualizes = []
        if m.get('baggage_sub_content_visualizes') is not None:
            for k in m.get('baggage_sub_content_visualizes'):
                temp_model = FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes()
                self.baggage_sub_content_visualizes.append(temp_model.from_map(k))
        if m.get('extra_content_visualizes') is not None:
            self.extra_content_visualizes = m.get('extra_content_visualizes')
        if m.get('is_struct') is not None:
            self.is_struct = m.get('is_struct')
        if m.get('ptc') is not None:
            self.ptc = m.get('ptc')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemTips(TeaModel):
    def __init__(self, logo=None, tips_desc=None, tips_image=None):
        self.logo = logo  # type: str
        self.tips_desc = tips_desc  # type: str
        self.tips_image = tips_image  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemTips, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.logo is not None:
            result['logo'] = self.logo
        if self.tips_desc is not None:
            result['tips_desc'] = self.tips_desc
        if self.tips_image is not None:
            result['tips_image'] = self.tips_image
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('logo') is not None:
            self.logo = m.get('logo')
        if m.get('tips_desc') is not None:
            self.tips_desc = m.get('tips_desc')
        if m.get('tips_image') is not None:
            self.tips_image = m.get('tips_image')
        return self


class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItem(TeaModel):
    def __init__(self, baggage_sub_items=None, index=None, table_head=None, tips=None, title=None, type=None):
        self.baggage_sub_items = baggage_sub_items  # type: list[FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItems]
        self.index = index  # type: int
        self.table_head = table_head  # type: str
        self.tips = tips  # type: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemTips
        self.title = title  # type: str
        self.type = type  # type: int

    def validate(self):
        if self.baggage_sub_items:
            for k in self.baggage_sub_items:
                if k:
                    k.validate()
        if self.tips:
            self.tips.validate()

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItem, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['baggage_sub_items'] = []
        if self.baggage_sub_items is not None:
            for k in self.baggage_sub_items:
                result['baggage_sub_items'].append(k.to_map() if k else None)
        if self.index is not None:
            result['index'] = self.index
        if self.table_head is not None:
            result['table_head'] = self.table_head
        if self.tips is not None:
            result['tips'] = self.tips.to_map()
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.baggage_sub_items = []
        if m.get('baggage_sub_items') is not None:
            for k in m.get('baggage_sub_items'):
                temp_model = FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItems()
                self.baggage_sub_items.append(temp_model.from_map(k))
        if m.get('index') is not None:
            self.index = m.get('index')
        if m.get('table_head') is not None:
            self.table_head = m.get('table_head')
        if m.get('tips') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemTips()
            self.tips = temp_model.from_map(m['tips'])
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleInfo(TeaModel):
    def __init__(self, content=None, cost=None, cost_percent=None, time_stamp=None, time_type=None, title=None):
        self.content = content  # type: str
        self.cost = cost  # type: int
        self.cost_percent = cost_percent  # type: int
        self.time_stamp = time_stamp  # type: int
        self.time_type = time_type  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.cost is not None:
            result['cost'] = self.cost
        if self.cost_percent is not None:
            result['cost_percent'] = self.cost_percent
        if self.time_stamp is not None:
            result['time_stamp'] = self.time_stamp
        if self.time_type is not None:
            result['time_type'] = self.time_type
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('cost_percent') is not None:
            self.cost_percent = m.get('cost_percent')
        if m.get('time_stamp') is not None:
            self.time_stamp = m.get('time_stamp')
        if m.get('time_type') is not None:
            self.time_type = m.get('time_type')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRule(TeaModel):
    def __init__(self, able=None, info=None):
        self.able = able  # type: bool
        self.info = info  # type: list[FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleInfo]

    def validate(self):
        if self.info:
            for k in self.info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.able is not None:
            result['able'] = self.able
        result['info'] = []
        if self.info is not None:
            for k in self.info:
                result['info'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('able') is not None:
            self.able = m.get('able')
        self.info = []
        if m.get('info') is not None:
            for k in m.get('info'):
                temp_model = FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleInfo()
                self.info.append(temp_model.from_map(k))
        return self


class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemExtraContents(TeaModel):
    def __init__(self, content=None, title=None):
        self.content = content  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemExtraContents, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents(TeaModel):
    def __init__(self, fee_desc=None, fee_range=None, style=None):
        self.fee_desc = fee_desc  # type: str
        self.fee_range = fee_range  # type: str
        self.style = style  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.fee_desc is not None:
            result['fee_desc'] = self.fee_desc
        if self.fee_range is not None:
            result['fee_range'] = self.fee_range
        if self.style is not None:
            result['style'] = self.style
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('fee_desc') is not None:
            self.fee_desc = m.get('fee_desc')
        if m.get('fee_range') is not None:
            self.fee_range = m.get('fee_range')
        if m.get('style') is not None:
            self.style = m.get('style')
        return self


class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemRefundSubItems(TeaModel):
    def __init__(self, is_struct=None, ptc=None, refund_sub_contents=None, title=None):
        self.is_struct = is_struct  # type: bool
        # PTC
        self.ptc = ptc  # type: str
        self.refund_sub_contents = refund_sub_contents  # type: list[FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents]
        self.title = title  # type: str

    def validate(self):
        if self.refund_sub_contents:
            for k in self.refund_sub_contents:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemRefundSubItems, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.is_struct is not None:
            result['is_struct'] = self.is_struct
        if self.ptc is not None:
            result['ptc'] = self.ptc
        result['refund_sub_contents'] = []
        if self.refund_sub_contents is not None:
            for k in self.refund_sub_contents:
                result['refund_sub_contents'].append(k.to_map() if k else None)
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('is_struct') is not None:
            self.is_struct = m.get('is_struct')
        if m.get('ptc') is not None:
            self.ptc = m.get('ptc')
        self.refund_sub_contents = []
        if m.get('refund_sub_contents') is not None:
            for k in m.get('refund_sub_contents'):
                temp_model = FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents()
                self.refund_sub_contents.append(temp_model.from_map(k))
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItem(TeaModel):
    def __init__(self, extra_contents=None, index=None, refund_sub_items=None, sub_table_head=None, table_head=None,
                 title=None, type=None):
        self.extra_contents = extra_contents  # type: list[FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemExtraContents]
        self.index = index  # type: int
        self.refund_sub_items = refund_sub_items  # type: list[FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemRefundSubItems]
        self.sub_table_head = sub_table_head  # type: list[str]
        self.table_head = table_head  # type: str
        self.title = title  # type: str
        self.type = type  # type: int

    def validate(self):
        if self.extra_contents:
            for k in self.extra_contents:
                if k:
                    k.validate()
        if self.refund_sub_items:
            for k in self.refund_sub_items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItem, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['extra_contents'] = []
        if self.extra_contents is not None:
            for k in self.extra_contents:
                result['extra_contents'].append(k.to_map() if k else None)
        if self.index is not None:
            result['index'] = self.index
        result['refund_sub_items'] = []
        if self.refund_sub_items is not None:
            for k in self.refund_sub_items:
                result['refund_sub_items'].append(k.to_map() if k else None)
        if self.sub_table_head is not None:
            result['sub_table_head'] = self.sub_table_head
        if self.table_head is not None:
            result['table_head'] = self.table_head
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.extra_contents = []
        if m.get('extra_contents') is not None:
            for k in m.get('extra_contents'):
                temp_model = FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemExtraContents()
                self.extra_contents.append(temp_model.from_map(k))
        if m.get('index') is not None:
            self.index = m.get('index')
        self.refund_sub_items = []
        if m.get('refund_sub_items') is not None:
            for k in m.get('refund_sub_items'):
                temp_model = FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemRefundSubItems()
                self.refund_sub_items.append(temp_model.from_map(k))
        if m.get('sub_table_head') is not None:
            self.sub_table_head = m.get('sub_table_head')
        if m.get('table_head') is not None:
            self.table_head = m.get('table_head')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleInfo(TeaModel):
    def __init__(self, content=None, cost=None, cost_percent=None, time_stamp=None, time_type=None, title=None):
        self.content = content  # type: str
        self.cost = cost  # type: int
        self.cost_percent = cost_percent  # type: int
        self.time_stamp = time_stamp  # type: int
        self.time_type = time_type  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.cost is not None:
            result['cost'] = self.cost
        if self.cost_percent is not None:
            result['cost_percent'] = self.cost_percent
        if self.time_stamp is not None:
            result['time_stamp'] = self.time_stamp
        if self.time_type is not None:
            result['time_type'] = self.time_type
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('cost_percent') is not None:
            self.cost_percent = m.get('cost_percent')
        if m.get('time_stamp') is not None:
            self.time_stamp = m.get('time_stamp')
        if m.get('time_type') is not None:
            self.time_type = m.get('time_type')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRule(TeaModel):
    def __init__(self, able=None, info=None):
        self.able = able  # type: bool
        self.info = info  # type: list[FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleInfo]

    def validate(self):
        if self.info:
            for k in self.info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.able is not None:
            result['able'] = self.able
        result['info'] = []
        if self.info is not None:
            for k in self.info:
                result['info'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('able') is not None:
            self.able = m.get('able')
        self.info = []
        if m.get('info') is not None:
            for k in m.get('info'):
                temp_model = FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleInfo()
                self.info.append(temp_model.from_map(k))
        return self


class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemExtraContents(TeaModel):
    def __init__(self, content=None, title=None):
        self.content = content  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemExtraContents, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents(TeaModel):
    def __init__(self, fee_desc=None, fee_range=None, style=None):
        self.fee_desc = fee_desc  # type: str
        self.fee_range = fee_range  # type: str
        self.style = style  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.fee_desc is not None:
            result['fee_desc'] = self.fee_desc
        if self.fee_range is not None:
            result['fee_range'] = self.fee_range
        if self.style is not None:
            result['style'] = self.style
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('fee_desc') is not None:
            self.fee_desc = m.get('fee_desc')
        if m.get('fee_range') is not None:
            self.fee_range = m.get('fee_range')
        if m.get('style') is not None:
            self.style = m.get('style')
        return self


class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemRefundSubItems(TeaModel):
    def __init__(self, is_struct=None, ptc=None, refund_sub_contents=None, title=None):
        self.is_struct = is_struct  # type: bool
        # PTC
        self.ptc = ptc  # type: str
        self.refund_sub_contents = refund_sub_contents  # type: list[FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents]
        self.title = title  # type: str

    def validate(self):
        if self.refund_sub_contents:
            for k in self.refund_sub_contents:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemRefundSubItems, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.is_struct is not None:
            result['is_struct'] = self.is_struct
        if self.ptc is not None:
            result['ptc'] = self.ptc
        result['refund_sub_contents'] = []
        if self.refund_sub_contents is not None:
            for k in self.refund_sub_contents:
                result['refund_sub_contents'].append(k.to_map() if k else None)
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('is_struct') is not None:
            self.is_struct = m.get('is_struct')
        if m.get('ptc') is not None:
            self.ptc = m.get('ptc')
        self.refund_sub_contents = []
        if m.get('refund_sub_contents') is not None:
            for k in m.get('refund_sub_contents'):
                temp_model = FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents()
                self.refund_sub_contents.append(temp_model.from_map(k))
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItem(TeaModel):
    def __init__(self, extra_contents=None, index=None, refund_sub_items=None, sub_table_head=None, table_head=None,
                 title=None, type=None):
        self.extra_contents = extra_contents  # type: list[FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemExtraContents]
        self.index = index  # type: int
        self.refund_sub_items = refund_sub_items  # type: list[FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemRefundSubItems]
        self.sub_table_head = sub_table_head  # type: list[str]
        self.table_head = table_head  # type: str
        self.title = title  # type: str
        self.type = type  # type: int

    def validate(self):
        if self.extra_contents:
            for k in self.extra_contents:
                if k:
                    k.validate()
        if self.refund_sub_items:
            for k in self.refund_sub_items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItem, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['extra_contents'] = []
        if self.extra_contents is not None:
            for k in self.extra_contents:
                result['extra_contents'].append(k.to_map() if k else None)
        if self.index is not None:
            result['index'] = self.index
        result['refund_sub_items'] = []
        if self.refund_sub_items is not None:
            for k in self.refund_sub_items:
                result['refund_sub_items'].append(k.to_map() if k else None)
        if self.sub_table_head is not None:
            result['sub_table_head'] = self.sub_table_head
        if self.table_head is not None:
            result['table_head'] = self.table_head
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.extra_contents = []
        if m.get('extra_contents') is not None:
            for k in m.get('extra_contents'):
                temp_model = FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemExtraContents()
                self.extra_contents.append(temp_model.from_map(k))
        if m.get('index') is not None:
            self.index = m.get('index')
        self.refund_sub_items = []
        if m.get('refund_sub_items') is not None:
            for k in m.get('refund_sub_items'):
                temp_model = FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemRefundSubItems()
                self.refund_sub_items.append(temp_model.from_map(k))
        if m.get('sub_table_head') is not None:
            self.sub_table_head = m.get('sub_table_head')
        if m.get('table_head') is not None:
            self.table_head = m.get('table_head')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListSignRuleInfo(TeaModel):
    def __init__(self, content=None, cost=None, cost_percent=None, time_stamp=None, time_type=None, title=None):
        self.content = content  # type: str
        self.cost = cost  # type: int
        self.cost_percent = cost_percent  # type: int
        self.time_stamp = time_stamp  # type: int
        self.time_type = time_type  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListSignRuleInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.cost is not None:
            result['cost'] = self.cost
        if self.cost_percent is not None:
            result['cost_percent'] = self.cost_percent
        if self.time_stamp is not None:
            result['time_stamp'] = self.time_stamp
        if self.time_type is not None:
            result['time_type'] = self.time_type
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('cost_percent') is not None:
            self.cost_percent = m.get('cost_percent')
        if m.get('time_stamp') is not None:
            self.time_stamp = m.get('time_stamp')
        if m.get('time_type') is not None:
            self.time_type = m.get('time_type')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListSignRule(TeaModel):
    def __init__(self, able=None, info=None):
        self.able = able  # type: bool
        self.info = info  # type: list[FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListSignRuleInfo]

    def validate(self):
        if self.info:
            for k in self.info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListSignRule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.able is not None:
            result['able'] = self.able
        result['info'] = []
        if self.info is not None:
            for k in self.info:
                result['info'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('able') is not None:
            self.able = m.get('able')
        self.info = []
        if m.get('info') is not None:
            for k in m.get('info'):
                temp_model = FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListSignRuleInfo()
                self.info.append(temp_model.from_map(k))
        return self


class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListUpgradeRuleInfo(TeaModel):
    def __init__(self, content=None, cost=None, cost_percent=None, time_stamp=None, time_type=None, title=None):
        self.content = content  # type: str
        self.cost = cost  # type: int
        self.cost_percent = cost_percent  # type: int
        self.time_stamp = time_stamp  # type: int
        self.time_type = time_type  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListUpgradeRuleInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.cost is not None:
            result['cost'] = self.cost
        if self.cost_percent is not None:
            result['cost_percent'] = self.cost_percent
        if self.time_stamp is not None:
            result['time_stamp'] = self.time_stamp
        if self.time_type is not None:
            result['time_type'] = self.time_type
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('cost_percent') is not None:
            self.cost_percent = m.get('cost_percent')
        if m.get('time_stamp') is not None:
            self.time_stamp = m.get('time_stamp')
        if m.get('time_type') is not None:
            self.time_type = m.get('time_type')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListUpgradeRule(TeaModel):
    def __init__(self, able=None, info=None):
        self.able = able  # type: bool
        self.info = info  # type: list[FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListUpgradeRuleInfo]

    def validate(self):
        if self.info:
            for k in self.info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListUpgradeRule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.able is not None:
            result['able'] = self.able
        result['info'] = []
        if self.info is not None:
            for k in self.info:
                result['info'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('able') is not None:
            self.able = m.get('able')
        self.info = []
        if m.get('info') is not None:
            for k in m.get('info'):
                temp_model = FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListUpgradeRuleInfo()
                self.info.append(temp_model.from_map(k))
        return self


class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleList(TeaModel):
    def __init__(self, baggage_info=None, baggage_item=None, change_rule=None, change_rule_item=None, extra=None,
                 refund_rule=None, refund_rule_item=None, sign_rule=None, tuigaiqian_info=None, upgrade_rule=None):
        self.baggage_info = baggage_info  # type: str
        self.baggage_item = baggage_item  # type: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItem
        self.change_rule = change_rule  # type: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRule
        self.change_rule_item = change_rule_item  # type: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItem
        self.extra = extra  # type: str
        self.refund_rule = refund_rule  # type: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRule
        self.refund_rule_item = refund_rule_item  # type: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItem
        self.sign_rule = sign_rule  # type: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListSignRule
        self.tuigaiqian_info = tuigaiqian_info  # type: str
        self.upgrade_rule = upgrade_rule  # type: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListUpgradeRule

    def validate(self):
        if self.baggage_item:
            self.baggage_item.validate()
        if self.change_rule:
            self.change_rule.validate()
        if self.change_rule_item:
            self.change_rule_item.validate()
        if self.refund_rule:
            self.refund_rule.validate()
        if self.refund_rule_item:
            self.refund_rule_item.validate()
        if self.sign_rule:
            self.sign_rule.validate()
        if self.upgrade_rule:
            self.upgrade_rule.validate()

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.baggage_info is not None:
            result['baggage_info'] = self.baggage_info
        if self.baggage_item is not None:
            result['baggage_item'] = self.baggage_item.to_map()
        if self.change_rule is not None:
            result['change_rule'] = self.change_rule.to_map()
        if self.change_rule_item is not None:
            result['change_rule_item'] = self.change_rule_item.to_map()
        if self.extra is not None:
            result['extra'] = self.extra
        if self.refund_rule is not None:
            result['refund_rule'] = self.refund_rule.to_map()
        if self.refund_rule_item is not None:
            result['refund_rule_item'] = self.refund_rule_item.to_map()
        if self.sign_rule is not None:
            result['sign_rule'] = self.sign_rule.to_map()
        if self.tuigaiqian_info is not None:
            result['tuigaiqian_info'] = self.tuigaiqian_info
        if self.upgrade_rule is not None:
            result['upgrade_rule'] = self.upgrade_rule.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('baggage_info') is not None:
            self.baggage_info = m.get('baggage_info')
        if m.get('baggage_item') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItem()
            self.baggage_item = temp_model.from_map(m['baggage_item'])
        if m.get('change_rule') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRule()
            self.change_rule = temp_model.from_map(m['change_rule'])
        if m.get('change_rule_item') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItem()
            self.change_rule_item = temp_model.from_map(m['change_rule_item'])
        if m.get('extra') is not None:
            self.extra = m.get('extra')
        if m.get('refund_rule') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRule()
            self.refund_rule = temp_model.from_map(m['refund_rule'])
        if m.get('refund_rule_item') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItem()
            self.refund_rule_item = temp_model.from_map(m['refund_rule_item'])
        if m.get('sign_rule') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListSignRule()
            self.sign_rule = temp_model.from_map(m['sign_rule'])
        if m.get('tuigaiqian_info') is not None:
            self.tuigaiqian_info = m.get('tuigaiqian_info')
        if m.get('upgrade_rule') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListUpgradeRule()
            self.upgrade_rule = temp_model.from_map(m['upgrade_rule'])
        return self


class FlightSearchListResponseBodyModuleFlightListTransferInfo(TeaModel):
    def __init__(self, flight_size=None, flight_type=None, transfer_airline_info=None,
                 transfer_arr_airport_info=None, transfer_arr_date=None, transfer_dep_airport_info=None, transfer_dep_date=None,
                 transfer_flight_no=None, transfer_flight_rule_list=None):
        self.flight_size = flight_size  # type: str
        self.flight_type = flight_type  # type: str
        self.transfer_airline_info = transfer_airline_info  # type: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferAirlineInfo
        self.transfer_arr_airport_info = transfer_arr_airport_info  # type: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferArrAirportInfo
        self.transfer_arr_date = transfer_arr_date  # type: str
        self.transfer_dep_airport_info = transfer_dep_airport_info  # type: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferDepAirportInfo
        self.transfer_dep_date = transfer_dep_date  # type: str
        self.transfer_flight_no = transfer_flight_no  # type: str
        self.transfer_flight_rule_list = transfer_flight_rule_list  # type: list[FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleList]

    def validate(self):
        if self.transfer_airline_info:
            self.transfer_airline_info.validate()
        if self.transfer_arr_airport_info:
            self.transfer_arr_airport_info.validate()
        if self.transfer_dep_airport_info:
            self.transfer_dep_airport_info.validate()
        if self.transfer_flight_rule_list:
            for k in self.transfer_flight_rule_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightListTransferInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.flight_size is not None:
            result['flight_size'] = self.flight_size
        if self.flight_type is not None:
            result['flight_type'] = self.flight_type
        if self.transfer_airline_info is not None:
            result['transfer_airline_info'] = self.transfer_airline_info.to_map()
        if self.transfer_arr_airport_info is not None:
            result['transfer_arr_airport_info'] = self.transfer_arr_airport_info.to_map()
        if self.transfer_arr_date is not None:
            result['transfer_arr_date'] = self.transfer_arr_date
        if self.transfer_dep_airport_info is not None:
            result['transfer_dep_airport_info'] = self.transfer_dep_airport_info.to_map()
        if self.transfer_dep_date is not None:
            result['transfer_dep_date'] = self.transfer_dep_date
        if self.transfer_flight_no is not None:
            result['transfer_flight_no'] = self.transfer_flight_no
        result['transfer_flight_rule_list'] = []
        if self.transfer_flight_rule_list is not None:
            for k in self.transfer_flight_rule_list:
                result['transfer_flight_rule_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('flight_size') is not None:
            self.flight_size = m.get('flight_size')
        if m.get('flight_type') is not None:
            self.flight_type = m.get('flight_type')
        if m.get('transfer_airline_info') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListTransferInfoTransferAirlineInfo()
            self.transfer_airline_info = temp_model.from_map(m['transfer_airline_info'])
        if m.get('transfer_arr_airport_info') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListTransferInfoTransferArrAirportInfo()
            self.transfer_arr_airport_info = temp_model.from_map(m['transfer_arr_airport_info'])
        if m.get('transfer_arr_date') is not None:
            self.transfer_arr_date = m.get('transfer_arr_date')
        if m.get('transfer_dep_airport_info') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListTransferInfoTransferDepAirportInfo()
            self.transfer_dep_airport_info = temp_model.from_map(m['transfer_dep_airport_info'])
        if m.get('transfer_dep_date') is not None:
            self.transfer_dep_date = m.get('transfer_dep_date')
        if m.get('transfer_flight_no') is not None:
            self.transfer_flight_no = m.get('transfer_flight_no')
        self.transfer_flight_rule_list = []
        if m.get('transfer_flight_rule_list') is not None:
            for k in m.get('transfer_flight_rule_list'):
                temp_model = FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleList()
                self.transfer_flight_rule_list.append(temp_model.from_map(k))
        return self


class FlightSearchListResponseBodyModuleFlightList(TeaModel):
    def __init__(self, airline_info=None, arr_airport_info=None, arr_date=None, basic_cabin_price=None,
                 build_price=None, cabin=None, cabin_class=None, cabin_info_list=None, carrier_airline=None, carrier_no=None,
                 class_rule=None, dep_airport_info=None, dep_city_code=None, dep_date=None, discount=None, flight_no=None,
                 flight_rule_list=None, flight_rule_list_str=None, flight_size=None, flight_type=None, invoice_type=None,
                 is_protocol=None, is_share=None, is_stop=None, is_transfer=None, meal_desc=None, memo=None, oil_price=None,
                 ota_item_id=None, price=None, product_type=None, product_type_desc=None, promotion_price=None,
                 remained_seat_count=None, secret_params=None, segment_number=None, stop_arr_time=None, stop_city=None,
                 stop_dep_time=None, ticket_price=None, total_price=None, transfer_info=None, trip_type=None):
        self.airline_info = airline_info  # type: FlightSearchListResponseBodyModuleFlightListAirlineInfo
        self.arr_airport_info = arr_airport_info  # type: FlightSearchListResponseBodyModuleFlightListArrAirportInfo
        self.arr_date = arr_date  # type: str
        self.basic_cabin_price = basic_cabin_price  # type: int
        self.build_price = build_price  # type: int
        self.cabin = cabin  # type: str
        self.cabin_class = cabin_class  # type: str
        self.cabin_info_list = cabin_info_list  # type: list[FlightSearchListResponseBodyModuleFlightListCabinInfoList]
        self.carrier_airline = carrier_airline  # type: str
        self.carrier_no = carrier_no  # type: str
        self.class_rule = class_rule  # type: str
        self.dep_airport_info = dep_airport_info  # type: FlightSearchListResponseBodyModuleFlightListDepAirportInfo
        self.dep_city_code = dep_city_code  # type: str
        self.dep_date = dep_date  # type: str
        self.discount = discount  # type: int
        self.flight_no = flight_no  # type: str
        self.flight_rule_list = flight_rule_list  # type: list[FlightSearchListResponseBodyModuleFlightListFlightRuleList]
        self.flight_rule_list_str = flight_rule_list_str  # type: str
        self.flight_size = flight_size  # type: str
        self.flight_type = flight_type  # type: str
        self.invoice_type = invoice_type  # type: int
        self.is_protocol = is_protocol  # type: bool
        self.is_share = is_share  # type: bool
        self.is_stop = is_stop  # type: bool
        self.is_transfer = is_transfer  # type: bool
        self.meal_desc = meal_desc  # type: str
        self.memo = memo  # type: str
        self.oil_price = oil_price  # type: int
        self.ota_item_id = ota_item_id  # type: str
        self.price = price  # type: int
        self.product_type = product_type  # type: long
        self.product_type_desc = product_type_desc  # type: str
        self.promotion_price = promotion_price  # type: str
        self.remained_seat_count = remained_seat_count  # type: str
        self.secret_params = secret_params  # type: str
        self.segment_number = segment_number  # type: str
        self.stop_arr_time = stop_arr_time  # type: str
        self.stop_city = stop_city  # type: str
        self.stop_dep_time = stop_dep_time  # type: str
        self.ticket_price = ticket_price  # type: int
        self.total_price = total_price  # type: str
        self.transfer_info = transfer_info  # type: FlightSearchListResponseBodyModuleFlightListTransferInfo
        self.trip_type = trip_type  # type: int

    def validate(self):
        if self.airline_info:
            self.airline_info.validate()
        if self.arr_airport_info:
            self.arr_airport_info.validate()
        if self.cabin_info_list:
            for k in self.cabin_info_list:
                if k:
                    k.validate()
        if self.dep_airport_info:
            self.dep_airport_info.validate()
        if self.flight_rule_list:
            for k in self.flight_rule_list:
                if k:
                    k.validate()
        if self.transfer_info:
            self.transfer_info.validate()

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModuleFlightList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_info is not None:
            result['airline_info'] = self.airline_info.to_map()
        if self.arr_airport_info is not None:
            result['arr_airport_info'] = self.arr_airport_info.to_map()
        if self.arr_date is not None:
            result['arr_date'] = self.arr_date
        if self.basic_cabin_price is not None:
            result['basic_cabin_price'] = self.basic_cabin_price
        if self.build_price is not None:
            result['build_price'] = self.build_price
        if self.cabin is not None:
            result['cabin'] = self.cabin
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        result['cabin_info_list'] = []
        if self.cabin_info_list is not None:
            for k in self.cabin_info_list:
                result['cabin_info_list'].append(k.to_map() if k else None)
        if self.carrier_airline is not None:
            result['carrier_airline'] = self.carrier_airline
        if self.carrier_no is not None:
            result['carrier_no'] = self.carrier_no
        if self.class_rule is not None:
            result['class_rule'] = self.class_rule
        if self.dep_airport_info is not None:
            result['dep_airport_info'] = self.dep_airport_info.to_map()
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        if self.discount is not None:
            result['discount'] = self.discount
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        result['flight_rule_list'] = []
        if self.flight_rule_list is not None:
            for k in self.flight_rule_list:
                result['flight_rule_list'].append(k.to_map() if k else None)
        if self.flight_rule_list_str is not None:
            result['flight_rule_list_str'] = self.flight_rule_list_str
        if self.flight_size is not None:
            result['flight_size'] = self.flight_size
        if self.flight_type is not None:
            result['flight_type'] = self.flight_type
        if self.invoice_type is not None:
            result['invoice_type'] = self.invoice_type
        if self.is_protocol is not None:
            result['is_protocol'] = self.is_protocol
        if self.is_share is not None:
            result['is_share'] = self.is_share
        if self.is_stop is not None:
            result['is_stop'] = self.is_stop
        if self.is_transfer is not None:
            result['is_transfer'] = self.is_transfer
        if self.meal_desc is not None:
            result['meal_desc'] = self.meal_desc
        if self.memo is not None:
            result['memo'] = self.memo
        if self.oil_price is not None:
            result['oil_price'] = self.oil_price
        if self.ota_item_id is not None:
            result['ota_item_id'] = self.ota_item_id
        if self.price is not None:
            result['price'] = self.price
        if self.product_type is not None:
            result['product_type'] = self.product_type
        if self.product_type_desc is not None:
            result['product_type_desc'] = self.product_type_desc
        if self.promotion_price is not None:
            result['promotion_price'] = self.promotion_price
        if self.remained_seat_count is not None:
            result['remained_seat_count'] = self.remained_seat_count
        if self.secret_params is not None:
            result['secret_params'] = self.secret_params
        if self.segment_number is not None:
            result['segment_number'] = self.segment_number
        if self.stop_arr_time is not None:
            result['stop_arr_time'] = self.stop_arr_time
        if self.stop_city is not None:
            result['stop_city'] = self.stop_city
        if self.stop_dep_time is not None:
            result['stop_dep_time'] = self.stop_dep_time
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.total_price is not None:
            result['total_price'] = self.total_price
        if self.transfer_info is not None:
            result['transfer_info'] = self.transfer_info.to_map()
        if self.trip_type is not None:
            result['trip_type'] = self.trip_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('airline_info') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListAirlineInfo()
            self.airline_info = temp_model.from_map(m['airline_info'])
        if m.get('arr_airport_info') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListArrAirportInfo()
            self.arr_airport_info = temp_model.from_map(m['arr_airport_info'])
        if m.get('arr_date') is not None:
            self.arr_date = m.get('arr_date')
        if m.get('basic_cabin_price') is not None:
            self.basic_cabin_price = m.get('basic_cabin_price')
        if m.get('build_price') is not None:
            self.build_price = m.get('build_price')
        if m.get('cabin') is not None:
            self.cabin = m.get('cabin')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        self.cabin_info_list = []
        if m.get('cabin_info_list') is not None:
            for k in m.get('cabin_info_list'):
                temp_model = FlightSearchListResponseBodyModuleFlightListCabinInfoList()
                self.cabin_info_list.append(temp_model.from_map(k))
        if m.get('carrier_airline') is not None:
            self.carrier_airline = m.get('carrier_airline')
        if m.get('carrier_no') is not None:
            self.carrier_no = m.get('carrier_no')
        if m.get('class_rule') is not None:
            self.class_rule = m.get('class_rule')
        if m.get('dep_airport_info') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListDepAirportInfo()
            self.dep_airport_info = temp_model.from_map(m['dep_airport_info'])
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        if m.get('discount') is not None:
            self.discount = m.get('discount')
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        self.flight_rule_list = []
        if m.get('flight_rule_list') is not None:
            for k in m.get('flight_rule_list'):
                temp_model = FlightSearchListResponseBodyModuleFlightListFlightRuleList()
                self.flight_rule_list.append(temp_model.from_map(k))
        if m.get('flight_rule_list_str') is not None:
            self.flight_rule_list_str = m.get('flight_rule_list_str')
        if m.get('flight_size') is not None:
            self.flight_size = m.get('flight_size')
        if m.get('flight_type') is not None:
            self.flight_type = m.get('flight_type')
        if m.get('invoice_type') is not None:
            self.invoice_type = m.get('invoice_type')
        if m.get('is_protocol') is not None:
            self.is_protocol = m.get('is_protocol')
        if m.get('is_share') is not None:
            self.is_share = m.get('is_share')
        if m.get('is_stop') is not None:
            self.is_stop = m.get('is_stop')
        if m.get('is_transfer') is not None:
            self.is_transfer = m.get('is_transfer')
        if m.get('meal_desc') is not None:
            self.meal_desc = m.get('meal_desc')
        if m.get('memo') is not None:
            self.memo = m.get('memo')
        if m.get('oil_price') is not None:
            self.oil_price = m.get('oil_price')
        if m.get('ota_item_id') is not None:
            self.ota_item_id = m.get('ota_item_id')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('product_type') is not None:
            self.product_type = m.get('product_type')
        if m.get('product_type_desc') is not None:
            self.product_type_desc = m.get('product_type_desc')
        if m.get('promotion_price') is not None:
            self.promotion_price = m.get('promotion_price')
        if m.get('remained_seat_count') is not None:
            self.remained_seat_count = m.get('remained_seat_count')
        if m.get('secret_params') is not None:
            self.secret_params = m.get('secret_params')
        if m.get('segment_number') is not None:
            self.segment_number = m.get('segment_number')
        if m.get('stop_arr_time') is not None:
            self.stop_arr_time = m.get('stop_arr_time')
        if m.get('stop_city') is not None:
            self.stop_city = m.get('stop_city')
        if m.get('stop_dep_time') is not None:
            self.stop_dep_time = m.get('stop_dep_time')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('total_price') is not None:
            self.total_price = m.get('total_price')
        if m.get('transfer_info') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListTransferInfo()
            self.transfer_info = temp_model.from_map(m['transfer_info'])
        if m.get('trip_type') is not None:
            self.trip_type = m.get('trip_type')
        return self


class FlightSearchListResponseBodyModule(TeaModel):
    def __init__(self, flight_list=None, is_replace_pnr=None):
        self.flight_list = flight_list  # type: list[FlightSearchListResponseBodyModuleFlightList]
        self.is_replace_pnr = is_replace_pnr  # type: bool

    def validate(self):
        if self.flight_list:
            for k in self.flight_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(FlightSearchListResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['flight_list'] = []
        if self.flight_list is not None:
            for k in self.flight_list:
                result['flight_list'].append(k.to_map() if k else None)
        if self.is_replace_pnr is not None:
            result['is_replace_pnr'] = self.is_replace_pnr
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.flight_list = []
        if m.get('flight_list') is not None:
            for k in m.get('flight_list'):
                temp_model = FlightSearchListResponseBodyModuleFlightList()
                self.flight_list.append(temp_model.from_map(k))
        if m.get('is_replace_pnr') is not None:
            self.is_replace_pnr = m.get('is_replace_pnr')
        return self


class FlightSearchListResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: FlightSearchListResponseBodyModule
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(FlightSearchListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = FlightSearchListResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightSearchListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: FlightSearchListResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(FlightSearchListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightSearchListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GroupCorpTokenHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_access_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_access_token = x_acs_btrip_access_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GroupCorpTokenHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_access_token is not None:
            result['x-acs-btrip-access-token'] = self.x_acs_btrip_access_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-access-token') is not None:
            self.x_acs_btrip_access_token = m.get('x-acs-btrip-access-token')
        return self


class GroupCorpTokenRequest(TeaModel):
    def __init__(self, app_secret=None, corp_id=None, sub_corp_id=None):
        self.app_secret = app_secret  # type: str
        self.corp_id = corp_id  # type: str
        self.sub_corp_id = sub_corp_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GroupCorpTokenRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_secret is not None:
            result['app_secret'] = self.app_secret
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        if self.sub_corp_id is not None:
            result['sub_corp_id'] = self.sub_corp_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('app_secret') is not None:
            self.app_secret = m.get('app_secret')
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        if m.get('sub_corp_id') is not None:
            self.sub_corp_id = m.get('sub_corp_id')
        return self


class GroupCorpTokenResponseBodyModule(TeaModel):
    def __init__(self, expire=None, start=None, token=None):
        self.expire = expire  # type: long
        self.start = start  # type: long
        self.token = token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GroupCorpTokenResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.expire is not None:
            result['expire'] = self.expire
        if self.start is not None:
            result['start'] = self.start
        if self.token is not None:
            result['token'] = self.token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('expire') is not None:
            self.expire = m.get('expire')
        if m.get('start') is not None:
            self.start = m.get('start')
        if m.get('token') is not None:
            self.token = m.get('token')
        return self


class GroupCorpTokenResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: GroupCorpTokenResponseBodyModule
        # requestId
        self.request_id = request_id  # type: str
        # traceId
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(GroupCorpTokenResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = GroupCorpTokenResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class GroupCorpTokenResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GroupCorpTokenResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GroupCorpTokenResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GroupCorpTokenResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GroupDepartSaveHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GroupDepartSaveHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class GroupDepartSaveRequest(TeaModel):
    def __init__(self, dept_name=None, manager_ids=None, outer_dept_id=None, outer_dept_pid=None, status=None,
                 sub_corp_id_list=None, sync_group=None):
        self.dept_name = dept_name  # type: str
        self.manager_ids = manager_ids  # type: str
        self.outer_dept_id = outer_dept_id  # type: str
        self.outer_dept_pid = outer_dept_pid  # type: str
        self.status = status  # type: int
        self.sub_corp_id_list = sub_corp_id_list  # type: list[str]
        self.sync_group = sync_group  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(GroupDepartSaveRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dept_name is not None:
            result['dept_name'] = self.dept_name
        if self.manager_ids is not None:
            result['manager_ids'] = self.manager_ids
        if self.outer_dept_id is not None:
            result['outer_dept_id'] = self.outer_dept_id
        if self.outer_dept_pid is not None:
            result['outer_dept_pid'] = self.outer_dept_pid
        if self.status is not None:
            result['status'] = self.status
        if self.sub_corp_id_list is not None:
            result['sub_corp_id_list'] = self.sub_corp_id_list
        if self.sync_group is not None:
            result['sync_group'] = self.sync_group
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('dept_name') is not None:
            self.dept_name = m.get('dept_name')
        if m.get('manager_ids') is not None:
            self.manager_ids = m.get('manager_ids')
        if m.get('outer_dept_id') is not None:
            self.outer_dept_id = m.get('outer_dept_id')
        if m.get('outer_dept_pid') is not None:
            self.outer_dept_pid = m.get('outer_dept_pid')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('sub_corp_id_list') is not None:
            self.sub_corp_id_list = m.get('sub_corp_id_list')
        if m.get('sync_group') is not None:
            self.sync_group = m.get('sync_group')
        return self


class GroupDepartSaveShrinkRequest(TeaModel):
    def __init__(self, dept_name=None, manager_ids=None, outer_dept_id=None, outer_dept_pid=None, status=None,
                 sub_corp_id_list_shrink=None, sync_group=None):
        self.dept_name = dept_name  # type: str
        self.manager_ids = manager_ids  # type: str
        self.outer_dept_id = outer_dept_id  # type: str
        self.outer_dept_pid = outer_dept_pid  # type: str
        self.status = status  # type: int
        self.sub_corp_id_list_shrink = sub_corp_id_list_shrink  # type: str
        self.sync_group = sync_group  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(GroupDepartSaveShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dept_name is not None:
            result['dept_name'] = self.dept_name
        if self.manager_ids is not None:
            result['manager_ids'] = self.manager_ids
        if self.outer_dept_id is not None:
            result['outer_dept_id'] = self.outer_dept_id
        if self.outer_dept_pid is not None:
            result['outer_dept_pid'] = self.outer_dept_pid
        if self.status is not None:
            result['status'] = self.status
        if self.sub_corp_id_list_shrink is not None:
            result['sub_corp_id_list'] = self.sub_corp_id_list_shrink
        if self.sync_group is not None:
            result['sync_group'] = self.sync_group
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('dept_name') is not None:
            self.dept_name = m.get('dept_name')
        if m.get('manager_ids') is not None:
            self.manager_ids = m.get('manager_ids')
        if m.get('outer_dept_id') is not None:
            self.outer_dept_id = m.get('outer_dept_id')
        if m.get('outer_dept_pid') is not None:
            self.outer_dept_pid = m.get('outer_dept_pid')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('sub_corp_id_list') is not None:
            self.sub_corp_id_list_shrink = m.get('sub_corp_id_list')
        if m.get('sync_group') is not None:
            self.sync_group = m.get('sync_group')
        return self


class GroupDepartSaveResponseBody(TeaModel):
    def __init__(self, code=None, message=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GroupDepartSaveResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class GroupDepartSaveResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GroupDepartSaveResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GroupDepartSaveResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GroupDepartSaveResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GroupUserSaveHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GroupUserSaveHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class GroupUserSaveRequestSubCorpIdList(TeaModel):
    def __init__(self, depart_ids=None, leave_status=None, manager_user_id=None, position_level=None,
                 sub_corp_id=None):
        self.depart_ids = depart_ids  # type: list[str]
        self.leave_status = leave_status  # type: int
        self.manager_user_id = manager_user_id  # type: str
        self.position_level = position_level  # type: str
        self.sub_corp_id = sub_corp_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GroupUserSaveRequestSubCorpIdList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.depart_ids is not None:
            result['depart_ids'] = self.depart_ids
        if self.leave_status is not None:
            result['leave_status'] = self.leave_status
        if self.manager_user_id is not None:
            result['manager_user_id'] = self.manager_user_id
        if self.position_level is not None:
            result['position_level'] = self.position_level
        if self.sub_corp_id is not None:
            result['sub_corp_id'] = self.sub_corp_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('depart_ids') is not None:
            self.depart_ids = m.get('depart_ids')
        if m.get('leave_status') is not None:
            self.leave_status = m.get('leave_status')
        if m.get('manager_user_id') is not None:
            self.manager_user_id = m.get('manager_user_id')
        if m.get('position_level') is not None:
            self.position_level = m.get('position_level')
        if m.get('sub_corp_id') is not None:
            self.sub_corp_id = m.get('sub_corp_id')
        return self


class GroupUserSaveRequest(TeaModel):
    def __init__(self, job_no=None, phone=None, real_name_en=None, sub_corp_id_list=None, user_id=None,
                 user_name=None):
        self.job_no = job_no  # type: str
        self.phone = phone  # type: str
        self.real_name_en = real_name_en  # type: str
        self.sub_corp_id_list = sub_corp_id_list  # type: list[GroupUserSaveRequestSubCorpIdList]
        self.user_id = user_id  # type: str
        self.user_name = user_name  # type: str

    def validate(self):
        if self.sub_corp_id_list:
            for k in self.sub_corp_id_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(GroupUserSaveRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.job_no is not None:
            result['job_no'] = self.job_no
        if self.phone is not None:
            result['phone'] = self.phone
        if self.real_name_en is not None:
            result['real_name_en'] = self.real_name_en
        result['sub_corp_id_list'] = []
        if self.sub_corp_id_list is not None:
            for k in self.sub_corp_id_list:
                result['sub_corp_id_list'].append(k.to_map() if k else None)
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('job_no') is not None:
            self.job_no = m.get('job_no')
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        if m.get('real_name_en') is not None:
            self.real_name_en = m.get('real_name_en')
        self.sub_corp_id_list = []
        if m.get('sub_corp_id_list') is not None:
            for k in m.get('sub_corp_id_list'):
                temp_model = GroupUserSaveRequestSubCorpIdList()
                self.sub_corp_id_list.append(temp_model.from_map(k))
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class GroupUserSaveShrinkRequest(TeaModel):
    def __init__(self, job_no=None, phone=None, real_name_en=None, sub_corp_id_list_shrink=None, user_id=None,
                 user_name=None):
        self.job_no = job_no  # type: str
        self.phone = phone  # type: str
        self.real_name_en = real_name_en  # type: str
        self.sub_corp_id_list_shrink = sub_corp_id_list_shrink  # type: str
        self.user_id = user_id  # type: str
        self.user_name = user_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GroupUserSaveShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.job_no is not None:
            result['job_no'] = self.job_no
        if self.phone is not None:
            result['phone'] = self.phone
        if self.real_name_en is not None:
            result['real_name_en'] = self.real_name_en
        if self.sub_corp_id_list_shrink is not None:
            result['sub_corp_id_list'] = self.sub_corp_id_list_shrink
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('job_no') is not None:
            self.job_no = m.get('job_no')
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        if m.get('real_name_en') is not None:
            self.real_name_en = m.get('real_name_en')
        if m.get('sub_corp_id_list') is not None:
            self.sub_corp_id_list_shrink = m.get('sub_corp_id_list')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class GroupUserSaveResponseBody(TeaModel):
    def __init__(self, code=None, message=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(GroupUserSaveResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class GroupUserSaveResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: GroupUserSaveResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(GroupUserSaveResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GroupUserSaveResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class HotelAskingPriceHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelAskingPriceHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class HotelAskingPriceRequest(TeaModel):
    def __init__(self, adult_num=None, btrip_user_id=None, check_in_date=None, check_out_date=None, city_code=None,
                 city_name=None, dir=None, hotel_star=None, is_protocol=None, payment_type=None, shids=None, sort_code=None):
        self.adult_num = adult_num  # type: str
        self.btrip_user_id = btrip_user_id  # type: str
        self.check_in_date = check_in_date  # type: str
        self.check_out_date = check_out_date  # type: str
        self.city_code = city_code  # type: str
        self.city_name = city_name  # type: str
        self.dir = dir  # type: int
        self.hotel_star = hotel_star  # type: str
        self.is_protocol = is_protocol  # type: bool
        self.payment_type = payment_type  # type: int
        self.shids = shids  # type: list[long]
        self.sort_code = sort_code  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelAskingPriceRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.adult_num is not None:
            result['adult_num'] = self.adult_num
        if self.btrip_user_id is not None:
            result['btrip_user_id'] = self.btrip_user_id
        if self.check_in_date is not None:
            result['check_in_date'] = self.check_in_date
        if self.check_out_date is not None:
            result['check_out_date'] = self.check_out_date
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.dir is not None:
            result['dir'] = self.dir
        if self.hotel_star is not None:
            result['hotel_star'] = self.hotel_star
        if self.is_protocol is not None:
            result['is_protocol'] = self.is_protocol
        if self.payment_type is not None:
            result['payment_type'] = self.payment_type
        if self.shids is not None:
            result['shids'] = self.shids
        if self.sort_code is not None:
            result['sort_code'] = self.sort_code
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('adult_num') is not None:
            self.adult_num = m.get('adult_num')
        if m.get('btrip_user_id') is not None:
            self.btrip_user_id = m.get('btrip_user_id')
        if m.get('check_in_date') is not None:
            self.check_in_date = m.get('check_in_date')
        if m.get('check_out_date') is not None:
            self.check_out_date = m.get('check_out_date')
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('dir') is not None:
            self.dir = m.get('dir')
        if m.get('hotel_star') is not None:
            self.hotel_star = m.get('hotel_star')
        if m.get('is_protocol') is not None:
            self.is_protocol = m.get('is_protocol')
        if m.get('payment_type') is not None:
            self.payment_type = m.get('payment_type')
        if m.get('shids') is not None:
            self.shids = m.get('shids')
        if m.get('sort_code') is not None:
            self.sort_code = m.get('sort_code')
        return self


class HotelAskingPriceShrinkRequest(TeaModel):
    def __init__(self, adult_num=None, btrip_user_id=None, check_in_date=None, check_out_date=None, city_code=None,
                 city_name=None, dir=None, hotel_star=None, is_protocol=None, payment_type=None, shids_shrink=None,
                 sort_code=None):
        self.adult_num = adult_num  # type: str
        self.btrip_user_id = btrip_user_id  # type: str
        self.check_in_date = check_in_date  # type: str
        self.check_out_date = check_out_date  # type: str
        self.city_code = city_code  # type: str
        self.city_name = city_name  # type: str
        self.dir = dir  # type: int
        self.hotel_star = hotel_star  # type: str
        self.is_protocol = is_protocol  # type: bool
        self.payment_type = payment_type  # type: int
        self.shids_shrink = shids_shrink  # type: str
        self.sort_code = sort_code  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelAskingPriceShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.adult_num is not None:
            result['adult_num'] = self.adult_num
        if self.btrip_user_id is not None:
            result['btrip_user_id'] = self.btrip_user_id
        if self.check_in_date is not None:
            result['check_in_date'] = self.check_in_date
        if self.check_out_date is not None:
            result['check_out_date'] = self.check_out_date
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.dir is not None:
            result['dir'] = self.dir
        if self.hotel_star is not None:
            result['hotel_star'] = self.hotel_star
        if self.is_protocol is not None:
            result['is_protocol'] = self.is_protocol
        if self.payment_type is not None:
            result['payment_type'] = self.payment_type
        if self.shids_shrink is not None:
            result['shids'] = self.shids_shrink
        if self.sort_code is not None:
            result['sort_code'] = self.sort_code
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('adult_num') is not None:
            self.adult_num = m.get('adult_num')
        if m.get('btrip_user_id') is not None:
            self.btrip_user_id = m.get('btrip_user_id')
        if m.get('check_in_date') is not None:
            self.check_in_date = m.get('check_in_date')
        if m.get('check_out_date') is not None:
            self.check_out_date = m.get('check_out_date')
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('dir') is not None:
            self.dir = m.get('dir')
        if m.get('hotel_star') is not None:
            self.hotel_star = m.get('hotel_star')
        if m.get('is_protocol') is not None:
            self.is_protocol = m.get('is_protocol')
        if m.get('payment_type') is not None:
            self.payment_type = m.get('payment_type')
        if m.get('shids') is not None:
            self.shids_shrink = m.get('shids')
        if m.get('sort_code') is not None:
            self.sort_code = m.get('sort_code')
        return self


class HotelAskingPriceResponseBodyModuleHotelAskingPriceDetails(TeaModel):
    def __init__(self, city_code=None, hotel_address=None, hotel_code=None, hotel_name=None, is_protocol=None,
                 min_price=None, original_min_price=None):
        self.city_code = city_code  # type: str
        self.hotel_address = hotel_address  # type: str
        self.hotel_code = hotel_code  # type: str
        self.hotel_name = hotel_name  # type: str
        self.is_protocol = is_protocol  # type: bool
        self.min_price = min_price  # type: float
        self.original_min_price = original_min_price  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelAskingPriceResponseBodyModuleHotelAskingPriceDetails, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.hotel_address is not None:
            result['hotel_address'] = self.hotel_address
        if self.hotel_code is not None:
            result['hotel_code'] = self.hotel_code
        if self.hotel_name is not None:
            result['hotel_name'] = self.hotel_name
        if self.is_protocol is not None:
            result['is_protocol'] = self.is_protocol
        if self.min_price is not None:
            result['min_price'] = self.min_price
        if self.original_min_price is not None:
            result['original_min_price'] = self.original_min_price
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('hotel_address') is not None:
            self.hotel_address = m.get('hotel_address')
        if m.get('hotel_code') is not None:
            self.hotel_code = m.get('hotel_code')
        if m.get('hotel_name') is not None:
            self.hotel_name = m.get('hotel_name')
        if m.get('is_protocol') is not None:
            self.is_protocol = m.get('is_protocol')
        if m.get('min_price') is not None:
            self.min_price = m.get('min_price')
        if m.get('original_min_price') is not None:
            self.original_min_price = m.get('original_min_price')
        return self


class HotelAskingPriceResponseBodyModule(TeaModel):
    def __init__(self, hotel_asking_price_details=None):
        self.hotel_asking_price_details = hotel_asking_price_details  # type: list[HotelAskingPriceResponseBodyModuleHotelAskingPriceDetails]

    def validate(self):
        if self.hotel_asking_price_details:
            for k in self.hotel_asking_price_details:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(HotelAskingPriceResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['hotel_asking_price_details'] = []
        if self.hotel_asking_price_details is not None:
            for k in self.hotel_asking_price_details:
                result['hotel_asking_price_details'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.hotel_asking_price_details = []
        if m.get('hotel_asking_price_details') is not None:
            for k in m.get('hotel_asking_price_details'):
                temp_model = HotelAskingPriceResponseBodyModuleHotelAskingPriceDetails()
                self.hotel_asking_price_details.append(temp_model.from_map(k))
        return self


class HotelAskingPriceResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: HotelAskingPriceResponseBodyModule
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(HotelAskingPriceResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = HotelAskingPriceResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class HotelAskingPriceResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: HotelAskingPriceResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(HotelAskingPriceResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = HotelAskingPriceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class HotelBillSettlementQueryHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_so_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelBillSettlementQueryHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class HotelBillSettlementQueryRequest(TeaModel):
    def __init__(self, page_no=None, page_size=None, period_end=None, period_start=None):
        self.page_no = page_no  # type: int
        self.page_size = page_size  # type: int
        self.period_end = period_end  # type: str
        self.period_start = period_start  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelBillSettlementQueryRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_no is not None:
            result['page_no'] = self.page_no
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.period_end is not None:
            result['period_end'] = self.period_end
        if self.period_start is not None:
            result['period_start'] = self.period_start
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('page_no') is not None:
            self.page_no = m.get('page_no')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('period_end') is not None:
            self.period_end = m.get('period_end')
        if m.get('period_start') is not None:
            self.period_start = m.get('period_start')
        return self


class HotelBillSettlementQueryResponseBodyModuleDataList(TeaModel):
    def __init__(self, alipay_trade_no=None, apply_arr_city_code=None, apply_arr_city_name=None,
                 apply_dep_city_code=None, apply_dep_city_name=None, apply_extend_field=None, apply_id=None, average_nights=None,
                 bill_record_time=None, book_reason=None, book_time=None, booker_id=None, booker_job_no=None, booker_name=None,
                 brand_group=None, brand_name=None, business_trip_result=None, capital_direction=None, cascade_department=None,
                 check_in_date=None, checkout_date=None, city=None, city_code=None, city_county=None, city_county_code=None,
                 corp_refund_fee=None, corp_total_fee=None, cost_center=None, cost_center_number=None, department=None,
                 department_id=None, exceed_reason=None, fee_type=None, fees=None, fines=None, fu_point_fee=None, hotel_name=None,
                 index=None, invoice_title=None, is_early_departure=None, is_negotiation=None, is_share_str=None,
                 nights=None, order_id=None, order_price=None, order_type=None, over_apply_id=None, person_refund_fee=None,
                 person_settle_price=None, primary_id=None, project_code=None, project_name=None, promotion_fee=None, remark=None,
                 reserve_rule=None, room_no=None, room_number=None, room_price=None, room_type=None, service_fee=None,
                 settlement_fee=None, settlement_grant_fee=None, settlement_time=None, settlement_type=None, star=None,
                 status=None, tax_rate=None, third_itinerary_id=None, total_nights=None, traveler_id=None,
                 traveler_job_no=None, traveler_member_type_name=None, traveler_name=None, voucher_type=None):
        self.alipay_trade_no = alipay_trade_no  # type: str
        self.apply_arr_city_code = apply_arr_city_code  # type: str
        self.apply_arr_city_name = apply_arr_city_name  # type: str
        self.apply_dep_city_code = apply_dep_city_code  # type: str
        self.apply_dep_city_name = apply_dep_city_name  # type: str
        # 审批扩展自定义字段
        self.apply_extend_field = apply_extend_field  # type: str
        self.apply_id = apply_id  # type: str
        self.average_nights = average_nights  # type: str
        self.bill_record_time = bill_record_time  # type: str
        self.book_reason = book_reason  # type: str
        self.book_time = book_time  # type: str
        self.booker_id = booker_id  # type: str
        self.booker_job_no = booker_job_no  # type: str
        self.booker_name = booker_name  # type: str
        self.brand_group = brand_group  # type: str
        self.brand_name = brand_name  # type: str
        self.business_trip_result = business_trip_result  # type: str
        self.capital_direction = capital_direction  # type: str
        self.cascade_department = cascade_department  # type: str
        self.check_in_date = check_in_date  # type: str
        self.checkout_date = checkout_date  # type: str
        self.city = city  # type: str
        self.city_code = city_code  # type: str
        self.city_county = city_county  # type: str
        self.city_county_code = city_county_code  # type: str
        self.corp_refund_fee = corp_refund_fee  # type: float
        self.corp_total_fee = corp_total_fee  # type: float
        self.cost_center = cost_center  # type: str
        self.cost_center_number = cost_center_number  # type: str
        self.department = department  # type: str
        self.department_id = department_id  # type: str
        self.exceed_reason = exceed_reason  # type: str
        self.fee_type = fee_type  # type: str
        self.fees = fees  # type: float
        self.fines = fines  # type: float
        self.fu_point_fee = fu_point_fee  # type: float
        self.hotel_name = hotel_name  # type: str
        self.index = index  # type: str
        self.invoice_title = invoice_title  # type: str
        self.is_early_departure = is_early_departure  # type: str
        self.is_negotiation = is_negotiation  # type: str
        self.is_share_str = is_share_str  # type: str
        self.nights = nights  # type: int
        self.order_id = order_id  # type: str
        self.order_price = order_price  # type: float
        self.order_type = order_type  # type: str
        self.over_apply_id = over_apply_id  # type: str
        self.person_refund_fee = person_refund_fee  # type: float
        self.person_settle_price = person_settle_price  # type: float
        self.primary_id = primary_id  # type: long
        self.project_code = project_code  # type: str
        self.project_name = project_name  # type: str
        self.promotion_fee = promotion_fee  # type: float
        self.remark = remark  # type: str
        self.reserve_rule = reserve_rule  # type: str
        self.room_no = room_no  # type: str
        self.room_number = room_number  # type: int
        self.room_price = room_price  # type: float
        self.room_type = room_type  # type: str
        self.service_fee = service_fee  # type: float
        self.settlement_fee = settlement_fee  # type: float
        self.settlement_grant_fee = settlement_grant_fee  # type: float
        self.settlement_time = settlement_time  # type: str
        self.settlement_type = settlement_type  # type: str
        self.star = star  # type: str
        self.status = status  # type: int
        # 税率
        self.tax_rate = tax_rate  # type: str
        self.third_itinerary_id = third_itinerary_id  # type: str
        self.total_nights = total_nights  # type: int
        self.traveler_id = traveler_id  # type: str
        self.traveler_job_no = traveler_job_no  # type: str
        self.traveler_member_type_name = traveler_member_type_name  # type: str
        self.traveler_name = traveler_name  # type: str
        self.voucher_type = voucher_type  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelBillSettlementQueryResponseBodyModuleDataList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alipay_trade_no is not None:
            result['alipay_trade_no'] = self.alipay_trade_no
        if self.apply_arr_city_code is not None:
            result['apply_arr_city_code'] = self.apply_arr_city_code
        if self.apply_arr_city_name is not None:
            result['apply_arr_city_name'] = self.apply_arr_city_name
        if self.apply_dep_city_code is not None:
            result['apply_dep_city_code'] = self.apply_dep_city_code
        if self.apply_dep_city_name is not None:
            result['apply_dep_city_name'] = self.apply_dep_city_name
        if self.apply_extend_field is not None:
            result['apply_extend_field'] = self.apply_extend_field
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.average_nights is not None:
            result['average_nights'] = self.average_nights
        if self.bill_record_time is not None:
            result['bill_record_time'] = self.bill_record_time
        if self.book_reason is not None:
            result['book_reason'] = self.book_reason
        if self.book_time is not None:
            result['book_time'] = self.book_time
        if self.booker_id is not None:
            result['booker_id'] = self.booker_id
        if self.booker_job_no is not None:
            result['booker_job_no'] = self.booker_job_no
        if self.booker_name is not None:
            result['booker_name'] = self.booker_name
        if self.brand_group is not None:
            result['brand_group'] = self.brand_group
        if self.brand_name is not None:
            result['brand_name'] = self.brand_name
        if self.business_trip_result is not None:
            result['business_trip_result'] = self.business_trip_result
        if self.capital_direction is not None:
            result['capital_direction'] = self.capital_direction
        if self.cascade_department is not None:
            result['cascade_department'] = self.cascade_department
        if self.check_in_date is not None:
            result['check_in_date'] = self.check_in_date
        if self.checkout_date is not None:
            result['checkout_date'] = self.checkout_date
        if self.city is not None:
            result['city'] = self.city
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_county is not None:
            result['city_county'] = self.city_county
        if self.city_county_code is not None:
            result['city_county_code'] = self.city_county_code
        if self.corp_refund_fee is not None:
            result['corp_refund_fee'] = self.corp_refund_fee
        if self.corp_total_fee is not None:
            result['corp_total_fee'] = self.corp_total_fee
        if self.cost_center is not None:
            result['cost_center'] = self.cost_center
        if self.cost_center_number is not None:
            result['cost_center_number'] = self.cost_center_number
        if self.department is not None:
            result['department'] = self.department
        if self.department_id is not None:
            result['department_id'] = self.department_id
        if self.exceed_reason is not None:
            result['exceed_reason'] = self.exceed_reason
        if self.fee_type is not None:
            result['fee_type'] = self.fee_type
        if self.fees is not None:
            result['fees'] = self.fees
        if self.fines is not None:
            result['fines'] = self.fines
        if self.fu_point_fee is not None:
            result['fu_point_fee'] = self.fu_point_fee
        if self.hotel_name is not None:
            result['hotel_name'] = self.hotel_name
        if self.index is not None:
            result['index'] = self.index
        if self.invoice_title is not None:
            result['invoice_title'] = self.invoice_title
        if self.is_early_departure is not None:
            result['is_early_departure'] = self.is_early_departure
        if self.is_negotiation is not None:
            result['is_negotiation'] = self.is_negotiation
        if self.is_share_str is not None:
            result['is_share_str'] = self.is_share_str
        if self.nights is not None:
            result['nights'] = self.nights
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.order_price is not None:
            result['order_price'] = self.order_price
        if self.order_type is not None:
            result['order_type'] = self.order_type
        if self.over_apply_id is not None:
            result['over_apply_id'] = self.over_apply_id
        if self.person_refund_fee is not None:
            result['person_refund_fee'] = self.person_refund_fee
        if self.person_settle_price is not None:
            result['person_settle_price'] = self.person_settle_price
        if self.primary_id is not None:
            result['primary_id'] = self.primary_id
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_name is not None:
            result['project_name'] = self.project_name
        if self.promotion_fee is not None:
            result['promotion_fee'] = self.promotion_fee
        if self.remark is not None:
            result['remark'] = self.remark
        if self.reserve_rule is not None:
            result['reserve_rule'] = self.reserve_rule
        if self.room_no is not None:
            result['room_no'] = self.room_no
        if self.room_number is not None:
            result['room_number'] = self.room_number
        if self.room_price is not None:
            result['room_price'] = self.room_price
        if self.room_type is not None:
            result['room_type'] = self.room_type
        if self.service_fee is not None:
            result['service_fee'] = self.service_fee
        if self.settlement_fee is not None:
            result['settlement_fee'] = self.settlement_fee
        if self.settlement_grant_fee is not None:
            result['settlement_grant_fee'] = self.settlement_grant_fee
        if self.settlement_time is not None:
            result['settlement_time'] = self.settlement_time
        if self.settlement_type is not None:
            result['settlement_type'] = self.settlement_type
        if self.star is not None:
            result['star'] = self.star
        if self.status is not None:
            result['status'] = self.status
        if self.tax_rate is not None:
            result['tax_rate'] = self.tax_rate
        if self.third_itinerary_id is not None:
            result['third_itinerary_id'] = self.third_itinerary_id
        if self.total_nights is not None:
            result['total_nights'] = self.total_nights
        if self.traveler_id is not None:
            result['traveler_id'] = self.traveler_id
        if self.traveler_job_no is not None:
            result['traveler_job_no'] = self.traveler_job_no
        if self.traveler_member_type_name is not None:
            result['traveler_member_type_name'] = self.traveler_member_type_name
        if self.traveler_name is not None:
            result['traveler_name'] = self.traveler_name
        if self.voucher_type is not None:
            result['voucher_type'] = self.voucher_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('alipay_trade_no') is not None:
            self.alipay_trade_no = m.get('alipay_trade_no')
        if m.get('apply_arr_city_code') is not None:
            self.apply_arr_city_code = m.get('apply_arr_city_code')
        if m.get('apply_arr_city_name') is not None:
            self.apply_arr_city_name = m.get('apply_arr_city_name')
        if m.get('apply_dep_city_code') is not None:
            self.apply_dep_city_code = m.get('apply_dep_city_code')
        if m.get('apply_dep_city_name') is not None:
            self.apply_dep_city_name = m.get('apply_dep_city_name')
        if m.get('apply_extend_field') is not None:
            self.apply_extend_field = m.get('apply_extend_field')
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('average_nights') is not None:
            self.average_nights = m.get('average_nights')
        if m.get('bill_record_time') is not None:
            self.bill_record_time = m.get('bill_record_time')
        if m.get('book_reason') is not None:
            self.book_reason = m.get('book_reason')
        if m.get('book_time') is not None:
            self.book_time = m.get('book_time')
        if m.get('booker_id') is not None:
            self.booker_id = m.get('booker_id')
        if m.get('booker_job_no') is not None:
            self.booker_job_no = m.get('booker_job_no')
        if m.get('booker_name') is not None:
            self.booker_name = m.get('booker_name')
        if m.get('brand_group') is not None:
            self.brand_group = m.get('brand_group')
        if m.get('brand_name') is not None:
            self.brand_name = m.get('brand_name')
        if m.get('business_trip_result') is not None:
            self.business_trip_result = m.get('business_trip_result')
        if m.get('capital_direction') is not None:
            self.capital_direction = m.get('capital_direction')
        if m.get('cascade_department') is not None:
            self.cascade_department = m.get('cascade_department')
        if m.get('check_in_date') is not None:
            self.check_in_date = m.get('check_in_date')
        if m.get('checkout_date') is not None:
            self.checkout_date = m.get('checkout_date')
        if m.get('city') is not None:
            self.city = m.get('city')
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_county') is not None:
            self.city_county = m.get('city_county')
        if m.get('city_county_code') is not None:
            self.city_county_code = m.get('city_county_code')
        if m.get('corp_refund_fee') is not None:
            self.corp_refund_fee = m.get('corp_refund_fee')
        if m.get('corp_total_fee') is not None:
            self.corp_total_fee = m.get('corp_total_fee')
        if m.get('cost_center') is not None:
            self.cost_center = m.get('cost_center')
        if m.get('cost_center_number') is not None:
            self.cost_center_number = m.get('cost_center_number')
        if m.get('department') is not None:
            self.department = m.get('department')
        if m.get('department_id') is not None:
            self.department_id = m.get('department_id')
        if m.get('exceed_reason') is not None:
            self.exceed_reason = m.get('exceed_reason')
        if m.get('fee_type') is not None:
            self.fee_type = m.get('fee_type')
        if m.get('fees') is not None:
            self.fees = m.get('fees')
        if m.get('fines') is not None:
            self.fines = m.get('fines')
        if m.get('fu_point_fee') is not None:
            self.fu_point_fee = m.get('fu_point_fee')
        if m.get('hotel_name') is not None:
            self.hotel_name = m.get('hotel_name')
        if m.get('index') is not None:
            self.index = m.get('index')
        if m.get('invoice_title') is not None:
            self.invoice_title = m.get('invoice_title')
        if m.get('is_early_departure') is not None:
            self.is_early_departure = m.get('is_early_departure')
        if m.get('is_negotiation') is not None:
            self.is_negotiation = m.get('is_negotiation')
        if m.get('is_share_str') is not None:
            self.is_share_str = m.get('is_share_str')
        if m.get('nights') is not None:
            self.nights = m.get('nights')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('order_price') is not None:
            self.order_price = m.get('order_price')
        if m.get('order_type') is not None:
            self.order_type = m.get('order_type')
        if m.get('over_apply_id') is not None:
            self.over_apply_id = m.get('over_apply_id')
        if m.get('person_refund_fee') is not None:
            self.person_refund_fee = m.get('person_refund_fee')
        if m.get('person_settle_price') is not None:
            self.person_settle_price = m.get('person_settle_price')
        if m.get('primary_id') is not None:
            self.primary_id = m.get('primary_id')
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_name') is not None:
            self.project_name = m.get('project_name')
        if m.get('promotion_fee') is not None:
            self.promotion_fee = m.get('promotion_fee')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('reserve_rule') is not None:
            self.reserve_rule = m.get('reserve_rule')
        if m.get('room_no') is not None:
            self.room_no = m.get('room_no')
        if m.get('room_number') is not None:
            self.room_number = m.get('room_number')
        if m.get('room_price') is not None:
            self.room_price = m.get('room_price')
        if m.get('room_type') is not None:
            self.room_type = m.get('room_type')
        if m.get('service_fee') is not None:
            self.service_fee = m.get('service_fee')
        if m.get('settlement_fee') is not None:
            self.settlement_fee = m.get('settlement_fee')
        if m.get('settlement_grant_fee') is not None:
            self.settlement_grant_fee = m.get('settlement_grant_fee')
        if m.get('settlement_time') is not None:
            self.settlement_time = m.get('settlement_time')
        if m.get('settlement_type') is not None:
            self.settlement_type = m.get('settlement_type')
        if m.get('star') is not None:
            self.star = m.get('star')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('tax_rate') is not None:
            self.tax_rate = m.get('tax_rate')
        if m.get('third_itinerary_id') is not None:
            self.third_itinerary_id = m.get('third_itinerary_id')
        if m.get('total_nights') is not None:
            self.total_nights = m.get('total_nights')
        if m.get('traveler_id') is not None:
            self.traveler_id = m.get('traveler_id')
        if m.get('traveler_job_no') is not None:
            self.traveler_job_no = m.get('traveler_job_no')
        if m.get('traveler_member_type_name') is not None:
            self.traveler_member_type_name = m.get('traveler_member_type_name')
        if m.get('traveler_name') is not None:
            self.traveler_name = m.get('traveler_name')
        if m.get('voucher_type') is not None:
            self.voucher_type = m.get('voucher_type')
        return self


class HotelBillSettlementQueryResponseBodyModule(TeaModel):
    def __init__(self, category=None, corp_id=None, data_list=None, period_end=None, period_start=None,
                 total_num=None):
        self.category = category  # type: int
        self.corp_id = corp_id  # type: str
        self.data_list = data_list  # type: list[HotelBillSettlementQueryResponseBodyModuleDataList]
        self.period_end = period_end  # type: str
        self.period_start = period_start  # type: str
        self.total_num = total_num  # type: long

    def validate(self):
        if self.data_list:
            for k in self.data_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(HotelBillSettlementQueryResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['category'] = self.category
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        result['data_list'] = []
        if self.data_list is not None:
            for k in self.data_list:
                result['data_list'].append(k.to_map() if k else None)
        if self.period_end is not None:
            result['period_end'] = self.period_end
        if self.period_start is not None:
            result['period_start'] = self.period_start
        if self.total_num is not None:
            result['total_num'] = self.total_num
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('category') is not None:
            self.category = m.get('category')
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        self.data_list = []
        if m.get('data_list') is not None:
            for k in m.get('data_list'):
                temp_model = HotelBillSettlementQueryResponseBodyModuleDataList()
                self.data_list.append(temp_model.from_map(k))
        if m.get('period_end') is not None:
            self.period_end = m.get('period_end')
        if m.get('period_start') is not None:
            self.period_start = m.get('period_start')
        if m.get('total_num') is not None:
            self.total_num = m.get('total_num')
        return self


class HotelBillSettlementQueryResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: HotelBillSettlementQueryResponseBodyModule
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(HotelBillSettlementQueryResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = HotelBillSettlementQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class HotelBillSettlementQueryResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: HotelBillSettlementQueryResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(HotelBillSettlementQueryResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = HotelBillSettlementQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class HotelCityCodeListHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelCityCodeListHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class HotelCityCodeListRequest(TeaModel):
    def __init__(self, country_code=None):
        self.country_code = country_code  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelCityCodeListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.country_code is not None:
            result['country_code'] = self.country_code
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('country_code') is not None:
            self.country_code = m.get('country_code')
        return self


class HotelCityCodeListResponseBodyModuleCitysDistricts(TeaModel):
    def __init__(self, district_code=None, district_name=None):
        self.district_code = district_code  # type: str
        self.district_name = district_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelCityCodeListResponseBodyModuleCitysDistricts, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.district_code is not None:
            result['district_code'] = self.district_code
        if self.district_name is not None:
            result['district_name'] = self.district_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('district_code') is not None:
            self.district_code = m.get('district_code')
        if m.get('district_name') is not None:
            self.district_name = m.get('district_name')
        return self


class HotelCityCodeListResponseBodyModuleCitys(TeaModel):
    def __init__(self, city_code=None, city_name=None, districts=None):
        self.city_code = city_code  # type: str
        self.city_name = city_name  # type: str
        self.districts = districts  # type: list[HotelCityCodeListResponseBodyModuleCitysDistricts]

    def validate(self):
        if self.districts:
            for k in self.districts:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(HotelCityCodeListResponseBodyModuleCitys, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        result['districts'] = []
        if self.districts is not None:
            for k in self.districts:
                result['districts'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        self.districts = []
        if m.get('districts') is not None:
            for k in m.get('districts'):
                temp_model = HotelCityCodeListResponseBodyModuleCitysDistricts()
                self.districts.append(temp_model.from_map(k))
        return self


class HotelCityCodeListResponseBodyModule(TeaModel):
    def __init__(self, citys=None, provice_code=None, province_name=None):
        self.citys = citys  # type: list[HotelCityCodeListResponseBodyModuleCitys]
        self.provice_code = provice_code  # type: str
        self.province_name = province_name  # type: str

    def validate(self):
        if self.citys:
            for k in self.citys:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(HotelCityCodeListResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['citys'] = []
        if self.citys is not None:
            for k in self.citys:
                result['citys'].append(k.to_map() if k else None)
        if self.provice_code is not None:
            result['provice_code'] = self.provice_code
        if self.province_name is not None:
            result['province_name'] = self.province_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.citys = []
        if m.get('citys') is not None:
            for k in m.get('citys'):
                temp_model = HotelCityCodeListResponseBodyModuleCitys()
                self.citys.append(temp_model.from_map(k))
        if m.get('provice_code') is not None:
            self.provice_code = m.get('provice_code')
        if m.get('province_name') is not None:
            self.province_name = m.get('province_name')
        return self


class HotelCityCodeListResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: list[HotelCityCodeListResponseBodyModule]
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            for k in self.module:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(HotelCityCodeListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        result['module'] = []
        if self.module is not None:
            for k in self.module:
                result['module'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        self.module = []
        if m.get('module') is not None:
            for k in m.get('module'):
                temp_model = HotelCityCodeListResponseBodyModule()
                self.module.append(temp_model.from_map(k))
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class HotelCityCodeListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: HotelCityCodeListResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(HotelCityCodeListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = HotelCityCodeListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class HotelExceedApplyQueryHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_so_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelExceedApplyQueryHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class HotelExceedApplyQueryRequest(TeaModel):
    def __init__(self, apply_id=None):
        self.apply_id = apply_id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelExceedApplyQueryRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        return self


class HotelExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo(TeaModel):
    def __init__(self, check_in=None, check_out=None, city_code=None, city_name=None, price=None, together=None,
                 type=None):
        self.check_in = check_in  # type: str
        self.check_out = check_out  # type: str
        self.city_code = city_code  # type: str
        self.city_name = city_name  # type: str
        self.price = price  # type: long
        self.together = together  # type: bool
        self.type = type  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.check_in is not None:
            result['check_in'] = self.check_in
        if self.check_out is not None:
            result['check_out'] = self.check_out
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.price is not None:
            result['price'] = self.price
        if self.together is not None:
            result['together'] = self.together
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('check_in') is not None:
            self.check_in = m.get('check_in')
        if m.get('check_out') is not None:
            self.check_out = m.get('check_out')
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('together') is not None:
            self.together = m.get('together')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class HotelExceedApplyQueryResponseBodyModule(TeaModel):
    def __init__(self, apply_id=None, apply_intention_info_do=None, btrip_cause=None, corp_id=None,
                 exceed_reason=None, exceed_type=None, origin_standard=None, status=None, submit_time=None,
                 thirdpart_apply_id=None, thirdpart_corp_id=None, user_id=None):
        self.apply_id = apply_id  # type: long
        self.apply_intention_info_do = apply_intention_info_do  # type: HotelExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo
        self.btrip_cause = btrip_cause  # type: str
        self.corp_id = corp_id  # type: str
        self.exceed_reason = exceed_reason  # type: str
        self.exceed_type = exceed_type  # type: int
        self.origin_standard = origin_standard  # type: str
        self.status = status  # type: int
        self.submit_time = submit_time  # type: str
        self.thirdpart_apply_id = thirdpart_apply_id  # type: str
        self.thirdpart_corp_id = thirdpart_corp_id  # type: str
        self.user_id = user_id  # type: str

    def validate(self):
        if self.apply_intention_info_do:
            self.apply_intention_info_do.validate()

    def to_map(self):
        _map = super(HotelExceedApplyQueryResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.apply_intention_info_do is not None:
            result['apply_intention_info_do'] = self.apply_intention_info_do.to_map()
        if self.btrip_cause is not None:
            result['btrip_cause'] = self.btrip_cause
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        if self.exceed_reason is not None:
            result['exceed_reason'] = self.exceed_reason
        if self.exceed_type is not None:
            result['exceed_type'] = self.exceed_type
        if self.origin_standard is not None:
            result['origin_standard'] = self.origin_standard
        if self.status is not None:
            result['status'] = self.status
        if self.submit_time is not None:
            result['submit_time'] = self.submit_time
        if self.thirdpart_apply_id is not None:
            result['thirdpart_apply_id'] = self.thirdpart_apply_id
        if self.thirdpart_corp_id is not None:
            result['thirdpart_corp_id'] = self.thirdpart_corp_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('apply_intention_info_do') is not None:
            temp_model = HotelExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo()
            self.apply_intention_info_do = temp_model.from_map(m['apply_intention_info_do'])
        if m.get('btrip_cause') is not None:
            self.btrip_cause = m.get('btrip_cause')
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        if m.get('exceed_reason') is not None:
            self.exceed_reason = m.get('exceed_reason')
        if m.get('exceed_type') is not None:
            self.exceed_type = m.get('exceed_type')
        if m.get('origin_standard') is not None:
            self.origin_standard = m.get('origin_standard')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('submit_time') is not None:
            self.submit_time = m.get('submit_time')
        if m.get('thirdpart_apply_id') is not None:
            self.thirdpart_apply_id = m.get('thirdpart_apply_id')
        if m.get('thirdpart_corp_id') is not None:
            self.thirdpart_corp_id = m.get('thirdpart_corp_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class HotelExceedApplyQueryResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: HotelExceedApplyQueryResponseBodyModule
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(HotelExceedApplyQueryResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = HotelExceedApplyQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class HotelExceedApplyQueryResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: HotelExceedApplyQueryResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(HotelExceedApplyQueryResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = HotelExceedApplyQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class HotelGoodsQueryHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelGoodsQueryHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class HotelGoodsQueryRequest(TeaModel):
    def __init__(self, adult_num=None, agreement_price=None, begin_date=None, breakfast_included=None,
                 btrip_user_id=None, city_code=None, end_date=None, hotel_id=None, pay_over_type=None, payment_type=None,
                 special_invoice=None, super_man=None):
        self.adult_num = adult_num  # type: str
        self.agreement_price = agreement_price  # type: bool
        self.begin_date = begin_date  # type: str
        self.breakfast_included = breakfast_included  # type: bool
        self.btrip_user_id = btrip_user_id  # type: str
        self.city_code = city_code  # type: str
        self.end_date = end_date  # type: str
        self.hotel_id = hotel_id  # type: str
        self.pay_over_type = pay_over_type  # type: int
        self.payment_type = payment_type  # type: int
        self.special_invoice = special_invoice  # type: bool
        self.super_man = super_man  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelGoodsQueryRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.adult_num is not None:
            result['adult_num'] = self.adult_num
        if self.agreement_price is not None:
            result['agreement_price'] = self.agreement_price
        if self.begin_date is not None:
            result['begin_date'] = self.begin_date
        if self.breakfast_included is not None:
            result['breakfast_included'] = self.breakfast_included
        if self.btrip_user_id is not None:
            result['btrip_user_id'] = self.btrip_user_id
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.end_date is not None:
            result['end_date'] = self.end_date
        if self.hotel_id is not None:
            result['hotel_id'] = self.hotel_id
        if self.pay_over_type is not None:
            result['pay_over_type'] = self.pay_over_type
        if self.payment_type is not None:
            result['payment_type'] = self.payment_type
        if self.special_invoice is not None:
            result['special_invoice'] = self.special_invoice
        if self.super_man is not None:
            result['super_man'] = self.super_man
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('adult_num') is not None:
            self.adult_num = m.get('adult_num')
        if m.get('agreement_price') is not None:
            self.agreement_price = m.get('agreement_price')
        if m.get('begin_date') is not None:
            self.begin_date = m.get('begin_date')
        if m.get('breakfast_included') is not None:
            self.breakfast_included = m.get('breakfast_included')
        if m.get('btrip_user_id') is not None:
            self.btrip_user_id = m.get('btrip_user_id')
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('end_date') is not None:
            self.end_date = m.get('end_date')
        if m.get('hotel_id') is not None:
            self.hotel_id = m.get('hotel_id')
        if m.get('pay_over_type') is not None:
            self.pay_over_type = m.get('pay_over_type')
        if m.get('payment_type') is not None:
            self.payment_type = m.get('payment_type')
        if m.get('special_invoice') is not None:
            self.special_invoice = m.get('special_invoice')
        if m.get('super_man') is not None:
            self.super_man = m.get('super_man')
        return self


class HotelGoodsQueryResponseBodyModuleRoomsRatesBtripCancelRuleBtripHotelCancelPolicyDTOBtripHotelCancelPolicyInfoDTOList(TeaModel):
    def __init__(self, hour=None, value=None):
        self.hour = hour  # type: long
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelGoodsQueryResponseBodyModuleRoomsRatesBtripCancelRuleBtripHotelCancelPolicyDTOBtripHotelCancelPolicyInfoDTOList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.hour is not None:
            result['hour'] = self.hour
        if self.value is not None:
            result['value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('hour') is not None:
            self.hour = m.get('hour')
        if m.get('value') is not None:
            self.value = m.get('value')
        return self


class HotelGoodsQueryResponseBodyModuleRoomsRatesBtripCancelRuleBtripHotelCancelPolicyDTO(TeaModel):
    def __init__(self, btrip_hotel_cancel_policy_info_dtolist=None, cancel_policy_type=None):
        self.btrip_hotel_cancel_policy_info_dtolist = btrip_hotel_cancel_policy_info_dtolist  # type: list[HotelGoodsQueryResponseBodyModuleRoomsRatesBtripCancelRuleBtripHotelCancelPolicyDTOBtripHotelCancelPolicyInfoDTOList]
        self.cancel_policy_type = cancel_policy_type  # type: int

    def validate(self):
        if self.btrip_hotel_cancel_policy_info_dtolist:
            for k in self.btrip_hotel_cancel_policy_info_dtolist:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(HotelGoodsQueryResponseBodyModuleRoomsRatesBtripCancelRuleBtripHotelCancelPolicyDTO, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['btrip_hotel_cancel_policy_info_d_t_o_list'] = []
        if self.btrip_hotel_cancel_policy_info_dtolist is not None:
            for k in self.btrip_hotel_cancel_policy_info_dtolist:
                result['btrip_hotel_cancel_policy_info_d_t_o_list'].append(k.to_map() if k else None)
        if self.cancel_policy_type is not None:
            result['cancel_policy_type'] = self.cancel_policy_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.btrip_hotel_cancel_policy_info_dtolist = []
        if m.get('btrip_hotel_cancel_policy_info_d_t_o_list') is not None:
            for k in m.get('btrip_hotel_cancel_policy_info_d_t_o_list'):
                temp_model = HotelGoodsQueryResponseBodyModuleRoomsRatesBtripCancelRuleBtripHotelCancelPolicyDTOBtripHotelCancelPolicyInfoDTOList()
                self.btrip_hotel_cancel_policy_info_dtolist.append(temp_model.from_map(k))
        if m.get('cancel_policy_type') is not None:
            self.cancel_policy_type = m.get('cancel_policy_type')
        return self


class HotelGoodsQueryResponseBodyModuleRoomsRatesBtripCancelRule(TeaModel):
    def __init__(self, btrip_hotel_cancel_policy_dto=None, cancel_policy_title=None, check_in=None):
        self.btrip_hotel_cancel_policy_dto = btrip_hotel_cancel_policy_dto  # type: HotelGoodsQueryResponseBodyModuleRoomsRatesBtripCancelRuleBtripHotelCancelPolicyDTO
        self.cancel_policy_title = cancel_policy_title  # type: str
        self.check_in = check_in  # type: str

    def validate(self):
        if self.btrip_hotel_cancel_policy_dto:
            self.btrip_hotel_cancel_policy_dto.validate()

    def to_map(self):
        _map = super(HotelGoodsQueryResponseBodyModuleRoomsRatesBtripCancelRule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.btrip_hotel_cancel_policy_dto is not None:
            result['btrip_hotel_cancel_policy_d_t_o'] = self.btrip_hotel_cancel_policy_dto.to_map()
        if self.cancel_policy_title is not None:
            result['cancel_policy_title'] = self.cancel_policy_title
        if self.check_in is not None:
            result['check_in'] = self.check_in
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('btrip_hotel_cancel_policy_d_t_o') is not None:
            temp_model = HotelGoodsQueryResponseBodyModuleRoomsRatesBtripCancelRuleBtripHotelCancelPolicyDTO()
            self.btrip_hotel_cancel_policy_dto = temp_model.from_map(m['btrip_hotel_cancel_policy_d_t_o'])
        if m.get('cancel_policy_title') is not None:
            self.cancel_policy_title = m.get('cancel_policy_title')
        if m.get('check_in') is not None:
            self.check_in = m.get('check_in')
        return self


class HotelGoodsQueryResponseBodyModuleRoomsRatesBtripHotelCancelDesc(TeaModel):
    def __init__(self, desc=None, title=None):
        self.desc = desc  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelGoodsQueryResponseBodyModuleRoomsRatesBtripHotelCancelDesc, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.desc is not None:
            result['desc'] = self.desc
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('desc') is not None:
            self.desc = m.get('desc')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class HotelGoodsQueryResponseBodyModuleRoomsRatesDiscountDescDiscountDetail(TeaModel):
    def __init__(self, label_name=None, money_desc=None):
        self.label_name = label_name  # type: list[str]
        self.money_desc = money_desc  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelGoodsQueryResponseBodyModuleRoomsRatesDiscountDescDiscountDetail, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.label_name is not None:
            result['label_name'] = self.label_name
        if self.money_desc is not None:
            result['money_desc'] = self.money_desc
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('label_name') is not None:
            self.label_name = m.get('label_name')
        if m.get('money_desc') is not None:
            self.money_desc = m.get('money_desc')
        return self


class HotelGoodsQueryResponseBodyModuleRoomsRatesDiscountDesc(TeaModel):
    def __init__(self, cash_reduce_total=None, dinamic_label=None, discount_detail=None, sub_title=None, title=None):
        self.cash_reduce_total = cash_reduce_total  # type: str
        self.dinamic_label = dinamic_label  # type: str
        self.discount_detail = discount_detail  # type: list[HotelGoodsQueryResponseBodyModuleRoomsRatesDiscountDescDiscountDetail]
        self.sub_title = sub_title  # type: str
        self.title = title  # type: str

    def validate(self):
        if self.discount_detail:
            for k in self.discount_detail:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(HotelGoodsQueryResponseBodyModuleRoomsRatesDiscountDesc, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cash_reduce_total is not None:
            result['cash_reduce_total'] = self.cash_reduce_total
        if self.dinamic_label is not None:
            result['dinamic_label'] = self.dinamic_label
        result['discount_detail'] = []
        if self.discount_detail is not None:
            for k in self.discount_detail:
                result['discount_detail'].append(k.to_map() if k else None)
        if self.sub_title is not None:
            result['sub_title'] = self.sub_title
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('cash_reduce_total') is not None:
            self.cash_reduce_total = m.get('cash_reduce_total')
        if m.get('dinamic_label') is not None:
            self.dinamic_label = m.get('dinamic_label')
        self.discount_detail = []
        if m.get('discount_detail') is not None:
            for k in m.get('discount_detail'):
                temp_model = HotelGoodsQueryResponseBodyModuleRoomsRatesDiscountDescDiscountDetail()
                self.discount_detail.append(temp_model.from_map(k))
        if m.get('sub_title') is not None:
            self.sub_title = m.get('sub_title')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class HotelGoodsQueryResponseBodyModuleRoomsRatesHotelDetailRatePriceDTO(TeaModel):
    def __init__(self, before_discount_price=None, breakfast=None, discount_price=None, last_discounts_price=None,
                 last_discounts_rounding_price=None, last_num=None, rate_start_time=None, status=None):
        self.before_discount_price = before_discount_price  # type: long
        self.breakfast = breakfast  # type: str
        self.discount_price = discount_price  # type: long
        self.last_discounts_price = last_discounts_price  # type: long
        self.last_discounts_rounding_price = last_discounts_rounding_price  # type: long
        self.last_num = last_num  # type: int
        self.rate_start_time = rate_start_time  # type: str
        self.status = status  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelGoodsQueryResponseBodyModuleRoomsRatesHotelDetailRatePriceDTO, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.before_discount_price is not None:
            result['before_discount_price'] = self.before_discount_price
        if self.breakfast is not None:
            result['breakfast'] = self.breakfast
        if self.discount_price is not None:
            result['discount_price'] = self.discount_price
        if self.last_discounts_price is not None:
            result['last_discounts_price'] = self.last_discounts_price
        if self.last_discounts_rounding_price is not None:
            result['last_discounts_rounding_price'] = self.last_discounts_rounding_price
        if self.last_num is not None:
            result['last_num'] = self.last_num
        if self.rate_start_time is not None:
            result['rate_start_time'] = self.rate_start_time
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('before_discount_price') is not None:
            self.before_discount_price = m.get('before_discount_price')
        if m.get('breakfast') is not None:
            self.breakfast = m.get('breakfast')
        if m.get('discount_price') is not None:
            self.discount_price = m.get('discount_price')
        if m.get('last_discounts_price') is not None:
            self.last_discounts_price = m.get('last_discounts_price')
        if m.get('last_discounts_rounding_price') is not None:
            self.last_discounts_rounding_price = m.get('last_discounts_rounding_price')
        if m.get('last_num') is not None:
            self.last_num = m.get('last_num')
        if m.get('rate_start_time') is not None:
            self.rate_start_time = m.get('rate_start_time')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class HotelGoodsQueryResponseBodyModuleRoomsRates(TeaModel):
    def __init__(self, bed_desc=None, bed_type=None, breakfast=None, btrip_cancel_rule=None,
                 btrip_hotel_cancel_desc=None, can_smoking=None, cancel_policy_desc=None, cancel_policy_type=None, company_aassist=None,
                 confirm_type=None, currency_code=None, daily_price_format_yuan=None, daily_price_view=None, discount_desc=None,
                 end_time_daily=None, hotel_detail_rate_price_dto=None, instant_confirm=None, inventory_price=None,
                 is_business_pay_4goods=None, is_guarantee=None, is_need_email=None, item_id=None, last_cancel_time=None,
                 max_occupancy=None, min_adv_hours=None, min_days=None, nod=None, nop=None, order_ship_time=None,
                 payment_type=None, price_type=None, promotion_info=None, rate_id=None, rate_plan_name=None, rp_id=None,
                 seller_id=None, start_time_daily=None, status=None, supplier_code=None, supplier_name=None,
                 support_special_invoice=None, unrounding_daily_price_format_yuan=None):
        self.bed_desc = bed_desc  # type: str
        self.bed_type = bed_type  # type: str
        self.breakfast = breakfast  # type: str
        self.btrip_cancel_rule = btrip_cancel_rule  # type: HotelGoodsQueryResponseBodyModuleRoomsRatesBtripCancelRule
        self.btrip_hotel_cancel_desc = btrip_hotel_cancel_desc  # type: list[HotelGoodsQueryResponseBodyModuleRoomsRatesBtripHotelCancelDesc]
        self.can_smoking = can_smoking  # type: bool
        self.cancel_policy_desc = cancel_policy_desc  # type: str
        self.cancel_policy_type = cancel_policy_type  # type: int
        self.company_aassist = company_aassist  # type: str
        self.confirm_type = confirm_type  # type: int
        self.currency_code = currency_code  # type: str
        self.daily_price_format_yuan = daily_price_format_yuan  # type: str
        self.daily_price_view = daily_price_view  # type: str
        self.discount_desc = discount_desc  # type: HotelGoodsQueryResponseBodyModuleRoomsRatesDiscountDesc
        self.end_time_daily = end_time_daily  # type: str
        self.hotel_detail_rate_price_dto = hotel_detail_rate_price_dto  # type: list[HotelGoodsQueryResponseBodyModuleRoomsRatesHotelDetailRatePriceDTO]
        self.instant_confirm = instant_confirm  # type: bool
        self.inventory_price = inventory_price  # type: str
        self.is_business_pay_4goods = is_business_pay_4goods  # type: bool
        self.is_guarantee = is_guarantee  # type: int
        self.is_need_email = is_need_email  # type: bool
        self.item_id = item_id  # type: long
        self.last_cancel_time = last_cancel_time  # type: str
        self.max_occupancy = max_occupancy  # type: int
        self.min_adv_hours = min_adv_hours  # type: int
        self.min_days = min_days  # type: int
        self.nod = nod  # type: int
        self.nop = nop  # type: int
        self.order_ship_time = order_ship_time  # type: int
        self.payment_type = payment_type  # type: int
        self.price_type = price_type  # type: int
        self.promotion_info = promotion_info  # type: str
        self.rate_id = rate_id  # type: long
        self.rate_plan_name = rate_plan_name  # type: str
        self.rp_id = rp_id  # type: long
        self.seller_id = seller_id  # type: long
        self.start_time_daily = start_time_daily  # type: str
        self.status = status  # type: int
        self.supplier_code = supplier_code  # type: str
        self.supplier_name = supplier_name  # type: str
        self.support_special_invoice = support_special_invoice  # type: bool
        self.unrounding_daily_price_format_yuan = unrounding_daily_price_format_yuan  # type: str

    def validate(self):
        if self.btrip_cancel_rule:
            self.btrip_cancel_rule.validate()
        if self.btrip_hotel_cancel_desc:
            for k in self.btrip_hotel_cancel_desc:
                if k:
                    k.validate()
        if self.discount_desc:
            self.discount_desc.validate()
        if self.hotel_detail_rate_price_dto:
            for k in self.hotel_detail_rate_price_dto:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(HotelGoodsQueryResponseBodyModuleRoomsRates, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bed_desc is not None:
            result['bed_desc'] = self.bed_desc
        if self.bed_type is not None:
            result['bed_type'] = self.bed_type
        if self.breakfast is not None:
            result['breakfast'] = self.breakfast
        if self.btrip_cancel_rule is not None:
            result['btrip_cancel_rule'] = self.btrip_cancel_rule.to_map()
        result['btrip_hotel_cancel_desc'] = []
        if self.btrip_hotel_cancel_desc is not None:
            for k in self.btrip_hotel_cancel_desc:
                result['btrip_hotel_cancel_desc'].append(k.to_map() if k else None)
        if self.can_smoking is not None:
            result['can_smoking'] = self.can_smoking
        if self.cancel_policy_desc is not None:
            result['cancel_policy_desc'] = self.cancel_policy_desc
        if self.cancel_policy_type is not None:
            result['cancel_policy_type'] = self.cancel_policy_type
        if self.company_aassist is not None:
            result['company_aassist'] = self.company_aassist
        if self.confirm_type is not None:
            result['confirm_type'] = self.confirm_type
        if self.currency_code is not None:
            result['currency_code'] = self.currency_code
        if self.daily_price_format_yuan is not None:
            result['daily_price_format_yuan'] = self.daily_price_format_yuan
        if self.daily_price_view is not None:
            result['daily_price_view'] = self.daily_price_view
        if self.discount_desc is not None:
            result['discount_desc'] = self.discount_desc.to_map()
        if self.end_time_daily is not None:
            result['end_time_daily'] = self.end_time_daily
        result['hotel_detail_rate_price_d_t_o'] = []
        if self.hotel_detail_rate_price_dto is not None:
            for k in self.hotel_detail_rate_price_dto:
                result['hotel_detail_rate_price_d_t_o'].append(k.to_map() if k else None)
        if self.instant_confirm is not None:
            result['instant_confirm'] = self.instant_confirm
        if self.inventory_price is not None:
            result['inventory_price'] = self.inventory_price
        if self.is_business_pay_4goods is not None:
            result['is_business_pay4_goods'] = self.is_business_pay_4goods
        if self.is_guarantee is not None:
            result['is_guarantee'] = self.is_guarantee
        if self.is_need_email is not None:
            result['is_need_email'] = self.is_need_email
        if self.item_id is not None:
            result['item_id'] = self.item_id
        if self.last_cancel_time is not None:
            result['last_cancel_time'] = self.last_cancel_time
        if self.max_occupancy is not None:
            result['max_occupancy'] = self.max_occupancy
        if self.min_adv_hours is not None:
            result['min_adv_hours'] = self.min_adv_hours
        if self.min_days is not None:
            result['min_days'] = self.min_days
        if self.nod is not None:
            result['nod'] = self.nod
        if self.nop is not None:
            result['nop'] = self.nop
        if self.order_ship_time is not None:
            result['order_ship_time'] = self.order_ship_time
        if self.payment_type is not None:
            result['payment_type'] = self.payment_type
        if self.price_type is not None:
            result['price_type'] = self.price_type
        if self.promotion_info is not None:
            result['promotion_info'] = self.promotion_info
        if self.rate_id is not None:
            result['rate_id'] = self.rate_id
        if self.rate_plan_name is not None:
            result['rate_plan_name'] = self.rate_plan_name
        if self.rp_id is not None:
            result['rp_id'] = self.rp_id
        if self.seller_id is not None:
            result['seller_id'] = self.seller_id
        if self.start_time_daily is not None:
            result['start_time_daily'] = self.start_time_daily
        if self.status is not None:
            result['status'] = self.status
        if self.supplier_code is not None:
            result['supplier_code'] = self.supplier_code
        if self.supplier_name is not None:
            result['supplier_name'] = self.supplier_name
        if self.support_special_invoice is not None:
            result['support_special_invoice'] = self.support_special_invoice
        if self.unrounding_daily_price_format_yuan is not None:
            result['unrounding_daily_price_format_yuan'] = self.unrounding_daily_price_format_yuan
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('bed_desc') is not None:
            self.bed_desc = m.get('bed_desc')
        if m.get('bed_type') is not None:
            self.bed_type = m.get('bed_type')
        if m.get('breakfast') is not None:
            self.breakfast = m.get('breakfast')
        if m.get('btrip_cancel_rule') is not None:
            temp_model = HotelGoodsQueryResponseBodyModuleRoomsRatesBtripCancelRule()
            self.btrip_cancel_rule = temp_model.from_map(m['btrip_cancel_rule'])
        self.btrip_hotel_cancel_desc = []
        if m.get('btrip_hotel_cancel_desc') is not None:
            for k in m.get('btrip_hotel_cancel_desc'):
                temp_model = HotelGoodsQueryResponseBodyModuleRoomsRatesBtripHotelCancelDesc()
                self.btrip_hotel_cancel_desc.append(temp_model.from_map(k))
        if m.get('can_smoking') is not None:
            self.can_smoking = m.get('can_smoking')
        if m.get('cancel_policy_desc') is not None:
            self.cancel_policy_desc = m.get('cancel_policy_desc')
        if m.get('cancel_policy_type') is not None:
            self.cancel_policy_type = m.get('cancel_policy_type')
        if m.get('company_aassist') is not None:
            self.company_aassist = m.get('company_aassist')
        if m.get('confirm_type') is not None:
            self.confirm_type = m.get('confirm_type')
        if m.get('currency_code') is not None:
            self.currency_code = m.get('currency_code')
        if m.get('daily_price_format_yuan') is not None:
            self.daily_price_format_yuan = m.get('daily_price_format_yuan')
        if m.get('daily_price_view') is not None:
            self.daily_price_view = m.get('daily_price_view')
        if m.get('discount_desc') is not None:
            temp_model = HotelGoodsQueryResponseBodyModuleRoomsRatesDiscountDesc()
            self.discount_desc = temp_model.from_map(m['discount_desc'])
        if m.get('end_time_daily') is not None:
            self.end_time_daily = m.get('end_time_daily')
        self.hotel_detail_rate_price_dto = []
        if m.get('hotel_detail_rate_price_d_t_o') is not None:
            for k in m.get('hotel_detail_rate_price_d_t_o'):
                temp_model = HotelGoodsQueryResponseBodyModuleRoomsRatesHotelDetailRatePriceDTO()
                self.hotel_detail_rate_price_dto.append(temp_model.from_map(k))
        if m.get('instant_confirm') is not None:
            self.instant_confirm = m.get('instant_confirm')
        if m.get('inventory_price') is not None:
            self.inventory_price = m.get('inventory_price')
        if m.get('is_business_pay4_goods') is not None:
            self.is_business_pay_4goods = m.get('is_business_pay4_goods')
        if m.get('is_guarantee') is not None:
            self.is_guarantee = m.get('is_guarantee')
        if m.get('is_need_email') is not None:
            self.is_need_email = m.get('is_need_email')
        if m.get('item_id') is not None:
            self.item_id = m.get('item_id')
        if m.get('last_cancel_time') is not None:
            self.last_cancel_time = m.get('last_cancel_time')
        if m.get('max_occupancy') is not None:
            self.max_occupancy = m.get('max_occupancy')
        if m.get('min_adv_hours') is not None:
            self.min_adv_hours = m.get('min_adv_hours')
        if m.get('min_days') is not None:
            self.min_days = m.get('min_days')
        if m.get('nod') is not None:
            self.nod = m.get('nod')
        if m.get('nop') is not None:
            self.nop = m.get('nop')
        if m.get('order_ship_time') is not None:
            self.order_ship_time = m.get('order_ship_time')
        if m.get('payment_type') is not None:
            self.payment_type = m.get('payment_type')
        if m.get('price_type') is not None:
            self.price_type = m.get('price_type')
        if m.get('promotion_info') is not None:
            self.promotion_info = m.get('promotion_info')
        if m.get('rate_id') is not None:
            self.rate_id = m.get('rate_id')
        if m.get('rate_plan_name') is not None:
            self.rate_plan_name = m.get('rate_plan_name')
        if m.get('rp_id') is not None:
            self.rp_id = m.get('rp_id')
        if m.get('seller_id') is not None:
            self.seller_id = m.get('seller_id')
        if m.get('start_time_daily') is not None:
            self.start_time_daily = m.get('start_time_daily')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('supplier_code') is not None:
            self.supplier_code = m.get('supplier_code')
        if m.get('supplier_name') is not None:
            self.supplier_name = m.get('supplier_name')
        if m.get('support_special_invoice') is not None:
            self.support_special_invoice = m.get('support_special_invoice')
        if m.get('unrounding_daily_price_format_yuan') is not None:
            self.unrounding_daily_price_format_yuan = m.get('unrounding_daily_price_format_yuan')
        return self


class HotelGoodsQueryResponseBodyModuleRoomsRoomService(TeaModel):
    def __init__(self, color=None, desc=None, highlight_color_color=None, title=None):
        self.color = color  # type: str
        self.desc = desc  # type: str
        self.highlight_color_color = highlight_color_color  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelGoodsQueryResponseBodyModuleRoomsRoomService, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.color is not None:
            result['color'] = self.color
        if self.desc is not None:
            result['desc'] = self.desc
        if self.highlight_color_color is not None:
            result['highlight_color_color'] = self.highlight_color_color
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('color') is not None:
            self.color = m.get('color')
        if m.get('desc') is not None:
            self.desc = m.get('desc')
        if m.get('highlight_color_color') is not None:
            self.highlight_color_color = m.get('highlight_color_color')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class HotelGoodsQueryResponseBodyModuleRooms(TeaModel):
    def __init__(self, area=None, bed_type_string=None, extra_bed=None, facility=None, floor=None,
                 max_occupancy=None, name=None, network_service=None, pics=None, rates=None, room_dasc=None, room_facility=None,
                 room_service=None, srid=None, status=None, window_type=None):
        self.area = area  # type: str
        self.bed_type_string = bed_type_string  # type: str
        self.extra_bed = extra_bed  # type: bool
        self.facility = facility  # type: str
        self.floor = floor  # type: str
        self.max_occupancy = max_occupancy  # type: int
        self.name = name  # type: str
        self.network_service = network_service  # type: str
        self.pics = pics  # type: str
        self.rates = rates  # type: list[HotelGoodsQueryResponseBodyModuleRoomsRates]
        self.room_dasc = room_dasc  # type: str
        self.room_facility = room_facility  # type: list[str]
        self.room_service = room_service  # type: list[HotelGoodsQueryResponseBodyModuleRoomsRoomService]
        self.srid = srid  # type: long
        self.status = status  # type: int
        self.window_type = window_type  # type: str

    def validate(self):
        if self.rates:
            for k in self.rates:
                if k:
                    k.validate()
        if self.room_service:
            for k in self.room_service:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(HotelGoodsQueryResponseBodyModuleRooms, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.area is not None:
            result['area'] = self.area
        if self.bed_type_string is not None:
            result['bed_type_string'] = self.bed_type_string
        if self.extra_bed is not None:
            result['extra_bed'] = self.extra_bed
        if self.facility is not None:
            result['facility'] = self.facility
        if self.floor is not None:
            result['floor'] = self.floor
        if self.max_occupancy is not None:
            result['max_occupancy'] = self.max_occupancy
        if self.name is not None:
            result['name'] = self.name
        if self.network_service is not None:
            result['network_service'] = self.network_service
        if self.pics is not None:
            result['pics'] = self.pics
        result['rates'] = []
        if self.rates is not None:
            for k in self.rates:
                result['rates'].append(k.to_map() if k else None)
        if self.room_dasc is not None:
            result['room_dasc'] = self.room_dasc
        if self.room_facility is not None:
            result['room_facility'] = self.room_facility
        result['room_service'] = []
        if self.room_service is not None:
            for k in self.room_service:
                result['room_service'].append(k.to_map() if k else None)
        if self.srid is not None:
            result['srid'] = self.srid
        if self.status is not None:
            result['status'] = self.status
        if self.window_type is not None:
            result['window_type'] = self.window_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('area') is not None:
            self.area = m.get('area')
        if m.get('bed_type_string') is not None:
            self.bed_type_string = m.get('bed_type_string')
        if m.get('extra_bed') is not None:
            self.extra_bed = m.get('extra_bed')
        if m.get('facility') is not None:
            self.facility = m.get('facility')
        if m.get('floor') is not None:
            self.floor = m.get('floor')
        if m.get('max_occupancy') is not None:
            self.max_occupancy = m.get('max_occupancy')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('network_service') is not None:
            self.network_service = m.get('network_service')
        if m.get('pics') is not None:
            self.pics = m.get('pics')
        self.rates = []
        if m.get('rates') is not None:
            for k in m.get('rates'):
                temp_model = HotelGoodsQueryResponseBodyModuleRoomsRates()
                self.rates.append(temp_model.from_map(k))
        if m.get('room_dasc') is not None:
            self.room_dasc = m.get('room_dasc')
        if m.get('room_facility') is not None:
            self.room_facility = m.get('room_facility')
        self.room_service = []
        if m.get('room_service') is not None:
            for k in m.get('room_service'):
                temp_model = HotelGoodsQueryResponseBodyModuleRoomsRoomService()
                self.room_service.append(temp_model.from_map(k))
        if m.get('srid') is not None:
            self.srid = m.get('srid')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('window_type') is not None:
            self.window_type = m.get('window_type')
        return self


class HotelGoodsQueryResponseBodyModule(TeaModel):
    def __init__(self, address=None, booking_instructions=None, can_foreigner=None, check_in=None, check_out=None,
                 descriptions=None, dinamic_banner_pic_urls=None, early_arrival_time=None, hotel_id=None, hotel_name=None,
                 late_arrival_time=None, rooms=None, search_id=None):
        self.address = address  # type: str
        self.booking_instructions = booking_instructions  # type: dict[str, str]
        self.can_foreigner = can_foreigner  # type: bool
        self.check_in = check_in  # type: str
        self.check_out = check_out  # type: str
        self.descriptions = descriptions  # type: list[str]
        self.dinamic_banner_pic_urls = dinamic_banner_pic_urls  # type: list[str]
        self.early_arrival_time = early_arrival_time  # type: str
        self.hotel_id = hotel_id  # type: long
        self.hotel_name = hotel_name  # type: str
        self.late_arrival_time = late_arrival_time  # type: str
        self.rooms = rooms  # type: list[HotelGoodsQueryResponseBodyModuleRooms]
        self.search_id = search_id  # type: str

    def validate(self):
        if self.rooms:
            for k in self.rooms:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(HotelGoodsQueryResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.address is not None:
            result['address'] = self.address
        if self.booking_instructions is not None:
            result['booking_instructions'] = self.booking_instructions
        if self.can_foreigner is not None:
            result['can_foreigner'] = self.can_foreigner
        if self.check_in is not None:
            result['check_in'] = self.check_in
        if self.check_out is not None:
            result['check_out'] = self.check_out
        if self.descriptions is not None:
            result['descriptions'] = self.descriptions
        if self.dinamic_banner_pic_urls is not None:
            result['dinamic_banner_pic_urls'] = self.dinamic_banner_pic_urls
        if self.early_arrival_time is not None:
            result['early_arrival_time'] = self.early_arrival_time
        if self.hotel_id is not None:
            result['hotel_id'] = self.hotel_id
        if self.hotel_name is not None:
            result['hotel_name'] = self.hotel_name
        if self.late_arrival_time is not None:
            result['late_arrival_time'] = self.late_arrival_time
        result['rooms'] = []
        if self.rooms is not None:
            for k in self.rooms:
                result['rooms'].append(k.to_map() if k else None)
        if self.search_id is not None:
            result['search_id'] = self.search_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('address') is not None:
            self.address = m.get('address')
        if m.get('booking_instructions') is not None:
            self.booking_instructions = m.get('booking_instructions')
        if m.get('can_foreigner') is not None:
            self.can_foreigner = m.get('can_foreigner')
        if m.get('check_in') is not None:
            self.check_in = m.get('check_in')
        if m.get('check_out') is not None:
            self.check_out = m.get('check_out')
        if m.get('descriptions') is not None:
            self.descriptions = m.get('descriptions')
        if m.get('dinamic_banner_pic_urls') is not None:
            self.dinamic_banner_pic_urls = m.get('dinamic_banner_pic_urls')
        if m.get('early_arrival_time') is not None:
            self.early_arrival_time = m.get('early_arrival_time')
        if m.get('hotel_id') is not None:
            self.hotel_id = m.get('hotel_id')
        if m.get('hotel_name') is not None:
            self.hotel_name = m.get('hotel_name')
        if m.get('late_arrival_time') is not None:
            self.late_arrival_time = m.get('late_arrival_time')
        self.rooms = []
        if m.get('rooms') is not None:
            for k in m.get('rooms'):
                temp_model = HotelGoodsQueryResponseBodyModuleRooms()
                self.rooms.append(temp_model.from_map(k))
        if m.get('search_id') is not None:
            self.search_id = m.get('search_id')
        return self


class HotelGoodsQueryResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: HotelGoodsQueryResponseBodyModule
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(HotelGoodsQueryResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = HotelGoodsQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class HotelGoodsQueryResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: HotelGoodsQueryResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(HotelGoodsQueryResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = HotelGoodsQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class HotelIndexInfoHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelIndexInfoHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class HotelIndexInfoRequest(TeaModel):
    def __init__(self, city_code=None, hotel_status=None, page_size=None, page_token=None):
        self.city_code = city_code  # type: str
        self.hotel_status = hotel_status  # type: int
        self.page_size = page_size  # type: int
        self.page_token = page_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelIndexInfoRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.hotel_status is not None:
            result['hotel_status'] = self.hotel_status
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.page_token is not None:
            result['page_token'] = self.page_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('hotel_status') is not None:
            self.hotel_status = m.get('hotel_status')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('page_token') is not None:
            self.page_token = m.get('page_token')
        return self


class HotelIndexInfoResponseBodyModuleItems(TeaModel):
    def __init__(self, hotel_id=None, hotel_status=None):
        self.hotel_id = hotel_id  # type: str
        self.hotel_status = hotel_status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelIndexInfoResponseBodyModuleItems, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.hotel_id is not None:
            result['hotel_id'] = self.hotel_id
        if self.hotel_status is not None:
            result['hotel_status'] = self.hotel_status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('hotel_id') is not None:
            self.hotel_id = m.get('hotel_id')
        if m.get('hotel_status') is not None:
            self.hotel_status = m.get('hotel_status')
        return self


class HotelIndexInfoResponseBodyModule(TeaModel):
    def __init__(self, items=None, page_size=None, page_token=None):
        self.items = items  # type: list[HotelIndexInfoResponseBodyModuleItems]
        self.page_size = page_size  # type: int
        self.page_token = page_token  # type: str

    def validate(self):
        if self.items:
            for k in self.items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(HotelIndexInfoResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['items'] = []
        if self.items is not None:
            for k in self.items:
                result['items'].append(k.to_map() if k else None)
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.page_token is not None:
            result['page_token'] = self.page_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.items = []
        if m.get('items') is not None:
            for k in m.get('items'):
                temp_model = HotelIndexInfoResponseBodyModuleItems()
                self.items.append(temp_model.from_map(k))
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('page_token') is not None:
            self.page_token = m.get('page_token')
        return self


class HotelIndexInfoResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: HotelIndexInfoResponseBodyModule
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(HotelIndexInfoResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = HotelIndexInfoResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class HotelIndexInfoResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: HotelIndexInfoResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(HotelIndexInfoResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = HotelIndexInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class HotelOrderCancelHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelOrderCancelHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class HotelOrderCancelRequest(TeaModel):
    def __init__(self, dis_order_id=None):
        self.dis_order_id = dis_order_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelOrderCancelRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        return self


class HotelOrderCancelResponseBodyModule(TeaModel):
    def __init__(self, cancel_success=None, code=None, desc=None, forfeit_fee=None):
        self.cancel_success = cancel_success  # type: bool
        self.code = code  # type: str
        self.desc = desc  # type: str
        self.forfeit_fee = forfeit_fee  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelOrderCancelResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cancel_success is not None:
            result['cancel_success'] = self.cancel_success
        if self.code is not None:
            result['code'] = self.code
        if self.desc is not None:
            result['desc'] = self.desc
        if self.forfeit_fee is not None:
            result['forfeit_fee'] = self.forfeit_fee
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('cancel_success') is not None:
            self.cancel_success = m.get('cancel_success')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('desc') is not None:
            self.desc = m.get('desc')
        if m.get('forfeit_fee') is not None:
            self.forfeit_fee = m.get('forfeit_fee')
        return self


class HotelOrderCancelResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        # module。
        self.module = module  # type: HotelOrderCancelResponseBodyModule
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(HotelOrderCancelResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = HotelOrderCancelResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class HotelOrderCancelResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: HotelOrderCancelResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(HotelOrderCancelResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = HotelOrderCancelResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class HotelOrderCreateHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelOrderCreateHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class HotelOrderCreateRequestInvoiceInfo(TeaModel):
    def __init__(self, buyer_add=None, buyer_bank_acc=None, buyer_bank_add=None, buyer_phone=None,
                 buyer_tax_num=None, delivery_address=None, delivery_area=None, delivery_city=None, delivery_province=None,
                 delivery_street=None, email=None, invoice_material=None, invoice_title=None, invoice_type=None, receiver_name=None,
                 receiver_phone=None, remark=None):
        self.buyer_add = buyer_add  # type: str
        self.buyer_bank_acc = buyer_bank_acc  # type: str
        self.buyer_bank_add = buyer_bank_add  # type: str
        self.buyer_phone = buyer_phone  # type: str
        self.buyer_tax_num = buyer_tax_num  # type: str
        self.delivery_address = delivery_address  # type: str
        self.delivery_area = delivery_area  # type: str
        self.delivery_city = delivery_city  # type: str
        self.delivery_province = delivery_province  # type: str
        self.delivery_street = delivery_street  # type: str
        self.email = email  # type: str
        self.invoice_material = invoice_material  # type: int
        self.invoice_title = invoice_title  # type: str
        self.invoice_type = invoice_type  # type: int
        self.receiver_name = receiver_name  # type: str
        self.receiver_phone = receiver_phone  # type: str
        self.remark = remark  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelOrderCreateRequestInvoiceInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.buyer_add is not None:
            result['buyer_add'] = self.buyer_add
        if self.buyer_bank_acc is not None:
            result['buyer_bank_acc'] = self.buyer_bank_acc
        if self.buyer_bank_add is not None:
            result['buyer_bank_add'] = self.buyer_bank_add
        if self.buyer_phone is not None:
            result['buyer_phone'] = self.buyer_phone
        if self.buyer_tax_num is not None:
            result['buyer_tax_num'] = self.buyer_tax_num
        if self.delivery_address is not None:
            result['delivery_address'] = self.delivery_address
        if self.delivery_area is not None:
            result['delivery_area'] = self.delivery_area
        if self.delivery_city is not None:
            result['delivery_city'] = self.delivery_city
        if self.delivery_province is not None:
            result['delivery_province'] = self.delivery_province
        if self.delivery_street is not None:
            result['delivery_street'] = self.delivery_street
        if self.email is not None:
            result['email'] = self.email
        if self.invoice_material is not None:
            result['invoice_material'] = self.invoice_material
        if self.invoice_title is not None:
            result['invoice_title'] = self.invoice_title
        if self.invoice_type is not None:
            result['invoice_type'] = self.invoice_type
        if self.receiver_name is not None:
            result['receiver_name'] = self.receiver_name
        if self.receiver_phone is not None:
            result['receiver_phone'] = self.receiver_phone
        if self.remark is not None:
            result['remark'] = self.remark
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('buyer_add') is not None:
            self.buyer_add = m.get('buyer_add')
        if m.get('buyer_bank_acc') is not None:
            self.buyer_bank_acc = m.get('buyer_bank_acc')
        if m.get('buyer_bank_add') is not None:
            self.buyer_bank_add = m.get('buyer_bank_add')
        if m.get('buyer_phone') is not None:
            self.buyer_phone = m.get('buyer_phone')
        if m.get('buyer_tax_num') is not None:
            self.buyer_tax_num = m.get('buyer_tax_num')
        if m.get('delivery_address') is not None:
            self.delivery_address = m.get('delivery_address')
        if m.get('delivery_area') is not None:
            self.delivery_area = m.get('delivery_area')
        if m.get('delivery_city') is not None:
            self.delivery_city = m.get('delivery_city')
        if m.get('delivery_province') is not None:
            self.delivery_province = m.get('delivery_province')
        if m.get('delivery_street') is not None:
            self.delivery_street = m.get('delivery_street')
        if m.get('email') is not None:
            self.email = m.get('email')
        if m.get('invoice_material') is not None:
            self.invoice_material = m.get('invoice_material')
        if m.get('invoice_title') is not None:
            self.invoice_title = m.get('invoice_title')
        if m.get('invoice_type') is not None:
            self.invoice_type = m.get('invoice_type')
        if m.get('receiver_name') is not None:
            self.receiver_name = m.get('receiver_name')
        if m.get('receiver_phone') is not None:
            self.receiver_phone = m.get('receiver_phone')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        return self


class HotelOrderCreateRequestOccupantInfoList(TeaModel):
    def __init__(self, card_no=None, card_type=None, customer_type=None, department_id=None, department_name=None,
                 email=None, employee_type=None, first_name=None, last_name=None, name=None, phone=None, room_no=None,
                 staff_no=None, user_type=None):
        self.card_no = card_no  # type: str
        self.card_type = card_type  # type: int
        self.customer_type = customer_type  # type: int
        self.department_id = department_id  # type: str
        self.department_name = department_name  # type: str
        self.email = email  # type: str
        self.employee_type = employee_type  # type: int
        self.first_name = first_name  # type: str
        self.last_name = last_name  # type: str
        self.name = name  # type: str
        self.phone = phone  # type: str
        self.room_no = room_no  # type: int
        self.staff_no = staff_no  # type: str
        self.user_type = user_type  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelOrderCreateRequestOccupantInfoList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.card_no is not None:
            result['card_no'] = self.card_no
        if self.card_type is not None:
            result['card_type'] = self.card_type
        if self.customer_type is not None:
            result['customer_type'] = self.customer_type
        if self.department_id is not None:
            result['department_id'] = self.department_id
        if self.department_name is not None:
            result['department_name'] = self.department_name
        if self.email is not None:
            result['email'] = self.email
        if self.employee_type is not None:
            result['employee_type'] = self.employee_type
        if self.first_name is not None:
            result['first_name'] = self.first_name
        if self.last_name is not None:
            result['last_name'] = self.last_name
        if self.name is not None:
            result['name'] = self.name
        if self.phone is not None:
            result['phone'] = self.phone
        if self.room_no is not None:
            result['room_no'] = self.room_no
        if self.staff_no is not None:
            result['staff_no'] = self.staff_no
        if self.user_type is not None:
            result['user_type'] = self.user_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('card_no') is not None:
            self.card_no = m.get('card_no')
        if m.get('card_type') is not None:
            self.card_type = m.get('card_type')
        if m.get('customer_type') is not None:
            self.customer_type = m.get('customer_type')
        if m.get('department_id') is not None:
            self.department_id = m.get('department_id')
        if m.get('department_name') is not None:
            self.department_name = m.get('department_name')
        if m.get('email') is not None:
            self.email = m.get('email')
        if m.get('employee_type') is not None:
            self.employee_type = m.get('employee_type')
        if m.get('first_name') is not None:
            self.first_name = m.get('first_name')
        if m.get('last_name') is not None:
            self.last_name = m.get('last_name')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        if m.get('room_no') is not None:
            self.room_no = m.get('room_no')
        if m.get('staff_no') is not None:
            self.staff_no = m.get('staff_no')
        if m.get('user_type') is not None:
            self.user_type = m.get('user_type')
        return self


class HotelOrderCreateRequestPromotionInfoPromotionDetailInfoList(TeaModel):
    def __init__(self, check_status=None, need_check=None, promotion_code=None, promotion_id=None,
                 promotion_name=None, promotion_price=None, promotion_type=None):
        self.check_status = check_status  # type: bool
        self.need_check = need_check  # type: bool
        self.promotion_code = promotion_code  # type: str
        self.promotion_id = promotion_id  # type: str
        self.promotion_name = promotion_name  # type: str
        self.promotion_price = promotion_price  # type: long
        self.promotion_type = promotion_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelOrderCreateRequestPromotionInfoPromotionDetailInfoList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.check_status is not None:
            result['check_status'] = self.check_status
        if self.need_check is not None:
            result['need_check'] = self.need_check
        if self.promotion_code is not None:
            result['promotion_code'] = self.promotion_code
        if self.promotion_id is not None:
            result['promotion_id'] = self.promotion_id
        if self.promotion_name is not None:
            result['promotion_name'] = self.promotion_name
        if self.promotion_price is not None:
            result['promotion_price'] = self.promotion_price
        if self.promotion_type is not None:
            result['promotion_type'] = self.promotion_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('check_status') is not None:
            self.check_status = m.get('check_status')
        if m.get('need_check') is not None:
            self.need_check = m.get('need_check')
        if m.get('promotion_code') is not None:
            self.promotion_code = m.get('promotion_code')
        if m.get('promotion_id') is not None:
            self.promotion_id = m.get('promotion_id')
        if m.get('promotion_name') is not None:
            self.promotion_name = m.get('promotion_name')
        if m.get('promotion_price') is not None:
            self.promotion_price = m.get('promotion_price')
        if m.get('promotion_type') is not None:
            self.promotion_type = m.get('promotion_type')
        return self


class HotelOrderCreateRequestPromotionInfo(TeaModel):
    def __init__(self, promotion_detail_info_list=None, promotion_total_price=None):
        self.promotion_detail_info_list = promotion_detail_info_list  # type: list[HotelOrderCreateRequestPromotionInfoPromotionDetailInfoList]
        self.promotion_total_price = promotion_total_price  # type: long

    def validate(self):
        if self.promotion_detail_info_list:
            for k in self.promotion_detail_info_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(HotelOrderCreateRequestPromotionInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['promotion_detail_info_list'] = []
        if self.promotion_detail_info_list is not None:
            for k in self.promotion_detail_info_list:
                result['promotion_detail_info_list'].append(k.to_map() if k else None)
        if self.promotion_total_price is not None:
            result['promotion_total_price'] = self.promotion_total_price
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.promotion_detail_info_list = []
        if m.get('promotion_detail_info_list') is not None:
            for k in m.get('promotion_detail_info_list'):
                temp_model = HotelOrderCreateRequestPromotionInfoPromotionDetailInfoList()
                self.promotion_detail_info_list.append(temp_model.from_map(k))
        if m.get('promotion_total_price') is not None:
            self.promotion_total_price = m.get('promotion_total_price')
        return self


class HotelOrderCreateRequest(TeaModel):
    def __init__(self, btrip_user_id=None, check_in=None, check_out=None, contract_email=None, contract_name=None,
                 contract_phone=None, corp_pay_price=None, dis_order_id=None, extra=None, invoice_info=None, item_id=None,
                 itinerary_no=None, occupant_info_list=None, person_pay_price=None, promotion_info=None, rate_plan_id=None,
                 room_id=None, room_num=None, seller_id=None, shid=None, total_order_price=None, validate_res_key=None):
        self.btrip_user_id = btrip_user_id  # type: str
        self.check_in = check_in  # type: str
        self.check_out = check_out  # type: str
        self.contract_email = contract_email  # type: str
        self.contract_name = contract_name  # type: str
        self.contract_phone = contract_phone  # type: str
        self.corp_pay_price = corp_pay_price  # type: long
        self.dis_order_id = dis_order_id  # type: str
        self.extra = extra  # type: str
        self.invoice_info = invoice_info  # type: HotelOrderCreateRequestInvoiceInfo
        self.item_id = item_id  # type: long
        self.itinerary_no = itinerary_no  # type: str
        self.occupant_info_list = occupant_info_list  # type: list[HotelOrderCreateRequestOccupantInfoList]
        self.person_pay_price = person_pay_price  # type: long
        self.promotion_info = promotion_info  # type: HotelOrderCreateRequestPromotionInfo
        self.rate_plan_id = rate_plan_id  # type: long
        self.room_id = room_id  # type: long
        self.room_num = room_num  # type: int
        self.seller_id = seller_id  # type: long
        self.shid = shid  # type: long
        self.total_order_price = total_order_price  # type: long
        self.validate_res_key = validate_res_key  # type: str

    def validate(self):
        if self.invoice_info:
            self.invoice_info.validate()
        if self.occupant_info_list:
            for k in self.occupant_info_list:
                if k:
                    k.validate()
        if self.promotion_info:
            self.promotion_info.validate()

    def to_map(self):
        _map = super(HotelOrderCreateRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.btrip_user_id is not None:
            result['btrip_user_id'] = self.btrip_user_id
        if self.check_in is not None:
            result['check_in'] = self.check_in
        if self.check_out is not None:
            result['check_out'] = self.check_out
        if self.contract_email is not None:
            result['contract_email'] = self.contract_email
        if self.contract_name is not None:
            result['contract_name'] = self.contract_name
        if self.contract_phone is not None:
            result['contract_phone'] = self.contract_phone
        if self.corp_pay_price is not None:
            result['corp_pay_price'] = self.corp_pay_price
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        if self.extra is not None:
            result['extra'] = self.extra
        if self.invoice_info is not None:
            result['invoice_info'] = self.invoice_info.to_map()
        if self.item_id is not None:
            result['item_id'] = self.item_id
        if self.itinerary_no is not None:
            result['itinerary_no'] = self.itinerary_no
        result['occupant_info_list'] = []
        if self.occupant_info_list is not None:
            for k in self.occupant_info_list:
                result['occupant_info_list'].append(k.to_map() if k else None)
        if self.person_pay_price is not None:
            result['person_pay_price'] = self.person_pay_price
        if self.promotion_info is not None:
            result['promotion_info'] = self.promotion_info.to_map()
        if self.rate_plan_id is not None:
            result['rate_plan_id'] = self.rate_plan_id
        if self.room_id is not None:
            result['room_id'] = self.room_id
        if self.room_num is not None:
            result['room_num'] = self.room_num
        if self.seller_id is not None:
            result['seller_id'] = self.seller_id
        if self.shid is not None:
            result['shid'] = self.shid
        if self.total_order_price is not None:
            result['total_order_price'] = self.total_order_price
        if self.validate_res_key is not None:
            result['validate_res_key'] = self.validate_res_key
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('btrip_user_id') is not None:
            self.btrip_user_id = m.get('btrip_user_id')
        if m.get('check_in') is not None:
            self.check_in = m.get('check_in')
        if m.get('check_out') is not None:
            self.check_out = m.get('check_out')
        if m.get('contract_email') is not None:
            self.contract_email = m.get('contract_email')
        if m.get('contract_name') is not None:
            self.contract_name = m.get('contract_name')
        if m.get('contract_phone') is not None:
            self.contract_phone = m.get('contract_phone')
        if m.get('corp_pay_price') is not None:
            self.corp_pay_price = m.get('corp_pay_price')
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        if m.get('extra') is not None:
            self.extra = m.get('extra')
        if m.get('invoice_info') is not None:
            temp_model = HotelOrderCreateRequestInvoiceInfo()
            self.invoice_info = temp_model.from_map(m['invoice_info'])
        if m.get('item_id') is not None:
            self.item_id = m.get('item_id')
        if m.get('itinerary_no') is not None:
            self.itinerary_no = m.get('itinerary_no')
        self.occupant_info_list = []
        if m.get('occupant_info_list') is not None:
            for k in m.get('occupant_info_list'):
                temp_model = HotelOrderCreateRequestOccupantInfoList()
                self.occupant_info_list.append(temp_model.from_map(k))
        if m.get('person_pay_price') is not None:
            self.person_pay_price = m.get('person_pay_price')
        if m.get('promotion_info') is not None:
            temp_model = HotelOrderCreateRequestPromotionInfo()
            self.promotion_info = temp_model.from_map(m['promotion_info'])
        if m.get('rate_plan_id') is not None:
            self.rate_plan_id = m.get('rate_plan_id')
        if m.get('room_id') is not None:
            self.room_id = m.get('room_id')
        if m.get('room_num') is not None:
            self.room_num = m.get('room_num')
        if m.get('seller_id') is not None:
            self.seller_id = m.get('seller_id')
        if m.get('shid') is not None:
            self.shid = m.get('shid')
        if m.get('total_order_price') is not None:
            self.total_order_price = m.get('total_order_price')
        if m.get('validate_res_key') is not None:
            self.validate_res_key = m.get('validate_res_key')
        return self


class HotelOrderCreateShrinkRequest(TeaModel):
    def __init__(self, btrip_user_id=None, check_in=None, check_out=None, contract_email=None, contract_name=None,
                 contract_phone=None, corp_pay_price=None, dis_order_id=None, extra=None, invoice_info_shrink=None, item_id=None,
                 itinerary_no=None, occupant_info_list_shrink=None, person_pay_price=None, promotion_info_shrink=None,
                 rate_plan_id=None, room_id=None, room_num=None, seller_id=None, shid=None, total_order_price=None,
                 validate_res_key=None):
        self.btrip_user_id = btrip_user_id  # type: str
        self.check_in = check_in  # type: str
        self.check_out = check_out  # type: str
        self.contract_email = contract_email  # type: str
        self.contract_name = contract_name  # type: str
        self.contract_phone = contract_phone  # type: str
        self.corp_pay_price = corp_pay_price  # type: long
        self.dis_order_id = dis_order_id  # type: str
        self.extra = extra  # type: str
        self.invoice_info_shrink = invoice_info_shrink  # type: str
        self.item_id = item_id  # type: long
        self.itinerary_no = itinerary_no  # type: str
        self.occupant_info_list_shrink = occupant_info_list_shrink  # type: str
        self.person_pay_price = person_pay_price  # type: long
        self.promotion_info_shrink = promotion_info_shrink  # type: str
        self.rate_plan_id = rate_plan_id  # type: long
        self.room_id = room_id  # type: long
        self.room_num = room_num  # type: int
        self.seller_id = seller_id  # type: long
        self.shid = shid  # type: long
        self.total_order_price = total_order_price  # type: long
        self.validate_res_key = validate_res_key  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelOrderCreateShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.btrip_user_id is not None:
            result['btrip_user_id'] = self.btrip_user_id
        if self.check_in is not None:
            result['check_in'] = self.check_in
        if self.check_out is not None:
            result['check_out'] = self.check_out
        if self.contract_email is not None:
            result['contract_email'] = self.contract_email
        if self.contract_name is not None:
            result['contract_name'] = self.contract_name
        if self.contract_phone is not None:
            result['contract_phone'] = self.contract_phone
        if self.corp_pay_price is not None:
            result['corp_pay_price'] = self.corp_pay_price
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        if self.extra is not None:
            result['extra'] = self.extra
        if self.invoice_info_shrink is not None:
            result['invoice_info'] = self.invoice_info_shrink
        if self.item_id is not None:
            result['item_id'] = self.item_id
        if self.itinerary_no is not None:
            result['itinerary_no'] = self.itinerary_no
        if self.occupant_info_list_shrink is not None:
            result['occupant_info_list'] = self.occupant_info_list_shrink
        if self.person_pay_price is not None:
            result['person_pay_price'] = self.person_pay_price
        if self.promotion_info_shrink is not None:
            result['promotion_info'] = self.promotion_info_shrink
        if self.rate_plan_id is not None:
            result['rate_plan_id'] = self.rate_plan_id
        if self.room_id is not None:
            result['room_id'] = self.room_id
        if self.room_num is not None:
            result['room_num'] = self.room_num
        if self.seller_id is not None:
            result['seller_id'] = self.seller_id
        if self.shid is not None:
            result['shid'] = self.shid
        if self.total_order_price is not None:
            result['total_order_price'] = self.total_order_price
        if self.validate_res_key is not None:
            result['validate_res_key'] = self.validate_res_key
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('btrip_user_id') is not None:
            self.btrip_user_id = m.get('btrip_user_id')
        if m.get('check_in') is not None:
            self.check_in = m.get('check_in')
        if m.get('check_out') is not None:
            self.check_out = m.get('check_out')
        if m.get('contract_email') is not None:
            self.contract_email = m.get('contract_email')
        if m.get('contract_name') is not None:
            self.contract_name = m.get('contract_name')
        if m.get('contract_phone') is not None:
            self.contract_phone = m.get('contract_phone')
        if m.get('corp_pay_price') is not None:
            self.corp_pay_price = m.get('corp_pay_price')
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        if m.get('extra') is not None:
            self.extra = m.get('extra')
        if m.get('invoice_info') is not None:
            self.invoice_info_shrink = m.get('invoice_info')
        if m.get('item_id') is not None:
            self.item_id = m.get('item_id')
        if m.get('itinerary_no') is not None:
            self.itinerary_no = m.get('itinerary_no')
        if m.get('occupant_info_list') is not None:
            self.occupant_info_list_shrink = m.get('occupant_info_list')
        if m.get('person_pay_price') is not None:
            self.person_pay_price = m.get('person_pay_price')
        if m.get('promotion_info') is not None:
            self.promotion_info_shrink = m.get('promotion_info')
        if m.get('rate_plan_id') is not None:
            self.rate_plan_id = m.get('rate_plan_id')
        if m.get('room_id') is not None:
            self.room_id = m.get('room_id')
        if m.get('room_num') is not None:
            self.room_num = m.get('room_num')
        if m.get('seller_id') is not None:
            self.seller_id = m.get('seller_id')
        if m.get('shid') is not None:
            self.shid = m.get('shid')
        if m.get('total_order_price') is not None:
            self.total_order_price = m.get('total_order_price')
        if m.get('validate_res_key') is not None:
            self.validate_res_key = m.get('validate_res_key')
        return self


class HotelOrderCreateResponseBodyModule(TeaModel):
    def __init__(self, btrip_order_id=None, total_price=None):
        self.btrip_order_id = btrip_order_id  # type: long
        self.total_price = total_price  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelOrderCreateResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.btrip_order_id is not None:
            result['btrip_order_id'] = self.btrip_order_id
        if self.total_price is not None:
            result['total_price'] = self.total_price
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('btrip_order_id') is not None:
            self.btrip_order_id = m.get('btrip_order_id')
        if m.get('total_price') is not None:
            self.total_price = m.get('total_price')
        return self


class HotelOrderCreateResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: HotelOrderCreateResponseBodyModule
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(HotelOrderCreateResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = HotelOrderCreateResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class HotelOrderCreateResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: HotelOrderCreateResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(HotelOrderCreateResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = HotelOrderCreateResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class HotelOrderDetailInfoHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelOrderDetailInfoHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class HotelOrderDetailInfoRequest(TeaModel):
    def __init__(self, dis_order_id=None):
        self.dis_order_id = dis_order_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelOrderDetailInfoRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        return self


class HotelOrderDetailInfoResponseBodyModuleBtripHotelCancelPolicyDTOBtripHotelCancelPolicyInfoDTOList(TeaModel):
    def __init__(self, hour=None, value=None):
        self.hour = hour  # type: long
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelOrderDetailInfoResponseBodyModuleBtripHotelCancelPolicyDTOBtripHotelCancelPolicyInfoDTOList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.hour is not None:
            result['hour'] = self.hour
        if self.value is not None:
            result['value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('hour') is not None:
            self.hour = m.get('hour')
        if m.get('value') is not None:
            self.value = m.get('value')
        return self


class HotelOrderDetailInfoResponseBodyModuleBtripHotelCancelPolicyDTO(TeaModel):
    def __init__(self, btrip_hotel_cancel_policy_info_dtolist=None, cancel_policy_type=None):
        self.btrip_hotel_cancel_policy_info_dtolist = btrip_hotel_cancel_policy_info_dtolist  # type: list[HotelOrderDetailInfoResponseBodyModuleBtripHotelCancelPolicyDTOBtripHotelCancelPolicyInfoDTOList]
        self.cancel_policy_type = cancel_policy_type  # type: int

    def validate(self):
        if self.btrip_hotel_cancel_policy_info_dtolist:
            for k in self.btrip_hotel_cancel_policy_info_dtolist:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(HotelOrderDetailInfoResponseBodyModuleBtripHotelCancelPolicyDTO, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['btrip_hotel_cancel_policy_info_d_t_o_list'] = []
        if self.btrip_hotel_cancel_policy_info_dtolist is not None:
            for k in self.btrip_hotel_cancel_policy_info_dtolist:
                result['btrip_hotel_cancel_policy_info_d_t_o_list'].append(k.to_map() if k else None)
        if self.cancel_policy_type is not None:
            result['cancel_policy_type'] = self.cancel_policy_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.btrip_hotel_cancel_policy_info_dtolist = []
        if m.get('btrip_hotel_cancel_policy_info_d_t_o_list') is not None:
            for k in m.get('btrip_hotel_cancel_policy_info_d_t_o_list'):
                temp_model = HotelOrderDetailInfoResponseBodyModuleBtripHotelCancelPolicyDTOBtripHotelCancelPolicyInfoDTOList()
                self.btrip_hotel_cancel_policy_info_dtolist.append(temp_model.from_map(k))
        if m.get('cancel_policy_type') is not None:
            self.cancel_policy_type = m.get('cancel_policy_type')
        return self


class HotelOrderDetailInfoResponseBodyModuleCancelInfo(TeaModel):
    def __init__(self, cancel_end_time=None, cancel_start_time=None):
        self.cancel_end_time = cancel_end_time  # type: str
        self.cancel_start_time = cancel_start_time  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelOrderDetailInfoResponseBodyModuleCancelInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cancel_end_time is not None:
            result['cancel_end_time'] = self.cancel_end_time
        if self.cancel_start_time is not None:
            result['cancel_start_time'] = self.cancel_start_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('cancel_end_time') is not None:
            self.cancel_end_time = m.get('cancel_end_time')
        if m.get('cancel_start_time') is not None:
            self.cancel_start_time = m.get('cancel_start_time')
        return self


class HotelOrderDetailInfoResponseBodyModuleHotelDetailInfo(TeaModel):
    def __init__(self, address=None, city_name=None, hotel_name=None, hotel_tel=None, shid=None):
        self.address = address  # type: str
        self.city_name = city_name  # type: str
        self.hotel_name = hotel_name  # type: str
        self.hotel_tel = hotel_tel  # type: str
        self.shid = shid  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelOrderDetailInfoResponseBodyModuleHotelDetailInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.address is not None:
            result['address'] = self.address
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.hotel_name is not None:
            result['hotel_name'] = self.hotel_name
        if self.hotel_tel is not None:
            result['hotel_tel'] = self.hotel_tel
        if self.shid is not None:
            result['shid'] = self.shid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('address') is not None:
            self.address = m.get('address')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('hotel_name') is not None:
            self.hotel_name = m.get('hotel_name')
        if m.get('hotel_tel') is not None:
            self.hotel_tel = m.get('hotel_tel')
        if m.get('shid') is not None:
            self.shid = m.get('shid')
        return self


class HotelOrderDetailInfoResponseBodyModuleInvoiceInfo(TeaModel):
    def __init__(self, billing_money=None, buyer_add=None, buyer_bank_acc=None, buyer_bank_add=None,
                 buyer_phone=None, buyer_tax_num=None, delivery_address=None, delivery_area=None, delivery_city=None,
                 delivery_province=None, delivery_street=None, email=None, invoice_material=None, invoice_title=None,
                 invoice_type=None, postage=None, receiver_name=None, receiver_phone=None, remark=None):
        self.billing_money = billing_money  # type: long
        self.buyer_add = buyer_add  # type: str
        self.buyer_bank_acc = buyer_bank_acc  # type: str
        self.buyer_bank_add = buyer_bank_add  # type: str
        self.buyer_phone = buyer_phone  # type: str
        self.buyer_tax_num = buyer_tax_num  # type: str
        self.delivery_address = delivery_address  # type: str
        self.delivery_area = delivery_area  # type: str
        self.delivery_city = delivery_city  # type: str
        self.delivery_province = delivery_province  # type: str
        self.delivery_street = delivery_street  # type: str
        self.email = email  # type: str
        self.invoice_material = invoice_material  # type: int
        self.invoice_title = invoice_title  # type: str
        self.invoice_type = invoice_type  # type: int
        self.postage = postage  # type: long
        self.receiver_name = receiver_name  # type: str
        self.receiver_phone = receiver_phone  # type: str
        self.remark = remark  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelOrderDetailInfoResponseBodyModuleInvoiceInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.billing_money is not None:
            result['billing_money'] = self.billing_money
        if self.buyer_add is not None:
            result['buyer_add'] = self.buyer_add
        if self.buyer_bank_acc is not None:
            result['buyer_bank_acc'] = self.buyer_bank_acc
        if self.buyer_bank_add is not None:
            result['buyer_bank_add'] = self.buyer_bank_add
        if self.buyer_phone is not None:
            result['buyer_phone'] = self.buyer_phone
        if self.buyer_tax_num is not None:
            result['buyer_tax_num'] = self.buyer_tax_num
        if self.delivery_address is not None:
            result['delivery_address'] = self.delivery_address
        if self.delivery_area is not None:
            result['delivery_area'] = self.delivery_area
        if self.delivery_city is not None:
            result['delivery_city'] = self.delivery_city
        if self.delivery_province is not None:
            result['delivery_province'] = self.delivery_province
        if self.delivery_street is not None:
            result['delivery_street'] = self.delivery_street
        if self.email is not None:
            result['email'] = self.email
        if self.invoice_material is not None:
            result['invoice_material'] = self.invoice_material
        if self.invoice_title is not None:
            result['invoice_title'] = self.invoice_title
        if self.invoice_type is not None:
            result['invoice_type'] = self.invoice_type
        if self.postage is not None:
            result['postage'] = self.postage
        if self.receiver_name is not None:
            result['receiver_name'] = self.receiver_name
        if self.receiver_phone is not None:
            result['receiver_phone'] = self.receiver_phone
        if self.remark is not None:
            result['remark'] = self.remark
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('billing_money') is not None:
            self.billing_money = m.get('billing_money')
        if m.get('buyer_add') is not None:
            self.buyer_add = m.get('buyer_add')
        if m.get('buyer_bank_acc') is not None:
            self.buyer_bank_acc = m.get('buyer_bank_acc')
        if m.get('buyer_bank_add') is not None:
            self.buyer_bank_add = m.get('buyer_bank_add')
        if m.get('buyer_phone') is not None:
            self.buyer_phone = m.get('buyer_phone')
        if m.get('buyer_tax_num') is not None:
            self.buyer_tax_num = m.get('buyer_tax_num')
        if m.get('delivery_address') is not None:
            self.delivery_address = m.get('delivery_address')
        if m.get('delivery_area') is not None:
            self.delivery_area = m.get('delivery_area')
        if m.get('delivery_city') is not None:
            self.delivery_city = m.get('delivery_city')
        if m.get('delivery_province') is not None:
            self.delivery_province = m.get('delivery_province')
        if m.get('delivery_street') is not None:
            self.delivery_street = m.get('delivery_street')
        if m.get('email') is not None:
            self.email = m.get('email')
        if m.get('invoice_material') is not None:
            self.invoice_material = m.get('invoice_material')
        if m.get('invoice_title') is not None:
            self.invoice_title = m.get('invoice_title')
        if m.get('invoice_type') is not None:
            self.invoice_type = m.get('invoice_type')
        if m.get('postage') is not None:
            self.postage = m.get('postage')
        if m.get('receiver_name') is not None:
            self.receiver_name = m.get('receiver_name')
        if m.get('receiver_phone') is not None:
            self.receiver_phone = m.get('receiver_phone')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        return self


class HotelOrderDetailInfoResponseBodyModuleOccupantInfoListCostCenterInfoList(TeaModel):
    def __init__(self, cost_center_id=None, cost_center_name=None, cost_center_no=None, cost_center_prices=None,
                 cost_center_ratios=None, cost_center_subject_code=None, cost_center_subject_name=None, settle_subject_id=None,
                 settle_subject_name=None, settle_subject_no=None):
        self.cost_center_id = cost_center_id  # type: str
        self.cost_center_name = cost_center_name  # type: str
        self.cost_center_no = cost_center_no  # type: str
        self.cost_center_prices = cost_center_prices  # type: long
        self.cost_center_ratios = cost_center_ratios  # type: long
        self.cost_center_subject_code = cost_center_subject_code  # type: str
        self.cost_center_subject_name = cost_center_subject_name  # type: str
        self.settle_subject_id = settle_subject_id  # type: str
        self.settle_subject_name = settle_subject_name  # type: str
        self.settle_subject_no = settle_subject_no  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelOrderDetailInfoResponseBodyModuleOccupantInfoListCostCenterInfoList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cost_center_id is not None:
            result['cost_center_id'] = self.cost_center_id
        if self.cost_center_name is not None:
            result['cost_center_name'] = self.cost_center_name
        if self.cost_center_no is not None:
            result['cost_center_no'] = self.cost_center_no
        if self.cost_center_prices is not None:
            result['cost_center_prices'] = self.cost_center_prices
        if self.cost_center_ratios is not None:
            result['cost_center_ratios'] = self.cost_center_ratios
        if self.cost_center_subject_code is not None:
            result['cost_center_subject_code'] = self.cost_center_subject_code
        if self.cost_center_subject_name is not None:
            result['cost_center_subject_name'] = self.cost_center_subject_name
        if self.settle_subject_id is not None:
            result['settle_subject_id'] = self.settle_subject_id
        if self.settle_subject_name is not None:
            result['settle_subject_name'] = self.settle_subject_name
        if self.settle_subject_no is not None:
            result['settle_subject_no'] = self.settle_subject_no
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('cost_center_id') is not None:
            self.cost_center_id = m.get('cost_center_id')
        if m.get('cost_center_name') is not None:
            self.cost_center_name = m.get('cost_center_name')
        if m.get('cost_center_no') is not None:
            self.cost_center_no = m.get('cost_center_no')
        if m.get('cost_center_prices') is not None:
            self.cost_center_prices = m.get('cost_center_prices')
        if m.get('cost_center_ratios') is not None:
            self.cost_center_ratios = m.get('cost_center_ratios')
        if m.get('cost_center_subject_code') is not None:
            self.cost_center_subject_code = m.get('cost_center_subject_code')
        if m.get('cost_center_subject_name') is not None:
            self.cost_center_subject_name = m.get('cost_center_subject_name')
        if m.get('settle_subject_id') is not None:
            self.settle_subject_id = m.get('settle_subject_id')
        if m.get('settle_subject_name') is not None:
            self.settle_subject_name = m.get('settle_subject_name')
        if m.get('settle_subject_no') is not None:
            self.settle_subject_no = m.get('settle_subject_no')
        return self


class HotelOrderDetailInfoResponseBodyModuleOccupantInfoList(TeaModel):
    def __init__(self, card_no=None, card_type=None, cost_center_info_list=None, customer_type=None,
                 department_id=None, department_name=None, email=None, employee_type=None, first_name=None, is_booker=None,
                 last_name=None, name=None, phone=None, room_no=None, selected=None, staff_no=None, user_type=None):
        self.card_no = card_no  # type: str
        self.card_type = card_type  # type: int
        self.cost_center_info_list = cost_center_info_list  # type: list[HotelOrderDetailInfoResponseBodyModuleOccupantInfoListCostCenterInfoList]
        self.customer_type = customer_type  # type: int
        self.department_id = department_id  # type: str
        self.department_name = department_name  # type: str
        self.email = email  # type: str
        self.employee_type = employee_type  # type: int
        self.first_name = first_name  # type: str
        self.is_booker = is_booker  # type: bool
        self.last_name = last_name  # type: str
        self.name = name  # type: str
        self.phone = phone  # type: str
        self.room_no = room_no  # type: int
        self.selected = selected  # type: bool
        self.staff_no = staff_no  # type: str
        self.user_type = user_type  # type: int

    def validate(self):
        if self.cost_center_info_list:
            for k in self.cost_center_info_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(HotelOrderDetailInfoResponseBodyModuleOccupantInfoList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.card_no is not None:
            result['card_no'] = self.card_no
        if self.card_type is not None:
            result['card_type'] = self.card_type
        result['cost_center_info_list'] = []
        if self.cost_center_info_list is not None:
            for k in self.cost_center_info_list:
                result['cost_center_info_list'].append(k.to_map() if k else None)
        if self.customer_type is not None:
            result['customer_type'] = self.customer_type
        if self.department_id is not None:
            result['department_id'] = self.department_id
        if self.department_name is not None:
            result['department_name'] = self.department_name
        if self.email is not None:
            result['email'] = self.email
        if self.employee_type is not None:
            result['employee_type'] = self.employee_type
        if self.first_name is not None:
            result['first_name'] = self.first_name
        if self.is_booker is not None:
            result['is_booker'] = self.is_booker
        if self.last_name is not None:
            result['last_name'] = self.last_name
        if self.name is not None:
            result['name'] = self.name
        if self.phone is not None:
            result['phone'] = self.phone
        if self.room_no is not None:
            result['room_no'] = self.room_no
        if self.selected is not None:
            result['selected'] = self.selected
        if self.staff_no is not None:
            result['staff_no'] = self.staff_no
        if self.user_type is not None:
            result['user_type'] = self.user_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('card_no') is not None:
            self.card_no = m.get('card_no')
        if m.get('card_type') is not None:
            self.card_type = m.get('card_type')
        self.cost_center_info_list = []
        if m.get('cost_center_info_list') is not None:
            for k in m.get('cost_center_info_list'):
                temp_model = HotelOrderDetailInfoResponseBodyModuleOccupantInfoListCostCenterInfoList()
                self.cost_center_info_list.append(temp_model.from_map(k))
        if m.get('customer_type') is not None:
            self.customer_type = m.get('customer_type')
        if m.get('department_id') is not None:
            self.department_id = m.get('department_id')
        if m.get('department_name') is not None:
            self.department_name = m.get('department_name')
        if m.get('email') is not None:
            self.email = m.get('email')
        if m.get('employee_type') is not None:
            self.employee_type = m.get('employee_type')
        if m.get('first_name') is not None:
            self.first_name = m.get('first_name')
        if m.get('is_booker') is not None:
            self.is_booker = m.get('is_booker')
        if m.get('last_name') is not None:
            self.last_name = m.get('last_name')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        if m.get('room_no') is not None:
            self.room_no = m.get('room_no')
        if m.get('selected') is not None:
            self.selected = m.get('selected')
        if m.get('staff_no') is not None:
            self.staff_no = m.get('staff_no')
        if m.get('user_type') is not None:
            self.user_type = m.get('user_type')
        return self


class HotelOrderDetailInfoResponseBodyModuleRoomNightPriceInfoList(TeaModel):
    def __init__(self, board=None, board_num=None, check_in=None, rate_plan_id=None, rate_plan_name=None,
                 room_id=None, room_name=None, room_price=None):
        self.board = board  # type: str
        self.board_num = board_num  # type: int
        self.check_in = check_in  # type: str
        self.rate_plan_id = rate_plan_id  # type: str
        self.rate_plan_name = rate_plan_name  # type: str
        self.room_id = room_id  # type: str
        self.room_name = room_name  # type: str
        self.room_price = room_price  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelOrderDetailInfoResponseBodyModuleRoomNightPriceInfoList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.board is not None:
            result['board'] = self.board
        if self.board_num is not None:
            result['board_num'] = self.board_num
        if self.check_in is not None:
            result['check_in'] = self.check_in
        if self.rate_plan_id is not None:
            result['rate_plan_id'] = self.rate_plan_id
        if self.rate_plan_name is not None:
            result['rate_plan_name'] = self.rate_plan_name
        if self.room_id is not None:
            result['room_id'] = self.room_id
        if self.room_name is not None:
            result['room_name'] = self.room_name
        if self.room_price is not None:
            result['room_price'] = self.room_price
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('board') is not None:
            self.board = m.get('board')
        if m.get('board_num') is not None:
            self.board_num = m.get('board_num')
        if m.get('check_in') is not None:
            self.check_in = m.get('check_in')
        if m.get('rate_plan_id') is not None:
            self.rate_plan_id = m.get('rate_plan_id')
        if m.get('rate_plan_name') is not None:
            self.rate_plan_name = m.get('rate_plan_name')
        if m.get('room_id') is not None:
            self.room_id = m.get('room_id')
        if m.get('room_name') is not None:
            self.room_name = m.get('room_name')
        if m.get('room_price') is not None:
            self.room_price = m.get('room_price')
        return self


class HotelOrderDetailInfoResponseBodyModule(TeaModel):
    def __init__(self, actual_check_in_time=None, actual_check_out_time=None, btrip_hotel_cancel_policy_dto=None,
                 btrip_order_id=None, cancel_fine=None, cancel_info=None, check_in=None, check_out=None, confirm_order_time=None,
                 contract_name=None, contract_tel=None, create_order_time=None, early_arrival_time=None, early_departure=None,
                 guest_count=None, hotel_detail_info=None, invoice_info=None, item_id=None, last_arrival_time=None,
                 occupant_info_list=None, order_status=None, order_status_desc=None, pay_time=None, product_type=None,
                 purchase_order_id=None, refund_price=None, refund_reason=None, refund_service_fee=None,
                 room_night_price_info_list=None, room_number=None, room_type_name=None, seller_id=None, seller_name=None, service_fee=None,
                 settle_type=None, supplier_order_id=None, total_price=None):
        self.actual_check_in_time = actual_check_in_time  # type: str
        self.actual_check_out_time = actual_check_out_time  # type: str
        self.btrip_hotel_cancel_policy_dto = btrip_hotel_cancel_policy_dto  # type: HotelOrderDetailInfoResponseBodyModuleBtripHotelCancelPolicyDTO
        self.btrip_order_id = btrip_order_id  # type: str
        self.cancel_fine = cancel_fine  # type: long
        self.cancel_info = cancel_info  # type: HotelOrderDetailInfoResponseBodyModuleCancelInfo
        self.check_in = check_in  # type: str
        self.check_out = check_out  # type: str
        self.confirm_order_time = confirm_order_time  # type: str
        self.contract_name = contract_name  # type: str
        self.contract_tel = contract_tel  # type: str
        self.create_order_time = create_order_time  # type: str
        self.early_arrival_time = early_arrival_time  # type: str
        self.early_departure = early_departure  # type: bool
        self.guest_count = guest_count  # type: int
        self.hotel_detail_info = hotel_detail_info  # type: HotelOrderDetailInfoResponseBodyModuleHotelDetailInfo
        self.invoice_info = invoice_info  # type: HotelOrderDetailInfoResponseBodyModuleInvoiceInfo
        self.item_id = item_id  # type: str
        self.last_arrival_time = last_arrival_time  # type: str
        self.occupant_info_list = occupant_info_list  # type: list[HotelOrderDetailInfoResponseBodyModuleOccupantInfoList]
        self.order_status = order_status  # type: int
        self.order_status_desc = order_status_desc  # type: str
        self.pay_time = pay_time  # type: str
        self.product_type = product_type  # type: int
        self.purchase_order_id = purchase_order_id  # type: str
        self.refund_price = refund_price  # type: long
        self.refund_reason = refund_reason  # type: str
        self.refund_service_fee = refund_service_fee  # type: long
        self.room_night_price_info_list = room_night_price_info_list  # type: list[HotelOrderDetailInfoResponseBodyModuleRoomNightPriceInfoList]
        self.room_number = room_number  # type: int
        self.room_type_name = room_type_name  # type: str
        self.seller_id = seller_id  # type: str
        self.seller_name = seller_name  # type: str
        self.service_fee = service_fee  # type: long
        self.settle_type = settle_type  # type: str
        self.supplier_order_id = supplier_order_id  # type: str
        self.total_price = total_price  # type: long

    def validate(self):
        if self.btrip_hotel_cancel_policy_dto:
            self.btrip_hotel_cancel_policy_dto.validate()
        if self.cancel_info:
            self.cancel_info.validate()
        if self.hotel_detail_info:
            self.hotel_detail_info.validate()
        if self.invoice_info:
            self.invoice_info.validate()
        if self.occupant_info_list:
            for k in self.occupant_info_list:
                if k:
                    k.validate()
        if self.room_night_price_info_list:
            for k in self.room_night_price_info_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(HotelOrderDetailInfoResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.actual_check_in_time is not None:
            result['actual_check_in_time'] = self.actual_check_in_time
        if self.actual_check_out_time is not None:
            result['actual_check_out_time'] = self.actual_check_out_time
        if self.btrip_hotel_cancel_policy_dto is not None:
            result['btrip_hotel_cancel_policy_d_t_o'] = self.btrip_hotel_cancel_policy_dto.to_map()
        if self.btrip_order_id is not None:
            result['btrip_order_id'] = self.btrip_order_id
        if self.cancel_fine is not None:
            result['cancel_fine'] = self.cancel_fine
        if self.cancel_info is not None:
            result['cancel_info'] = self.cancel_info.to_map()
        if self.check_in is not None:
            result['check_in'] = self.check_in
        if self.check_out is not None:
            result['check_out'] = self.check_out
        if self.confirm_order_time is not None:
            result['confirm_order_time'] = self.confirm_order_time
        if self.contract_name is not None:
            result['contract_name'] = self.contract_name
        if self.contract_tel is not None:
            result['contract_tel'] = self.contract_tel
        if self.create_order_time is not None:
            result['create_order_time'] = self.create_order_time
        if self.early_arrival_time is not None:
            result['early_arrival_time'] = self.early_arrival_time
        if self.early_departure is not None:
            result['early_departure'] = self.early_departure
        if self.guest_count is not None:
            result['guest_count'] = self.guest_count
        if self.hotel_detail_info is not None:
            result['hotel_detail_info'] = self.hotel_detail_info.to_map()
        if self.invoice_info is not None:
            result['invoice_info'] = self.invoice_info.to_map()
        if self.item_id is not None:
            result['item_id'] = self.item_id
        if self.last_arrival_time is not None:
            result['last_arrival_time'] = self.last_arrival_time
        result['occupant_info_list'] = []
        if self.occupant_info_list is not None:
            for k in self.occupant_info_list:
                result['occupant_info_list'].append(k.to_map() if k else None)
        if self.order_status is not None:
            result['order_status'] = self.order_status
        if self.order_status_desc is not None:
            result['order_status_desc'] = self.order_status_desc
        if self.pay_time is not None:
            result['pay_time'] = self.pay_time
        if self.product_type is not None:
            result['product_type'] = self.product_type
        if self.purchase_order_id is not None:
            result['purchase_order_id'] = self.purchase_order_id
        if self.refund_price is not None:
            result['refund_price'] = self.refund_price
        if self.refund_reason is not None:
            result['refund_reason'] = self.refund_reason
        if self.refund_service_fee is not None:
            result['refund_service_fee'] = self.refund_service_fee
        result['room_night_price_info_list'] = []
        if self.room_night_price_info_list is not None:
            for k in self.room_night_price_info_list:
                result['room_night_price_info_list'].append(k.to_map() if k else None)
        if self.room_number is not None:
            result['room_number'] = self.room_number
        if self.room_type_name is not None:
            result['room_type_name'] = self.room_type_name
        if self.seller_id is not None:
            result['seller_id'] = self.seller_id
        if self.seller_name is not None:
            result['seller_name'] = self.seller_name
        if self.service_fee is not None:
            result['service_fee'] = self.service_fee
        if self.settle_type is not None:
            result['settle_type'] = self.settle_type
        if self.supplier_order_id is not None:
            result['supplier_order_id'] = self.supplier_order_id
        if self.total_price is not None:
            result['total_price'] = self.total_price
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('actual_check_in_time') is not None:
            self.actual_check_in_time = m.get('actual_check_in_time')
        if m.get('actual_check_out_time') is not None:
            self.actual_check_out_time = m.get('actual_check_out_time')
        if m.get('btrip_hotel_cancel_policy_d_t_o') is not None:
            temp_model = HotelOrderDetailInfoResponseBodyModuleBtripHotelCancelPolicyDTO()
            self.btrip_hotel_cancel_policy_dto = temp_model.from_map(m['btrip_hotel_cancel_policy_d_t_o'])
        if m.get('btrip_order_id') is not None:
            self.btrip_order_id = m.get('btrip_order_id')
        if m.get('cancel_fine') is not None:
            self.cancel_fine = m.get('cancel_fine')
        if m.get('cancel_info') is not None:
            temp_model = HotelOrderDetailInfoResponseBodyModuleCancelInfo()
            self.cancel_info = temp_model.from_map(m['cancel_info'])
        if m.get('check_in') is not None:
            self.check_in = m.get('check_in')
        if m.get('check_out') is not None:
            self.check_out = m.get('check_out')
        if m.get('confirm_order_time') is not None:
            self.confirm_order_time = m.get('confirm_order_time')
        if m.get('contract_name') is not None:
            self.contract_name = m.get('contract_name')
        if m.get('contract_tel') is not None:
            self.contract_tel = m.get('contract_tel')
        if m.get('create_order_time') is not None:
            self.create_order_time = m.get('create_order_time')
        if m.get('early_arrival_time') is not None:
            self.early_arrival_time = m.get('early_arrival_time')
        if m.get('early_departure') is not None:
            self.early_departure = m.get('early_departure')
        if m.get('guest_count') is not None:
            self.guest_count = m.get('guest_count')
        if m.get('hotel_detail_info') is not None:
            temp_model = HotelOrderDetailInfoResponseBodyModuleHotelDetailInfo()
            self.hotel_detail_info = temp_model.from_map(m['hotel_detail_info'])
        if m.get('invoice_info') is not None:
            temp_model = HotelOrderDetailInfoResponseBodyModuleInvoiceInfo()
            self.invoice_info = temp_model.from_map(m['invoice_info'])
        if m.get('item_id') is not None:
            self.item_id = m.get('item_id')
        if m.get('last_arrival_time') is not None:
            self.last_arrival_time = m.get('last_arrival_time')
        self.occupant_info_list = []
        if m.get('occupant_info_list') is not None:
            for k in m.get('occupant_info_list'):
                temp_model = HotelOrderDetailInfoResponseBodyModuleOccupantInfoList()
                self.occupant_info_list.append(temp_model.from_map(k))
        if m.get('order_status') is not None:
            self.order_status = m.get('order_status')
        if m.get('order_status_desc') is not None:
            self.order_status_desc = m.get('order_status_desc')
        if m.get('pay_time') is not None:
            self.pay_time = m.get('pay_time')
        if m.get('product_type') is not None:
            self.product_type = m.get('product_type')
        if m.get('purchase_order_id') is not None:
            self.purchase_order_id = m.get('purchase_order_id')
        if m.get('refund_price') is not None:
            self.refund_price = m.get('refund_price')
        if m.get('refund_reason') is not None:
            self.refund_reason = m.get('refund_reason')
        if m.get('refund_service_fee') is not None:
            self.refund_service_fee = m.get('refund_service_fee')
        self.room_night_price_info_list = []
        if m.get('room_night_price_info_list') is not None:
            for k in m.get('room_night_price_info_list'):
                temp_model = HotelOrderDetailInfoResponseBodyModuleRoomNightPriceInfoList()
                self.room_night_price_info_list.append(temp_model.from_map(k))
        if m.get('room_number') is not None:
            self.room_number = m.get('room_number')
        if m.get('room_type_name') is not None:
            self.room_type_name = m.get('room_type_name')
        if m.get('seller_id') is not None:
            self.seller_id = m.get('seller_id')
        if m.get('seller_name') is not None:
            self.seller_name = m.get('seller_name')
        if m.get('service_fee') is not None:
            self.service_fee = m.get('service_fee')
        if m.get('settle_type') is not None:
            self.settle_type = m.get('settle_type')
        if m.get('supplier_order_id') is not None:
            self.supplier_order_id = m.get('supplier_order_id')
        if m.get('total_price') is not None:
            self.total_price = m.get('total_price')
        return self


class HotelOrderDetailInfoResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: HotelOrderDetailInfoResponseBodyModule
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(HotelOrderDetailInfoResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = HotelOrderDetailInfoResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class HotelOrderDetailInfoResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: HotelOrderDetailInfoResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(HotelOrderDetailInfoResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = HotelOrderDetailInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class HotelOrderListQueryHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_so_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelOrderListQueryHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class HotelOrderListQueryRequest(TeaModel):
    def __init__(self, all_apply=None, apply_id=None, depart_id=None, end_time=None, page=None, page_size=None,
                 start_time=None, thirdpart_apply_id=None, update_end_time=None, update_start_time=None, user_id=None):
        self.all_apply = all_apply  # type: bool
        self.apply_id = apply_id  # type: long
        self.depart_id = depart_id  # type: str
        self.end_time = end_time  # type: str
        self.page = page  # type: int
        self.page_size = page_size  # type: int
        self.start_time = start_time  # type: str
        self.thirdpart_apply_id = thirdpart_apply_id  # type: str
        self.update_end_time = update_end_time  # type: str
        self.update_start_time = update_start_time  # type: str
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelOrderListQueryRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.all_apply is not None:
            result['all_apply'] = self.all_apply
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.depart_id is not None:
            result['depart_id'] = self.depart_id
        if self.end_time is not None:
            result['end_time'] = self.end_time
        if self.page is not None:
            result['page'] = self.page
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.start_time is not None:
            result['start_time'] = self.start_time
        if self.thirdpart_apply_id is not None:
            result['thirdpart_apply_id'] = self.thirdpart_apply_id
        if self.update_end_time is not None:
            result['update_end_time'] = self.update_end_time
        if self.update_start_time is not None:
            result['update_start_time'] = self.update_start_time
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('all_apply') is not None:
            self.all_apply = m.get('all_apply')
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('depart_id') is not None:
            self.depart_id = m.get('depart_id')
        if m.get('end_time') is not None:
            self.end_time = m.get('end_time')
        if m.get('page') is not None:
            self.page = m.get('page')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('start_time') is not None:
            self.start_time = m.get('start_time')
        if m.get('thirdpart_apply_id') is not None:
            self.thirdpart_apply_id = m.get('thirdpart_apply_id')
        if m.get('update_end_time') is not None:
            self.update_end_time = m.get('update_end_time')
        if m.get('update_start_time') is not None:
            self.update_start_time = m.get('update_start_time')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class HotelOrderListQueryResponseBodyModuleCostCenter(TeaModel):
    def __init__(self, corp_id=None, id=None, name=None, number=None):
        self.corp_id = corp_id  # type: str
        self.id = id  # type: long
        self.name = name  # type: str
        self.number = number  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelOrderListQueryResponseBodyModuleCostCenter, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        if self.number is not None:
            result['number'] = self.number
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('number') is not None:
            self.number = m.get('number')
        return self


class HotelOrderListQueryResponseBodyModuleInvoice(TeaModel):
    def __init__(self, id=None, invoice_type=None, title=None):
        self.id = id  # type: long
        self.invoice_type = invoice_type  # type: int
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelOrderListQueryResponseBodyModuleInvoice, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.invoice_type is not None:
            result['invoice_type'] = self.invoice_type
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('invoice_type') is not None:
            self.invoice_type = m.get('invoice_type')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class HotelOrderListQueryResponseBodyModulePriceInfoList(TeaModel):
    def __init__(self, category_code=None, category_type=None, gmt_create=None, passenger_name=None, pay_type=None,
                 price=None, trade_id=None, type=None):
        self.category_code = category_code  # type: int
        self.category_type = category_type  # type: int
        self.gmt_create = gmt_create  # type: str
        self.passenger_name = passenger_name  # type: str
        self.pay_type = pay_type  # type: int
        self.price = price  # type: float
        self.trade_id = trade_id  # type: str
        self.type = type  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelOrderListQueryResponseBodyModulePriceInfoList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category_code is not None:
            result['category_code'] = self.category_code
        if self.category_type is not None:
            result['category_type'] = self.category_type
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.passenger_name is not None:
            result['passenger_name'] = self.passenger_name
        if self.pay_type is not None:
            result['pay_type'] = self.pay_type
        if self.price is not None:
            result['price'] = self.price
        if self.trade_id is not None:
            result['trade_id'] = self.trade_id
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('category_code') is not None:
            self.category_code = m.get('category_code')
        if m.get('category_type') is not None:
            self.category_type = m.get('category_type')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('passenger_name') is not None:
            self.passenger_name = m.get('passenger_name')
        if m.get('pay_type') is not None:
            self.pay_type = m.get('pay_type')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('trade_id') is not None:
            self.trade_id = m.get('trade_id')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class HotelOrderListQueryResponseBodyModuleUserAffiliateList(TeaModel):
    def __init__(self, user_id=None, user_name=None):
        self.user_id = user_id  # type: str
        self.user_name = user_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelOrderListQueryResponseBodyModuleUserAffiliateList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class HotelOrderListQueryResponseBodyModule(TeaModel):
    def __init__(self, apply_id=None, btrip_title=None, check_in=None, check_out=None, city=None, city_ad_code=None,
                 contact_name=None, corp_id=None, corp_name=None, cost_center=None, depart_id=None, depart_name=None,
                 extend_field=None, gmt_create=None, gmt_modified=None, guest=None, hotel_name=None,
                 hotel_support_vat_invoice_type=None, id=None, invoice=None, night=None, order_status=None, order_status_desc=None, order_type=None,
                 order_type_desc=None, price_info_list=None, project_code=None, project_id=None, project_title=None, room_num=None,
                 room_type=None, thirdpart_apply_id=None, thirdpart_itinerary_id=None, thirdpart_project_id=None,
                 user_affiliate_list=None, user_id=None, user_name=None):
        self.apply_id = apply_id  # type: long
        self.btrip_title = btrip_title  # type: str
        self.check_in = check_in  # type: str
        self.check_out = check_out  # type: str
        self.city = city  # type: str
        self.city_ad_code = city_ad_code  # type: str
        self.contact_name = contact_name  # type: str
        self.corp_id = corp_id  # type: str
        self.corp_name = corp_name  # type: str
        self.cost_center = cost_center  # type: HotelOrderListQueryResponseBodyModuleCostCenter
        self.depart_id = depart_id  # type: str
        self.depart_name = depart_name  # type: str
        self.extend_field = extend_field  # type: str
        self.gmt_create = gmt_create  # type: str
        self.gmt_modified = gmt_modified  # type: str
        self.guest = guest  # type: str
        self.hotel_name = hotel_name  # type: str
        self.hotel_support_vat_invoice_type = hotel_support_vat_invoice_type  # type: int
        self.id = id  # type: long
        self.invoice = invoice  # type: HotelOrderListQueryResponseBodyModuleInvoice
        self.night = night  # type: int
        self.order_status = order_status  # type: int
        self.order_status_desc = order_status_desc  # type: str
        self.order_type = order_type  # type: int
        self.order_type_desc = order_type_desc  # type: str
        self.price_info_list = price_info_list  # type: list[HotelOrderListQueryResponseBodyModulePriceInfoList]
        self.project_code = project_code  # type: str
        self.project_id = project_id  # type: long
        self.project_title = project_title  # type: str
        self.room_num = room_num  # type: int
        self.room_type = room_type  # type: str
        self.thirdpart_apply_id = thirdpart_apply_id  # type: str
        self.thirdpart_itinerary_id = thirdpart_itinerary_id  # type: str
        self.thirdpart_project_id = thirdpart_project_id  # type: str
        self.user_affiliate_list = user_affiliate_list  # type: list[HotelOrderListQueryResponseBodyModuleUserAffiliateList]
        self.user_id = user_id  # type: str
        self.user_name = user_name  # type: str

    def validate(self):
        if self.cost_center:
            self.cost_center.validate()
        if self.invoice:
            self.invoice.validate()
        if self.price_info_list:
            for k in self.price_info_list:
                if k:
                    k.validate()
        if self.user_affiliate_list:
            for k in self.user_affiliate_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(HotelOrderListQueryResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.btrip_title is not None:
            result['btrip_title'] = self.btrip_title
        if self.check_in is not None:
            result['check_in'] = self.check_in
        if self.check_out is not None:
            result['check_out'] = self.check_out
        if self.city is not None:
            result['city'] = self.city
        if self.city_ad_code is not None:
            result['city_ad_code'] = self.city_ad_code
        if self.contact_name is not None:
            result['contact_name'] = self.contact_name
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        if self.corp_name is not None:
            result['corp_name'] = self.corp_name
        if self.cost_center is not None:
            result['cost_center'] = self.cost_center.to_map()
        if self.depart_id is not None:
            result['depart_id'] = self.depart_id
        if self.depart_name is not None:
            result['depart_name'] = self.depart_name
        if self.extend_field is not None:
            result['extend_field'] = self.extend_field
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.gmt_modified is not None:
            result['gmt_modified'] = self.gmt_modified
        if self.guest is not None:
            result['guest'] = self.guest
        if self.hotel_name is not None:
            result['hotel_name'] = self.hotel_name
        if self.hotel_support_vat_invoice_type is not None:
            result['hotel_support_vat_invoice_type'] = self.hotel_support_vat_invoice_type
        if self.id is not None:
            result['id'] = self.id
        if self.invoice is not None:
            result['invoice'] = self.invoice.to_map()
        if self.night is not None:
            result['night'] = self.night
        if self.order_status is not None:
            result['order_status'] = self.order_status
        if self.order_status_desc is not None:
            result['order_status_desc'] = self.order_status_desc
        if self.order_type is not None:
            result['order_type'] = self.order_type
        if self.order_type_desc is not None:
            result['order_type_desc'] = self.order_type_desc
        result['price_info_list'] = []
        if self.price_info_list is not None:
            for k in self.price_info_list:
                result['price_info_list'].append(k.to_map() if k else None)
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_id is not None:
            result['project_id'] = self.project_id
        if self.project_title is not None:
            result['project_title'] = self.project_title
        if self.room_num is not None:
            result['room_num'] = self.room_num
        if self.room_type is not None:
            result['room_type'] = self.room_type
        if self.thirdpart_apply_id is not None:
            result['thirdpart_apply_id'] = self.thirdpart_apply_id
        if self.thirdpart_itinerary_id is not None:
            result['thirdpart_itinerary_id'] = self.thirdpart_itinerary_id
        if self.thirdpart_project_id is not None:
            result['thirdpart_project_id'] = self.thirdpart_project_id
        result['user_affiliate_list'] = []
        if self.user_affiliate_list is not None:
            for k in self.user_affiliate_list:
                result['user_affiliate_list'].append(k.to_map() if k else None)
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('btrip_title') is not None:
            self.btrip_title = m.get('btrip_title')
        if m.get('check_in') is not None:
            self.check_in = m.get('check_in')
        if m.get('check_out') is not None:
            self.check_out = m.get('check_out')
        if m.get('city') is not None:
            self.city = m.get('city')
        if m.get('city_ad_code') is not None:
            self.city_ad_code = m.get('city_ad_code')
        if m.get('contact_name') is not None:
            self.contact_name = m.get('contact_name')
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        if m.get('corp_name') is not None:
            self.corp_name = m.get('corp_name')
        if m.get('cost_center') is not None:
            temp_model = HotelOrderListQueryResponseBodyModuleCostCenter()
            self.cost_center = temp_model.from_map(m['cost_center'])
        if m.get('depart_id') is not None:
            self.depart_id = m.get('depart_id')
        if m.get('depart_name') is not None:
            self.depart_name = m.get('depart_name')
        if m.get('extend_field') is not None:
            self.extend_field = m.get('extend_field')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('gmt_modified') is not None:
            self.gmt_modified = m.get('gmt_modified')
        if m.get('guest') is not None:
            self.guest = m.get('guest')
        if m.get('hotel_name') is not None:
            self.hotel_name = m.get('hotel_name')
        if m.get('hotel_support_vat_invoice_type') is not None:
            self.hotel_support_vat_invoice_type = m.get('hotel_support_vat_invoice_type')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('invoice') is not None:
            temp_model = HotelOrderListQueryResponseBodyModuleInvoice()
            self.invoice = temp_model.from_map(m['invoice'])
        if m.get('night') is not None:
            self.night = m.get('night')
        if m.get('order_status') is not None:
            self.order_status = m.get('order_status')
        if m.get('order_status_desc') is not None:
            self.order_status_desc = m.get('order_status_desc')
        if m.get('order_type') is not None:
            self.order_type = m.get('order_type')
        if m.get('order_type_desc') is not None:
            self.order_type_desc = m.get('order_type_desc')
        self.price_info_list = []
        if m.get('price_info_list') is not None:
            for k in m.get('price_info_list'):
                temp_model = HotelOrderListQueryResponseBodyModulePriceInfoList()
                self.price_info_list.append(temp_model.from_map(k))
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_id') is not None:
            self.project_id = m.get('project_id')
        if m.get('project_title') is not None:
            self.project_title = m.get('project_title')
        if m.get('room_num') is not None:
            self.room_num = m.get('room_num')
        if m.get('room_type') is not None:
            self.room_type = m.get('room_type')
        if m.get('thirdpart_apply_id') is not None:
            self.thirdpart_apply_id = m.get('thirdpart_apply_id')
        if m.get('thirdpart_itinerary_id') is not None:
            self.thirdpart_itinerary_id = m.get('thirdpart_itinerary_id')
        if m.get('thirdpart_project_id') is not None:
            self.thirdpart_project_id = m.get('thirdpart_project_id')
        self.user_affiliate_list = []
        if m.get('user_affiliate_list') is not None:
            for k in m.get('user_affiliate_list'):
                temp_model = HotelOrderListQueryResponseBodyModuleUserAffiliateList()
                self.user_affiliate_list.append(temp_model.from_map(k))
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class HotelOrderListQueryResponseBodyPageInfo(TeaModel):
    def __init__(self, page=None, page_size=None, total_number=None):
        self.page = page  # type: int
        self.page_size = page_size  # type: int
        self.total_number = total_number  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelOrderListQueryResponseBodyPageInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page is not None:
            result['page'] = self.page
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.total_number is not None:
            result['total_number'] = self.total_number
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('page') is not None:
            self.page = m.get('page')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('total_number') is not None:
            self.total_number = m.get('total_number')
        return self


class HotelOrderListQueryResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, page_info=None, request_id=None, success=None,
                 trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: list[HotelOrderListQueryResponseBodyModule]
        self.page_info = page_info  # type: HotelOrderListQueryResponseBodyPageInfo
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            for k in self.module:
                if k:
                    k.validate()
        if self.page_info:
            self.page_info.validate()

    def to_map(self):
        _map = super(HotelOrderListQueryResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        result['module'] = []
        if self.module is not None:
            for k in self.module:
                result['module'].append(k.to_map() if k else None)
        if self.page_info is not None:
            result['page_info'] = self.page_info.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        self.module = []
        if m.get('module') is not None:
            for k in m.get('module'):
                temp_model = HotelOrderListQueryResponseBodyModule()
                self.module.append(temp_model.from_map(k))
        if m.get('page_info') is not None:
            temp_model = HotelOrderListQueryResponseBodyPageInfo()
            self.page_info = temp_model.from_map(m['page_info'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class HotelOrderListQueryResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: HotelOrderListQueryResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(HotelOrderListQueryResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = HotelOrderListQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class HotelOrderPayHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelOrderPayHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class HotelOrderPayRequest(TeaModel):
    def __init__(self, btrip_order_id=None, btrip_user_id=None, company_pay_fee=None, person_pay_fee=None,
                 third_pay_account=None, third_trade_no=None, total_price=None):
        # 供应商订单号（取自创单返回的订单号）
        self.btrip_order_id = btrip_order_id  # type: long
        self.btrip_user_id = btrip_user_id  # type: str
        self.company_pay_fee = company_pay_fee  # type: long
        self.person_pay_fee = person_pay_fee  # type: long
        self.third_pay_account = third_pay_account  # type: str
        self.third_trade_no = third_trade_no  # type: str
        self.total_price = total_price  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelOrderPayRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.btrip_order_id is not None:
            result['btrip_order_id'] = self.btrip_order_id
        if self.btrip_user_id is not None:
            result['btrip_user_id'] = self.btrip_user_id
        if self.company_pay_fee is not None:
            result['company_pay_fee'] = self.company_pay_fee
        if self.person_pay_fee is not None:
            result['person_pay_fee'] = self.person_pay_fee
        if self.third_pay_account is not None:
            result['third_pay_account'] = self.third_pay_account
        if self.third_trade_no is not None:
            result['third_trade_no'] = self.third_trade_no
        if self.total_price is not None:
            result['total_price'] = self.total_price
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('btrip_order_id') is not None:
            self.btrip_order_id = m.get('btrip_order_id')
        if m.get('btrip_user_id') is not None:
            self.btrip_user_id = m.get('btrip_user_id')
        if m.get('company_pay_fee') is not None:
            self.company_pay_fee = m.get('company_pay_fee')
        if m.get('person_pay_fee') is not None:
            self.person_pay_fee = m.get('person_pay_fee')
        if m.get('third_pay_account') is not None:
            self.third_pay_account = m.get('third_pay_account')
        if m.get('third_trade_no') is not None:
            self.third_trade_no = m.get('third_trade_no')
        if m.get('total_price') is not None:
            self.total_price = m.get('total_price')
        return self


class HotelOrderPayResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: bool
        # requestId
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelOrderPayResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            self.module = m.get('module')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class HotelOrderPayResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: HotelOrderPayResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(HotelOrderPayResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = HotelOrderPayResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class HotelOrderPreValidateHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelOrderPreValidateHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class HotelOrderPreValidateRequestDailyList(TeaModel):
    def __init__(self, board=None, price=None, rate_start_time=None, room_count=None):
        self.board = board  # type: str
        self.price = price  # type: long
        self.rate_start_time = rate_start_time  # type: str
        self.room_count = room_count  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelOrderPreValidateRequestDailyList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.board is not None:
            result['board'] = self.board
        if self.price is not None:
            result['price'] = self.price
        if self.rate_start_time is not None:
            result['rate_start_time'] = self.rate_start_time
        if self.room_count is not None:
            result['room_count'] = self.room_count
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('board') is not None:
            self.board = m.get('board')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('rate_start_time') is not None:
            self.rate_start_time = m.get('rate_start_time')
        if m.get('room_count') is not None:
            self.room_count = m.get('room_count')
        return self


class HotelOrderPreValidateRequestOccupantInfoList(TeaModel):
    def __init__(self, card_no=None, card_type=None, name=None, phone=None, staff_no=None, user_type=None):
        self.card_no = card_no  # type: str
        self.card_type = card_type  # type: int
        self.name = name  # type: str
        self.phone = phone  # type: str
        self.staff_no = staff_no  # type: str
        self.user_type = user_type  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelOrderPreValidateRequestOccupantInfoList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.card_no is not None:
            result['card_no'] = self.card_no
        if self.card_type is not None:
            result['card_type'] = self.card_type
        if self.name is not None:
            result['name'] = self.name
        if self.phone is not None:
            result['phone'] = self.phone
        if self.staff_no is not None:
            result['staff_no'] = self.staff_no
        if self.user_type is not None:
            result['user_type'] = self.user_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('card_no') is not None:
            self.card_no = m.get('card_no')
        if m.get('card_type') is not None:
            self.card_type = m.get('card_type')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        if m.get('staff_no') is not None:
            self.staff_no = m.get('staff_no')
        if m.get('user_type') is not None:
            self.user_type = m.get('user_type')
        return self


class HotelOrderPreValidateRequest(TeaModel):
    def __init__(self, btrip_user_id=None, check_in=None, check_out=None, daily_list=None, item_id=None,
                 number_of_adults_per_room=None, occupant_info_list=None, rate_plan_id=None, room_id=None, room_num=None,
                 search_room_price=None, seller_id=None, shid=None):
        self.btrip_user_id = btrip_user_id  # type: str
        self.check_in = check_in  # type: str
        self.check_out = check_out  # type: str
        self.daily_list = daily_list  # type: list[HotelOrderPreValidateRequestDailyList]
        self.item_id = item_id  # type: long
        self.number_of_adults_per_room = number_of_adults_per_room  # type: int
        self.occupant_info_list = occupant_info_list  # type: list[HotelOrderPreValidateRequestOccupantInfoList]
        self.rate_plan_id = rate_plan_id  # type: long
        self.room_id = room_id  # type: long
        self.room_num = room_num  # type: int
        self.search_room_price = search_room_price  # type: long
        self.seller_id = seller_id  # type: long
        self.shid = shid  # type: long

    def validate(self):
        if self.daily_list:
            for k in self.daily_list:
                if k:
                    k.validate()
        if self.occupant_info_list:
            for k in self.occupant_info_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(HotelOrderPreValidateRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.btrip_user_id is not None:
            result['btrip_user_id'] = self.btrip_user_id
        if self.check_in is not None:
            result['check_in'] = self.check_in
        if self.check_out is not None:
            result['check_out'] = self.check_out
        result['daily_list'] = []
        if self.daily_list is not None:
            for k in self.daily_list:
                result['daily_list'].append(k.to_map() if k else None)
        if self.item_id is not None:
            result['item_id'] = self.item_id
        if self.number_of_adults_per_room is not None:
            result['number_of_adults_per_room'] = self.number_of_adults_per_room
        result['occupant_info_list'] = []
        if self.occupant_info_list is not None:
            for k in self.occupant_info_list:
                result['occupant_info_list'].append(k.to_map() if k else None)
        if self.rate_plan_id is not None:
            result['rate_plan_id'] = self.rate_plan_id
        if self.room_id is not None:
            result['room_id'] = self.room_id
        if self.room_num is not None:
            result['room_num'] = self.room_num
        if self.search_room_price is not None:
            result['search_room_price'] = self.search_room_price
        if self.seller_id is not None:
            result['seller_id'] = self.seller_id
        if self.shid is not None:
            result['shid'] = self.shid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('btrip_user_id') is not None:
            self.btrip_user_id = m.get('btrip_user_id')
        if m.get('check_in') is not None:
            self.check_in = m.get('check_in')
        if m.get('check_out') is not None:
            self.check_out = m.get('check_out')
        self.daily_list = []
        if m.get('daily_list') is not None:
            for k in m.get('daily_list'):
                temp_model = HotelOrderPreValidateRequestDailyList()
                self.daily_list.append(temp_model.from_map(k))
        if m.get('item_id') is not None:
            self.item_id = m.get('item_id')
        if m.get('number_of_adults_per_room') is not None:
            self.number_of_adults_per_room = m.get('number_of_adults_per_room')
        self.occupant_info_list = []
        if m.get('occupant_info_list') is not None:
            for k in m.get('occupant_info_list'):
                temp_model = HotelOrderPreValidateRequestOccupantInfoList()
                self.occupant_info_list.append(temp_model.from_map(k))
        if m.get('rate_plan_id') is not None:
            self.rate_plan_id = m.get('rate_plan_id')
        if m.get('room_id') is not None:
            self.room_id = m.get('room_id')
        if m.get('room_num') is not None:
            self.room_num = m.get('room_num')
        if m.get('search_room_price') is not None:
            self.search_room_price = m.get('search_room_price')
        if m.get('seller_id') is not None:
            self.seller_id = m.get('seller_id')
        if m.get('shid') is not None:
            self.shid = m.get('shid')
        return self


class HotelOrderPreValidateShrinkRequest(TeaModel):
    def __init__(self, btrip_user_id=None, check_in=None, check_out=None, daily_list_shrink=None, item_id=None,
                 number_of_adults_per_room=None, occupant_info_list_shrink=None, rate_plan_id=None, room_id=None, room_num=None,
                 search_room_price=None, seller_id=None, shid=None):
        self.btrip_user_id = btrip_user_id  # type: str
        self.check_in = check_in  # type: str
        self.check_out = check_out  # type: str
        self.daily_list_shrink = daily_list_shrink  # type: str
        self.item_id = item_id  # type: long
        self.number_of_adults_per_room = number_of_adults_per_room  # type: int
        self.occupant_info_list_shrink = occupant_info_list_shrink  # type: str
        self.rate_plan_id = rate_plan_id  # type: long
        self.room_id = room_id  # type: long
        self.room_num = room_num  # type: int
        self.search_room_price = search_room_price  # type: long
        self.seller_id = seller_id  # type: long
        self.shid = shid  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelOrderPreValidateShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.btrip_user_id is not None:
            result['btrip_user_id'] = self.btrip_user_id
        if self.check_in is not None:
            result['check_in'] = self.check_in
        if self.check_out is not None:
            result['check_out'] = self.check_out
        if self.daily_list_shrink is not None:
            result['daily_list'] = self.daily_list_shrink
        if self.item_id is not None:
            result['item_id'] = self.item_id
        if self.number_of_adults_per_room is not None:
            result['number_of_adults_per_room'] = self.number_of_adults_per_room
        if self.occupant_info_list_shrink is not None:
            result['occupant_info_list'] = self.occupant_info_list_shrink
        if self.rate_plan_id is not None:
            result['rate_plan_id'] = self.rate_plan_id
        if self.room_id is not None:
            result['room_id'] = self.room_id
        if self.room_num is not None:
            result['room_num'] = self.room_num
        if self.search_room_price is not None:
            result['search_room_price'] = self.search_room_price
        if self.seller_id is not None:
            result['seller_id'] = self.seller_id
        if self.shid is not None:
            result['shid'] = self.shid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('btrip_user_id') is not None:
            self.btrip_user_id = m.get('btrip_user_id')
        if m.get('check_in') is not None:
            self.check_in = m.get('check_in')
        if m.get('check_out') is not None:
            self.check_out = m.get('check_out')
        if m.get('daily_list') is not None:
            self.daily_list_shrink = m.get('daily_list')
        if m.get('item_id') is not None:
            self.item_id = m.get('item_id')
        if m.get('number_of_adults_per_room') is not None:
            self.number_of_adults_per_room = m.get('number_of_adults_per_room')
        if m.get('occupant_info_list') is not None:
            self.occupant_info_list_shrink = m.get('occupant_info_list')
        if m.get('rate_plan_id') is not None:
            self.rate_plan_id = m.get('rate_plan_id')
        if m.get('room_id') is not None:
            self.room_id = m.get('room_id')
        if m.get('room_num') is not None:
            self.room_num = m.get('room_num')
        if m.get('search_room_price') is not None:
            self.search_room_price = m.get('search_room_price')
        if m.get('seller_id') is not None:
            self.seller_id = m.get('seller_id')
        if m.get('shid') is not None:
            self.shid = m.get('shid')
        return self


class HotelOrderPreValidateResponseBodyModulePromotionInfoPromotionDetailInfoList(TeaModel):
    def __init__(self, check_status=None, need_check=None, promotion_code=None, promotion_id=None,
                 promotion_name=None, promotion_price=None, promotion_type=None):
        self.check_status = check_status  # type: bool
        self.need_check = need_check  # type: bool
        self.promotion_code = promotion_code  # type: str
        self.promotion_id = promotion_id  # type: str
        self.promotion_name = promotion_name  # type: str
        self.promotion_price = promotion_price  # type: long
        self.promotion_type = promotion_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelOrderPreValidateResponseBodyModulePromotionInfoPromotionDetailInfoList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.check_status is not None:
            result['check_status'] = self.check_status
        if self.need_check is not None:
            result['need_check'] = self.need_check
        if self.promotion_code is not None:
            result['promotion_code'] = self.promotion_code
        if self.promotion_id is not None:
            result['promotion_id'] = self.promotion_id
        if self.promotion_name is not None:
            result['promotion_name'] = self.promotion_name
        if self.promotion_price is not None:
            result['promotion_price'] = self.promotion_price
        if self.promotion_type is not None:
            result['promotion_type'] = self.promotion_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('check_status') is not None:
            self.check_status = m.get('check_status')
        if m.get('need_check') is not None:
            self.need_check = m.get('need_check')
        if m.get('promotion_code') is not None:
            self.promotion_code = m.get('promotion_code')
        if m.get('promotion_id') is not None:
            self.promotion_id = m.get('promotion_id')
        if m.get('promotion_name') is not None:
            self.promotion_name = m.get('promotion_name')
        if m.get('promotion_price') is not None:
            self.promotion_price = m.get('promotion_price')
        if m.get('promotion_type') is not None:
            self.promotion_type = m.get('promotion_type')
        return self


class HotelOrderPreValidateResponseBodyModulePromotionInfo(TeaModel):
    def __init__(self, ext_attr_map=None, promotion_detail_info_list=None, promotion_total_price=None):
        self.ext_attr_map = ext_attr_map  # type: dict[str, str]
        self.promotion_detail_info_list = promotion_detail_info_list  # type: list[HotelOrderPreValidateResponseBodyModulePromotionInfoPromotionDetailInfoList]
        self.promotion_total_price = promotion_total_price  # type: long

    def validate(self):
        if self.promotion_detail_info_list:
            for k in self.promotion_detail_info_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(HotelOrderPreValidateResponseBodyModulePromotionInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ext_attr_map is not None:
            result['ext_attr_map'] = self.ext_attr_map
        result['promotion_detail_info_list'] = []
        if self.promotion_detail_info_list is not None:
            for k in self.promotion_detail_info_list:
                result['promotion_detail_info_list'].append(k.to_map() if k else None)
        if self.promotion_total_price is not None:
            result['promotion_total_price'] = self.promotion_total_price
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('ext_attr_map') is not None:
            self.ext_attr_map = m.get('ext_attr_map')
        self.promotion_detail_info_list = []
        if m.get('promotion_detail_info_list') is not None:
            for k in m.get('promotion_detail_info_list'):
                temp_model = HotelOrderPreValidateResponseBodyModulePromotionInfoPromotionDetailInfoList()
                self.promotion_detail_info_list.append(temp_model.from_map(k))
        if m.get('promotion_total_price') is not None:
            self.promotion_total_price = m.get('promotion_total_price')
        return self


class HotelOrderPreValidateResponseBodyModuleRatePlanDaily(TeaModel):
    def __init__(self, board=None, discount_price=None, max_booking_num=None, price=None, rate_start_time=None,
                 room_count=None, rounding_discount_price=None, rounding_price=None, service_fee=None):
        self.board = board  # type: str
        self.discount_price = discount_price  # type: str
        self.max_booking_num = max_booking_num  # type: int
        self.price = price  # type: long
        self.rate_start_time = rate_start_time  # type: str
        self.room_count = room_count  # type: int
        self.rounding_discount_price = rounding_discount_price  # type: str
        self.rounding_price = rounding_price  # type: str
        self.service_fee = service_fee  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelOrderPreValidateResponseBodyModuleRatePlanDaily, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.board is not None:
            result['board'] = self.board
        if self.discount_price is not None:
            result['discount_price'] = self.discount_price
        if self.max_booking_num is not None:
            result['max_booking_num'] = self.max_booking_num
        if self.price is not None:
            result['price'] = self.price
        if self.rate_start_time is not None:
            result['rate_start_time'] = self.rate_start_time
        if self.room_count is not None:
            result['room_count'] = self.room_count
        if self.rounding_discount_price is not None:
            result['rounding_discount_price'] = self.rounding_discount_price
        if self.rounding_price is not None:
            result['rounding_price'] = self.rounding_price
        if self.service_fee is not None:
            result['service_fee'] = self.service_fee
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('board') is not None:
            self.board = m.get('board')
        if m.get('discount_price') is not None:
            self.discount_price = m.get('discount_price')
        if m.get('max_booking_num') is not None:
            self.max_booking_num = m.get('max_booking_num')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('rate_start_time') is not None:
            self.rate_start_time = m.get('rate_start_time')
        if m.get('room_count') is not None:
            self.room_count = m.get('room_count')
        if m.get('rounding_discount_price') is not None:
            self.rounding_discount_price = m.get('rounding_discount_price')
        if m.get('rounding_price') is not None:
            self.rounding_price = m.get('rounding_price')
        if m.get('service_fee') is not None:
            self.service_fee = m.get('service_fee')
        return self


class HotelOrderPreValidateResponseBodyModuleRatePlanInfoBtripHotelCancelPolicyDTOBtripHotelCancelPolicyInfoDTOList(TeaModel):
    def __init__(self, hour=None, value=None):
        self.hour = hour  # type: long
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelOrderPreValidateResponseBodyModuleRatePlanInfoBtripHotelCancelPolicyDTOBtripHotelCancelPolicyInfoDTOList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.hour is not None:
            result['hour'] = self.hour
        if self.value is not None:
            result['value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('hour') is not None:
            self.hour = m.get('hour')
        if m.get('value') is not None:
            self.value = m.get('value')
        return self


class HotelOrderPreValidateResponseBodyModuleRatePlanInfoBtripHotelCancelPolicyDTO(TeaModel):
    def __init__(self, btrip_hotel_cancel_policy_info_dtolist=None, cancel_policy_type=None):
        self.btrip_hotel_cancel_policy_info_dtolist = btrip_hotel_cancel_policy_info_dtolist  # type: list[HotelOrderPreValidateResponseBodyModuleRatePlanInfoBtripHotelCancelPolicyDTOBtripHotelCancelPolicyInfoDTOList]
        self.cancel_policy_type = cancel_policy_type  # type: int

    def validate(self):
        if self.btrip_hotel_cancel_policy_info_dtolist:
            for k in self.btrip_hotel_cancel_policy_info_dtolist:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(HotelOrderPreValidateResponseBodyModuleRatePlanInfoBtripHotelCancelPolicyDTO, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['btrip_hotel_cancel_policy_info_d_t_o_list'] = []
        if self.btrip_hotel_cancel_policy_info_dtolist is not None:
            for k in self.btrip_hotel_cancel_policy_info_dtolist:
                result['btrip_hotel_cancel_policy_info_d_t_o_list'].append(k.to_map() if k else None)
        if self.cancel_policy_type is not None:
            result['cancel_policy_type'] = self.cancel_policy_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.btrip_hotel_cancel_policy_info_dtolist = []
        if m.get('btrip_hotel_cancel_policy_info_d_t_o_list') is not None:
            for k in m.get('btrip_hotel_cancel_policy_info_d_t_o_list'):
                temp_model = HotelOrderPreValidateResponseBodyModuleRatePlanInfoBtripHotelCancelPolicyDTOBtripHotelCancelPolicyInfoDTOList()
                self.btrip_hotel_cancel_policy_info_dtolist.append(temp_model.from_map(k))
        if m.get('cancel_policy_type') is not None:
            self.cancel_policy_type = m.get('cancel_policy_type')
        return self


class HotelOrderPreValidateResponseBodyModuleRatePlanInfo(TeaModel):
    def __init__(self, bed_desc=None, btrip_hotel_cancel_policy_dto=None, earliest_check_in_time=None,
                 latest_check_out_time=None, max_booking_num=None, max_occupancy_num=None, need_certificate=None, need_email=None,
                 need_english_name=None, total_order_price=None, total_room_price=None):
        self.bed_desc = bed_desc  # type: str
        self.btrip_hotel_cancel_policy_dto = btrip_hotel_cancel_policy_dto  # type: HotelOrderPreValidateResponseBodyModuleRatePlanInfoBtripHotelCancelPolicyDTO
        self.earliest_check_in_time = earliest_check_in_time  # type: str
        self.latest_check_out_time = latest_check_out_time  # type: str
        self.max_booking_num = max_booking_num  # type: int
        self.max_occupancy_num = max_occupancy_num  # type: int
        self.need_certificate = need_certificate  # type: bool
        self.need_email = need_email  # type: bool
        self.need_english_name = need_english_name  # type: bool
        self.total_order_price = total_order_price  # type: long
        self.total_room_price = total_room_price  # type: long

    def validate(self):
        if self.btrip_hotel_cancel_policy_dto:
            self.btrip_hotel_cancel_policy_dto.validate()

    def to_map(self):
        _map = super(HotelOrderPreValidateResponseBodyModuleRatePlanInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bed_desc is not None:
            result['bed_desc'] = self.bed_desc
        if self.btrip_hotel_cancel_policy_dto is not None:
            result['btrip_hotel_cancel_policy_d_t_o'] = self.btrip_hotel_cancel_policy_dto.to_map()
        if self.earliest_check_in_time is not None:
            result['earliest_check_in_time'] = self.earliest_check_in_time
        if self.latest_check_out_time is not None:
            result['latest_check_out_time'] = self.latest_check_out_time
        if self.max_booking_num is not None:
            result['max_booking_num'] = self.max_booking_num
        if self.max_occupancy_num is not None:
            result['max_occupancy_num'] = self.max_occupancy_num
        if self.need_certificate is not None:
            result['need_certificate'] = self.need_certificate
        if self.need_email is not None:
            result['need_email'] = self.need_email
        if self.need_english_name is not None:
            result['need_english_name'] = self.need_english_name
        if self.total_order_price is not None:
            result['total_order_price'] = self.total_order_price
        if self.total_room_price is not None:
            result['total_room_price'] = self.total_room_price
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('bed_desc') is not None:
            self.bed_desc = m.get('bed_desc')
        if m.get('btrip_hotel_cancel_policy_d_t_o') is not None:
            temp_model = HotelOrderPreValidateResponseBodyModuleRatePlanInfoBtripHotelCancelPolicyDTO()
            self.btrip_hotel_cancel_policy_dto = temp_model.from_map(m['btrip_hotel_cancel_policy_d_t_o'])
        if m.get('earliest_check_in_time') is not None:
            self.earliest_check_in_time = m.get('earliest_check_in_time')
        if m.get('latest_check_out_time') is not None:
            self.latest_check_out_time = m.get('latest_check_out_time')
        if m.get('max_booking_num') is not None:
            self.max_booking_num = m.get('max_booking_num')
        if m.get('max_occupancy_num') is not None:
            self.max_occupancy_num = m.get('max_occupancy_num')
        if m.get('need_certificate') is not None:
            self.need_certificate = m.get('need_certificate')
        if m.get('need_email') is not None:
            self.need_email = m.get('need_email')
        if m.get('need_english_name') is not None:
            self.need_english_name = m.get('need_english_name')
        if m.get('total_order_price') is not None:
            self.total_order_price = m.get('total_order_price')
        if m.get('total_room_price') is not None:
            self.total_room_price = m.get('total_room_price')
        return self


class HotelOrderPreValidateResponseBodyModule(TeaModel):
    def __init__(self, extend_info=None, itinerary_no=None, promotion_info=None, rate_plan_daily=None,
                 rate_plan_id=None, rate_plan_info=None, validate_res_key=None):
        self.extend_info = extend_info  # type: str
        self.itinerary_no = itinerary_no  # type: str
        self.promotion_info = promotion_info  # type: HotelOrderPreValidateResponseBodyModulePromotionInfo
        self.rate_plan_daily = rate_plan_daily  # type: list[HotelOrderPreValidateResponseBodyModuleRatePlanDaily]
        self.rate_plan_id = rate_plan_id  # type: long
        self.rate_plan_info = rate_plan_info  # type: HotelOrderPreValidateResponseBodyModuleRatePlanInfo
        self.validate_res_key = validate_res_key  # type: str

    def validate(self):
        if self.promotion_info:
            self.promotion_info.validate()
        if self.rate_plan_daily:
            for k in self.rate_plan_daily:
                if k:
                    k.validate()
        if self.rate_plan_info:
            self.rate_plan_info.validate()

    def to_map(self):
        _map = super(HotelOrderPreValidateResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.extend_info is not None:
            result['extend_info'] = self.extend_info
        if self.itinerary_no is not None:
            result['itinerary_no'] = self.itinerary_no
        if self.promotion_info is not None:
            result['promotion_info'] = self.promotion_info.to_map()
        result['rate_plan_daily'] = []
        if self.rate_plan_daily is not None:
            for k in self.rate_plan_daily:
                result['rate_plan_daily'].append(k.to_map() if k else None)
        if self.rate_plan_id is not None:
            result['rate_plan_id'] = self.rate_plan_id
        if self.rate_plan_info is not None:
            result['rate_plan_info'] = self.rate_plan_info.to_map()
        if self.validate_res_key is not None:
            result['validate_res_key'] = self.validate_res_key
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('extend_info') is not None:
            self.extend_info = m.get('extend_info')
        if m.get('itinerary_no') is not None:
            self.itinerary_no = m.get('itinerary_no')
        if m.get('promotion_info') is not None:
            temp_model = HotelOrderPreValidateResponseBodyModulePromotionInfo()
            self.promotion_info = temp_model.from_map(m['promotion_info'])
        self.rate_plan_daily = []
        if m.get('rate_plan_daily') is not None:
            for k in m.get('rate_plan_daily'):
                temp_model = HotelOrderPreValidateResponseBodyModuleRatePlanDaily()
                self.rate_plan_daily.append(temp_model.from_map(k))
        if m.get('rate_plan_id') is not None:
            self.rate_plan_id = m.get('rate_plan_id')
        if m.get('rate_plan_info') is not None:
            temp_model = HotelOrderPreValidateResponseBodyModuleRatePlanInfo()
            self.rate_plan_info = temp_model.from_map(m['rate_plan_info'])
        if m.get('validate_res_key') is not None:
            self.validate_res_key = m.get('validate_res_key')
        return self


class HotelOrderPreValidateResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: HotelOrderPreValidateResponseBodyModule
        # requestId
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(HotelOrderPreValidateResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = HotelOrderPreValidateResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class HotelOrderPreValidateResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: HotelOrderPreValidateResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(HotelOrderPreValidateResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = HotelOrderPreValidateResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class HotelOrderQueryHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_so_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelOrderQueryHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class HotelOrderQueryRequest(TeaModel):
    def __init__(self, order_id=None):
        self.order_id = order_id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelOrderQueryRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.order_id is not None:
            result['order_id'] = self.order_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        return self


class HotelOrderQueryResponseBodyModuleHotelInfo(TeaModel):
    def __init__(self, check_in=None, check_out=None, city=None, city_ad_code=None, hotel_name=None,
                 hotel_support_vat_invoice_type=None, night=None, room_num=None, room_type=None):
        self.check_in = check_in  # type: long
        self.check_out = check_out  # type: long
        self.city = city  # type: str
        self.city_ad_code = city_ad_code  # type: str
        self.hotel_name = hotel_name  # type: str
        self.hotel_support_vat_invoice_type = hotel_support_vat_invoice_type  # type: int
        self.night = night  # type: int
        self.room_num = room_num  # type: int
        self.room_type = room_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelOrderQueryResponseBodyModuleHotelInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.check_in is not None:
            result['check_in'] = self.check_in
        if self.check_out is not None:
            result['check_out'] = self.check_out
        if self.city is not None:
            result['city'] = self.city
        if self.city_ad_code is not None:
            result['city_ad_code'] = self.city_ad_code
        if self.hotel_name is not None:
            result['hotel_name'] = self.hotel_name
        if self.hotel_support_vat_invoice_type is not None:
            result['hotel_support_vat_invoice_type'] = self.hotel_support_vat_invoice_type
        if self.night is not None:
            result['night'] = self.night
        if self.room_num is not None:
            result['room_num'] = self.room_num
        if self.room_type is not None:
            result['room_type'] = self.room_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('check_in') is not None:
            self.check_in = m.get('check_in')
        if m.get('check_out') is not None:
            self.check_out = m.get('check_out')
        if m.get('city') is not None:
            self.city = m.get('city')
        if m.get('city_ad_code') is not None:
            self.city_ad_code = m.get('city_ad_code')
        if m.get('hotel_name') is not None:
            self.hotel_name = m.get('hotel_name')
        if m.get('hotel_support_vat_invoice_type') is not None:
            self.hotel_support_vat_invoice_type = m.get('hotel_support_vat_invoice_type')
        if m.get('night') is not None:
            self.night = m.get('night')
        if m.get('room_num') is not None:
            self.room_num = m.get('room_num')
        if m.get('room_type') is not None:
            self.room_type = m.get('room_type')
        return self


class HotelOrderQueryResponseBodyModuleInvoiceInfo(TeaModel):
    def __init__(self, id=None, title=None):
        self.id = id  # type: long
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelOrderQueryResponseBodyModuleInvoiceInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class HotelOrderQueryResponseBodyModuleOrderBaseInfo(TeaModel):
    def __init__(self, apply_id=None, btrip_title=None, corp_id=None, corp_name=None, depart_id=None,
                 depart_name=None, extend_field=None, gmt_create=None, gmt_modified=None, id=None, itinerary_id=None,
                 order_status=None, order_type=None, thirdpart_apply_id=None, thirdpart_depart_id=None,
                 thirdpart_itinerary_id=None, user_id=None, user_name=None):
        self.apply_id = apply_id  # type: str
        self.btrip_title = btrip_title  # type: str
        self.corp_id = corp_id  # type: str
        self.corp_name = corp_name  # type: str
        self.depart_id = depart_id  # type: str
        self.depart_name = depart_name  # type: str
        self.extend_field = extend_field  # type: str
        self.gmt_create = gmt_create  # type: long
        self.gmt_modified = gmt_modified  # type: long
        self.id = id  # type: long
        self.itinerary_id = itinerary_id  # type: str
        self.order_status = order_status  # type: int
        self.order_type = order_type  # type: int
        self.thirdpart_apply_id = thirdpart_apply_id  # type: str
        self.thirdpart_depart_id = thirdpart_depart_id  # type: str
        self.thirdpart_itinerary_id = thirdpart_itinerary_id  # type: str
        self.user_id = user_id  # type: str
        self.user_name = user_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelOrderQueryResponseBodyModuleOrderBaseInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.btrip_title is not None:
            result['btrip_title'] = self.btrip_title
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        if self.corp_name is not None:
            result['corp_name'] = self.corp_name
        if self.depart_id is not None:
            result['depart_id'] = self.depart_id
        if self.depart_name is not None:
            result['depart_name'] = self.depart_name
        if self.extend_field is not None:
            result['extend_field'] = self.extend_field
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.gmt_modified is not None:
            result['gmt_modified'] = self.gmt_modified
        if self.id is not None:
            result['id'] = self.id
        if self.itinerary_id is not None:
            result['itinerary_id'] = self.itinerary_id
        if self.order_status is not None:
            result['order_status'] = self.order_status
        if self.order_type is not None:
            result['order_type'] = self.order_type
        if self.thirdpart_apply_id is not None:
            result['thirdpart_apply_id'] = self.thirdpart_apply_id
        if self.thirdpart_depart_id is not None:
            result['thirdpart_depart_id'] = self.thirdpart_depart_id
        if self.thirdpart_itinerary_id is not None:
            result['thirdpart_itinerary_id'] = self.thirdpart_itinerary_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('btrip_title') is not None:
            self.btrip_title = m.get('btrip_title')
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        if m.get('corp_name') is not None:
            self.corp_name = m.get('corp_name')
        if m.get('depart_id') is not None:
            self.depart_id = m.get('depart_id')
        if m.get('depart_name') is not None:
            self.depart_name = m.get('depart_name')
        if m.get('extend_field') is not None:
            self.extend_field = m.get('extend_field')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('gmt_modified') is not None:
            self.gmt_modified = m.get('gmt_modified')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('itinerary_id') is not None:
            self.itinerary_id = m.get('itinerary_id')
        if m.get('order_status') is not None:
            self.order_status = m.get('order_status')
        if m.get('order_type') is not None:
            self.order_type = m.get('order_type')
        if m.get('thirdpart_apply_id') is not None:
            self.thirdpart_apply_id = m.get('thirdpart_apply_id')
        if m.get('thirdpart_depart_id') is not None:
            self.thirdpart_depart_id = m.get('thirdpart_depart_id')
        if m.get('thirdpart_itinerary_id') is not None:
            self.thirdpart_itinerary_id = m.get('thirdpart_itinerary_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class HotelOrderQueryResponseBodyModulePassengerList(TeaModel):
    def __init__(self, cost_center_id=None, cost_center_name=None, cost_center_number=None, project_code=None,
                 project_id=None, project_title=None, thirdpart_cost_center_id=None, thirdpart_project_id=None, user_id=None,
                 user_name=None, user_type=None):
        self.cost_center_id = cost_center_id  # type: long
        self.cost_center_name = cost_center_name  # type: str
        self.cost_center_number = cost_center_number  # type: str
        self.project_code = project_code  # type: str
        self.project_id = project_id  # type: long
        self.project_title = project_title  # type: str
        self.thirdpart_cost_center_id = thirdpart_cost_center_id  # type: str
        self.thirdpart_project_id = thirdpart_project_id  # type: str
        self.user_id = user_id  # type: str
        self.user_name = user_name  # type: str
        self.user_type = user_type  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelOrderQueryResponseBodyModulePassengerList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cost_center_id is not None:
            result['cost_center_id'] = self.cost_center_id
        if self.cost_center_name is not None:
            result['cost_center_name'] = self.cost_center_name
        if self.cost_center_number is not None:
            result['cost_center_number'] = self.cost_center_number
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_id is not None:
            result['project_id'] = self.project_id
        if self.project_title is not None:
            result['project_title'] = self.project_title
        if self.thirdpart_cost_center_id is not None:
            result['thirdpart_cost_center_id'] = self.thirdpart_cost_center_id
        if self.thirdpart_project_id is not None:
            result['thirdpart_project_id'] = self.thirdpart_project_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        if self.user_type is not None:
            result['user_type'] = self.user_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('cost_center_id') is not None:
            self.cost_center_id = m.get('cost_center_id')
        if m.get('cost_center_name') is not None:
            self.cost_center_name = m.get('cost_center_name')
        if m.get('cost_center_number') is not None:
            self.cost_center_number = m.get('cost_center_number')
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_id') is not None:
            self.project_id = m.get('project_id')
        if m.get('project_title') is not None:
            self.project_title = m.get('project_title')
        if m.get('thirdpart_cost_center_id') is not None:
            self.thirdpart_cost_center_id = m.get('thirdpart_cost_center_id')
        if m.get('thirdpart_project_id') is not None:
            self.thirdpart_project_id = m.get('thirdpart_project_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        if m.get('user_type') is not None:
            self.user_type = m.get('user_type')
        return self


class HotelOrderQueryResponseBodyModulePriceInfoList(TeaModel):
    def __init__(self, category_code=None, gmt_create=None, pay_type=None, price=None, trade_id=None, type=None):
        self.category_code = category_code  # type: int
        self.gmt_create = gmt_create  # type: long
        self.pay_type = pay_type  # type: int
        self.price = price  # type: float
        self.trade_id = trade_id  # type: str
        self.type = type  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelOrderQueryResponseBodyModulePriceInfoList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category_code is not None:
            result['category_code'] = self.category_code
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.pay_type is not None:
            result['pay_type'] = self.pay_type
        if self.price is not None:
            result['price'] = self.price
        if self.trade_id is not None:
            result['trade_id'] = self.trade_id
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('category_code') is not None:
            self.category_code = m.get('category_code')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('pay_type') is not None:
            self.pay_type = m.get('pay_type')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('trade_id') is not None:
            self.trade_id = m.get('trade_id')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class HotelOrderQueryResponseBodyModule(TeaModel):
    def __init__(self, hotel_info=None, invoice_info=None, order_base_info=None, passenger_list=None,
                 price_info_list=None):
        self.hotel_info = hotel_info  # type: HotelOrderQueryResponseBodyModuleHotelInfo
        self.invoice_info = invoice_info  # type: HotelOrderQueryResponseBodyModuleInvoiceInfo
        self.order_base_info = order_base_info  # type: HotelOrderQueryResponseBodyModuleOrderBaseInfo
        self.passenger_list = passenger_list  # type: list[HotelOrderQueryResponseBodyModulePassengerList]
        self.price_info_list = price_info_list  # type: list[HotelOrderQueryResponseBodyModulePriceInfoList]

    def validate(self):
        if self.hotel_info:
            self.hotel_info.validate()
        if self.invoice_info:
            self.invoice_info.validate()
        if self.order_base_info:
            self.order_base_info.validate()
        if self.passenger_list:
            for k in self.passenger_list:
                if k:
                    k.validate()
        if self.price_info_list:
            for k in self.price_info_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(HotelOrderQueryResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.hotel_info is not None:
            result['hotel_info'] = self.hotel_info.to_map()
        if self.invoice_info is not None:
            result['invoice_info'] = self.invoice_info.to_map()
        if self.order_base_info is not None:
            result['order_base_info'] = self.order_base_info.to_map()
        result['passenger_list'] = []
        if self.passenger_list is not None:
            for k in self.passenger_list:
                result['passenger_list'].append(k.to_map() if k else None)
        result['price_info_list'] = []
        if self.price_info_list is not None:
            for k in self.price_info_list:
                result['price_info_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('hotel_info') is not None:
            temp_model = HotelOrderQueryResponseBodyModuleHotelInfo()
            self.hotel_info = temp_model.from_map(m['hotel_info'])
        if m.get('invoice_info') is not None:
            temp_model = HotelOrderQueryResponseBodyModuleInvoiceInfo()
            self.invoice_info = temp_model.from_map(m['invoice_info'])
        if m.get('order_base_info') is not None:
            temp_model = HotelOrderQueryResponseBodyModuleOrderBaseInfo()
            self.order_base_info = temp_model.from_map(m['order_base_info'])
        self.passenger_list = []
        if m.get('passenger_list') is not None:
            for k in m.get('passenger_list'):
                temp_model = HotelOrderQueryResponseBodyModulePassengerList()
                self.passenger_list.append(temp_model.from_map(k))
        self.price_info_list = []
        if m.get('price_info_list') is not None:
            for k in m.get('price_info_list'):
                temp_model = HotelOrderQueryResponseBodyModulePriceInfoList()
                self.price_info_list.append(temp_model.from_map(k))
        return self


class HotelOrderQueryResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        # module。
        self.module = module  # type: HotelOrderQueryResponseBodyModule
        # requestId
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        # traceId
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(HotelOrderQueryResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = HotelOrderQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class HotelOrderQueryResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: HotelOrderQueryResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(HotelOrderQueryResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = HotelOrderQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class HotelPricePullHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelPricePullHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class HotelPricePullRequest(TeaModel):
    def __init__(self, btrip_user_id=None, check_in=None, check_out=None, city_code=None, hotel_ids=None,
                 payment_type=None):
        self.btrip_user_id = btrip_user_id  # type: str
        self.check_in = check_in  # type: str
        self.check_out = check_out  # type: str
        self.city_code = city_code  # type: int
        self.hotel_ids = hotel_ids  # type: list[str]
        self.payment_type = payment_type  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelPricePullRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.btrip_user_id is not None:
            result['btrip_user_id'] = self.btrip_user_id
        if self.check_in is not None:
            result['check_in'] = self.check_in
        if self.check_out is not None:
            result['check_out'] = self.check_out
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.hotel_ids is not None:
            result['hotel_ids'] = self.hotel_ids
        if self.payment_type is not None:
            result['payment_type'] = self.payment_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('btrip_user_id') is not None:
            self.btrip_user_id = m.get('btrip_user_id')
        if m.get('check_in') is not None:
            self.check_in = m.get('check_in')
        if m.get('check_out') is not None:
            self.check_out = m.get('check_out')
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('hotel_ids') is not None:
            self.hotel_ids = m.get('hotel_ids')
        if m.get('payment_type') is not None:
            self.payment_type = m.get('payment_type')
        return self


class HotelPricePullShrinkRequest(TeaModel):
    def __init__(self, btrip_user_id=None, check_in=None, check_out=None, city_code=None, hotel_ids_shrink=None,
                 payment_type=None):
        self.btrip_user_id = btrip_user_id  # type: str
        self.check_in = check_in  # type: str
        self.check_out = check_out  # type: str
        self.city_code = city_code  # type: int
        self.hotel_ids_shrink = hotel_ids_shrink  # type: str
        self.payment_type = payment_type  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelPricePullShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.btrip_user_id is not None:
            result['btrip_user_id'] = self.btrip_user_id
        if self.check_in is not None:
            result['check_in'] = self.check_in
        if self.check_out is not None:
            result['check_out'] = self.check_out
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.hotel_ids_shrink is not None:
            result['hotel_ids'] = self.hotel_ids_shrink
        if self.payment_type is not None:
            result['payment_type'] = self.payment_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('btrip_user_id') is not None:
            self.btrip_user_id = m.get('btrip_user_id')
        if m.get('check_in') is not None:
            self.check_in = m.get('check_in')
        if m.get('check_out') is not None:
            self.check_out = m.get('check_out')
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('hotel_ids') is not None:
            self.hotel_ids_shrink = m.get('hotel_ids')
        if m.get('payment_type') is not None:
            self.payment_type = m.get('payment_type')
        return self


class HotelPricePullResponseBodyModuleHotelPriceInfosRoomsRatesBtripHotelCancelPolicyBtripHotelCancelPolicyInfoDTOList(TeaModel):
    def __init__(self, hour=None, value=None):
        self.hour = hour  # type: long
        self.value = value  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelPricePullResponseBodyModuleHotelPriceInfosRoomsRatesBtripHotelCancelPolicyBtripHotelCancelPolicyInfoDTOList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.hour is not None:
            result['hour'] = self.hour
        if self.value is not None:
            result['value'] = self.value
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('hour') is not None:
            self.hour = m.get('hour')
        if m.get('value') is not None:
            self.value = m.get('value')
        return self


class HotelPricePullResponseBodyModuleHotelPriceInfosRoomsRatesBtripHotelCancelPolicy(TeaModel):
    def __init__(self, btrip_hotel_cancel_policy_info_dtolist=None, cancel_policy_type=None):
        self.btrip_hotel_cancel_policy_info_dtolist = btrip_hotel_cancel_policy_info_dtolist  # type: list[HotelPricePullResponseBodyModuleHotelPriceInfosRoomsRatesBtripHotelCancelPolicyBtripHotelCancelPolicyInfoDTOList]
        self.cancel_policy_type = cancel_policy_type  # type: int

    def validate(self):
        if self.btrip_hotel_cancel_policy_info_dtolist:
            for k in self.btrip_hotel_cancel_policy_info_dtolist:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(HotelPricePullResponseBodyModuleHotelPriceInfosRoomsRatesBtripHotelCancelPolicy, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['btrip_hotel_cancel_policy_info_d_t_o_list'] = []
        if self.btrip_hotel_cancel_policy_info_dtolist is not None:
            for k in self.btrip_hotel_cancel_policy_info_dtolist:
                result['btrip_hotel_cancel_policy_info_d_t_o_list'].append(k.to_map() if k else None)
        if self.cancel_policy_type is not None:
            result['cancel_policy_type'] = self.cancel_policy_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.btrip_hotel_cancel_policy_info_dtolist = []
        if m.get('btrip_hotel_cancel_policy_info_d_t_o_list') is not None:
            for k in m.get('btrip_hotel_cancel_policy_info_d_t_o_list'):
                temp_model = HotelPricePullResponseBodyModuleHotelPriceInfosRoomsRatesBtripHotelCancelPolicyBtripHotelCancelPolicyInfoDTOList()
                self.btrip_hotel_cancel_policy_info_dtolist.append(temp_model.from_map(k))
        if m.get('cancel_policy_type') is not None:
            self.cancel_policy_type = m.get('cancel_policy_type')
        return self


class HotelPricePullResponseBodyModuleHotelPriceInfosRoomsRatesRateDailys(TeaModel):
    def __init__(self, discount_price=None, last_discounts_price=None, price=None, start_date=None):
        self.discount_price = discount_price  # type: long
        self.last_discounts_price = last_discounts_price  # type: long
        self.price = price  # type: long
        self.start_date = start_date  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelPricePullResponseBodyModuleHotelPriceInfosRoomsRatesRateDailys, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.discount_price is not None:
            result['discount_price'] = self.discount_price
        if self.last_discounts_price is not None:
            result['last_discounts_price'] = self.last_discounts_price
        if self.price is not None:
            result['price'] = self.price
        if self.start_date is not None:
            result['start_date'] = self.start_date
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('discount_price') is not None:
            self.discount_price = m.get('discount_price')
        if m.get('last_discounts_price') is not None:
            self.last_discounts_price = m.get('last_discounts_price')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('start_date') is not None:
            self.start_date = m.get('start_date')
        return self


class HotelPricePullResponseBodyModuleHotelPriceInfosRoomsRates(TeaModel):
    def __init__(self, breakfast=None, breakfast_count=None, btrip_hotel_cancel_policy=None,
                 cancel_policy_desc=None, company_aassist=None, currency_code=None, instant_confirm=None, item_id=None,
                 max_adv_hours=None, max_days=None, min_adv_hours=None, min_days=None, nod=None, nop=None, payment_type=None,
                 price=None, promotion_info=None, quota=None, rate_dailys=None, rate_id=None, rate_plan_name=None,
                 rp_id=None, seller_id=None, support_special_invoice=None):
        self.breakfast = breakfast  # type: str
        self.breakfast_count = breakfast_count  # type: int
        self.btrip_hotel_cancel_policy = btrip_hotel_cancel_policy  # type: HotelPricePullResponseBodyModuleHotelPriceInfosRoomsRatesBtripHotelCancelPolicy
        self.cancel_policy_desc = cancel_policy_desc  # type: str
        self.company_aassist = company_aassist  # type: str
        self.currency_code = currency_code  # type: str
        self.instant_confirm = instant_confirm  # type: bool
        self.item_id = item_id  # type: str
        self.max_adv_hours = max_adv_hours  # type: int
        self.max_days = max_days  # type: int
        self.min_adv_hours = min_adv_hours  # type: int
        self.min_days = min_days  # type: int
        self.nod = nod  # type: int
        self.nop = nop  # type: int
        self.payment_type = payment_type  # type: int
        self.price = price  # type: long
        self.promotion_info = promotion_info  # type: str
        self.quota = quota  # type: int
        self.rate_dailys = rate_dailys  # type: list[HotelPricePullResponseBodyModuleHotelPriceInfosRoomsRatesRateDailys]
        self.rate_id = rate_id  # type: str
        self.rate_plan_name = rate_plan_name  # type: str
        self.rp_id = rp_id  # type: str
        self.seller_id = seller_id  # type: str
        self.support_special_invoice = support_special_invoice  # type: bool

    def validate(self):
        if self.btrip_hotel_cancel_policy:
            self.btrip_hotel_cancel_policy.validate()
        if self.rate_dailys:
            for k in self.rate_dailys:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(HotelPricePullResponseBodyModuleHotelPriceInfosRoomsRates, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.breakfast is not None:
            result['breakfast'] = self.breakfast
        if self.breakfast_count is not None:
            result['breakfast_count'] = self.breakfast_count
        if self.btrip_hotel_cancel_policy is not None:
            result['btrip_hotel_cancel_policy'] = self.btrip_hotel_cancel_policy.to_map()
        if self.cancel_policy_desc is not None:
            result['cancel_policy_desc'] = self.cancel_policy_desc
        if self.company_aassist is not None:
            result['company_aassist'] = self.company_aassist
        if self.currency_code is not None:
            result['currency_code'] = self.currency_code
        if self.instant_confirm is not None:
            result['instant_confirm'] = self.instant_confirm
        if self.item_id is not None:
            result['item_id'] = self.item_id
        if self.max_adv_hours is not None:
            result['max_adv_hours'] = self.max_adv_hours
        if self.max_days is not None:
            result['max_days'] = self.max_days
        if self.min_adv_hours is not None:
            result['min_adv_hours'] = self.min_adv_hours
        if self.min_days is not None:
            result['min_days'] = self.min_days
        if self.nod is not None:
            result['nod'] = self.nod
        if self.nop is not None:
            result['nop'] = self.nop
        if self.payment_type is not None:
            result['payment_type'] = self.payment_type
        if self.price is not None:
            result['price'] = self.price
        if self.promotion_info is not None:
            result['promotion_info'] = self.promotion_info
        if self.quota is not None:
            result['quota'] = self.quota
        result['rate_dailys'] = []
        if self.rate_dailys is not None:
            for k in self.rate_dailys:
                result['rate_dailys'].append(k.to_map() if k else None)
        if self.rate_id is not None:
            result['rate_id'] = self.rate_id
        if self.rate_plan_name is not None:
            result['rate_plan_name'] = self.rate_plan_name
        if self.rp_id is not None:
            result['rp_id'] = self.rp_id
        if self.seller_id is not None:
            result['seller_id'] = self.seller_id
        if self.support_special_invoice is not None:
            result['support_special_invoice'] = self.support_special_invoice
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('breakfast') is not None:
            self.breakfast = m.get('breakfast')
        if m.get('breakfast_count') is not None:
            self.breakfast_count = m.get('breakfast_count')
        if m.get('btrip_hotel_cancel_policy') is not None:
            temp_model = HotelPricePullResponseBodyModuleHotelPriceInfosRoomsRatesBtripHotelCancelPolicy()
            self.btrip_hotel_cancel_policy = temp_model.from_map(m['btrip_hotel_cancel_policy'])
        if m.get('cancel_policy_desc') is not None:
            self.cancel_policy_desc = m.get('cancel_policy_desc')
        if m.get('company_aassist') is not None:
            self.company_aassist = m.get('company_aassist')
        if m.get('currency_code') is not None:
            self.currency_code = m.get('currency_code')
        if m.get('instant_confirm') is not None:
            self.instant_confirm = m.get('instant_confirm')
        if m.get('item_id') is not None:
            self.item_id = m.get('item_id')
        if m.get('max_adv_hours') is not None:
            self.max_adv_hours = m.get('max_adv_hours')
        if m.get('max_days') is not None:
            self.max_days = m.get('max_days')
        if m.get('min_adv_hours') is not None:
            self.min_adv_hours = m.get('min_adv_hours')
        if m.get('min_days') is not None:
            self.min_days = m.get('min_days')
        if m.get('nod') is not None:
            self.nod = m.get('nod')
        if m.get('nop') is not None:
            self.nop = m.get('nop')
        if m.get('payment_type') is not None:
            self.payment_type = m.get('payment_type')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('promotion_info') is not None:
            self.promotion_info = m.get('promotion_info')
        if m.get('quota') is not None:
            self.quota = m.get('quota')
        self.rate_dailys = []
        if m.get('rate_dailys') is not None:
            for k in m.get('rate_dailys'):
                temp_model = HotelPricePullResponseBodyModuleHotelPriceInfosRoomsRatesRateDailys()
                self.rate_dailys.append(temp_model.from_map(k))
        if m.get('rate_id') is not None:
            self.rate_id = m.get('rate_id')
        if m.get('rate_plan_name') is not None:
            self.rate_plan_name = m.get('rate_plan_name')
        if m.get('rp_id') is not None:
            self.rp_id = m.get('rp_id')
        if m.get('seller_id') is not None:
            self.seller_id = m.get('seller_id')
        if m.get('support_special_invoice') is not None:
            self.support_special_invoice = m.get('support_special_invoice')
        return self


class HotelPricePullResponseBodyModuleHotelPriceInfosRooms(TeaModel):
    def __init__(self, area=None, bed=None, bed_type_string=None, facility=None, floor=None, max_occupancy=None,
                 network_service=None, pics=None, rates=None, room_id=None, room_name=None, status=None, window_type=None):
        self.area = area  # type: str
        self.bed = bed  # type: str
        self.bed_type_string = bed_type_string  # type: str
        self.facility = facility  # type: str
        self.floor = floor  # type: str
        self.max_occupancy = max_occupancy  # type: int
        self.network_service = network_service  # type: str
        self.pics = pics  # type: list[str]
        self.rates = rates  # type: list[HotelPricePullResponseBodyModuleHotelPriceInfosRoomsRates]
        self.room_id = room_id  # type: str
        self.room_name = room_name  # type: str
        self.status = status  # type: int
        self.window_type = window_type  # type: str

    def validate(self):
        if self.rates:
            for k in self.rates:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(HotelPricePullResponseBodyModuleHotelPriceInfosRooms, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.area is not None:
            result['area'] = self.area
        if self.bed is not None:
            result['bed'] = self.bed
        if self.bed_type_string is not None:
            result['bed_type_string'] = self.bed_type_string
        if self.facility is not None:
            result['facility'] = self.facility
        if self.floor is not None:
            result['floor'] = self.floor
        if self.max_occupancy is not None:
            result['max_occupancy'] = self.max_occupancy
        if self.network_service is not None:
            result['network_service'] = self.network_service
        if self.pics is not None:
            result['pics'] = self.pics
        result['rates'] = []
        if self.rates is not None:
            for k in self.rates:
                result['rates'].append(k.to_map() if k else None)
        if self.room_id is not None:
            result['room_id'] = self.room_id
        if self.room_name is not None:
            result['room_name'] = self.room_name
        if self.status is not None:
            result['status'] = self.status
        if self.window_type is not None:
            result['window_type'] = self.window_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('area') is not None:
            self.area = m.get('area')
        if m.get('bed') is not None:
            self.bed = m.get('bed')
        if m.get('bed_type_string') is not None:
            self.bed_type_string = m.get('bed_type_string')
        if m.get('facility') is not None:
            self.facility = m.get('facility')
        if m.get('floor') is not None:
            self.floor = m.get('floor')
        if m.get('max_occupancy') is not None:
            self.max_occupancy = m.get('max_occupancy')
        if m.get('network_service') is not None:
            self.network_service = m.get('network_service')
        if m.get('pics') is not None:
            self.pics = m.get('pics')
        self.rates = []
        if m.get('rates') is not None:
            for k in m.get('rates'):
                temp_model = HotelPricePullResponseBodyModuleHotelPriceInfosRoomsRates()
                self.rates.append(temp_model.from_map(k))
        if m.get('room_id') is not None:
            self.room_id = m.get('room_id')
        if m.get('room_name') is not None:
            self.room_name = m.get('room_name')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('window_type') is not None:
            self.window_type = m.get('window_type')
        return self


class HotelPricePullResponseBodyModuleHotelPriceInfos(TeaModel):
    def __init__(self, address=None, hotel_id=None, hotel_name=None, rooms=None, search_id=None):
        self.address = address  # type: str
        self.hotel_id = hotel_id  # type: str
        self.hotel_name = hotel_name  # type: str
        self.rooms = rooms  # type: list[HotelPricePullResponseBodyModuleHotelPriceInfosRooms]
        self.search_id = search_id  # type: str

    def validate(self):
        if self.rooms:
            for k in self.rooms:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(HotelPricePullResponseBodyModuleHotelPriceInfos, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.address is not None:
            result['address'] = self.address
        if self.hotel_id is not None:
            result['hotel_id'] = self.hotel_id
        if self.hotel_name is not None:
            result['hotel_name'] = self.hotel_name
        result['rooms'] = []
        if self.rooms is not None:
            for k in self.rooms:
                result['rooms'].append(k.to_map() if k else None)
        if self.search_id is not None:
            result['search_id'] = self.search_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('address') is not None:
            self.address = m.get('address')
        if m.get('hotel_id') is not None:
            self.hotel_id = m.get('hotel_id')
        if m.get('hotel_name') is not None:
            self.hotel_name = m.get('hotel_name')
        self.rooms = []
        if m.get('rooms') is not None:
            for k in m.get('rooms'):
                temp_model = HotelPricePullResponseBodyModuleHotelPriceInfosRooms()
                self.rooms.append(temp_model.from_map(k))
        if m.get('search_id') is not None:
            self.search_id = m.get('search_id')
        return self


class HotelPricePullResponseBodyModule(TeaModel):
    def __init__(self, hotel_price_infos=None):
        self.hotel_price_infos = hotel_price_infos  # type: list[HotelPricePullResponseBodyModuleHotelPriceInfos]

    def validate(self):
        if self.hotel_price_infos:
            for k in self.hotel_price_infos:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(HotelPricePullResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['hotel_price_infos'] = []
        if self.hotel_price_infos is not None:
            for k in self.hotel_price_infos:
                result['hotel_price_infos'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.hotel_price_infos = []
        if m.get('hotel_price_infos') is not None:
            for k in m.get('hotel_price_infos'):
                temp_model = HotelPricePullResponseBodyModuleHotelPriceInfos()
                self.hotel_price_infos.append(temp_model.from_map(k))
        return self


class HotelPricePullResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: HotelPricePullResponseBodyModule
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        # traceId
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(HotelPricePullResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['request_id'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = HotelPricePullResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('request_id') is not None:
            self.request_id = m.get('request_id')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class HotelPricePullResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: HotelPricePullResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(HotelPricePullResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = HotelPricePullResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class HotelRoomInfoHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelRoomInfoHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class HotelRoomInfoRequest(TeaModel):
    def __init__(self, room_ids=None):
        self.room_ids = room_ids  # type: list[long]

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelRoomInfoRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.room_ids is not None:
            result['room_ids'] = self.room_ids
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('room_ids') is not None:
            self.room_ids = m.get('room_ids')
        return self


class HotelRoomInfoShrinkRequest(TeaModel):
    def __init__(self, room_ids_shrink=None):
        self.room_ids_shrink = room_ids_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelRoomInfoShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.room_ids_shrink is not None:
            result['room_ids'] = self.room_ids_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('room_ids') is not None:
            self.room_ids_shrink = m.get('room_ids')
        return self


class HotelRoomInfoResponseBodyModuleBedInfos(TeaModel):
    def __init__(self, bed_desc=None, bed_num=None, bed_size=None, bed_type=None):
        self.bed_desc = bed_desc  # type: str
        self.bed_num = bed_num  # type: int
        self.bed_size = bed_size  # type: str
        self.bed_type = bed_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelRoomInfoResponseBodyModuleBedInfos, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bed_desc is not None:
            result['bed_desc'] = self.bed_desc
        if self.bed_num is not None:
            result['bed_num'] = self.bed_num
        if self.bed_size is not None:
            result['bed_size'] = self.bed_size
        if self.bed_type is not None:
            result['bed_type'] = self.bed_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('bed_desc') is not None:
            self.bed_desc = m.get('bed_desc')
        if m.get('bed_num') is not None:
            self.bed_num = m.get('bed_num')
        if m.get('bed_size') is not None:
            self.bed_size = m.get('bed_size')
        if m.get('bed_type') is not None:
            self.bed_type = m.get('bed_type')
        return self


class HotelRoomInfoResponseBodyModuleRoomImages(TeaModel):
    def __init__(self, bed_infos_2=None, tag=None, url=None):
        self.bed_infos_2 = bed_infos_2  # type: str
        self.tag = tag  # type: int
        self.url = url  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelRoomInfoResponseBodyModuleRoomImages, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bed_infos_2 is not None:
            result['bed_infos2'] = self.bed_infos_2
        if self.tag is not None:
            result['tag'] = self.tag
        if self.url is not None:
            result['url'] = self.url
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('bed_infos2') is not None:
            self.bed_infos_2 = m.get('bed_infos2')
        if m.get('tag') is not None:
            self.tag = m.get('tag')
        if m.get('url') is not None:
            self.url = m.get('url')
        return self


class HotelRoomInfoResponseBodyModule(TeaModel):
    def __init__(self, bed_infos=None, extra_bed=None, extra_bed_desc=None, floor=None, internet_way=None,
                 max_occupancy=None, room_desc=None, room_facilities=None, room_facility_list=None, room_id=None, room_image=None,
                 room_images=None, room_name=None, room_type=None, roomarea=None, rooms=None, window=None, window_bad=None,
                 window_view=None):
        self.bed_infos = bed_infos  # type: list[HotelRoomInfoResponseBodyModuleBedInfos]
        self.extra_bed = extra_bed  # type: int
        self.extra_bed_desc = extra_bed_desc  # type: str
        self.floor = floor  # type: str
        self.internet_way = internet_way  # type: str
        self.max_occupancy = max_occupancy  # type: int
        self.room_desc = room_desc  # type: str
        self.room_facilities = room_facilities  # type: str
        self.room_facility_list = room_facility_list  # type: list[str]
        self.room_id = room_id  # type: str
        self.room_image = room_image  # type: str
        self.room_images = room_images  # type: list[HotelRoomInfoResponseBodyModuleRoomImages]
        self.room_name = room_name  # type: str
        self.room_type = room_type  # type: int
        self.roomarea = roomarea  # type: str
        self.rooms = rooms  # type: int
        self.window = window  # type: str
        self.window_bad = window_bad  # type: str
        self.window_view = window_view  # type: str

    def validate(self):
        if self.bed_infos:
            for k in self.bed_infos:
                if k:
                    k.validate()
        if self.room_images:
            for k in self.room_images:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(HotelRoomInfoResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['bed_infos'] = []
        if self.bed_infos is not None:
            for k in self.bed_infos:
                result['bed_infos'].append(k.to_map() if k else None)
        if self.extra_bed is not None:
            result['extra_bed'] = self.extra_bed
        if self.extra_bed_desc is not None:
            result['extra_bed_desc'] = self.extra_bed_desc
        if self.floor is not None:
            result['floor'] = self.floor
        if self.internet_way is not None:
            result['internet_way'] = self.internet_way
        if self.max_occupancy is not None:
            result['max_occupancy'] = self.max_occupancy
        if self.room_desc is not None:
            result['room_desc'] = self.room_desc
        if self.room_facilities is not None:
            result['room_facilities'] = self.room_facilities
        if self.room_facility_list is not None:
            result['room_facility_list'] = self.room_facility_list
        if self.room_id is not None:
            result['room_id'] = self.room_id
        if self.room_image is not None:
            result['room_image'] = self.room_image
        result['room_images'] = []
        if self.room_images is not None:
            for k in self.room_images:
                result['room_images'].append(k.to_map() if k else None)
        if self.room_name is not None:
            result['room_name'] = self.room_name
        if self.room_type is not None:
            result['room_type'] = self.room_type
        if self.roomarea is not None:
            result['roomarea'] = self.roomarea
        if self.rooms is not None:
            result['rooms'] = self.rooms
        if self.window is not None:
            result['window'] = self.window
        if self.window_bad is not None:
            result['window_bad'] = self.window_bad
        if self.window_view is not None:
            result['window_view'] = self.window_view
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.bed_infos = []
        if m.get('bed_infos') is not None:
            for k in m.get('bed_infos'):
                temp_model = HotelRoomInfoResponseBodyModuleBedInfos()
                self.bed_infos.append(temp_model.from_map(k))
        if m.get('extra_bed') is not None:
            self.extra_bed = m.get('extra_bed')
        if m.get('extra_bed_desc') is not None:
            self.extra_bed_desc = m.get('extra_bed_desc')
        if m.get('floor') is not None:
            self.floor = m.get('floor')
        if m.get('internet_way') is not None:
            self.internet_way = m.get('internet_way')
        if m.get('max_occupancy') is not None:
            self.max_occupancy = m.get('max_occupancy')
        if m.get('room_desc') is not None:
            self.room_desc = m.get('room_desc')
        if m.get('room_facilities') is not None:
            self.room_facilities = m.get('room_facilities')
        if m.get('room_facility_list') is not None:
            self.room_facility_list = m.get('room_facility_list')
        if m.get('room_id') is not None:
            self.room_id = m.get('room_id')
        if m.get('room_image') is not None:
            self.room_image = m.get('room_image')
        self.room_images = []
        if m.get('room_images') is not None:
            for k in m.get('room_images'):
                temp_model = HotelRoomInfoResponseBodyModuleRoomImages()
                self.room_images.append(temp_model.from_map(k))
        if m.get('room_name') is not None:
            self.room_name = m.get('room_name')
        if m.get('room_type') is not None:
            self.room_type = m.get('room_type')
        if m.get('roomarea') is not None:
            self.roomarea = m.get('roomarea')
        if m.get('rooms') is not None:
            self.rooms = m.get('rooms')
        if m.get('window') is not None:
            self.window = m.get('window')
        if m.get('window_bad') is not None:
            self.window_bad = m.get('window_bad')
        if m.get('window_view') is not None:
            self.window_view = m.get('window_view')
        return self


class HotelRoomInfoResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: list[HotelRoomInfoResponseBodyModule]
        # requestId
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            for k in self.module:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(HotelRoomInfoResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        result['module'] = []
        if self.module is not None:
            for k in self.module:
                result['module'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        self.module = []
        if m.get('module') is not None:
            for k in m.get('module'):
                temp_model = HotelRoomInfoResponseBodyModule()
                self.module.append(temp_model.from_map(k))
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class HotelRoomInfoResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: HotelRoomInfoResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(HotelRoomInfoResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = HotelRoomInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class HotelSearchHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelSearchHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class HotelSearchRequest(TeaModel):
    def __init__(self, adult_num=None, brand_code=None, btrip_user_id=None, check_in_date=None, check_out_date=None,
                 city_code=None, dir=None, distance=None, district_code=None, hotel_star=None, is_protocol=None,
                 key_words=None, location=None, max_price=None, min_price=None, page_no=None, page_size=None,
                 pay_over_type=None, payment_type=None, shids=None, sort_code=None, super_man=None):
        self.adult_num = adult_num  # type: str
        self.brand_code = brand_code  # type: list[str]
        self.btrip_user_id = btrip_user_id  # type: str
        self.check_in_date = check_in_date  # type: str
        self.check_out_date = check_out_date  # type: str
        self.city_code = city_code  # type: str
        self.dir = dir  # type: int
        self.distance = distance  # type: int
        self.district_code = district_code  # type: str
        self.hotel_star = hotel_star  # type: str
        self.is_protocol = is_protocol  # type: bool
        self.key_words = key_words  # type: str
        self.location = location  # type: str
        self.max_price = max_price  # type: float
        self.min_price = min_price  # type: float
        self.page_no = page_no  # type: int
        self.page_size = page_size  # type: int
        self.pay_over_type = pay_over_type  # type: int
        self.payment_type = payment_type  # type: int
        self.shids = shids  # type: list[long]
        self.sort_code = sort_code  # type: int
        self.super_man = super_man  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelSearchRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.adult_num is not None:
            result['adult_num'] = self.adult_num
        if self.brand_code is not None:
            result['brand_code'] = self.brand_code
        if self.btrip_user_id is not None:
            result['btrip_user_id'] = self.btrip_user_id
        if self.check_in_date is not None:
            result['check_in_date'] = self.check_in_date
        if self.check_out_date is not None:
            result['check_out_date'] = self.check_out_date
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.dir is not None:
            result['dir'] = self.dir
        if self.distance is not None:
            result['distance'] = self.distance
        if self.district_code is not None:
            result['district_code'] = self.district_code
        if self.hotel_star is not None:
            result['hotel_star'] = self.hotel_star
        if self.is_protocol is not None:
            result['is_protocol'] = self.is_protocol
        if self.key_words is not None:
            result['key_words'] = self.key_words
        if self.location is not None:
            result['location'] = self.location
        if self.max_price is not None:
            result['max_price'] = self.max_price
        if self.min_price is not None:
            result['min_price'] = self.min_price
        if self.page_no is not None:
            result['page_no'] = self.page_no
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.pay_over_type is not None:
            result['pay_over_type'] = self.pay_over_type
        if self.payment_type is not None:
            result['payment_type'] = self.payment_type
        if self.shids is not None:
            result['shids'] = self.shids
        if self.sort_code is not None:
            result['sort_code'] = self.sort_code
        if self.super_man is not None:
            result['super_man'] = self.super_man
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('adult_num') is not None:
            self.adult_num = m.get('adult_num')
        if m.get('brand_code') is not None:
            self.brand_code = m.get('brand_code')
        if m.get('btrip_user_id') is not None:
            self.btrip_user_id = m.get('btrip_user_id')
        if m.get('check_in_date') is not None:
            self.check_in_date = m.get('check_in_date')
        if m.get('check_out_date') is not None:
            self.check_out_date = m.get('check_out_date')
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('dir') is not None:
            self.dir = m.get('dir')
        if m.get('distance') is not None:
            self.distance = m.get('distance')
        if m.get('district_code') is not None:
            self.district_code = m.get('district_code')
        if m.get('hotel_star') is not None:
            self.hotel_star = m.get('hotel_star')
        if m.get('is_protocol') is not None:
            self.is_protocol = m.get('is_protocol')
        if m.get('key_words') is not None:
            self.key_words = m.get('key_words')
        if m.get('location') is not None:
            self.location = m.get('location')
        if m.get('max_price') is not None:
            self.max_price = m.get('max_price')
        if m.get('min_price') is not None:
            self.min_price = m.get('min_price')
        if m.get('page_no') is not None:
            self.page_no = m.get('page_no')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('pay_over_type') is not None:
            self.pay_over_type = m.get('pay_over_type')
        if m.get('payment_type') is not None:
            self.payment_type = m.get('payment_type')
        if m.get('shids') is not None:
            self.shids = m.get('shids')
        if m.get('sort_code') is not None:
            self.sort_code = m.get('sort_code')
        if m.get('super_man') is not None:
            self.super_man = m.get('super_man')
        return self


class HotelSearchShrinkRequest(TeaModel):
    def __init__(self, adult_num=None, brand_code_shrink=None, btrip_user_id=None, check_in_date=None,
                 check_out_date=None, city_code=None, dir=None, distance=None, district_code=None, hotel_star=None,
                 is_protocol=None, key_words=None, location=None, max_price=None, min_price=None, page_no=None, page_size=None,
                 pay_over_type=None, payment_type=None, shids_shrink=None, sort_code=None, super_man=None):
        self.adult_num = adult_num  # type: str
        self.brand_code_shrink = brand_code_shrink  # type: str
        self.btrip_user_id = btrip_user_id  # type: str
        self.check_in_date = check_in_date  # type: str
        self.check_out_date = check_out_date  # type: str
        self.city_code = city_code  # type: str
        self.dir = dir  # type: int
        self.distance = distance  # type: int
        self.district_code = district_code  # type: str
        self.hotel_star = hotel_star  # type: str
        self.is_protocol = is_protocol  # type: bool
        self.key_words = key_words  # type: str
        self.location = location  # type: str
        self.max_price = max_price  # type: float
        self.min_price = min_price  # type: float
        self.page_no = page_no  # type: int
        self.page_size = page_size  # type: int
        self.pay_over_type = pay_over_type  # type: int
        self.payment_type = payment_type  # type: int
        self.shids_shrink = shids_shrink  # type: str
        self.sort_code = sort_code  # type: int
        self.super_man = super_man  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelSearchShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.adult_num is not None:
            result['adult_num'] = self.adult_num
        if self.brand_code_shrink is not None:
            result['brand_code'] = self.brand_code_shrink
        if self.btrip_user_id is not None:
            result['btrip_user_id'] = self.btrip_user_id
        if self.check_in_date is not None:
            result['check_in_date'] = self.check_in_date
        if self.check_out_date is not None:
            result['check_out_date'] = self.check_out_date
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.dir is not None:
            result['dir'] = self.dir
        if self.distance is not None:
            result['distance'] = self.distance
        if self.district_code is not None:
            result['district_code'] = self.district_code
        if self.hotel_star is not None:
            result['hotel_star'] = self.hotel_star
        if self.is_protocol is not None:
            result['is_protocol'] = self.is_protocol
        if self.key_words is not None:
            result['key_words'] = self.key_words
        if self.location is not None:
            result['location'] = self.location
        if self.max_price is not None:
            result['max_price'] = self.max_price
        if self.min_price is not None:
            result['min_price'] = self.min_price
        if self.page_no is not None:
            result['page_no'] = self.page_no
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.pay_over_type is not None:
            result['pay_over_type'] = self.pay_over_type
        if self.payment_type is not None:
            result['payment_type'] = self.payment_type
        if self.shids_shrink is not None:
            result['shids'] = self.shids_shrink
        if self.sort_code is not None:
            result['sort_code'] = self.sort_code
        if self.super_man is not None:
            result['super_man'] = self.super_man
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('adult_num') is not None:
            self.adult_num = m.get('adult_num')
        if m.get('brand_code') is not None:
            self.brand_code_shrink = m.get('brand_code')
        if m.get('btrip_user_id') is not None:
            self.btrip_user_id = m.get('btrip_user_id')
        if m.get('check_in_date') is not None:
            self.check_in_date = m.get('check_in_date')
        if m.get('check_out_date') is not None:
            self.check_out_date = m.get('check_out_date')
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('dir') is not None:
            self.dir = m.get('dir')
        if m.get('distance') is not None:
            self.distance = m.get('distance')
        if m.get('district_code') is not None:
            self.district_code = m.get('district_code')
        if m.get('hotel_star') is not None:
            self.hotel_star = m.get('hotel_star')
        if m.get('is_protocol') is not None:
            self.is_protocol = m.get('is_protocol')
        if m.get('key_words') is not None:
            self.key_words = m.get('key_words')
        if m.get('location') is not None:
            self.location = m.get('location')
        if m.get('max_price') is not None:
            self.max_price = m.get('max_price')
        if m.get('min_price') is not None:
            self.min_price = m.get('min_price')
        if m.get('page_no') is not None:
            self.page_no = m.get('page_no')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('pay_over_type') is not None:
            self.pay_over_type = m.get('pay_over_type')
        if m.get('payment_type') is not None:
            self.payment_type = m.get('payment_type')
        if m.get('shids') is not None:
            self.shids_shrink = m.get('shids')
        if m.get('sort_code') is not None:
            self.sort_code = m.get('sort_code')
        if m.get('super_man') is not None:
            self.super_man = m.get('super_man')
        return self


class HotelSearchResponseBodyModuleItemsDiscountDescDiscountDetail(TeaModel):
    def __init__(self, label_name=None, money_desc=None):
        self.label_name = label_name  # type: list[str]
        self.money_desc = money_desc  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelSearchResponseBodyModuleItemsDiscountDescDiscountDetail, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.label_name is not None:
            result['label_name'] = self.label_name
        if self.money_desc is not None:
            result['money_desc'] = self.money_desc
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('label_name') is not None:
            self.label_name = m.get('label_name')
        if m.get('money_desc') is not None:
            self.money_desc = m.get('money_desc')
        return self


class HotelSearchResponseBodyModuleItemsDiscountDesc(TeaModel):
    def __init__(self, cash_reduce_total=None, dinamic_label=None, discount_detail=None, sub_title=None, title=None):
        self.cash_reduce_total = cash_reduce_total  # type: str
        self.dinamic_label = dinamic_label  # type: str
        self.discount_detail = discount_detail  # type: list[HotelSearchResponseBodyModuleItemsDiscountDescDiscountDetail]
        self.sub_title = sub_title  # type: str
        self.title = title  # type: str

    def validate(self):
        if self.discount_detail:
            for k in self.discount_detail:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(HotelSearchResponseBodyModuleItemsDiscountDesc, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cash_reduce_total is not None:
            result['cash_reduce_total'] = self.cash_reduce_total
        if self.dinamic_label is not None:
            result['dinamic_label'] = self.dinamic_label
        result['discount_detail'] = []
        if self.discount_detail is not None:
            for k in self.discount_detail:
                result['discount_detail'].append(k.to_map() if k else None)
        if self.sub_title is not None:
            result['sub_title'] = self.sub_title
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('cash_reduce_total') is not None:
            self.cash_reduce_total = m.get('cash_reduce_total')
        if m.get('dinamic_label') is not None:
            self.dinamic_label = m.get('dinamic_label')
        self.discount_detail = []
        if m.get('discount_detail') is not None:
            for k in m.get('discount_detail'):
                temp_model = HotelSearchResponseBodyModuleItemsDiscountDescDiscountDetail()
                self.discount_detail.append(temp_model.from_map(k))
        if m.get('sub_title') is not None:
            self.sub_title = m.get('sub_title')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class HotelSearchResponseBodyModuleItems(TeaModel):
    def __init__(self, brand_name=None, btand_code=None, city_code=None, discount_desc=None, distance=None,
                 district_code=None, hotel_address=None, hotel_code=None, hotel_en_name=None, hotel_name=None, hotel_star=None,
                 image_url=None, is_protocol=None, location=None, min_price=None, original_min_price=None, score=None,
                 status=None, tel=None):
        self.brand_name = brand_name  # type: str
        self.btand_code = btand_code  # type: str
        self.city_code = city_code  # type: str
        self.discount_desc = discount_desc  # type: HotelSearchResponseBodyModuleItemsDiscountDesc
        self.distance = distance  # type: int
        self.district_code = district_code  # type: str
        self.hotel_address = hotel_address  # type: str
        self.hotel_code = hotel_code  # type: str
        self.hotel_en_name = hotel_en_name  # type: str
        self.hotel_name = hotel_name  # type: str
        self.hotel_star = hotel_star  # type: str
        self.image_url = image_url  # type: str
        self.is_protocol = is_protocol  # type: bool
        self.location = location  # type: str
        self.min_price = min_price  # type: float
        self.original_min_price = original_min_price  # type: float
        self.score = score  # type: str
        self.status = status  # type: int
        self.tel = tel  # type: str

    def validate(self):
        if self.discount_desc:
            self.discount_desc.validate()

    def to_map(self):
        _map = super(HotelSearchResponseBodyModuleItems, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.brand_name is not None:
            result['brand_name'] = self.brand_name
        if self.btand_code is not None:
            result['btand_code'] = self.btand_code
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.discount_desc is not None:
            result['discount_desc'] = self.discount_desc.to_map()
        if self.distance is not None:
            result['distance'] = self.distance
        if self.district_code is not None:
            result['district_code'] = self.district_code
        if self.hotel_address is not None:
            result['hotel_address'] = self.hotel_address
        if self.hotel_code is not None:
            result['hotel_code'] = self.hotel_code
        if self.hotel_en_name is not None:
            result['hotel_en_name'] = self.hotel_en_name
        if self.hotel_name is not None:
            result['hotel_name'] = self.hotel_name
        if self.hotel_star is not None:
            result['hotel_star'] = self.hotel_star
        if self.image_url is not None:
            result['image_url'] = self.image_url
        if self.is_protocol is not None:
            result['is_protocol'] = self.is_protocol
        if self.location is not None:
            result['location'] = self.location
        if self.min_price is not None:
            result['min_price'] = self.min_price
        if self.original_min_price is not None:
            result['original_min_price'] = self.original_min_price
        if self.score is not None:
            result['score'] = self.score
        if self.status is not None:
            result['status'] = self.status
        if self.tel is not None:
            result['tel'] = self.tel
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('brand_name') is not None:
            self.brand_name = m.get('brand_name')
        if m.get('btand_code') is not None:
            self.btand_code = m.get('btand_code')
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('discount_desc') is not None:
            temp_model = HotelSearchResponseBodyModuleItemsDiscountDesc()
            self.discount_desc = temp_model.from_map(m['discount_desc'])
        if m.get('distance') is not None:
            self.distance = m.get('distance')
        if m.get('district_code') is not None:
            self.district_code = m.get('district_code')
        if m.get('hotel_address') is not None:
            self.hotel_address = m.get('hotel_address')
        if m.get('hotel_code') is not None:
            self.hotel_code = m.get('hotel_code')
        if m.get('hotel_en_name') is not None:
            self.hotel_en_name = m.get('hotel_en_name')
        if m.get('hotel_name') is not None:
            self.hotel_name = m.get('hotel_name')
        if m.get('hotel_star') is not None:
            self.hotel_star = m.get('hotel_star')
        if m.get('image_url') is not None:
            self.image_url = m.get('image_url')
        if m.get('is_protocol') is not None:
            self.is_protocol = m.get('is_protocol')
        if m.get('location') is not None:
            self.location = m.get('location')
        if m.get('min_price') is not None:
            self.min_price = m.get('min_price')
        if m.get('original_min_price') is not None:
            self.original_min_price = m.get('original_min_price')
        if m.get('score') is not None:
            self.score = m.get('score')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('tel') is not None:
            self.tel = m.get('tel')
        return self


class HotelSearchResponseBodyModule(TeaModel):
    def __init__(self, items=None):
        self.items = items  # type: list[HotelSearchResponseBodyModuleItems]

    def validate(self):
        if self.items:
            for k in self.items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(HotelSearchResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['items'] = []
        if self.items is not None:
            for k in self.items:
                result['items'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.items = []
        if m.get('items') is not None:
            for k in m.get('items'):
                temp_model = HotelSearchResponseBodyModuleItems()
                self.items.append(temp_model.from_map(k))
        return self


class HotelSearchResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: HotelSearchResponseBodyModule
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(HotelSearchResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = HotelSearchResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class HotelSearchResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: HotelSearchResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(HotelSearchResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = HotelSearchResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class HotelStaticInfoHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelStaticInfoHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class HotelStaticInfoRequest(TeaModel):
    def __init__(self, hotel_ids=None):
        self.hotel_ids = hotel_ids  # type: list[str]

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelStaticInfoRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.hotel_ids is not None:
            result['hotel_ids'] = self.hotel_ids
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('hotel_ids') is not None:
            self.hotel_ids = m.get('hotel_ids')
        return self


class HotelStaticInfoShrinkRequest(TeaModel):
    def __init__(self, hotel_ids_shrink=None):
        self.hotel_ids_shrink = hotel_ids_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelStaticInfoShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.hotel_ids_shrink is not None:
            result['hotel_ids'] = self.hotel_ids_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('hotel_ids') is not None:
            self.hotel_ids_shrink = m.get('hotel_ids')
        return self


class HotelStaticInfoResponseBodyModuleHotelStaticInfosExpandInfo(TeaModel):
    def __init__(self, check_in=None, check_out=None, decorate_time=None, floors=None, hotel_facilities=None,
                 hotel_type=None, opening_time=None, room_facilities=None, rooms=None, service=None, theme_tag=None):
        self.check_in = check_in  # type: str
        self.check_out = check_out  # type: str
        self.decorate_time = decorate_time  # type: str
        self.floors = floors  # type: str
        self.hotel_facilities = hotel_facilities  # type: list[str]
        self.hotel_type = hotel_type  # type: int
        self.opening_time = opening_time  # type: str
        self.room_facilities = room_facilities  # type: list[str]
        self.rooms = rooms  # type: int
        self.service = service  # type: list[str]
        self.theme_tag = theme_tag  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelStaticInfoResponseBodyModuleHotelStaticInfosExpandInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.check_in is not None:
            result['check_in'] = self.check_in
        if self.check_out is not None:
            result['check_out'] = self.check_out
        if self.decorate_time is not None:
            result['decorate_time'] = self.decorate_time
        if self.floors is not None:
            result['floors'] = self.floors
        if self.hotel_facilities is not None:
            result['hotel_facilities'] = self.hotel_facilities
        if self.hotel_type is not None:
            result['hotel_type'] = self.hotel_type
        if self.opening_time is not None:
            result['opening_time'] = self.opening_time
        if self.room_facilities is not None:
            result['room_facilities'] = self.room_facilities
        if self.rooms is not None:
            result['rooms'] = self.rooms
        if self.service is not None:
            result['service'] = self.service
        if self.theme_tag is not None:
            result['theme_tag'] = self.theme_tag
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('check_in') is not None:
            self.check_in = m.get('check_in')
        if m.get('check_out') is not None:
            self.check_out = m.get('check_out')
        if m.get('decorate_time') is not None:
            self.decorate_time = m.get('decorate_time')
        if m.get('floors') is not None:
            self.floors = m.get('floors')
        if m.get('hotel_facilities') is not None:
            self.hotel_facilities = m.get('hotel_facilities')
        if m.get('hotel_type') is not None:
            self.hotel_type = m.get('hotel_type')
        if m.get('opening_time') is not None:
            self.opening_time = m.get('opening_time')
        if m.get('room_facilities') is not None:
            self.room_facilities = m.get('room_facilities')
        if m.get('rooms') is not None:
            self.rooms = m.get('rooms')
        if m.get('service') is not None:
            self.service = m.get('service')
        if m.get('theme_tag') is not None:
            self.theme_tag = m.get('theme_tag')
        return self


class HotelStaticInfoResponseBodyModuleHotelStaticInfosImageinfos(TeaModel):
    def __init__(self, desc=None, tag=None, url=None):
        self.desc = desc  # type: str
        self.tag = tag  # type: int
        self.url = url  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelStaticInfoResponseBodyModuleHotelStaticInfosImageinfos, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.desc is not None:
            result['desc'] = self.desc
        if self.tag is not None:
            result['tag'] = self.tag
        if self.url is not None:
            result['url'] = self.url
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('desc') is not None:
            self.desc = m.get('desc')
        if m.get('tag') is not None:
            self.tag = m.get('tag')
        if m.get('url') is not None:
            self.url = m.get('url')
        return self


class HotelStaticInfoResponseBodyModuleHotelStaticInfosRoomInfosBedInfos(TeaModel):
    def __init__(self, bed_desc=None, bed_num=None, bed_size=None, bed_type=None):
        self.bed_desc = bed_desc  # type: str
        self.bed_num = bed_num  # type: int
        self.bed_size = bed_size  # type: str
        self.bed_type = bed_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(HotelStaticInfoResponseBodyModuleHotelStaticInfosRoomInfosBedInfos, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bed_desc is not None:
            result['bed_desc'] = self.bed_desc
        if self.bed_num is not None:
            result['bed_num'] = self.bed_num
        if self.bed_size is not None:
            result['bed_size'] = self.bed_size
        if self.bed_type is not None:
            result['bed_type'] = self.bed_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('bed_desc') is not None:
            self.bed_desc = m.get('bed_desc')
        if m.get('bed_num') is not None:
            self.bed_num = m.get('bed_num')
        if m.get('bed_size') is not None:
            self.bed_size = m.get('bed_size')
        if m.get('bed_type') is not None:
            self.bed_type = m.get('bed_type')
        return self


class HotelStaticInfoResponseBodyModuleHotelStaticInfosRoomInfos(TeaModel):
    def __init__(self, bed_infos=None, extra_bed=None, extra_bed_desc=None, floor=None, internet_way=None,
                 max_occupancy=None, room_facilities=None, room_facility_list=None, room_id=None, room_image=None,
                 room_images=None, room_name=None, room_type=None, roomarea=None, rooms=None, window=None, window_bad=None,
                 window_view=None):
        self.bed_infos = bed_infos  # type: list[HotelStaticInfoResponseBodyModuleHotelStaticInfosRoomInfosBedInfos]
        self.extra_bed = extra_bed  # type: int
        self.extra_bed_desc = extra_bed_desc  # type: str
        self.floor = floor  # type: str
        self.internet_way = internet_way  # type: str
        self.max_occupancy = max_occupancy  # type: int
        self.room_facilities = room_facilities  # type: str
        self.room_facility_list = room_facility_list  # type: list[str]
        self.room_id = room_id  # type: str
        self.room_image = room_image  # type: str
        self.room_images = room_images  # type: list[str]
        self.room_name = room_name  # type: str
        self.room_type = room_type  # type: int
        self.roomarea = roomarea  # type: str
        self.rooms = rooms  # type: int
        self.window = window  # type: str
        self.window_bad = window_bad  # type: str
        self.window_view = window_view  # type: str

    def validate(self):
        if self.bed_infos:
            for k in self.bed_infos:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(HotelStaticInfoResponseBodyModuleHotelStaticInfosRoomInfos, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['bed_infos'] = []
        if self.bed_infos is not None:
            for k in self.bed_infos:
                result['bed_infos'].append(k.to_map() if k else None)
        if self.extra_bed is not None:
            result['extra_bed'] = self.extra_bed
        if self.extra_bed_desc is not None:
            result['extra_bed_desc'] = self.extra_bed_desc
        if self.floor is not None:
            result['floor'] = self.floor
        if self.internet_way is not None:
            result['internet_way'] = self.internet_way
        if self.max_occupancy is not None:
            result['max_occupancy'] = self.max_occupancy
        if self.room_facilities is not None:
            result['room_facilities'] = self.room_facilities
        if self.room_facility_list is not None:
            result['room_facility_list'] = self.room_facility_list
        if self.room_id is not None:
            result['room_id'] = self.room_id
        if self.room_image is not None:
            result['room_image'] = self.room_image
        if self.room_images is not None:
            result['room_images'] = self.room_images
        if self.room_name is not None:
            result['room_name'] = self.room_name
        if self.room_type is not None:
            result['room_type'] = self.room_type
        if self.roomarea is not None:
            result['roomarea'] = self.roomarea
        if self.rooms is not None:
            result['rooms'] = self.rooms
        if self.window is not None:
            result['window'] = self.window
        if self.window_bad is not None:
            result['window_bad'] = self.window_bad
        if self.window_view is not None:
            result['window_view'] = self.window_view
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.bed_infos = []
        if m.get('bed_infos') is not None:
            for k in m.get('bed_infos'):
                temp_model = HotelStaticInfoResponseBodyModuleHotelStaticInfosRoomInfosBedInfos()
                self.bed_infos.append(temp_model.from_map(k))
        if m.get('extra_bed') is not None:
            self.extra_bed = m.get('extra_bed')
        if m.get('extra_bed_desc') is not None:
            self.extra_bed_desc = m.get('extra_bed_desc')
        if m.get('floor') is not None:
            self.floor = m.get('floor')
        if m.get('internet_way') is not None:
            self.internet_way = m.get('internet_way')
        if m.get('max_occupancy') is not None:
            self.max_occupancy = m.get('max_occupancy')
        if m.get('room_facilities') is not None:
            self.room_facilities = m.get('room_facilities')
        if m.get('room_facility_list') is not None:
            self.room_facility_list = m.get('room_facility_list')
        if m.get('room_id') is not None:
            self.room_id = m.get('room_id')
        if m.get('room_image') is not None:
            self.room_image = m.get('room_image')
        if m.get('room_images') is not None:
            self.room_images = m.get('room_images')
        if m.get('room_name') is not None:
            self.room_name = m.get('room_name')
        if m.get('room_type') is not None:
            self.room_type = m.get('room_type')
        if m.get('roomarea') is not None:
            self.roomarea = m.get('roomarea')
        if m.get('rooms') is not None:
            self.rooms = m.get('rooms')
        if m.get('window') is not None:
            self.window = m.get('window')
        if m.get('window_bad') is not None:
            self.window_bad = m.get('window_bad')
        if m.get('window_view') is not None:
            self.window_view = m.get('window_view')
        return self


class HotelStaticInfoResponseBodyModuleHotelStaticInfos(TeaModel):
    def __init__(self, block_room_type_information=None, brand=None, brand_name=None, city_code=None,
                 city_name=None, country=None, country_code=None, description=None, district=None, district_name=None,
                 expand_info=None, hotel_address=None, hotel_en_address=None, hotel_en_name=None, hotel_id=None,
                 hotel_name=None, hotel_open_time=None, hotel_phones=None, hotel_policies=None, hotelfax=None, hotelpics=None,
                 imageinfos=None, invoice_provider_method=None, invoice_types=None, location=None, province=None,
                 province_name=None, rating_average=None, room_infos=None, star=None, star_rate=None, status=None, themes=None,
                 visa_reminding=None):
        self.block_room_type_information = block_room_type_information  # type: dict[str, str]
        self.brand = brand  # type: str
        self.brand_name = brand_name  # type: str
        self.city_code = city_code  # type: str
        self.city_name = city_name  # type: str
        self.country = country  # type: str
        self.country_code = country_code  # type: str
        self.description = description  # type: str
        self.district = district  # type: str
        self.district_name = district_name  # type: str
        self.expand_info = expand_info  # type: HotelStaticInfoResponseBodyModuleHotelStaticInfosExpandInfo
        self.hotel_address = hotel_address  # type: str
        self.hotel_en_address = hotel_en_address  # type: str
        self.hotel_en_name = hotel_en_name  # type: str
        self.hotel_id = hotel_id  # type: str
        self.hotel_name = hotel_name  # type: str
        self.hotel_open_time = hotel_open_time  # type: str
        self.hotel_phones = hotel_phones  # type: str
        self.hotel_policies = hotel_policies  # type: str
        self.hotelfax = hotelfax  # type: str
        self.hotelpics = hotelpics  # type: str
        self.imageinfos = imageinfos  # type: list[HotelStaticInfoResponseBodyModuleHotelStaticInfosImageinfos]
        self.invoice_provider_method = invoice_provider_method  # type: str
        self.invoice_types = invoice_types  # type: list[int]
        self.location = location  # type: str
        self.province = province  # type: str
        self.province_name = province_name  # type: str
        self.rating_average = rating_average  # type: str
        self.room_infos = room_infos  # type: list[HotelStaticInfoResponseBodyModuleHotelStaticInfosRoomInfos]
        self.star = star  # type: str
        self.star_rate = star_rate  # type: str
        self.status = status  # type: str
        self.themes = themes  # type: str
        self.visa_reminding = visa_reminding  # type: bool

    def validate(self):
        if self.expand_info:
            self.expand_info.validate()
        if self.imageinfos:
            for k in self.imageinfos:
                if k:
                    k.validate()
        if self.room_infos:
            for k in self.room_infos:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(HotelStaticInfoResponseBodyModuleHotelStaticInfos, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.block_room_type_information is not None:
            result['block_room_type_information'] = self.block_room_type_information
        if self.brand is not None:
            result['brand'] = self.brand
        if self.brand_name is not None:
            result['brand_name'] = self.brand_name
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.country is not None:
            result['country'] = self.country
        if self.country_code is not None:
            result['country_code'] = self.country_code
        if self.description is not None:
            result['description'] = self.description
        if self.district is not None:
            result['district'] = self.district
        if self.district_name is not None:
            result['district_name'] = self.district_name
        if self.expand_info is not None:
            result['expand_info'] = self.expand_info.to_map()
        if self.hotel_address is not None:
            result['hotel_address'] = self.hotel_address
        if self.hotel_en_address is not None:
            result['hotel_en_address'] = self.hotel_en_address
        if self.hotel_en_name is not None:
            result['hotel_en_name'] = self.hotel_en_name
        if self.hotel_id is not None:
            result['hotel_id'] = self.hotel_id
        if self.hotel_name is not None:
            result['hotel_name'] = self.hotel_name
        if self.hotel_open_time is not None:
            result['hotel_open_time'] = self.hotel_open_time
        if self.hotel_phones is not None:
            result['hotel_phones'] = self.hotel_phones
        if self.hotel_policies is not None:
            result['hotel_policies'] = self.hotel_policies
        if self.hotelfax is not None:
            result['hotelfax'] = self.hotelfax
        if self.hotelpics is not None:
            result['hotelpics'] = self.hotelpics
        result['imageinfos'] = []
        if self.imageinfos is not None:
            for k in self.imageinfos:
                result['imageinfos'].append(k.to_map() if k else None)
        if self.invoice_provider_method is not None:
            result['invoice_provider_method'] = self.invoice_provider_method
        if self.invoice_types is not None:
            result['invoice_types'] = self.invoice_types
        if self.location is not None:
            result['location'] = self.location
        if self.province is not None:
            result['province'] = self.province
        if self.province_name is not None:
            result['province_name'] = self.province_name
        if self.rating_average is not None:
            result['rating_average'] = self.rating_average
        result['room_infos'] = []
        if self.room_infos is not None:
            for k in self.room_infos:
                result['room_infos'].append(k.to_map() if k else None)
        if self.star is not None:
            result['star'] = self.star
        if self.star_rate is not None:
            result['star_rate'] = self.star_rate
        if self.status is not None:
            result['status'] = self.status
        if self.themes is not None:
            result['themes'] = self.themes
        if self.visa_reminding is not None:
            result['visa_reminding'] = self.visa_reminding
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('block_room_type_information') is not None:
            self.block_room_type_information = m.get('block_room_type_information')
        if m.get('brand') is not None:
            self.brand = m.get('brand')
        if m.get('brand_name') is not None:
            self.brand_name = m.get('brand_name')
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('country') is not None:
            self.country = m.get('country')
        if m.get('country_code') is not None:
            self.country_code = m.get('country_code')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('district') is not None:
            self.district = m.get('district')
        if m.get('district_name') is not None:
            self.district_name = m.get('district_name')
        if m.get('expand_info') is not None:
            temp_model = HotelStaticInfoResponseBodyModuleHotelStaticInfosExpandInfo()
            self.expand_info = temp_model.from_map(m['expand_info'])
        if m.get('hotel_address') is not None:
            self.hotel_address = m.get('hotel_address')
        if m.get('hotel_en_address') is not None:
            self.hotel_en_address = m.get('hotel_en_address')
        if m.get('hotel_en_name') is not None:
            self.hotel_en_name = m.get('hotel_en_name')
        if m.get('hotel_id') is not None:
            self.hotel_id = m.get('hotel_id')
        if m.get('hotel_name') is not None:
            self.hotel_name = m.get('hotel_name')
        if m.get('hotel_open_time') is not None:
            self.hotel_open_time = m.get('hotel_open_time')
        if m.get('hotel_phones') is not None:
            self.hotel_phones = m.get('hotel_phones')
        if m.get('hotel_policies') is not None:
            self.hotel_policies = m.get('hotel_policies')
        if m.get('hotelfax') is not None:
            self.hotelfax = m.get('hotelfax')
        if m.get('hotelpics') is not None:
            self.hotelpics = m.get('hotelpics')
        self.imageinfos = []
        if m.get('imageinfos') is not None:
            for k in m.get('imageinfos'):
                temp_model = HotelStaticInfoResponseBodyModuleHotelStaticInfosImageinfos()
                self.imageinfos.append(temp_model.from_map(k))
        if m.get('invoice_provider_method') is not None:
            self.invoice_provider_method = m.get('invoice_provider_method')
        if m.get('invoice_types') is not None:
            self.invoice_types = m.get('invoice_types')
        if m.get('location') is not None:
            self.location = m.get('location')
        if m.get('province') is not None:
            self.province = m.get('province')
        if m.get('province_name') is not None:
            self.province_name = m.get('province_name')
        if m.get('rating_average') is not None:
            self.rating_average = m.get('rating_average')
        self.room_infos = []
        if m.get('room_infos') is not None:
            for k in m.get('room_infos'):
                temp_model = HotelStaticInfoResponseBodyModuleHotelStaticInfosRoomInfos()
                self.room_infos.append(temp_model.from_map(k))
        if m.get('star') is not None:
            self.star = m.get('star')
        if m.get('star_rate') is not None:
            self.star_rate = m.get('star_rate')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('themes') is not None:
            self.themes = m.get('themes')
        if m.get('visa_reminding') is not None:
            self.visa_reminding = m.get('visa_reminding')
        return self


class HotelStaticInfoResponseBodyModule(TeaModel):
    def __init__(self, hotel_static_infos=None):
        self.hotel_static_infos = hotel_static_infos  # type: list[HotelStaticInfoResponseBodyModuleHotelStaticInfos]

    def validate(self):
        if self.hotel_static_infos:
            for k in self.hotel_static_infos:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(HotelStaticInfoResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['hotel_static_infos'] = []
        if self.hotel_static_infos is not None:
            for k in self.hotel_static_infos:
                result['hotel_static_infos'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.hotel_static_infos = []
        if m.get('hotel_static_infos') is not None:
            for k in m.get('hotel_static_infos'):
                temp_model = HotelStaticInfoResponseBodyModuleHotelStaticInfos()
                self.hotel_static_infos.append(temp_model.from_map(k))
        return self


class HotelStaticInfoResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        # module
        self.module = module  # type: HotelStaticInfoResponseBodyModule
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(HotelStaticInfoResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = HotelStaticInfoResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class HotelStaticInfoResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: HotelStaticInfoResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(HotelStaticInfoResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = HotelStaticInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class IeFlightBillSettlementQueryHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_so_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(IeFlightBillSettlementQueryHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class IeFlightBillSettlementQueryRequest(TeaModel):
    def __init__(self, page_no=None, page_size=None, period_end=None, period_start=None):
        self.page_no = page_no  # type: int
        self.page_size = page_size  # type: int
        self.period_end = period_end  # type: str
        self.period_start = period_start  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(IeFlightBillSettlementQueryRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_no is not None:
            result['page_no'] = self.page_no
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.period_end is not None:
            result['period_end'] = self.period_end
        if self.period_start is not None:
            result['period_start'] = self.period_start
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('page_no') is not None:
            self.page_no = m.get('page_no')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('period_end') is not None:
            self.period_end = m.get('period_end')
        if m.get('period_start') is not None:
            self.period_start = m.get('period_start')
        return self


class IeFlightBillSettlementQueryResponseBodyModuleDataList(TeaModel):
    def __init__(self, advance_day=None, airline_corp_code=None, airline_corp_name=None, alipay_trade_no=None,
                 apply_arr_city_code=None, apply_arr_city_name=None, apply_dep_city_code=None, apply_dep_city_name=None,
                 apply_extend_field=None, apply_id=None, arr_airport_code=None, arr_city=None, arr_city_code=None, arr_date=None,
                 arr_station=None, arr_time=None, bill_record_time=None, book_mode=None, book_time=None, booker_id=None,
                 booker_job_no=None, booker_name=None, btrip_coupon_fee=None, business_trip_result=None, cabin=None,
                 cabin_class=None, capital_direction=None, cascade_department=None, change_fee=None, change_result=None,
                 corp_pay_order_fee=None, cost_center=None, cost_center_number=None, coupon=None, dep_airport_code=None,
                 dep_city_code=None, department=None, department_id=None, dept_city=None, dept_date=None, dept_station=None,
                 dept_time=None, discount=None, exceed_reason=None, fee_type=None, flight_no=None, index=None,
                 insurance_fee=None, insurance_number=None, invoice_title=None, most_difference_dept_time=None,
                 most_difference_discount=None, most_difference_flight_no=None, most_difference_price=None, most_difference_reason=None,
                 most_price=None, negotiation_coupon_fee=None, order_id=None, order_status_desc=None, over_apply_id=None,
                 primary_id=None, project_code=None, project_name=None, refund_fee=None, refund_result=None, remark=None,
                 repeat_refund=None, seal_price=None, segment_type=None, service_fee=None, settlement_fee=None,
                 settlement_grant_fee=None, settlement_time=None, settlement_type=None, status=None, sub_order_id=None, tax_fee=None,
                 tax_rate=None, third_itinerary_id=None, ticket_id=None, trade=None, traveler_id=None, traveler_job_no=None,
                 traveler_name=None, voucher_type=None):
        self.advance_day = advance_day  # type: int
        self.airline_corp_code = airline_corp_code  # type: str
        self.airline_corp_name = airline_corp_name  # type: str
        self.alipay_trade_no = alipay_trade_no  # type: str
        self.apply_arr_city_code = apply_arr_city_code  # type: str
        self.apply_arr_city_name = apply_arr_city_name  # type: str
        self.apply_dep_city_code = apply_dep_city_code  # type: str
        self.apply_dep_city_name = apply_dep_city_name  # type: str
        # 审批扩展自定义字段
        self.apply_extend_field = apply_extend_field  # type: str
        self.apply_id = apply_id  # type: str
        self.arr_airport_code = arr_airport_code  # type: str
        self.arr_city = arr_city  # type: str
        self.arr_city_code = arr_city_code  # type: str
        self.arr_date = arr_date  # type: str
        self.arr_station = arr_station  # type: str
        self.arr_time = arr_time  # type: str
        self.bill_record_time = bill_record_time  # type: str
        self.book_mode = book_mode  # type: str
        self.book_time = book_time  # type: str
        self.booker_id = booker_id  # type: str
        self.booker_job_no = booker_job_no  # type: str
        self.booker_name = booker_name  # type: str
        self.btrip_coupon_fee = btrip_coupon_fee  # type: float
        self.business_trip_result = business_trip_result  # type: str
        self.cabin = cabin  # type: str
        self.cabin_class = cabin_class  # type: str
        self.capital_direction = capital_direction  # type: str
        self.cascade_department = cascade_department  # type: str
        self.change_fee = change_fee  # type: float
        self.change_result = change_result  # type: str
        self.corp_pay_order_fee = corp_pay_order_fee  # type: float
        self.cost_center = cost_center  # type: str
        self.cost_center_number = cost_center_number  # type: str
        self.coupon = coupon  # type: float
        self.dep_airport_code = dep_airport_code  # type: str
        self.dep_city_code = dep_city_code  # type: str
        self.department = department  # type: str
        self.department_id = department_id  # type: str
        self.dept_city = dept_city  # type: str
        self.dept_date = dept_date  # type: str
        self.dept_station = dept_station  # type: str
        self.dept_time = dept_time  # type: str
        self.discount = discount  # type: str
        self.exceed_reason = exceed_reason  # type: str
        self.fee_type = fee_type  # type: str
        self.flight_no = flight_no  # type: str
        self.index = index  # type: str
        self.insurance_fee = insurance_fee  # type: float
        self.insurance_number = insurance_number  # type: str
        self.invoice_title = invoice_title  # type: str
        self.most_difference_dept_time = most_difference_dept_time  # type: str
        self.most_difference_discount = most_difference_discount  # type: str
        self.most_difference_flight_no = most_difference_flight_no  # type: str
        self.most_difference_price = most_difference_price  # type: float
        self.most_difference_reason = most_difference_reason  # type: str
        self.most_price = most_price  # type: float
        self.negotiation_coupon_fee = negotiation_coupon_fee  # type: float
        self.order_id = order_id  # type: str
        self.order_status_desc = order_status_desc  # type: str
        self.over_apply_id = over_apply_id  # type: str
        self.primary_id = primary_id  # type: long
        self.project_code = project_code  # type: str
        self.project_name = project_name  # type: str
        self.refund_fee = refund_fee  # type: float
        self.refund_result = refund_result  # type: str
        self.remark = remark  # type: str
        self.repeat_refund = repeat_refund  # type: str
        self.seal_price = seal_price  # type: float
        self.segment_type = segment_type  # type: str
        self.service_fee = service_fee  # type: float
        self.settlement_fee = settlement_fee  # type: float
        self.settlement_grant_fee = settlement_grant_fee  # type: float
        self.settlement_time = settlement_time  # type: str
        self.settlement_type = settlement_type  # type: str
        self.status = status  # type: int
        self.sub_order_id = sub_order_id  # type: str
        self.tax_fee = tax_fee  # type: float
        # 税率
        self.tax_rate = tax_rate  # type: str
        self.third_itinerary_id = third_itinerary_id  # type: str
        self.ticket_id = ticket_id  # type: str
        self.trade = trade  # type: str
        self.traveler_id = traveler_id  # type: str
        self.traveler_job_no = traveler_job_no  # type: str
        self.traveler_name = traveler_name  # type: str
        self.voucher_type = voucher_type  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(IeFlightBillSettlementQueryResponseBodyModuleDataList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.advance_day is not None:
            result['advance_day'] = self.advance_day
        if self.airline_corp_code is not None:
            result['airline_corp_code'] = self.airline_corp_code
        if self.airline_corp_name is not None:
            result['airline_corp_name'] = self.airline_corp_name
        if self.alipay_trade_no is not None:
            result['alipay_trade_no'] = self.alipay_trade_no
        if self.apply_arr_city_code is not None:
            result['apply_arr_city_code'] = self.apply_arr_city_code
        if self.apply_arr_city_name is not None:
            result['apply_arr_city_name'] = self.apply_arr_city_name
        if self.apply_dep_city_code is not None:
            result['apply_dep_city_code'] = self.apply_dep_city_code
        if self.apply_dep_city_name is not None:
            result['apply_dep_city_name'] = self.apply_dep_city_name
        if self.apply_extend_field is not None:
            result['apply_extend_field'] = self.apply_extend_field
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.arr_airport_code is not None:
            result['arr_airport_code'] = self.arr_airport_code
        if self.arr_city is not None:
            result['arr_city'] = self.arr_city
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.arr_date is not None:
            result['arr_date'] = self.arr_date
        if self.arr_station is not None:
            result['arr_station'] = self.arr_station
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.bill_record_time is not None:
            result['bill_record_time'] = self.bill_record_time
        if self.book_mode is not None:
            result['book_mode'] = self.book_mode
        if self.book_time is not None:
            result['book_time'] = self.book_time
        if self.booker_id is not None:
            result['booker_id'] = self.booker_id
        if self.booker_job_no is not None:
            result['booker_job_no'] = self.booker_job_no
        if self.booker_name is not None:
            result['booker_name'] = self.booker_name
        if self.btrip_coupon_fee is not None:
            result['btrip_coupon_fee'] = self.btrip_coupon_fee
        if self.business_trip_result is not None:
            result['business_trip_result'] = self.business_trip_result
        if self.cabin is not None:
            result['cabin'] = self.cabin
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.capital_direction is not None:
            result['capital_direction'] = self.capital_direction
        if self.cascade_department is not None:
            result['cascade_department'] = self.cascade_department
        if self.change_fee is not None:
            result['change_fee'] = self.change_fee
        if self.change_result is not None:
            result['change_result'] = self.change_result
        if self.corp_pay_order_fee is not None:
            result['corp_pay_order_fee'] = self.corp_pay_order_fee
        if self.cost_center is not None:
            result['cost_center'] = self.cost_center
        if self.cost_center_number is not None:
            result['cost_center_number'] = self.cost_center_number
        if self.coupon is not None:
            result['coupon'] = self.coupon
        if self.dep_airport_code is not None:
            result['dep_airport_code'] = self.dep_airport_code
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.department is not None:
            result['department'] = self.department
        if self.department_id is not None:
            result['department_id'] = self.department_id
        if self.dept_city is not None:
            result['dept_city'] = self.dept_city
        if self.dept_date is not None:
            result['dept_date'] = self.dept_date
        if self.dept_station is not None:
            result['dept_station'] = self.dept_station
        if self.dept_time is not None:
            result['dept_time'] = self.dept_time
        if self.discount is not None:
            result['discount'] = self.discount
        if self.exceed_reason is not None:
            result['exceed_reason'] = self.exceed_reason
        if self.fee_type is not None:
            result['fee_type'] = self.fee_type
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        if self.index is not None:
            result['index'] = self.index
        if self.insurance_fee is not None:
            result['insurance_fee'] = self.insurance_fee
        if self.insurance_number is not None:
            result['insurance_number'] = self.insurance_number
        if self.invoice_title is not None:
            result['invoice_title'] = self.invoice_title
        if self.most_difference_dept_time is not None:
            result['most_difference_dept_time'] = self.most_difference_dept_time
        if self.most_difference_discount is not None:
            result['most_difference_discount'] = self.most_difference_discount
        if self.most_difference_flight_no is not None:
            result['most_difference_flight_no'] = self.most_difference_flight_no
        if self.most_difference_price is not None:
            result['most_difference_price'] = self.most_difference_price
        if self.most_difference_reason is not None:
            result['most_difference_reason'] = self.most_difference_reason
        if self.most_price is not None:
            result['most_price'] = self.most_price
        if self.negotiation_coupon_fee is not None:
            result['negotiation_coupon_fee'] = self.negotiation_coupon_fee
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.order_status_desc is not None:
            result['order_status_desc'] = self.order_status_desc
        if self.over_apply_id is not None:
            result['over_apply_id'] = self.over_apply_id
        if self.primary_id is not None:
            result['primary_id'] = self.primary_id
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_name is not None:
            result['project_name'] = self.project_name
        if self.refund_fee is not None:
            result['refund_fee'] = self.refund_fee
        if self.refund_result is not None:
            result['refund_result'] = self.refund_result
        if self.remark is not None:
            result['remark'] = self.remark
        if self.repeat_refund is not None:
            result['repeat_refund'] = self.repeat_refund
        if self.seal_price is not None:
            result['seal_price'] = self.seal_price
        if self.segment_type is not None:
            result['segment_type'] = self.segment_type
        if self.service_fee is not None:
            result['service_fee'] = self.service_fee
        if self.settlement_fee is not None:
            result['settlement_fee'] = self.settlement_fee
        if self.settlement_grant_fee is not None:
            result['settlement_grant_fee'] = self.settlement_grant_fee
        if self.settlement_time is not None:
            result['settlement_time'] = self.settlement_time
        if self.settlement_type is not None:
            result['settlement_type'] = self.settlement_type
        if self.status is not None:
            result['status'] = self.status
        if self.sub_order_id is not None:
            result['sub_order_id'] = self.sub_order_id
        if self.tax_fee is not None:
            result['tax_fee'] = self.tax_fee
        if self.tax_rate is not None:
            result['tax_rate'] = self.tax_rate
        if self.third_itinerary_id is not None:
            result['third_itinerary_id'] = self.third_itinerary_id
        if self.ticket_id is not None:
            result['ticket_id'] = self.ticket_id
        if self.trade is not None:
            result['trade'] = self.trade
        if self.traveler_id is not None:
            result['traveler_id'] = self.traveler_id
        if self.traveler_job_no is not None:
            result['traveler_job_no'] = self.traveler_job_no
        if self.traveler_name is not None:
            result['traveler_name'] = self.traveler_name
        if self.voucher_type is not None:
            result['voucher_type'] = self.voucher_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('advance_day') is not None:
            self.advance_day = m.get('advance_day')
        if m.get('airline_corp_code') is not None:
            self.airline_corp_code = m.get('airline_corp_code')
        if m.get('airline_corp_name') is not None:
            self.airline_corp_name = m.get('airline_corp_name')
        if m.get('alipay_trade_no') is not None:
            self.alipay_trade_no = m.get('alipay_trade_no')
        if m.get('apply_arr_city_code') is not None:
            self.apply_arr_city_code = m.get('apply_arr_city_code')
        if m.get('apply_arr_city_name') is not None:
            self.apply_arr_city_name = m.get('apply_arr_city_name')
        if m.get('apply_dep_city_code') is not None:
            self.apply_dep_city_code = m.get('apply_dep_city_code')
        if m.get('apply_dep_city_name') is not None:
            self.apply_dep_city_name = m.get('apply_dep_city_name')
        if m.get('apply_extend_field') is not None:
            self.apply_extend_field = m.get('apply_extend_field')
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('arr_airport_code') is not None:
            self.arr_airport_code = m.get('arr_airport_code')
        if m.get('arr_city') is not None:
            self.arr_city = m.get('arr_city')
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('arr_date') is not None:
            self.arr_date = m.get('arr_date')
        if m.get('arr_station') is not None:
            self.arr_station = m.get('arr_station')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('bill_record_time') is not None:
            self.bill_record_time = m.get('bill_record_time')
        if m.get('book_mode') is not None:
            self.book_mode = m.get('book_mode')
        if m.get('book_time') is not None:
            self.book_time = m.get('book_time')
        if m.get('booker_id') is not None:
            self.booker_id = m.get('booker_id')
        if m.get('booker_job_no') is not None:
            self.booker_job_no = m.get('booker_job_no')
        if m.get('booker_name') is not None:
            self.booker_name = m.get('booker_name')
        if m.get('btrip_coupon_fee') is not None:
            self.btrip_coupon_fee = m.get('btrip_coupon_fee')
        if m.get('business_trip_result') is not None:
            self.business_trip_result = m.get('business_trip_result')
        if m.get('cabin') is not None:
            self.cabin = m.get('cabin')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('capital_direction') is not None:
            self.capital_direction = m.get('capital_direction')
        if m.get('cascade_department') is not None:
            self.cascade_department = m.get('cascade_department')
        if m.get('change_fee') is not None:
            self.change_fee = m.get('change_fee')
        if m.get('change_result') is not None:
            self.change_result = m.get('change_result')
        if m.get('corp_pay_order_fee') is not None:
            self.corp_pay_order_fee = m.get('corp_pay_order_fee')
        if m.get('cost_center') is not None:
            self.cost_center = m.get('cost_center')
        if m.get('cost_center_number') is not None:
            self.cost_center_number = m.get('cost_center_number')
        if m.get('coupon') is not None:
            self.coupon = m.get('coupon')
        if m.get('dep_airport_code') is not None:
            self.dep_airport_code = m.get('dep_airport_code')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('department') is not None:
            self.department = m.get('department')
        if m.get('department_id') is not None:
            self.department_id = m.get('department_id')
        if m.get('dept_city') is not None:
            self.dept_city = m.get('dept_city')
        if m.get('dept_date') is not None:
            self.dept_date = m.get('dept_date')
        if m.get('dept_station') is not None:
            self.dept_station = m.get('dept_station')
        if m.get('dept_time') is not None:
            self.dept_time = m.get('dept_time')
        if m.get('discount') is not None:
            self.discount = m.get('discount')
        if m.get('exceed_reason') is not None:
            self.exceed_reason = m.get('exceed_reason')
        if m.get('fee_type') is not None:
            self.fee_type = m.get('fee_type')
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        if m.get('index') is not None:
            self.index = m.get('index')
        if m.get('insurance_fee') is not None:
            self.insurance_fee = m.get('insurance_fee')
        if m.get('insurance_number') is not None:
            self.insurance_number = m.get('insurance_number')
        if m.get('invoice_title') is not None:
            self.invoice_title = m.get('invoice_title')
        if m.get('most_difference_dept_time') is not None:
            self.most_difference_dept_time = m.get('most_difference_dept_time')
        if m.get('most_difference_discount') is not None:
            self.most_difference_discount = m.get('most_difference_discount')
        if m.get('most_difference_flight_no') is not None:
            self.most_difference_flight_no = m.get('most_difference_flight_no')
        if m.get('most_difference_price') is not None:
            self.most_difference_price = m.get('most_difference_price')
        if m.get('most_difference_reason') is not None:
            self.most_difference_reason = m.get('most_difference_reason')
        if m.get('most_price') is not None:
            self.most_price = m.get('most_price')
        if m.get('negotiation_coupon_fee') is not None:
            self.negotiation_coupon_fee = m.get('negotiation_coupon_fee')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('order_status_desc') is not None:
            self.order_status_desc = m.get('order_status_desc')
        if m.get('over_apply_id') is not None:
            self.over_apply_id = m.get('over_apply_id')
        if m.get('primary_id') is not None:
            self.primary_id = m.get('primary_id')
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_name') is not None:
            self.project_name = m.get('project_name')
        if m.get('refund_fee') is not None:
            self.refund_fee = m.get('refund_fee')
        if m.get('refund_result') is not None:
            self.refund_result = m.get('refund_result')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('repeat_refund') is not None:
            self.repeat_refund = m.get('repeat_refund')
        if m.get('seal_price') is not None:
            self.seal_price = m.get('seal_price')
        if m.get('segment_type') is not None:
            self.segment_type = m.get('segment_type')
        if m.get('service_fee') is not None:
            self.service_fee = m.get('service_fee')
        if m.get('settlement_fee') is not None:
            self.settlement_fee = m.get('settlement_fee')
        if m.get('settlement_grant_fee') is not None:
            self.settlement_grant_fee = m.get('settlement_grant_fee')
        if m.get('settlement_time') is not None:
            self.settlement_time = m.get('settlement_time')
        if m.get('settlement_type') is not None:
            self.settlement_type = m.get('settlement_type')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('sub_order_id') is not None:
            self.sub_order_id = m.get('sub_order_id')
        if m.get('tax_fee') is not None:
            self.tax_fee = m.get('tax_fee')
        if m.get('tax_rate') is not None:
            self.tax_rate = m.get('tax_rate')
        if m.get('third_itinerary_id') is not None:
            self.third_itinerary_id = m.get('third_itinerary_id')
        if m.get('ticket_id') is not None:
            self.ticket_id = m.get('ticket_id')
        if m.get('trade') is not None:
            self.trade = m.get('trade')
        if m.get('traveler_id') is not None:
            self.traveler_id = m.get('traveler_id')
        if m.get('traveler_job_no') is not None:
            self.traveler_job_no = m.get('traveler_job_no')
        if m.get('traveler_name') is not None:
            self.traveler_name = m.get('traveler_name')
        if m.get('voucher_type') is not None:
            self.voucher_type = m.get('voucher_type')
        return self


class IeFlightBillSettlementQueryResponseBodyModule(TeaModel):
    def __init__(self, category=None, corp_id=None, data_list=None, period_end=None, period_start=None,
                 total_num=None):
        self.category = category  # type: int
        self.corp_id = corp_id  # type: str
        self.data_list = data_list  # type: list[IeFlightBillSettlementQueryResponseBodyModuleDataList]
        self.period_end = period_end  # type: str
        self.period_start = period_start  # type: str
        self.total_num = total_num  # type: long

    def validate(self):
        if self.data_list:
            for k in self.data_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(IeFlightBillSettlementQueryResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['category'] = self.category
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        result['data_list'] = []
        if self.data_list is not None:
            for k in self.data_list:
                result['data_list'].append(k.to_map() if k else None)
        if self.period_end is not None:
            result['period_end'] = self.period_end
        if self.period_start is not None:
            result['period_start'] = self.period_start
        if self.total_num is not None:
            result['total_num'] = self.total_num
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('category') is not None:
            self.category = m.get('category')
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        self.data_list = []
        if m.get('data_list') is not None:
            for k in m.get('data_list'):
                temp_model = IeFlightBillSettlementQueryResponseBodyModuleDataList()
                self.data_list.append(temp_model.from_map(k))
        if m.get('period_end') is not None:
            self.period_end = m.get('period_end')
        if m.get('period_start') is not None:
            self.period_start = m.get('period_start')
        if m.get('total_num') is not None:
            self.total_num = m.get('total_num')
        return self


class IeFlightBillSettlementQueryResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, more_page=None, request_id=None, success=None,
                 trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: IeFlightBillSettlementQueryResponseBodyModule
        self.more_page = more_page  # type: bool
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(IeFlightBillSettlementQueryResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.more_page is not None:
            result['more_page'] = self.more_page
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = IeFlightBillSettlementQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('more_page') is not None:
            self.more_page = m.get('more_page')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class IeFlightBillSettlementQueryResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: IeFlightBillSettlementQueryResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(IeFlightBillSettlementQueryResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = IeFlightBillSettlementQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InsInvoiceScanQueryHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_so_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(InsInvoiceScanQueryHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class InsInvoiceScanQueryRequest(TeaModel):
    def __init__(self, bill_date=None, bill_id=None, invoice_sub_task_id=None, page_no=None, page_size=None):
        self.bill_date = bill_date  # type: str
        self.bill_id = bill_id  # type: long
        self.invoice_sub_task_id = invoice_sub_task_id  # type: long
        self.page_no = page_no  # type: int
        self.page_size = page_size  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(InsInvoiceScanQueryRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bill_date is not None:
            result['bill_date'] = self.bill_date
        if self.bill_id is not None:
            result['bill_id'] = self.bill_id
        if self.invoice_sub_task_id is not None:
            result['invoice_sub_task_id'] = self.invoice_sub_task_id
        if self.page_no is not None:
            result['page_no'] = self.page_no
        if self.page_size is not None:
            result['page_size'] = self.page_size
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('bill_date') is not None:
            self.bill_date = m.get('bill_date')
        if m.get('bill_id') is not None:
            self.bill_id = m.get('bill_id')
        if m.get('invoice_sub_task_id') is not None:
            self.invoice_sub_task_id = m.get('invoice_sub_task_id')
        if m.get('page_no') is not None:
            self.page_no = m.get('page_no')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        return self


class InsInvoiceScanQueryResponseBodyModuleItemsInvoiceDetails(TeaModel):
    def __init__(self, amount=None, index=None, item_name=None, quantity=None, specification=None, tax=None,
                 tax_rate=None, unit=None, unit_price=None):
        # 金额
        self.amount = amount  # type: str
        # 行号
        self.index = index  # type: str
        # 货物或应税劳务、服务名称
        self.item_name = item_name  # type: str
        # 数量
        self.quantity = quantity  # type: str
        # 规格型号
        self.specification = specification  # type: str
        # 税额
        self.tax = tax  # type: str
        # 税率
        self.tax_rate = tax_rate  # type: str
        # 单位
        self.unit = unit  # type: str
        # 单价
        self.unit_price = unit_price  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(InsInvoiceScanQueryResponseBodyModuleItemsInvoiceDetails, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.amount is not None:
            result['amount'] = self.amount
        if self.index is not None:
            result['index'] = self.index
        if self.item_name is not None:
            result['item_name'] = self.item_name
        if self.quantity is not None:
            result['quantity'] = self.quantity
        if self.specification is not None:
            result['specification'] = self.specification
        if self.tax is not None:
            result['tax'] = self.tax
        if self.tax_rate is not None:
            result['tax_rate'] = self.tax_rate
        if self.unit is not None:
            result['unit'] = self.unit
        if self.unit_price is not None:
            result['unit_price'] = self.unit_price
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('amount') is not None:
            self.amount = m.get('amount')
        if m.get('index') is not None:
            self.index = m.get('index')
        if m.get('item_name') is not None:
            self.item_name = m.get('item_name')
        if m.get('quantity') is not None:
            self.quantity = m.get('quantity')
        if m.get('specification') is not None:
            self.specification = m.get('specification')
        if m.get('tax') is not None:
            self.tax = m.get('tax')
        if m.get('tax_rate') is not None:
            self.tax_rate = m.get('tax_rate')
        if m.get('unit') is not None:
            self.unit = m.get('unit')
        if m.get('unit_price') is not None:
            self.unit_price = m.get('unit_price')
        return self


class InsInvoiceScanQueryResponseBodyModuleItems(TeaModel):
    def __init__(self, amount_with_tax=None, amount_without_tax=None, bill_date=None, check_code=None,
                 cost_center=None, department=None, drawer=None, id=None, insurance_company=None, insurance_order_id=None,
                 insurance_type=None, invoice_code=None, invoice_day=None, invoice_details=None, invoice_location=None,
                 invoice_no=None, invoice_title=None, machine_code=None, order_id=None, oss_url=None, passenger=None,
                 password_area=None, project=None, purchaser_bank_account_info=None, purchaser_contact_info=None,
                 purchaser_name=None, purchaser_tax_no=None, recipient=None, remarks=None, reviewer=None,
                 seller_bank_account_info=None, seller_contact_info=None, seller_name=None, seller_tax_no=None, smart_check_code=None,
                 tax_amount=None, tax_rate=None, total_amount_in_words=None):
        self.amount_with_tax = amount_with_tax  # type: str
        self.amount_without_tax = amount_without_tax  # type: str
        self.bill_date = bill_date  # type: str
        # 校验码
        self.check_code = check_code  # type: str
        self.cost_center = cost_center  # type: str
        self.department = department  # type: str
        # 开票人
        self.drawer = drawer  # type: str
        # 应用ID
        self.id = id  # type: str
        self.insurance_company = insurance_company  # type: str
        self.insurance_order_id = insurance_order_id  # type: str
        self.insurance_type = insurance_type  # type: str
        self.invoice_code = invoice_code  # type: str
        self.invoice_day = invoice_day  # type: str
        # 发票明细
        self.invoice_details = invoice_details  # type: list[InsInvoiceScanQueryResponseBodyModuleItemsInvoiceDetails]
        # 发票地区
        self.invoice_location = invoice_location  # type: str
        self.invoice_no = invoice_no  # type: str
        # 发票抬头
        self.invoice_title = invoice_title  # type: str
        # 机器码
        self.machine_code = machine_code  # type: str
        self.order_id = order_id  # type: long
        self.oss_url = oss_url  # type: str
        self.passenger = passenger  # type: str
        # 密码区
        self.password_area = password_area  # type: str
        self.project = project  # type: str
        # 购方银行信息
        self.purchaser_bank_account_info = purchaser_bank_account_info  # type: str
        # 购方联系方式
        self.purchaser_contact_info = purchaser_contact_info  # type: str
        self.purchaser_name = purchaser_name  # type: str
        self.purchaser_tax_no = purchaser_tax_no  # type: str
        # 收款人
        self.recipient = recipient  # type: str
        # 备注
        self.remarks = remarks  # type: str
        # 复核人
        self.reviewer = reviewer  # type: str
        # 销售方银行信息
        self.seller_bank_account_info = seller_bank_account_info  # type: str
        # 销售方联系方式
        self.seller_contact_info = seller_contact_info  # type: str
        self.seller_name = seller_name  # type: str
        self.seller_tax_no = seller_tax_no  # type: str
        # 校验码
        self.smart_check_code = smart_check_code  # type: str
        self.tax_amount = tax_amount  # type: str
        self.tax_rate = tax_rate  # type: str
        # 大写金额
        self.total_amount_in_words = total_amount_in_words  # type: str

    def validate(self):
        if self.invoice_details:
            for k in self.invoice_details:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(InsInvoiceScanQueryResponseBodyModuleItems, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.amount_with_tax is not None:
            result['amount_with_tax'] = self.amount_with_tax
        if self.amount_without_tax is not None:
            result['amount_without_tax'] = self.amount_without_tax
        if self.bill_date is not None:
            result['bill_date'] = self.bill_date
        if self.check_code is not None:
            result['check_code'] = self.check_code
        if self.cost_center is not None:
            result['cost_center'] = self.cost_center
        if self.department is not None:
            result['department'] = self.department
        if self.drawer is not None:
            result['drawer'] = self.drawer
        if self.id is not None:
            result['id'] = self.id
        if self.insurance_company is not None:
            result['insurance_company'] = self.insurance_company
        if self.insurance_order_id is not None:
            result['insurance_order_id'] = self.insurance_order_id
        if self.insurance_type is not None:
            result['insurance_type'] = self.insurance_type
        if self.invoice_code is not None:
            result['invoice_code'] = self.invoice_code
        if self.invoice_day is not None:
            result['invoice_day'] = self.invoice_day
        result['invoice_details'] = []
        if self.invoice_details is not None:
            for k in self.invoice_details:
                result['invoice_details'].append(k.to_map() if k else None)
        if self.invoice_location is not None:
            result['invoice_location'] = self.invoice_location
        if self.invoice_no is not None:
            result['invoice_no'] = self.invoice_no
        if self.invoice_title is not None:
            result['invoice_title'] = self.invoice_title
        if self.machine_code is not None:
            result['machine_code'] = self.machine_code
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.oss_url is not None:
            result['oss_url'] = self.oss_url
        if self.passenger is not None:
            result['passenger'] = self.passenger
        if self.password_area is not None:
            result['password_area'] = self.password_area
        if self.project is not None:
            result['project'] = self.project
        if self.purchaser_bank_account_info is not None:
            result['purchaser_bank_account_info'] = self.purchaser_bank_account_info
        if self.purchaser_contact_info is not None:
            result['purchaser_contact_info'] = self.purchaser_contact_info
        if self.purchaser_name is not None:
            result['purchaser_name'] = self.purchaser_name
        if self.purchaser_tax_no is not None:
            result['purchaser_tax_no'] = self.purchaser_tax_no
        if self.recipient is not None:
            result['recipient'] = self.recipient
        if self.remarks is not None:
            result['remarks'] = self.remarks
        if self.reviewer is not None:
            result['reviewer'] = self.reviewer
        if self.seller_bank_account_info is not None:
            result['seller_bank_account_info'] = self.seller_bank_account_info
        if self.seller_contact_info is not None:
            result['seller_contact_info'] = self.seller_contact_info
        if self.seller_name is not None:
            result['seller_name'] = self.seller_name
        if self.seller_tax_no is not None:
            result['seller_tax_no'] = self.seller_tax_no
        if self.smart_check_code is not None:
            result['smart_check_code'] = self.smart_check_code
        if self.tax_amount is not None:
            result['tax_amount'] = self.tax_amount
        if self.tax_rate is not None:
            result['tax_rate'] = self.tax_rate
        if self.total_amount_in_words is not None:
            result['total_amount_in_words'] = self.total_amount_in_words
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('amount_with_tax') is not None:
            self.amount_with_tax = m.get('amount_with_tax')
        if m.get('amount_without_tax') is not None:
            self.amount_without_tax = m.get('amount_without_tax')
        if m.get('bill_date') is not None:
            self.bill_date = m.get('bill_date')
        if m.get('check_code') is not None:
            self.check_code = m.get('check_code')
        if m.get('cost_center') is not None:
            self.cost_center = m.get('cost_center')
        if m.get('department') is not None:
            self.department = m.get('department')
        if m.get('drawer') is not None:
            self.drawer = m.get('drawer')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('insurance_company') is not None:
            self.insurance_company = m.get('insurance_company')
        if m.get('insurance_order_id') is not None:
            self.insurance_order_id = m.get('insurance_order_id')
        if m.get('insurance_type') is not None:
            self.insurance_type = m.get('insurance_type')
        if m.get('invoice_code') is not None:
            self.invoice_code = m.get('invoice_code')
        if m.get('invoice_day') is not None:
            self.invoice_day = m.get('invoice_day')
        self.invoice_details = []
        if m.get('invoice_details') is not None:
            for k in m.get('invoice_details'):
                temp_model = InsInvoiceScanQueryResponseBodyModuleItemsInvoiceDetails()
                self.invoice_details.append(temp_model.from_map(k))
        if m.get('invoice_location') is not None:
            self.invoice_location = m.get('invoice_location')
        if m.get('invoice_no') is not None:
            self.invoice_no = m.get('invoice_no')
        if m.get('invoice_title') is not None:
            self.invoice_title = m.get('invoice_title')
        if m.get('machine_code') is not None:
            self.machine_code = m.get('machine_code')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('oss_url') is not None:
            self.oss_url = m.get('oss_url')
        if m.get('passenger') is not None:
            self.passenger = m.get('passenger')
        if m.get('password_area') is not None:
            self.password_area = m.get('password_area')
        if m.get('project') is not None:
            self.project = m.get('project')
        if m.get('purchaser_bank_account_info') is not None:
            self.purchaser_bank_account_info = m.get('purchaser_bank_account_info')
        if m.get('purchaser_contact_info') is not None:
            self.purchaser_contact_info = m.get('purchaser_contact_info')
        if m.get('purchaser_name') is not None:
            self.purchaser_name = m.get('purchaser_name')
        if m.get('purchaser_tax_no') is not None:
            self.purchaser_tax_no = m.get('purchaser_tax_no')
        if m.get('recipient') is not None:
            self.recipient = m.get('recipient')
        if m.get('remarks') is not None:
            self.remarks = m.get('remarks')
        if m.get('reviewer') is not None:
            self.reviewer = m.get('reviewer')
        if m.get('seller_bank_account_info') is not None:
            self.seller_bank_account_info = m.get('seller_bank_account_info')
        if m.get('seller_contact_info') is not None:
            self.seller_contact_info = m.get('seller_contact_info')
        if m.get('seller_name') is not None:
            self.seller_name = m.get('seller_name')
        if m.get('seller_tax_no') is not None:
            self.seller_tax_no = m.get('seller_tax_no')
        if m.get('smart_check_code') is not None:
            self.smart_check_code = m.get('smart_check_code')
        if m.get('tax_amount') is not None:
            self.tax_amount = m.get('tax_amount')
        if m.get('tax_rate') is not None:
            self.tax_rate = m.get('tax_rate')
        if m.get('total_amount_in_words') is not None:
            self.total_amount_in_words = m.get('total_amount_in_words')
        return self


class InsInvoiceScanQueryResponseBodyModule(TeaModel):
    def __init__(self, items=None, page_no=None, page_size=None, total_page=None, total_size=None):
        self.items = items  # type: list[InsInvoiceScanQueryResponseBodyModuleItems]
        self.page_no = page_no  # type: int
        self.page_size = page_size  # type: int
        self.total_page = total_page  # type: int
        self.total_size = total_size  # type: int

    def validate(self):
        if self.items:
            for k in self.items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(InsInvoiceScanQueryResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['items'] = []
        if self.items is not None:
            for k in self.items:
                result['items'].append(k.to_map() if k else None)
        if self.page_no is not None:
            result['page_no'] = self.page_no
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.total_page is not None:
            result['total_page'] = self.total_page
        if self.total_size is not None:
            result['total_size'] = self.total_size
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.items = []
        if m.get('items') is not None:
            for k in m.get('items'):
                temp_model = InsInvoiceScanQueryResponseBodyModuleItems()
                self.items.append(temp_model.from_map(k))
        if m.get('page_no') is not None:
            self.page_no = m.get('page_no')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('total_page') is not None:
            self.total_page = m.get('total_page')
        if m.get('total_size') is not None:
            self.total_size = m.get('total_size')
        return self


class InsInvoiceScanQueryResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: InsInvoiceScanQueryResponseBodyModule
        # requestId
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        # traceId
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(InsInvoiceScanQueryResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = InsInvoiceScanQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class InsInvoiceScanQueryResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: InsInvoiceScanQueryResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(InsInvoiceScanQueryResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = InsInvoiceScanQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InvoiceAddHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_so_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(InvoiceAddHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class InvoiceAddRequest(TeaModel):
    def __init__(self, address=None, bank_name=None, bank_no=None, tax_no=None, tel=None, third_part_id=None,
                 title=None, type=None, unit_type=None):
        self.address = address  # type: str
        self.bank_name = bank_name  # type: str
        self.bank_no = bank_no  # type: str
        self.tax_no = tax_no  # type: str
        self.tel = tel  # type: str
        self.third_part_id = third_part_id  # type: str
        self.title = title  # type: str
        self.type = type  # type: int
        self.unit_type = unit_type  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(InvoiceAddRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.address is not None:
            result['address'] = self.address
        if self.bank_name is not None:
            result['bank_name'] = self.bank_name
        if self.bank_no is not None:
            result['bank_no'] = self.bank_no
        if self.tax_no is not None:
            result['tax_no'] = self.tax_no
        if self.tel is not None:
            result['tel'] = self.tel
        if self.third_part_id is not None:
            result['third_part_id'] = self.third_part_id
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        if self.unit_type is not None:
            result['unit_type'] = self.unit_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('address') is not None:
            self.address = m.get('address')
        if m.get('bank_name') is not None:
            self.bank_name = m.get('bank_name')
        if m.get('bank_no') is not None:
            self.bank_no = m.get('bank_no')
        if m.get('tax_no') is not None:
            self.tax_no = m.get('tax_no')
        if m.get('tel') is not None:
            self.tel = m.get('tel')
        if m.get('third_part_id') is not None:
            self.third_part_id = m.get('third_part_id')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('unit_type') is not None:
            self.unit_type = m.get('unit_type')
        return self


class InvoiceAddResponseBody(TeaModel):
    def __init__(self, code=None, message=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        # traceId
        self.trace_id = trace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(InvoiceAddResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class InvoiceAddResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: InvoiceAddResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(InvoiceAddResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = InvoiceAddResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InvoiceDeleteHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_so_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(InvoiceDeleteHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class InvoiceDeleteRequest(TeaModel):
    def __init__(self, third_part_id=None):
        self.third_part_id = third_part_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(InvoiceDeleteRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.third_part_id is not None:
            result['third_part_id'] = self.third_part_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('third_part_id') is not None:
            self.third_part_id = m.get('third_part_id')
        return self


class InvoiceDeleteResponseBody(TeaModel):
    def __init__(self, code=None, message=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        # traceId
        self.trace_id = trace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(InvoiceDeleteResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class InvoiceDeleteResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: InvoiceDeleteResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(InvoiceDeleteResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = InvoiceDeleteResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InvoiceModifyHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_so_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(InvoiceModifyHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class InvoiceModifyRequest(TeaModel):
    def __init__(self, address=None, bank_name=None, bank_no=None, tax_no=None, tel=None, third_part_id=None,
                 title=None, type=None, unit_type=None):
        self.address = address  # type: str
        self.bank_name = bank_name  # type: str
        self.bank_no = bank_no  # type: str
        self.tax_no = tax_no  # type: str
        self.tel = tel  # type: str
        self.third_part_id = third_part_id  # type: str
        self.title = title  # type: str
        self.type = type  # type: int
        self.unit_type = unit_type  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(InvoiceModifyRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.address is not None:
            result['address'] = self.address
        if self.bank_name is not None:
            result['bank_name'] = self.bank_name
        if self.bank_no is not None:
            result['bank_no'] = self.bank_no
        if self.tax_no is not None:
            result['tax_no'] = self.tax_no
        if self.tel is not None:
            result['tel'] = self.tel
        if self.third_part_id is not None:
            result['third_part_id'] = self.third_part_id
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        if self.unit_type is not None:
            result['unit_type'] = self.unit_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('address') is not None:
            self.address = m.get('address')
        if m.get('bank_name') is not None:
            self.bank_name = m.get('bank_name')
        if m.get('bank_no') is not None:
            self.bank_no = m.get('bank_no')
        if m.get('tax_no') is not None:
            self.tax_no = m.get('tax_no')
        if m.get('tel') is not None:
            self.tel = m.get('tel')
        if m.get('third_part_id') is not None:
            self.third_part_id = m.get('third_part_id')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('unit_type') is not None:
            self.unit_type = m.get('unit_type')
        return self


class InvoiceModifyResponseBody(TeaModel):
    def __init__(self, code=None, message=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        # traceId
        self.trace_id = trace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(InvoiceModifyResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class InvoiceModifyResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: InvoiceModifyResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(InvoiceModifyResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = InvoiceModifyResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InvoiceRuleAddHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(InvoiceRuleAddHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class InvoiceRuleAddRequestEntities(TeaModel):
    def __init__(self, entity_id=None, entity_name=None, entity_type=None):
        self.entity_id = entity_id  # type: str
        self.entity_name = entity_name  # type: str
        self.entity_type = entity_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(InvoiceRuleAddRequestEntities, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.entity_id is not None:
            result['entity_id'] = self.entity_id
        if self.entity_name is not None:
            result['entity_name'] = self.entity_name
        if self.entity_type is not None:
            result['entity_type'] = self.entity_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('entity_id') is not None:
            self.entity_id = m.get('entity_id')
        if m.get('entity_name') is not None:
            self.entity_name = m.get('entity_name')
        if m.get('entity_type') is not None:
            self.entity_type = m.get('entity_type')
        return self


class InvoiceRuleAddRequest(TeaModel):
    def __init__(self, entities=None, third_part_id=None):
        self.entities = entities  # type: list[InvoiceRuleAddRequestEntities]
        self.third_part_id = third_part_id  # type: str

    def validate(self):
        if self.entities:
            for k in self.entities:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(InvoiceRuleAddRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['entities'] = []
        if self.entities is not None:
            for k in self.entities:
                result['entities'].append(k.to_map() if k else None)
        if self.third_part_id is not None:
            result['third_part_id'] = self.third_part_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.entities = []
        if m.get('entities') is not None:
            for k in m.get('entities'):
                temp_model = InvoiceRuleAddRequestEntities()
                self.entities.append(temp_model.from_map(k))
        if m.get('third_part_id') is not None:
            self.third_part_id = m.get('third_part_id')
        return self


class InvoiceRuleAddShrinkRequest(TeaModel):
    def __init__(self, entities_shrink=None, third_part_id=None):
        self.entities_shrink = entities_shrink  # type: str
        self.third_part_id = third_part_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(InvoiceRuleAddShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.entities_shrink is not None:
            result['entities'] = self.entities_shrink
        if self.third_part_id is not None:
            result['third_part_id'] = self.third_part_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('entities') is not None:
            self.entities_shrink = m.get('entities')
        if m.get('third_part_id') is not None:
            self.third_part_id = m.get('third_part_id')
        return self


class InvoiceRuleAddResponseBodyModule(TeaModel):
    def __init__(self, add_num=None, selected_user_num=None):
        self.add_num = add_num  # type: int
        self.selected_user_num = selected_user_num  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(InvoiceRuleAddResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.add_num is not None:
            result['add_num'] = self.add_num
        if self.selected_user_num is not None:
            result['selected_user_num'] = self.selected_user_num
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('add_num') is not None:
            self.add_num = m.get('add_num')
        if m.get('selected_user_num') is not None:
            self.selected_user_num = m.get('selected_user_num')
        return self


class InvoiceRuleAddResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: InvoiceRuleAddResponseBodyModule
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        # traceId
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(InvoiceRuleAddResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = InvoiceRuleAddResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class InvoiceRuleAddResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: InvoiceRuleAddResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(InvoiceRuleAddResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = InvoiceRuleAddResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InvoiceRuleDeleteHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(InvoiceRuleDeleteHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class InvoiceRuleDeleteRequestEntities(TeaModel):
    def __init__(self, entity_id=None, entity_type=None):
        self.entity_id = entity_id  # type: str
        self.entity_type = entity_type  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(InvoiceRuleDeleteRequestEntities, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.entity_id is not None:
            result['entity_id'] = self.entity_id
        if self.entity_type is not None:
            result['entity_type'] = self.entity_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('entity_id') is not None:
            self.entity_id = m.get('entity_id')
        if m.get('entity_type') is not None:
            self.entity_type = m.get('entity_type')
        return self


class InvoiceRuleDeleteRequest(TeaModel):
    def __init__(self, del_all=None, entities=None, third_part_id=None):
        self.del_all = del_all  # type: bool
        self.entities = entities  # type: list[InvoiceRuleDeleteRequestEntities]
        self.third_part_id = third_part_id  # type: str

    def validate(self):
        if self.entities:
            for k in self.entities:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(InvoiceRuleDeleteRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.del_all is not None:
            result['del_all'] = self.del_all
        result['entities'] = []
        if self.entities is not None:
            for k in self.entities:
                result['entities'].append(k.to_map() if k else None)
        if self.third_part_id is not None:
            result['third_part_id'] = self.third_part_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('del_all') is not None:
            self.del_all = m.get('del_all')
        self.entities = []
        if m.get('entities') is not None:
            for k in m.get('entities'):
                temp_model = InvoiceRuleDeleteRequestEntities()
                self.entities.append(temp_model.from_map(k))
        if m.get('third_part_id') is not None:
            self.third_part_id = m.get('third_part_id')
        return self


class InvoiceRuleDeleteShrinkRequest(TeaModel):
    def __init__(self, del_all=None, entities_shrink=None, third_part_id=None):
        self.del_all = del_all  # type: bool
        self.entities_shrink = entities_shrink  # type: str
        self.third_part_id = third_part_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(InvoiceRuleDeleteShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.del_all is not None:
            result['del_all'] = self.del_all
        if self.entities_shrink is not None:
            result['entities'] = self.entities_shrink
        if self.third_part_id is not None:
            result['third_part_id'] = self.third_part_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('del_all') is not None:
            self.del_all = m.get('del_all')
        if m.get('entities') is not None:
            self.entities_shrink = m.get('entities')
        if m.get('third_part_id') is not None:
            self.third_part_id = m.get('third_part_id')
        return self


class InvoiceRuleDeleteResponseBodyModule(TeaModel):
    def __init__(self, remove_num=None, selected_user_num=None):
        self.remove_num = remove_num  # type: int
        self.selected_user_num = selected_user_num  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(InvoiceRuleDeleteResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.remove_num is not None:
            result['remove_num'] = self.remove_num
        if self.selected_user_num is not None:
            result['selected_user_num'] = self.selected_user_num
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('remove_num') is not None:
            self.remove_num = m.get('remove_num')
        if m.get('selected_user_num') is not None:
            self.selected_user_num = m.get('selected_user_num')
        return self


class InvoiceRuleDeleteResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: InvoiceRuleDeleteResponseBodyModule
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        # traceId
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(InvoiceRuleDeleteResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = InvoiceRuleDeleteResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class InvoiceRuleDeleteResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: InvoiceRuleDeleteResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(InvoiceRuleDeleteResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = InvoiceRuleDeleteResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InvoiceRuleSaveHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_so_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(InvoiceRuleSaveHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class InvoiceRuleSaveRequestEntities(TeaModel):
    def __init__(self, id=None, name=None, type=None):
        self.id = id  # type: str
        self.name = name  # type: str
        self.type = type  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(InvoiceRuleSaveRequestEntities, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class InvoiceRuleSaveRequest(TeaModel):
    def __init__(self, all_employe=None, entities=None, third_part_id=None):
        self.all_employe = all_employe  # type: bool
        self.entities = entities  # type: list[InvoiceRuleSaveRequestEntities]
        self.third_part_id = third_part_id  # type: str

    def validate(self):
        if self.entities:
            for k in self.entities:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(InvoiceRuleSaveRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.all_employe is not None:
            result['all_employe'] = self.all_employe
        result['entities'] = []
        if self.entities is not None:
            for k in self.entities:
                result['entities'].append(k.to_map() if k else None)
        if self.third_part_id is not None:
            result['third_part_id'] = self.third_part_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('all_employe') is not None:
            self.all_employe = m.get('all_employe')
        self.entities = []
        if m.get('entities') is not None:
            for k in m.get('entities'):
                temp_model = InvoiceRuleSaveRequestEntities()
                self.entities.append(temp_model.from_map(k))
        if m.get('third_part_id') is not None:
            self.third_part_id = m.get('third_part_id')
        return self


class InvoiceRuleSaveShrinkRequest(TeaModel):
    def __init__(self, all_employe=None, entities_shrink=None, third_part_id=None):
        self.all_employe = all_employe  # type: bool
        self.entities_shrink = entities_shrink  # type: str
        self.third_part_id = third_part_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(InvoiceRuleSaveShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.all_employe is not None:
            result['all_employe'] = self.all_employe
        if self.entities_shrink is not None:
            result['entities'] = self.entities_shrink
        if self.third_part_id is not None:
            result['third_part_id'] = self.third_part_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('all_employe') is not None:
            self.all_employe = m.get('all_employe')
        if m.get('entities') is not None:
            self.entities_shrink = m.get('entities')
        if m.get('third_part_id') is not None:
            self.third_part_id = m.get('third_part_id')
        return self


class InvoiceRuleSaveResponseBodyModule(TeaModel):
    def __init__(self, add_num=None, remove_num=None):
        self.add_num = add_num  # type: int
        self.remove_num = remove_num  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(InvoiceRuleSaveResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.add_num is not None:
            result['add_num'] = self.add_num
        if self.remove_num is not None:
            result['remove_num'] = self.remove_num
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('add_num') is not None:
            self.add_num = m.get('add_num')
        if m.get('remove_num') is not None:
            self.remove_num = m.get('remove_num')
        return self


class InvoiceRuleSaveResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: InvoiceRuleSaveResponseBodyModule
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(InvoiceRuleSaveResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = InvoiceRuleSaveResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class InvoiceRuleSaveResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: InvoiceRuleSaveResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(InvoiceRuleSaveResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = InvoiceRuleSaveResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InvoiceSearchHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_so_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(InvoiceSearchHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class InvoiceSearchRequest(TeaModel):
    def __init__(self, title=None, user_id=None):
        self.title = title  # type: str
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(InvoiceSearchRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.title is not None:
            result['title'] = self.title
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class InvoiceSearchResponseBodyModule(TeaModel):
    def __init__(self, id=None, third_part_invoice_id=None, title=None):
        # ID
        self.id = id  # type: long
        self.third_part_invoice_id = third_part_invoice_id  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(InvoiceSearchResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.third_part_invoice_id is not None:
            result['third_part_invoice_id'] = self.third_part_invoice_id
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('third_part_invoice_id') is not None:
            self.third_part_invoice_id = m.get('third_part_invoice_id')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class InvoiceSearchResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: list[InvoiceSearchResponseBodyModule]
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        # traceId
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            for k in self.module:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(InvoiceSearchResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        result['module'] = []
        if self.module is not None:
            for k in self.module:
                result['module'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        self.module = []
        if m.get('module') is not None:
            for k in m.get('module'):
                temp_model = InvoiceSearchResponseBodyModule()
                self.module.append(temp_model.from_map(k))
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class InvoiceSearchResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: InvoiceSearchResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(InvoiceSearchResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = InvoiceSearchResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class IsvRuleSaveHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_so_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(IsvRuleSaveHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class IsvRuleSaveRequestBookuserList(TeaModel):
    def __init__(self, entity_id=None, entity_type=None):
        self.entity_id = entity_id  # type: str
        self.entity_type = entity_type  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(IsvRuleSaveRequestBookuserList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.entity_id is not None:
            result['entity_id'] = self.entity_id
        if self.entity_type is not None:
            result['entity_type'] = self.entity_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('entity_id') is not None:
            self.entity_id = m.get('entity_id')
        if m.get('entity_type') is not None:
            self.entity_type = m.get('entity_type')
        return self


class IsvRuleSaveRequest(TeaModel):
    def __init__(self, book_type=None, bookuser_list=None, status=None, user_id=None):
        self.book_type = book_type  # type: str
        self.bookuser_list = bookuser_list  # type: list[IsvRuleSaveRequestBookuserList]
        self.status = status  # type: int
        self.user_id = user_id  # type: str

    def validate(self):
        if self.bookuser_list:
            for k in self.bookuser_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(IsvRuleSaveRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.book_type is not None:
            result['book_type'] = self.book_type
        result['bookuser_list'] = []
        if self.bookuser_list is not None:
            for k in self.bookuser_list:
                result['bookuser_list'].append(k.to_map() if k else None)
        if self.status is not None:
            result['status'] = self.status
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('book_type') is not None:
            self.book_type = m.get('book_type')
        self.bookuser_list = []
        if m.get('bookuser_list') is not None:
            for k in m.get('bookuser_list'):
                temp_model = IsvRuleSaveRequestBookuserList()
                self.bookuser_list.append(temp_model.from_map(k))
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class IsvRuleSaveShrinkRequest(TeaModel):
    def __init__(self, book_type=None, bookuser_list_shrink=None, status=None, user_id=None):
        self.book_type = book_type  # type: str
        self.bookuser_list_shrink = bookuser_list_shrink  # type: str
        self.status = status  # type: int
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(IsvRuleSaveShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.book_type is not None:
            result['book_type'] = self.book_type
        if self.bookuser_list_shrink is not None:
            result['bookuser_list'] = self.bookuser_list_shrink
        if self.status is not None:
            result['status'] = self.status
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('book_type') is not None:
            self.book_type = m.get('book_type')
        if m.get('bookuser_list') is not None:
            self.bookuser_list_shrink = m.get('bookuser_list')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class IsvRuleSaveResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        # module
        self.module = module  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        # traceId
        self.trace_id = trace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(IsvRuleSaveResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            self.module = m.get('module')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class IsvRuleSaveResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: IsvRuleSaveResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(IsvRuleSaveResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = IsvRuleSaveResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class IsvUserSaveHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_so_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(IsvUserSaveHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class IsvUserSaveRequestUserListCertList(TeaModel):
    def __init__(self, cert_expired_time=None, cert_nation=None, cert_no=None, cert_type=None, nationality=None):
        self.cert_expired_time = cert_expired_time  # type: str
        self.cert_nation = cert_nation  # type: str
        self.cert_no = cert_no  # type: str
        self.cert_type = cert_type  # type: int
        self.nationality = nationality  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(IsvUserSaveRequestUserListCertList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cert_expired_time is not None:
            result['cert_expired_time'] = self.cert_expired_time
        if self.cert_nation is not None:
            result['cert_nation'] = self.cert_nation
        if self.cert_no is not None:
            result['cert_no'] = self.cert_no
        if self.cert_type is not None:
            result['cert_type'] = self.cert_type
        if self.nationality is not None:
            result['nationality'] = self.nationality
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('cert_expired_time') is not None:
            self.cert_expired_time = m.get('cert_expired_time')
        if m.get('cert_nation') is not None:
            self.cert_nation = m.get('cert_nation')
        if m.get('cert_no') is not None:
            self.cert_no = m.get('cert_no')
        if m.get('cert_type') is not None:
            self.cert_type = m.get('cert_type')
        if m.get('nationality') is not None:
            self.nationality = m.get('nationality')
        return self


class IsvUserSaveRequestUserList(TeaModel):
    def __init__(self, birthday=None, cert_list=None, depart_id=None, email=None, gender=None, is_admin=None,
                 job_no=None, leave_status=None, manager_user_id=None, phone=None, position=None, position_level=None,
                 real_name_en=None, third_depart_id=None, third_depart_id_list=None, user_id=None, user_name=None):
        self.birthday = birthday  # type: str
        self.cert_list = cert_list  # type: list[IsvUserSaveRequestUserListCertList]
        self.depart_id = depart_id  # type: long
        self.email = email  # type: str
        self.gender = gender  # type: str
        self.is_admin = is_admin  # type: bool
        self.job_no = job_no  # type: str
        self.leave_status = leave_status  # type: int
        self.manager_user_id = manager_user_id  # type: str
        self.phone = phone  # type: str
        self.position = position  # type: str
        self.position_level = position_level  # type: str
        self.real_name_en = real_name_en  # type: str
        self.third_depart_id = third_depart_id  # type: str
        self.third_depart_id_list = third_depart_id_list  # type: list[str]
        self.user_id = user_id  # type: str
        self.user_name = user_name  # type: str

    def validate(self):
        if self.cert_list:
            for k in self.cert_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(IsvUserSaveRequestUserList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.birthday is not None:
            result['birthday'] = self.birthday
        result['cert_list'] = []
        if self.cert_list is not None:
            for k in self.cert_list:
                result['cert_list'].append(k.to_map() if k else None)
        if self.depart_id is not None:
            result['depart_id'] = self.depart_id
        if self.email is not None:
            result['email'] = self.email
        if self.gender is not None:
            result['gender'] = self.gender
        if self.is_admin is not None:
            result['is_admin'] = self.is_admin
        if self.job_no is not None:
            result['job_no'] = self.job_no
        if self.leave_status is not None:
            result['leave_status'] = self.leave_status
        if self.manager_user_id is not None:
            result['manager_user_id'] = self.manager_user_id
        if self.phone is not None:
            result['phone'] = self.phone
        if self.position is not None:
            result['position'] = self.position
        if self.position_level is not None:
            result['position_level'] = self.position_level
        if self.real_name_en is not None:
            result['real_name_en'] = self.real_name_en
        if self.third_depart_id is not None:
            result['third_depart_id'] = self.third_depart_id
        if self.third_depart_id_list is not None:
            result['third_depart_id_list'] = self.third_depart_id_list
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('birthday') is not None:
            self.birthday = m.get('birthday')
        self.cert_list = []
        if m.get('cert_list') is not None:
            for k in m.get('cert_list'):
                temp_model = IsvUserSaveRequestUserListCertList()
                self.cert_list.append(temp_model.from_map(k))
        if m.get('depart_id') is not None:
            self.depart_id = m.get('depart_id')
        if m.get('email') is not None:
            self.email = m.get('email')
        if m.get('gender') is not None:
            self.gender = m.get('gender')
        if m.get('is_admin') is not None:
            self.is_admin = m.get('is_admin')
        if m.get('job_no') is not None:
            self.job_no = m.get('job_no')
        if m.get('leave_status') is not None:
            self.leave_status = m.get('leave_status')
        if m.get('manager_user_id') is not None:
            self.manager_user_id = m.get('manager_user_id')
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        if m.get('position') is not None:
            self.position = m.get('position')
        if m.get('position_level') is not None:
            self.position_level = m.get('position_level')
        if m.get('real_name_en') is not None:
            self.real_name_en = m.get('real_name_en')
        if m.get('third_depart_id') is not None:
            self.third_depart_id = m.get('third_depart_id')
        if m.get('third_depart_id_list') is not None:
            self.third_depart_id_list = m.get('third_depart_id_list')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class IsvUserSaveRequest(TeaModel):
    def __init__(self, user_list=None):
        self.user_list = user_list  # type: list[IsvUserSaveRequestUserList]

    def validate(self):
        if self.user_list:
            for k in self.user_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(IsvUserSaveRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['user_list'] = []
        if self.user_list is not None:
            for k in self.user_list:
                result['user_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.user_list = []
        if m.get('user_list') is not None:
            for k in m.get('user_list'):
                temp_model = IsvUserSaveRequestUserList()
                self.user_list.append(temp_model.from_map(k))
        return self


class IsvUserSaveShrinkRequest(TeaModel):
    def __init__(self, user_list_shrink=None):
        self.user_list_shrink = user_list_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(IsvUserSaveShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.user_list_shrink is not None:
            result['user_list'] = self.user_list_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('user_list') is not None:
            self.user_list_shrink = m.get('user_list')
        return self


class IsvUserSaveResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        # traceId
        self.trace_id = trace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(IsvUserSaveResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            self.module = m.get('module')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class IsvUserSaveResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: IsvUserSaveResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(IsvUserSaveResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = IsvUserSaveResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class MonthBillConfirmHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(MonthBillConfirmHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class MonthBillConfirmRequest(TeaModel):
    def __init__(self, mail_bill_date=None, user_id=None):
        self.mail_bill_date = mail_bill_date  # type: int
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(MonthBillConfirmRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.mail_bill_date is not None:
            result['mail_bill_date'] = self.mail_bill_date
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('mail_bill_date') is not None:
            self.mail_bill_date = m.get('mail_bill_date')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class MonthBillConfirmResponseBody(TeaModel):
    def __init__(self, code=None, message=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(MonthBillConfirmResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class MonthBillConfirmResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: MonthBillConfirmResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(MonthBillConfirmResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = MonthBillConfirmResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class MonthBillGetHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_so_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(MonthBillGetHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class MonthBillGetRequest(TeaModel):
    def __init__(self, bill_month=None):
        self.bill_month = bill_month  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(MonthBillGetRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bill_month is not None:
            result['bill_month'] = self.bill_month
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('bill_month') is not None:
            self.bill_month = m.get('bill_month')
        return self


class MonthBillGetResponseBodyModuleMonthAccountBillDetail(TeaModel):
    def __init__(self, bill_confirmed=None, car_amount=None, damage_amount=None, flight_amount=None, fu_point=None,
                 hotel_amount=None, ie_flight_amount=None, mail_bill_date=None, service_amount=None, train_amount=None):
        self.bill_confirmed = bill_confirmed  # type: int
        # 用车金额（单位：元）
        self.car_amount = car_amount  # type: float
        # 违约金金额（单位：元）
        self.damage_amount = damage_amount  # type: float
        # 机票金额（单位：元）
        self.flight_amount = flight_amount  # type: float
        # 福豆金额（单位：元）
        self.fu_point = fu_point  # type: float
        # 酒店金额（单位：元）
        self.hotel_amount = hotel_amount  # type: float
        # 国际机票金额（单位：元）
        self.ie_flight_amount = ie_flight_amount  # type: float
        # 账期日：YYYYMMDD
        self.mail_bill_date = mail_bill_date  # type: long
        # 服务费金额（单位：元）
        self.service_amount = service_amount  # type: float
        # 火车票金额（单位：元）
        self.train_amount = train_amount  # type: float

    def validate(self):
        pass

    def to_map(self):
        _map = super(MonthBillGetResponseBodyModuleMonthAccountBillDetail, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bill_confirmed is not None:
            result['billConfirmed'] = self.bill_confirmed
        if self.car_amount is not None:
            result['carAmount'] = self.car_amount
        if self.damage_amount is not None:
            result['damageAmount'] = self.damage_amount
        if self.flight_amount is not None:
            result['flightAmount'] = self.flight_amount
        if self.fu_point is not None:
            result['fuPoint'] = self.fu_point
        if self.hotel_amount is not None:
            result['hotelAmount'] = self.hotel_amount
        if self.ie_flight_amount is not None:
            result['ieFlightAmount'] = self.ie_flight_amount
        if self.mail_bill_date is not None:
            result['mailBillDate'] = self.mail_bill_date
        if self.service_amount is not None:
            result['serviceAmount'] = self.service_amount
        if self.train_amount is not None:
            result['trainAmount'] = self.train_amount
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('billConfirmed') is not None:
            self.bill_confirmed = m.get('billConfirmed')
        if m.get('carAmount') is not None:
            self.car_amount = m.get('carAmount')
        if m.get('damageAmount') is not None:
            self.damage_amount = m.get('damageAmount')
        if m.get('flightAmount') is not None:
            self.flight_amount = m.get('flightAmount')
        if m.get('fuPoint') is not None:
            self.fu_point = m.get('fuPoint')
        if m.get('hotelAmount') is not None:
            self.hotel_amount = m.get('hotelAmount')
        if m.get('ieFlightAmount') is not None:
            self.ie_flight_amount = m.get('ieFlightAmount')
        if m.get('mailBillDate') is not None:
            self.mail_bill_date = m.get('mailBillDate')
        if m.get('serviceAmount') is not None:
            self.service_amount = m.get('serviceAmount')
        if m.get('trainAmount') is not None:
            self.train_amount = m.get('trainAmount')
        return self


class MonthBillGetResponseBodyModule(TeaModel):
    def __init__(self, end_date=None, month_account_bill_detail=None, start_date=None, url=None):
        self.end_date = end_date  # type: str
        # CorpMonthAccountBillFeeDetail
        self.month_account_bill_detail = month_account_bill_detail  # type: MonthBillGetResponseBodyModuleMonthAccountBillDetail
        self.start_date = start_date  # type: str
        self.url = url  # type: str

    def validate(self):
        if self.month_account_bill_detail:
            self.month_account_bill_detail.validate()

    def to_map(self):
        _map = super(MonthBillGetResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_date is not None:
            result['end_date'] = self.end_date
        if self.month_account_bill_detail is not None:
            result['monthAccountBillDetail'] = self.month_account_bill_detail.to_map()
        if self.start_date is not None:
            result['start_date'] = self.start_date
        if self.url is not None:
            result['url'] = self.url
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('end_date') is not None:
            self.end_date = m.get('end_date')
        if m.get('monthAccountBillDetail') is not None:
            temp_model = MonthBillGetResponseBodyModuleMonthAccountBillDetail()
            self.month_account_bill_detail = temp_model.from_map(m['monthAccountBillDetail'])
        if m.get('start_date') is not None:
            self.start_date = m.get('start_date')
        if m.get('url') is not None:
            self.url = m.get('url')
        return self


class MonthBillGetResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: list[MonthBillGetResponseBodyModule]
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            for k in self.module:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(MonthBillGetResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        result['module'] = []
        if self.module is not None:
            for k in self.module:
                result['module'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        self.module = []
        if m.get('module') is not None:
            for k in m.get('module'):
                temp_model = MonthBillGetResponseBodyModule()
                self.module.append(temp_model.from_map(k))
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class MonthBillGetResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: MonthBillGetResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(MonthBillGetResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = MonthBillGetResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ProjectAddHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_so_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ProjectAddHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class ProjectAddRequest(TeaModel):
    def __init__(self, code=None, project_name=None, third_part_cost_center_id=None, third_part_id=None,
                 third_part_invoice_id=None):
        self.code = code  # type: str
        self.project_name = project_name  # type: str
        self.third_part_cost_center_id = third_part_cost_center_id  # type: str
        self.third_part_id = third_part_id  # type: str
        self.third_part_invoice_id = third_part_invoice_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ProjectAddRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.project_name is not None:
            result['project_name'] = self.project_name
        if self.third_part_cost_center_id is not None:
            result['third_part_cost_center_id'] = self.third_part_cost_center_id
        if self.third_part_id is not None:
            result['third_part_id'] = self.third_part_id
        if self.third_part_invoice_id is not None:
            result['third_part_invoice_id'] = self.third_part_invoice_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('project_name') is not None:
            self.project_name = m.get('project_name')
        if m.get('third_part_cost_center_id') is not None:
            self.third_part_cost_center_id = m.get('third_part_cost_center_id')
        if m.get('third_part_id') is not None:
            self.third_part_id = m.get('third_part_id')
        if m.get('third_part_invoice_id') is not None:
            self.third_part_invoice_id = m.get('third_part_invoice_id')
        return self


class ProjectAddResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, more_page=None, request_id=None, success=None,
                 trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: long
        self.more_page = more_page  # type: bool
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ProjectAddResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module
        if self.more_page is not None:
            result['more_page'] = self.more_page
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            self.module = m.get('module')
        if m.get('more_page') is not None:
            self.more_page = m.get('more_page')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class ProjectAddResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ProjectAddResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ProjectAddResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ProjectAddResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ProjectDeleteHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_so_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ProjectDeleteHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class ProjectDeleteRequest(TeaModel):
    def __init__(self, third_part_id=None):
        self.third_part_id = third_part_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ProjectDeleteRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.third_part_id is not None:
            result['third_part_id'] = self.third_part_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('third_part_id') is not None:
            self.third_part_id = m.get('third_part_id')
        return self


class ProjectDeleteResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: bool
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ProjectDeleteResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            self.module = m.get('module')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class ProjectDeleteResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ProjectDeleteResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ProjectDeleteResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ProjectDeleteResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ProjectModifyHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_so_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ProjectModifyHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class ProjectModifyRequest(TeaModel):
    def __init__(self, code=None, project_name=None, third_part_cost_center_id=None, third_part_id=None,
                 third_part_invoice_id=None):
        self.code = code  # type: str
        self.project_name = project_name  # type: str
        self.third_part_cost_center_id = third_part_cost_center_id  # type: str
        self.third_part_id = third_part_id  # type: str
        self.third_part_invoice_id = third_part_invoice_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ProjectModifyRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.project_name is not None:
            result['project_name'] = self.project_name
        if self.third_part_cost_center_id is not None:
            result['third_part_cost_center_id'] = self.third_part_cost_center_id
        if self.third_part_id is not None:
            result['third_part_id'] = self.third_part_id
        if self.third_part_invoice_id is not None:
            result['third_part_invoice_id'] = self.third_part_invoice_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('project_name') is not None:
            self.project_name = m.get('project_name')
        if m.get('third_part_cost_center_id') is not None:
            self.third_part_cost_center_id = m.get('third_part_cost_center_id')
        if m.get('third_part_id') is not None:
            self.third_part_id = m.get('third_part_id')
        if m.get('third_part_invoice_id') is not None:
            self.third_part_invoice_id = m.get('third_part_invoice_id')
        return self


class ProjectModifyResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: bool
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(ProjectModifyResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            self.module = m.get('module')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class ProjectModifyResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: ProjectModifyResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(ProjectModifyResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ProjectModifyResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryReimbursementOrderHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryReimbursementOrderHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class QueryReimbursementOrderRequest(TeaModel):
    def __init__(self, reimb_order_no=None, sub_corp_id=None):
        self.reimb_order_no = reimb_order_no  # type: str
        self.sub_corp_id = sub_corp_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryReimbursementOrderRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.reimb_order_no is not None:
            result['reimb_order_no'] = self.reimb_order_no
        if self.sub_corp_id is not None:
            result['sub_corp_id'] = self.sub_corp_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('reimb_order_no') is not None:
            self.reimb_order_no = m.get('reimb_order_no')
        if m.get('sub_corp_id') is not None:
            self.sub_corp_id = m.get('sub_corp_id')
        return self


class QueryReimbursementOrderResponseBodyModuleExpensesExpenseCompositions(TeaModel):
    def __init__(self, bill_settlement_id=None, capital_direction=None, fee_type=None, order_id=None, remark=None,
                 remind_tag_list=None, settlement_amount=None, settlement_time=None, voucher_type=None):
        self.bill_settlement_id = bill_settlement_id  # type: long
        self.capital_direction = capital_direction  # type: str
        self.fee_type = fee_type  # type: str
        self.order_id = order_id  # type: str
        self.remark = remark  # type: str
        self.remind_tag_list = remind_tag_list  # type: list[str]
        self.settlement_amount = settlement_amount  # type: str
        self.settlement_time = settlement_time  # type: str
        self.voucher_type = voucher_type  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryReimbursementOrderResponseBodyModuleExpensesExpenseCompositions, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bill_settlement_id is not None:
            result['bill_settlement_id'] = self.bill_settlement_id
        if self.capital_direction is not None:
            result['capital_direction'] = self.capital_direction
        if self.fee_type is not None:
            result['fee_type'] = self.fee_type
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.remark is not None:
            result['remark'] = self.remark
        if self.remind_tag_list is not None:
            result['remind_tag_list'] = self.remind_tag_list
        if self.settlement_amount is not None:
            result['settlement_amount'] = self.settlement_amount
        if self.settlement_time is not None:
            result['settlement_time'] = self.settlement_time
        if self.voucher_type is not None:
            result['voucher_type'] = self.voucher_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('bill_settlement_id') is not None:
            self.bill_settlement_id = m.get('bill_settlement_id')
        if m.get('capital_direction') is not None:
            self.capital_direction = m.get('capital_direction')
        if m.get('fee_type') is not None:
            self.fee_type = m.get('fee_type')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('remind_tag_list') is not None:
            self.remind_tag_list = m.get('remind_tag_list')
        if m.get('settlement_amount') is not None:
            self.settlement_amount = m.get('settlement_amount')
        if m.get('settlement_time') is not None:
            self.settlement_time = m.get('settlement_time')
        if m.get('voucher_type') is not None:
            self.voucher_type = m.get('voucher_type')
        return self


class QueryReimbursementOrderResponseBodyModuleExpenses(TeaModel):
    def __init__(self, amount=None, currency=None, expense_city=None, expense_compositions=None, expense_time=None,
                 expense_type=None, expense_type_code=None, reimb_expense_id=None, remark=None, settlement_type=None):
        self.amount = amount  # type: str
        self.currency = currency  # type: str
        self.expense_city = expense_city  # type: str
        self.expense_compositions = expense_compositions  # type: list[QueryReimbursementOrderResponseBodyModuleExpensesExpenseCompositions]
        self.expense_time = expense_time  # type: str
        self.expense_type = expense_type  # type: str
        self.expense_type_code = expense_type_code  # type: str
        self.reimb_expense_id = reimb_expense_id  # type: long
        self.remark = remark  # type: str
        self.settlement_type = settlement_type  # type: str

    def validate(self):
        if self.expense_compositions:
            for k in self.expense_compositions:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(QueryReimbursementOrderResponseBodyModuleExpenses, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.amount is not None:
            result['amount'] = self.amount
        if self.currency is not None:
            result['currency'] = self.currency
        if self.expense_city is not None:
            result['expense_city'] = self.expense_city
        result['expense_compositions'] = []
        if self.expense_compositions is not None:
            for k in self.expense_compositions:
                result['expense_compositions'].append(k.to_map() if k else None)
        if self.expense_time is not None:
            result['expense_time'] = self.expense_time
        if self.expense_type is not None:
            result['expense_type'] = self.expense_type
        if self.expense_type_code is not None:
            result['expense_type_code'] = self.expense_type_code
        if self.reimb_expense_id is not None:
            result['reimb_expense_id'] = self.reimb_expense_id
        if self.remark is not None:
            result['remark'] = self.remark
        if self.settlement_type is not None:
            result['settlement_type'] = self.settlement_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('amount') is not None:
            self.amount = m.get('amount')
        if m.get('currency') is not None:
            self.currency = m.get('currency')
        if m.get('expense_city') is not None:
            self.expense_city = m.get('expense_city')
        self.expense_compositions = []
        if m.get('expense_compositions') is not None:
            for k in m.get('expense_compositions'):
                temp_model = QueryReimbursementOrderResponseBodyModuleExpensesExpenseCompositions()
                self.expense_compositions.append(temp_model.from_map(k))
        if m.get('expense_time') is not None:
            self.expense_time = m.get('expense_time')
        if m.get('expense_type') is not None:
            self.expense_type = m.get('expense_type')
        if m.get('expense_type_code') is not None:
            self.expense_type_code = m.get('expense_type_code')
        if m.get('reimb_expense_id') is not None:
            self.reimb_expense_id = m.get('reimb_expense_id')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('settlement_type') is not None:
            self.settlement_type = m.get('settlement_type')
        return self


class QueryReimbursementOrderResponseBodyModuleItineraries(TeaModel):
    def __init__(self, arr_city=None, arr_date=None, dep_city=None, dep_date=None, traffic_way=None, trip_way=None):
        self.arr_city = arr_city  # type: str
        self.arr_date = arr_date  # type: str
        self.dep_city = dep_city  # type: str
        self.dep_date = dep_date  # type: str
        self.traffic_way = traffic_way  # type: str
        self.trip_way = trip_way  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryReimbursementOrderResponseBodyModuleItineraries, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_city is not None:
            result['arr_city'] = self.arr_city
        if self.arr_date is not None:
            result['arr_date'] = self.arr_date
        if self.dep_city is not None:
            result['dep_city'] = self.dep_city
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        if self.traffic_way is not None:
            result['traffic_way'] = self.traffic_way
        if self.trip_way is not None:
            result['trip_way'] = self.trip_way
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('arr_city') is not None:
            self.arr_city = m.get('arr_city')
        if m.get('arr_date') is not None:
            self.arr_date = m.get('arr_date')
        if m.get('dep_city') is not None:
            self.dep_city = m.get('dep_city')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        if m.get('traffic_way') is not None:
            self.traffic_way = m.get('traffic_way')
        if m.get('trip_way') is not None:
            self.trip_way = m.get('trip_way')
        return self


class QueryReimbursementOrderResponseBodyModulePaymentInfos(TeaModel):
    def __init__(self, amount=None, payee_user_id=None):
        self.amount = amount  # type: str
        self.payee_user_id = payee_user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(QueryReimbursementOrderResponseBodyModulePaymentInfos, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.amount is not None:
            result['amount'] = self.amount
        if self.payee_user_id is not None:
            result['payee_user_id'] = self.payee_user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('amount') is not None:
            self.amount = m.get('amount')
        if m.get('payee_user_id') is not None:
            self.payee_user_id = m.get('payee_user_id')
        return self


class QueryReimbursementOrderResponseBodyModule(TeaModel):
    def __init__(self, company_amount=None, company_pay_amount=None, corp_id=None, cost_center_code=None,
                 cost_center_name=None, expenses=None, expenses_cover_dept_id=None, expenses_cover_dept_name=None,
                 expenses_cover_invoice_title=None, gmt_create=None, gmt_modified=None, is_deleted=None, itineraries=None, payment_infos=None,
                 personal_amount=None, project_code=None, project_name=None, reason=None, reimbursement_no=None, remark=None,
                 status=None, travel_third_apply_id=None, user_id=None, user_name=None):
        self.company_amount = company_amount  # type: str
        self.company_pay_amount = company_pay_amount  # type: str
        self.corp_id = corp_id  # type: str
        self.cost_center_code = cost_center_code  # type: str
        self.cost_center_name = cost_center_name  # type: str
        self.expenses = expenses  # type: list[QueryReimbursementOrderResponseBodyModuleExpenses]
        self.expenses_cover_dept_id = expenses_cover_dept_id  # type: str
        self.expenses_cover_dept_name = expenses_cover_dept_name  # type: str
        self.expenses_cover_invoice_title = expenses_cover_invoice_title  # type: str
        self.gmt_create = gmt_create  # type: str
        self.gmt_modified = gmt_modified  # type: str
        self.is_deleted = is_deleted  # type: str
        self.itineraries = itineraries  # type: list[QueryReimbursementOrderResponseBodyModuleItineraries]
        self.payment_infos = payment_infos  # type: list[QueryReimbursementOrderResponseBodyModulePaymentInfos]
        self.personal_amount = personal_amount  # type: str
        self.project_code = project_code  # type: str
        self.project_name = project_name  # type: str
        self.reason = reason  # type: str
        self.reimbursement_no = reimbursement_no  # type: str
        self.remark = remark  # type: str
        self.status = status  # type: str
        self.travel_third_apply_id = travel_third_apply_id  # type: str
        self.user_id = user_id  # type: str
        self.user_name = user_name  # type: str

    def validate(self):
        if self.expenses:
            for k in self.expenses:
                if k:
                    k.validate()
        if self.itineraries:
            for k in self.itineraries:
                if k:
                    k.validate()
        if self.payment_infos:
            for k in self.payment_infos:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(QueryReimbursementOrderResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.company_amount is not None:
            result['company_amount'] = self.company_amount
        if self.company_pay_amount is not None:
            result['company_pay_amount'] = self.company_pay_amount
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        if self.cost_center_code is not None:
            result['cost_center_code'] = self.cost_center_code
        if self.cost_center_name is not None:
            result['cost_center_name'] = self.cost_center_name
        result['expenses'] = []
        if self.expenses is not None:
            for k in self.expenses:
                result['expenses'].append(k.to_map() if k else None)
        if self.expenses_cover_dept_id is not None:
            result['expenses_cover_dept_id'] = self.expenses_cover_dept_id
        if self.expenses_cover_dept_name is not None:
            result['expenses_cover_dept_name'] = self.expenses_cover_dept_name
        if self.expenses_cover_invoice_title is not None:
            result['expenses_cover_invoice_title'] = self.expenses_cover_invoice_title
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.gmt_modified is not None:
            result['gmt_modified'] = self.gmt_modified
        if self.is_deleted is not None:
            result['is_deleted'] = self.is_deleted
        result['itineraries'] = []
        if self.itineraries is not None:
            for k in self.itineraries:
                result['itineraries'].append(k.to_map() if k else None)
        result['payment_infos'] = []
        if self.payment_infos is not None:
            for k in self.payment_infos:
                result['payment_infos'].append(k.to_map() if k else None)
        if self.personal_amount is not None:
            result['personal_amount'] = self.personal_amount
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_name is not None:
            result['project_name'] = self.project_name
        if self.reason is not None:
            result['reason'] = self.reason
        if self.reimbursement_no is not None:
            result['reimbursement_no'] = self.reimbursement_no
        if self.remark is not None:
            result['remark'] = self.remark
        if self.status is not None:
            result['status'] = self.status
        if self.travel_third_apply_id is not None:
            result['travel_third_apply_id'] = self.travel_third_apply_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('company_amount') is not None:
            self.company_amount = m.get('company_amount')
        if m.get('company_pay_amount') is not None:
            self.company_pay_amount = m.get('company_pay_amount')
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        if m.get('cost_center_code') is not None:
            self.cost_center_code = m.get('cost_center_code')
        if m.get('cost_center_name') is not None:
            self.cost_center_name = m.get('cost_center_name')
        self.expenses = []
        if m.get('expenses') is not None:
            for k in m.get('expenses'):
                temp_model = QueryReimbursementOrderResponseBodyModuleExpenses()
                self.expenses.append(temp_model.from_map(k))
        if m.get('expenses_cover_dept_id') is not None:
            self.expenses_cover_dept_id = m.get('expenses_cover_dept_id')
        if m.get('expenses_cover_dept_name') is not None:
            self.expenses_cover_dept_name = m.get('expenses_cover_dept_name')
        if m.get('expenses_cover_invoice_title') is not None:
            self.expenses_cover_invoice_title = m.get('expenses_cover_invoice_title')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('gmt_modified') is not None:
            self.gmt_modified = m.get('gmt_modified')
        if m.get('is_deleted') is not None:
            self.is_deleted = m.get('is_deleted')
        self.itineraries = []
        if m.get('itineraries') is not None:
            for k in m.get('itineraries'):
                temp_model = QueryReimbursementOrderResponseBodyModuleItineraries()
                self.itineraries.append(temp_model.from_map(k))
        self.payment_infos = []
        if m.get('payment_infos') is not None:
            for k in m.get('payment_infos'):
                temp_model = QueryReimbursementOrderResponseBodyModulePaymentInfos()
                self.payment_infos.append(temp_model.from_map(k))
        if m.get('personal_amount') is not None:
            self.personal_amount = m.get('personal_amount')
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_name') is not None:
            self.project_name = m.get('project_name')
        if m.get('reason') is not None:
            self.reason = m.get('reason')
        if m.get('reimbursement_no') is not None:
            self.reimbursement_no = m.get('reimbursement_no')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('travel_third_apply_id') is not None:
            self.travel_third_apply_id = m.get('travel_third_apply_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class QueryReimbursementOrderResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: QueryReimbursementOrderResponseBodyModule
        # requestId
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        # traceId
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(QueryReimbursementOrderResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = QueryReimbursementOrderResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class QueryReimbursementOrderResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: QueryReimbursementOrderResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(QueryReimbursementOrderResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryReimbursementOrderResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SyncSingleUserHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_so_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SyncSingleUserHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class SyncSingleUserRequest(TeaModel):
    def __init__(self, email=None, job_no=None, leave_status=None, manager_user_id=None, phone=None, position=None,
                 position_level=None, real_name_en=None, third_depart_id_list=None, user_id=None, user_name=None):
        self.email = email  # type: str
        self.job_no = job_no  # type: str
        self.leave_status = leave_status  # type: int
        self.manager_user_id = manager_user_id  # type: str
        self.phone = phone  # type: str
        self.position = position  # type: str
        self.position_level = position_level  # type: str
        self.real_name_en = real_name_en  # type: str
        self.third_depart_id_list = third_depart_id_list  # type: list[str]
        self.user_id = user_id  # type: str
        self.user_name = user_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SyncSingleUserRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.email is not None:
            result['email'] = self.email
        if self.job_no is not None:
            result['job_no'] = self.job_no
        if self.leave_status is not None:
            result['leave_status'] = self.leave_status
        if self.manager_user_id is not None:
            result['manager_user_id'] = self.manager_user_id
        if self.phone is not None:
            result['phone'] = self.phone
        if self.position is not None:
            result['position'] = self.position
        if self.position_level is not None:
            result['position_level'] = self.position_level
        if self.real_name_en is not None:
            result['real_name_en'] = self.real_name_en
        if self.third_depart_id_list is not None:
            result['third_depart_id_list'] = self.third_depart_id_list
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('email') is not None:
            self.email = m.get('email')
        if m.get('job_no') is not None:
            self.job_no = m.get('job_no')
        if m.get('leave_status') is not None:
            self.leave_status = m.get('leave_status')
        if m.get('manager_user_id') is not None:
            self.manager_user_id = m.get('manager_user_id')
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        if m.get('position') is not None:
            self.position = m.get('position')
        if m.get('position_level') is not None:
            self.position_level = m.get('position_level')
        if m.get('real_name_en') is not None:
            self.real_name_en = m.get('real_name_en')
        if m.get('third_depart_id_list') is not None:
            self.third_depart_id_list = m.get('third_depart_id_list')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class SyncSingleUserShrinkRequest(TeaModel):
    def __init__(self, email=None, job_no=None, leave_status=None, manager_user_id=None, phone=None, position=None,
                 position_level=None, real_name_en=None, third_depart_id_list_shrink=None, user_id=None, user_name=None):
        self.email = email  # type: str
        self.job_no = job_no  # type: str
        self.leave_status = leave_status  # type: int
        self.manager_user_id = manager_user_id  # type: str
        self.phone = phone  # type: str
        self.position = position  # type: str
        self.position_level = position_level  # type: str
        self.real_name_en = real_name_en  # type: str
        self.third_depart_id_list_shrink = third_depart_id_list_shrink  # type: str
        self.user_id = user_id  # type: str
        self.user_name = user_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SyncSingleUserShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.email is not None:
            result['email'] = self.email
        if self.job_no is not None:
            result['job_no'] = self.job_no
        if self.leave_status is not None:
            result['leave_status'] = self.leave_status
        if self.manager_user_id is not None:
            result['manager_user_id'] = self.manager_user_id
        if self.phone is not None:
            result['phone'] = self.phone
        if self.position is not None:
            result['position'] = self.position
        if self.position_level is not None:
            result['position_level'] = self.position_level
        if self.real_name_en is not None:
            result['real_name_en'] = self.real_name_en
        if self.third_depart_id_list_shrink is not None:
            result['third_depart_id_list'] = self.third_depart_id_list_shrink
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('email') is not None:
            self.email = m.get('email')
        if m.get('job_no') is not None:
            self.job_no = m.get('job_no')
        if m.get('leave_status') is not None:
            self.leave_status = m.get('leave_status')
        if m.get('manager_user_id') is not None:
            self.manager_user_id = m.get('manager_user_id')
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        if m.get('position') is not None:
            self.position = m.get('position')
        if m.get('position_level') is not None:
            self.position_level = m.get('position_level')
        if m.get('real_name_en') is not None:
            self.real_name_en = m.get('real_name_en')
        if m.get('third_depart_id_list') is not None:
            self.third_depart_id_list_shrink = m.get('third_depart_id_list')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class SyncSingleUserResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SyncSingleUserResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            self.module = m.get('module')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class SyncSingleUserResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: SyncSingleUserResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(SyncSingleUserResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SyncSingleUserResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SyncThirdUserMappingHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SyncThirdUserMappingHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class SyncThirdUserMappingRequest(TeaModel):
    def __init__(self, status=None, third_channel_type=None, third_user_id=None, user_id=None):
        self.status = status  # type: int
        self.third_channel_type = third_channel_type  # type: str
        self.third_user_id = third_user_id  # type: str
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SyncThirdUserMappingRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.status is not None:
            result['status'] = self.status
        if self.third_channel_type is not None:
            result['third_channel_type'] = self.third_channel_type
        if self.third_user_id is not None:
            result['third_user_id'] = self.third_user_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('third_channel_type') is not None:
            self.third_channel_type = m.get('third_channel_type')
        if m.get('third_user_id') is not None:
            self.third_user_id = m.get('third_user_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class SyncThirdUserMappingResponseBody(TeaModel):
    def __init__(self, code=None, message=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(SyncThirdUserMappingResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class SyncThirdUserMappingResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: SyncThirdUserMappingResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(SyncThirdUserMappingResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SyncThirdUserMappingResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TBAccountInfoQueryHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TBAccountInfoQueryHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class TBAccountInfoQueryResponseBodyModule(TeaModel):
    def __init__(self, tb_account=None, tb_bond=None):
        self.tb_account = tb_account  # type: str
        self.tb_bond = tb_bond  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(TBAccountInfoQueryResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tb_account is not None:
            result['tb_account'] = self.tb_account
        if self.tb_bond is not None:
            result['tb_bond'] = self.tb_bond
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('tb_account') is not None:
            self.tb_account = m.get('tb_account')
        if m.get('tb_bond') is not None:
            self.tb_bond = m.get('tb_bond')
        return self


class TBAccountInfoQueryResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: TBAccountInfoQueryResponseBodyModule
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(TBAccountInfoQueryResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = TBAccountInfoQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class TBAccountInfoQueryResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: TBAccountInfoQueryResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(TBAccountInfoQueryResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TBAccountInfoQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TBAccountUnbindHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TBAccountUnbindHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class TBAccountUnbindResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: bool
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TBAccountUnbindResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            self.module = m.get('module')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class TBAccountUnbindResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: TBAccountUnbindResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(TBAccountUnbindResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TBAccountUnbindResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TicketChangingApplyHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TicketChangingApplyHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class TicketChangingApplyRequestModifyFlightInfoListPassengerInfoList(TeaModel):
    def __init__(self, origin_flight_no=None, out_user_id=None, passenger_name=None):
        self.origin_flight_no = origin_flight_no  # type: str
        self.out_user_id = out_user_id  # type: str
        self.passenger_name = passenger_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TicketChangingApplyRequestModifyFlightInfoListPassengerInfoList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.origin_flight_no is not None:
            result['origin_flight_no'] = self.origin_flight_no
        if self.out_user_id is not None:
            result['out_user_id'] = self.out_user_id
        if self.passenger_name is not None:
            result['passenger_name'] = self.passenger_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('origin_flight_no') is not None:
            self.origin_flight_no = m.get('origin_flight_no')
        if m.get('out_user_id') is not None:
            self.out_user_id = m.get('out_user_id')
        if m.get('passenger_name') is not None:
            self.passenger_name = m.get('passenger_name')
        return self


class TicketChangingApplyRequestModifyFlightInfoList(TeaModel):
    def __init__(self, arr_city=None, cabin=None, dep_city=None, dep_date=None, flight_no=None,
                 passenger_info_list=None):
        self.arr_city = arr_city  # type: str
        self.cabin = cabin  # type: str
        self.dep_city = dep_city  # type: str
        self.dep_date = dep_date  # type: str
        self.flight_no = flight_no  # type: str
        self.passenger_info_list = passenger_info_list  # type: list[TicketChangingApplyRequestModifyFlightInfoListPassengerInfoList]

    def validate(self):
        if self.passenger_info_list:
            for k in self.passenger_info_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(TicketChangingApplyRequestModifyFlightInfoList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_city is not None:
            result['arr_city'] = self.arr_city
        if self.cabin is not None:
            result['cabin'] = self.cabin
        if self.dep_city is not None:
            result['dep_city'] = self.dep_city
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        result['passenger_info_list'] = []
        if self.passenger_info_list is not None:
            for k in self.passenger_info_list:
                result['passenger_info_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('arr_city') is not None:
            self.arr_city = m.get('arr_city')
        if m.get('cabin') is not None:
            self.cabin = m.get('cabin')
        if m.get('dep_city') is not None:
            self.dep_city = m.get('dep_city')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        self.passenger_info_list = []
        if m.get('passenger_info_list') is not None:
            for k in m.get('passenger_info_list'):
                temp_model = TicketChangingApplyRequestModifyFlightInfoListPassengerInfoList()
                self.passenger_info_list.append(temp_model.from_map(k))
        return self


class TicketChangingApplyRequest(TeaModel):
    def __init__(self, dis_order_id=None, dis_sub_order_id=None, is_voluntary=None, modify_flight_info_list=None,
                 ota_item_id=None, reason=None, session_id=None, whether_retry=None):
        self.dis_order_id = dis_order_id  # type: str
        self.dis_sub_order_id = dis_sub_order_id  # type: str
        self.is_voluntary = is_voluntary  # type: int
        self.modify_flight_info_list = modify_flight_info_list  # type: list[TicketChangingApplyRequestModifyFlightInfoList]
        self.ota_item_id = ota_item_id  # type: str
        self.reason = reason  # type: str
        self.session_id = session_id  # type: str
        self.whether_retry = whether_retry  # type: bool

    def validate(self):
        if self.modify_flight_info_list:
            for k in self.modify_flight_info_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(TicketChangingApplyRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        if self.dis_sub_order_id is not None:
            result['dis_sub_order_id'] = self.dis_sub_order_id
        if self.is_voluntary is not None:
            result['is_voluntary'] = self.is_voluntary
        result['modify_flight_info_list'] = []
        if self.modify_flight_info_list is not None:
            for k in self.modify_flight_info_list:
                result['modify_flight_info_list'].append(k.to_map() if k else None)
        if self.ota_item_id is not None:
            result['ota_item_id'] = self.ota_item_id
        if self.reason is not None:
            result['reason'] = self.reason
        if self.session_id is not None:
            result['session_id'] = self.session_id
        if self.whether_retry is not None:
            result['whether_retry'] = self.whether_retry
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        if m.get('dis_sub_order_id') is not None:
            self.dis_sub_order_id = m.get('dis_sub_order_id')
        if m.get('is_voluntary') is not None:
            self.is_voluntary = m.get('is_voluntary')
        self.modify_flight_info_list = []
        if m.get('modify_flight_info_list') is not None:
            for k in m.get('modify_flight_info_list'):
                temp_model = TicketChangingApplyRequestModifyFlightInfoList()
                self.modify_flight_info_list.append(temp_model.from_map(k))
        if m.get('ota_item_id') is not None:
            self.ota_item_id = m.get('ota_item_id')
        if m.get('reason') is not None:
            self.reason = m.get('reason')
        if m.get('session_id') is not None:
            self.session_id = m.get('session_id')
        if m.get('whether_retry') is not None:
            self.whether_retry = m.get('whether_retry')
        return self


class TicketChangingApplyShrinkRequest(TeaModel):
    def __init__(self, dis_order_id=None, dis_sub_order_id=None, is_voluntary=None,
                 modify_flight_info_list_shrink=None, ota_item_id=None, reason=None, session_id=None, whether_retry=None):
        self.dis_order_id = dis_order_id  # type: str
        self.dis_sub_order_id = dis_sub_order_id  # type: str
        self.is_voluntary = is_voluntary  # type: int
        self.modify_flight_info_list_shrink = modify_flight_info_list_shrink  # type: str
        self.ota_item_id = ota_item_id  # type: str
        self.reason = reason  # type: str
        self.session_id = session_id  # type: str
        self.whether_retry = whether_retry  # type: bool

    def validate(self):
        pass

    def to_map(self):
        _map = super(TicketChangingApplyShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        if self.dis_sub_order_id is not None:
            result['dis_sub_order_id'] = self.dis_sub_order_id
        if self.is_voluntary is not None:
            result['is_voluntary'] = self.is_voluntary
        if self.modify_flight_info_list_shrink is not None:
            result['modify_flight_info_list'] = self.modify_flight_info_list_shrink
        if self.ota_item_id is not None:
            result['ota_item_id'] = self.ota_item_id
        if self.reason is not None:
            result['reason'] = self.reason
        if self.session_id is not None:
            result['session_id'] = self.session_id
        if self.whether_retry is not None:
            result['whether_retry'] = self.whether_retry
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        if m.get('dis_sub_order_id') is not None:
            self.dis_sub_order_id = m.get('dis_sub_order_id')
        if m.get('is_voluntary') is not None:
            self.is_voluntary = m.get('is_voluntary')
        if m.get('modify_flight_info_list') is not None:
            self.modify_flight_info_list_shrink = m.get('modify_flight_info_list')
        if m.get('ota_item_id') is not None:
            self.ota_item_id = m.get('ota_item_id')
        if m.get('reason') is not None:
            self.reason = m.get('reason')
        if m.get('session_id') is not None:
            self.session_id = m.get('session_id')
        if m.get('whether_retry') is not None:
            self.whether_retry = m.get('whether_retry')
        return self


class TicketChangingApplyResponseBodyModule(TeaModel):
    def __init__(self, booking_changed_total_fee=None, booking_origin_total_fee=None, booking_price_changed=None,
                 btrip_order_id=None, btrip_sub_order_id=None, can_pay=None, change_fee=None, deadline_time=None,
                 dis_order_id=None, dis_sub_order_id=None, max_retry_times=None, next_retry_interval=None, retry=None,
                 retry_client_tips=None, status=None, upgrade_fee=None):
        self.booking_changed_total_fee = booking_changed_total_fee  # type: int
        self.booking_origin_total_fee = booking_origin_total_fee  # type: int
        self.booking_price_changed = booking_price_changed  # type: bool
        self.btrip_order_id = btrip_order_id  # type: long
        self.btrip_sub_order_id = btrip_sub_order_id  # type: long
        self.can_pay = can_pay  # type: bool
        self.change_fee = change_fee  # type: long
        self.deadline_time = deadline_time  # type: str
        self.dis_order_id = dis_order_id  # type: str
        self.dis_sub_order_id = dis_sub_order_id  # type: str
        self.max_retry_times = max_retry_times  # type: int
        self.next_retry_interval = next_retry_interval  # type: long
        self.retry = retry  # type: bool
        self.retry_client_tips = retry_client_tips  # type: str
        self.status = status  # type: int
        self.upgrade_fee = upgrade_fee  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(TicketChangingApplyResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.booking_changed_total_fee is not None:
            result['booking_changed_total_fee'] = self.booking_changed_total_fee
        if self.booking_origin_total_fee is not None:
            result['booking_origin_total_fee'] = self.booking_origin_total_fee
        if self.booking_price_changed is not None:
            result['booking_price_changed'] = self.booking_price_changed
        if self.btrip_order_id is not None:
            result['btrip_order_id'] = self.btrip_order_id
        if self.btrip_sub_order_id is not None:
            result['btrip_sub_order_id'] = self.btrip_sub_order_id
        if self.can_pay is not None:
            result['can_pay'] = self.can_pay
        if self.change_fee is not None:
            result['change_fee'] = self.change_fee
        if self.deadline_time is not None:
            result['deadline_time'] = self.deadline_time
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        if self.dis_sub_order_id is not None:
            result['dis_sub_order_id'] = self.dis_sub_order_id
        if self.max_retry_times is not None:
            result['max_retry_times'] = self.max_retry_times
        if self.next_retry_interval is not None:
            result['next_retry_interval'] = self.next_retry_interval
        if self.retry is not None:
            result['retry'] = self.retry
        if self.retry_client_tips is not None:
            result['retry_client_tips'] = self.retry_client_tips
        if self.status is not None:
            result['status'] = self.status
        if self.upgrade_fee is not None:
            result['upgrade_fee'] = self.upgrade_fee
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('booking_changed_total_fee') is not None:
            self.booking_changed_total_fee = m.get('booking_changed_total_fee')
        if m.get('booking_origin_total_fee') is not None:
            self.booking_origin_total_fee = m.get('booking_origin_total_fee')
        if m.get('booking_price_changed') is not None:
            self.booking_price_changed = m.get('booking_price_changed')
        if m.get('btrip_order_id') is not None:
            self.btrip_order_id = m.get('btrip_order_id')
        if m.get('btrip_sub_order_id') is not None:
            self.btrip_sub_order_id = m.get('btrip_sub_order_id')
        if m.get('can_pay') is not None:
            self.can_pay = m.get('can_pay')
        if m.get('change_fee') is not None:
            self.change_fee = m.get('change_fee')
        if m.get('deadline_time') is not None:
            self.deadline_time = m.get('deadline_time')
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        if m.get('dis_sub_order_id') is not None:
            self.dis_sub_order_id = m.get('dis_sub_order_id')
        if m.get('max_retry_times') is not None:
            self.max_retry_times = m.get('max_retry_times')
        if m.get('next_retry_interval') is not None:
            self.next_retry_interval = m.get('next_retry_interval')
        if m.get('retry') is not None:
            self.retry = m.get('retry')
        if m.get('retry_client_tips') is not None:
            self.retry_client_tips = m.get('retry_client_tips')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('upgrade_fee') is not None:
            self.upgrade_fee = m.get('upgrade_fee')
        return self


class TicketChangingApplyResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: TicketChangingApplyResponseBodyModule
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(TicketChangingApplyResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = TicketChangingApplyResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class TicketChangingApplyResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: TicketChangingApplyResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(TicketChangingApplyResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TicketChangingApplyResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TicketChangingCancelHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TicketChangingCancelHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class TicketChangingCancelRequest(TeaModel):
    def __init__(self, dis_order_id=None, dis_sub_order_id=None):
        self.dis_order_id = dis_order_id  # type: str
        self.dis_sub_order_id = dis_sub_order_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TicketChangingCancelRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        if self.dis_sub_order_id is not None:
            result['dis_sub_order_id'] = self.dis_sub_order_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        if m.get('dis_sub_order_id') is not None:
            self.dis_sub_order_id = m.get('dis_sub_order_id')
        return self


class TicketChangingCancelResponseBodyModule(TeaModel):
    def __init__(self, cancel_time=None, dis_sub_order_id=None, status=None):
        self.cancel_time = cancel_time  # type: str
        self.dis_sub_order_id = dis_sub_order_id  # type: str
        self.status = status  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TicketChangingCancelResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cancel_time is not None:
            result['cancel_time'] = self.cancel_time
        if self.dis_sub_order_id is not None:
            result['dis_sub_order_id'] = self.dis_sub_order_id
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('cancel_time') is not None:
            self.cancel_time = m.get('cancel_time')
        if m.get('dis_sub_order_id') is not None:
            self.dis_sub_order_id = m.get('dis_sub_order_id')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class TicketChangingCancelResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: TicketChangingCancelResponseBodyModule
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(TicketChangingCancelResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = TicketChangingCancelResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class TicketChangingCancelResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: TicketChangingCancelResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(TicketChangingCancelResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TicketChangingCancelResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TicketChangingDetailHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TicketChangingDetailHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class TicketChangingDetailRequest(TeaModel):
    def __init__(self, dis_order_id=None, dis_sub_order_id=None):
        self.dis_order_id = dis_order_id  # type: str
        self.dis_sub_order_id = dis_sub_order_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TicketChangingDetailRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        if self.dis_sub_order_id is not None:
            result['dis_sub_order_id'] = self.dis_sub_order_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        if m.get('dis_sub_order_id') is not None:
            self.dis_sub_order_id = m.get('dis_sub_order_id')
        return self


class TicketChangingDetailResponseBodyModuleFlightInfoList(TeaModel):
    def __init__(self, airline_code=None, airline_name=None, airline_simple_name=None, arr_airport=None,
                 arr_airport_code=None, arr_airport_code_name=None, arr_city=None, arr_city_code=None, arr_terminal=None,
                 arr_time=None, baggage=None, build_price=None, cabin=None, cabin_class=None, carrier=None, dep_airport=None,
                 dep_airport_code=None, dep_airport_code_name=None, dep_city=None, dep_city_code=None, dep_terminal=None,
                 dep_time=None, flight_no=None, last_cabin=None, last_flight_no=None, meal=None, oil_price=None,
                 segment_type=None, stop_arr_time=None, stop_city=None, stop_dep_time=None, ticket_price=None,
                 tuigaiqian_info=None):
        self.airline_code = airline_code  # type: str
        self.airline_name = airline_name  # type: str
        self.airline_simple_name = airline_simple_name  # type: str
        self.arr_airport = arr_airport  # type: str
        self.arr_airport_code = arr_airport_code  # type: str
        self.arr_airport_code_name = arr_airport_code_name  # type: str
        self.arr_city = arr_city  # type: str
        self.arr_city_code = arr_city_code  # type: str
        self.arr_terminal = arr_terminal  # type: str
        self.arr_time = arr_time  # type: str
        self.baggage = baggage  # type: str
        self.build_price = build_price  # type: long
        self.cabin = cabin  # type: str
        self.cabin_class = cabin_class  # type: str
        self.carrier = carrier  # type: str
        self.dep_airport = dep_airport  # type: str
        self.dep_airport_code = dep_airport_code  # type: str
        self.dep_airport_code_name = dep_airport_code_name  # type: str
        self.dep_city = dep_city  # type: str
        self.dep_city_code = dep_city_code  # type: str
        self.dep_terminal = dep_terminal  # type: str
        self.dep_time = dep_time  # type: str
        self.flight_no = flight_no  # type: str
        self.last_cabin = last_cabin  # type: str
        self.last_flight_no = last_flight_no  # type: str
        self.meal = meal  # type: str
        self.oil_price = oil_price  # type: long
        self.segment_type = segment_type  # type: int
        self.stop_arr_time = stop_arr_time  # type: str
        self.stop_city = stop_city  # type: str
        self.stop_dep_time = stop_dep_time  # type: str
        self.ticket_price = ticket_price  # type: long
        self.tuigaiqian_info = tuigaiqian_info  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TicketChangingDetailResponseBodyModuleFlightInfoList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.airline_name is not None:
            result['airline_name'] = self.airline_name
        if self.airline_simple_name is not None:
            result['airline_simple_name'] = self.airline_simple_name
        if self.arr_airport is not None:
            result['arr_airport'] = self.arr_airport
        if self.arr_airport_code is not None:
            result['arr_airport_code'] = self.arr_airport_code
        if self.arr_airport_code_name is not None:
            result['arr_airport_code_name'] = self.arr_airport_code_name
        if self.arr_city is not None:
            result['arr_city'] = self.arr_city
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.arr_terminal is not None:
            result['arr_terminal'] = self.arr_terminal
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.baggage is not None:
            result['baggage'] = self.baggage
        if self.build_price is not None:
            result['build_price'] = self.build_price
        if self.cabin is not None:
            result['cabin'] = self.cabin
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.carrier is not None:
            result['carrier'] = self.carrier
        if self.dep_airport is not None:
            result['dep_airport'] = self.dep_airport
        if self.dep_airport_code is not None:
            result['dep_airport_code'] = self.dep_airport_code
        if self.dep_airport_code_name is not None:
            result['dep_airport_code_name'] = self.dep_airport_code_name
        if self.dep_city is not None:
            result['dep_city'] = self.dep_city
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_terminal is not None:
            result['dep_terminal'] = self.dep_terminal
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        if self.last_cabin is not None:
            result['last_cabin'] = self.last_cabin
        if self.last_flight_no is not None:
            result['last_flight_no'] = self.last_flight_no
        if self.meal is not None:
            result['meal'] = self.meal
        if self.oil_price is not None:
            result['oil_price'] = self.oil_price
        if self.segment_type is not None:
            result['segment_type'] = self.segment_type
        if self.stop_arr_time is not None:
            result['stop_arr_time'] = self.stop_arr_time
        if self.stop_city is not None:
            result['stop_city'] = self.stop_city
        if self.stop_dep_time is not None:
            result['stop_dep_time'] = self.stop_dep_time
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.tuigaiqian_info is not None:
            result['tuigaiqian_info'] = self.tuigaiqian_info
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('airline_name') is not None:
            self.airline_name = m.get('airline_name')
        if m.get('airline_simple_name') is not None:
            self.airline_simple_name = m.get('airline_simple_name')
        if m.get('arr_airport') is not None:
            self.arr_airport = m.get('arr_airport')
        if m.get('arr_airport_code') is not None:
            self.arr_airport_code = m.get('arr_airport_code')
        if m.get('arr_airport_code_name') is not None:
            self.arr_airport_code_name = m.get('arr_airport_code_name')
        if m.get('arr_city') is not None:
            self.arr_city = m.get('arr_city')
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('arr_terminal') is not None:
            self.arr_terminal = m.get('arr_terminal')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('baggage') is not None:
            self.baggage = m.get('baggage')
        if m.get('build_price') is not None:
            self.build_price = m.get('build_price')
        if m.get('cabin') is not None:
            self.cabin = m.get('cabin')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('carrier') is not None:
            self.carrier = m.get('carrier')
        if m.get('dep_airport') is not None:
            self.dep_airport = m.get('dep_airport')
        if m.get('dep_airport_code') is not None:
            self.dep_airport_code = m.get('dep_airport_code')
        if m.get('dep_airport_code_name') is not None:
            self.dep_airport_code_name = m.get('dep_airport_code_name')
        if m.get('dep_city') is not None:
            self.dep_city = m.get('dep_city')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_terminal') is not None:
            self.dep_terminal = m.get('dep_terminal')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        if m.get('last_cabin') is not None:
            self.last_cabin = m.get('last_cabin')
        if m.get('last_flight_no') is not None:
            self.last_flight_no = m.get('last_flight_no')
        if m.get('meal') is not None:
            self.meal = m.get('meal')
        if m.get('oil_price') is not None:
            self.oil_price = m.get('oil_price')
        if m.get('segment_type') is not None:
            self.segment_type = m.get('segment_type')
        if m.get('stop_arr_time') is not None:
            self.stop_arr_time = m.get('stop_arr_time')
        if m.get('stop_city') is not None:
            self.stop_city = m.get('stop_city')
        if m.get('stop_dep_time') is not None:
            self.stop_dep_time = m.get('stop_dep_time')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('tuigaiqian_info') is not None:
            self.tuigaiqian_info = m.get('tuigaiqian_info')
        return self


class TicketChangingDetailResponseBodyModuleTravelerInfoList(TeaModel):
    def __init__(self, birth_date=None, cert_no=None, cert_type=None, open_ticket_status=None, passenger_name=None,
                 passenger_type=None, phone=None, ticket_no=None, user_id=None):
        self.birth_date = birth_date  # type: str
        self.cert_no = cert_no  # type: str
        self.cert_type = cert_type  # type: str
        self.open_ticket_status = open_ticket_status  # type: int
        self.passenger_name = passenger_name  # type: str
        self.passenger_type = passenger_type  # type: str
        self.phone = phone  # type: str
        self.ticket_no = ticket_no  # type: str
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TicketChangingDetailResponseBodyModuleTravelerInfoList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.birth_date is not None:
            result['birth_date'] = self.birth_date
        if self.cert_no is not None:
            result['cert_no'] = self.cert_no
        if self.cert_type is not None:
            result['cert_type'] = self.cert_type
        if self.open_ticket_status is not None:
            result['open_ticket_status'] = self.open_ticket_status
        if self.passenger_name is not None:
            result['passenger_name'] = self.passenger_name
        if self.passenger_type is not None:
            result['passenger_type'] = self.passenger_type
        if self.phone is not None:
            result['phone'] = self.phone
        if self.ticket_no is not None:
            result['ticket_no'] = self.ticket_no
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('birth_date') is not None:
            self.birth_date = m.get('birth_date')
        if m.get('cert_no') is not None:
            self.cert_no = m.get('cert_no')
        if m.get('cert_type') is not None:
            self.cert_type = m.get('cert_type')
        if m.get('open_ticket_status') is not None:
            self.open_ticket_status = m.get('open_ticket_status')
        if m.get('passenger_name') is not None:
            self.passenger_name = m.get('passenger_name')
        if m.get('passenger_type') is not None:
            self.passenger_type = m.get('passenger_type')
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        if m.get('ticket_no') is not None:
            self.ticket_no = m.get('ticket_no')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class TicketChangingDetailResponseBodyModule(TeaModel):
    def __init__(self, alipay_trade_no=None, btrip_order_id=None, btrip_sub_order_id=None, dis_order_id=None,
                 dis_sub_order_id=None, extra=None, flight_info_list=None, last_pay_time=None, pay_status=None, pay_time=None,
                 settle_price=None, settle_type=None, status=None, total_change_price=None, total_price=None,
                 total_upgrade_price=None, traveler_info_list=None):
        self.alipay_trade_no = alipay_trade_no  # type: str
        self.btrip_order_id = btrip_order_id  # type: long
        self.btrip_sub_order_id = btrip_sub_order_id  # type: long
        self.dis_order_id = dis_order_id  # type: str
        self.dis_sub_order_id = dis_sub_order_id  # type: str
        self.extra = extra  # type: str
        self.flight_info_list = flight_info_list  # type: list[TicketChangingDetailResponseBodyModuleFlightInfoList]
        self.last_pay_time = last_pay_time  # type: str
        self.pay_status = pay_status  # type: int
        self.pay_time = pay_time  # type: str
        self.settle_price = settle_price  # type: long
        self.settle_type = settle_type  # type: int
        self.status = status  # type: int
        self.total_change_price = total_change_price  # type: long
        self.total_price = total_price  # type: long
        self.total_upgrade_price = total_upgrade_price  # type: long
        self.traveler_info_list = traveler_info_list  # type: list[TicketChangingDetailResponseBodyModuleTravelerInfoList]

    def validate(self):
        if self.flight_info_list:
            for k in self.flight_info_list:
                if k:
                    k.validate()
        if self.traveler_info_list:
            for k in self.traveler_info_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(TicketChangingDetailResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alipay_trade_no is not None:
            result['alipay_trade_no'] = self.alipay_trade_no
        if self.btrip_order_id is not None:
            result['btrip_order_id'] = self.btrip_order_id
        if self.btrip_sub_order_id is not None:
            result['btrip_sub_order_id'] = self.btrip_sub_order_id
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        if self.dis_sub_order_id is not None:
            result['dis_sub_order_id'] = self.dis_sub_order_id
        if self.extra is not None:
            result['extra'] = self.extra
        result['flight_info_list'] = []
        if self.flight_info_list is not None:
            for k in self.flight_info_list:
                result['flight_info_list'].append(k.to_map() if k else None)
        if self.last_pay_time is not None:
            result['last_pay_time'] = self.last_pay_time
        if self.pay_status is not None:
            result['pay_status'] = self.pay_status
        if self.pay_time is not None:
            result['pay_time'] = self.pay_time
        if self.settle_price is not None:
            result['settle_price'] = self.settle_price
        if self.settle_type is not None:
            result['settle_type'] = self.settle_type
        if self.status is not None:
            result['status'] = self.status
        if self.total_change_price is not None:
            result['total_change_price'] = self.total_change_price
        if self.total_price is not None:
            result['total_price'] = self.total_price
        if self.total_upgrade_price is not None:
            result['total_upgrade_price'] = self.total_upgrade_price
        result['traveler_info_list'] = []
        if self.traveler_info_list is not None:
            for k in self.traveler_info_list:
                result['traveler_info_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('alipay_trade_no') is not None:
            self.alipay_trade_no = m.get('alipay_trade_no')
        if m.get('btrip_order_id') is not None:
            self.btrip_order_id = m.get('btrip_order_id')
        if m.get('btrip_sub_order_id') is not None:
            self.btrip_sub_order_id = m.get('btrip_sub_order_id')
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        if m.get('dis_sub_order_id') is not None:
            self.dis_sub_order_id = m.get('dis_sub_order_id')
        if m.get('extra') is not None:
            self.extra = m.get('extra')
        self.flight_info_list = []
        if m.get('flight_info_list') is not None:
            for k in m.get('flight_info_list'):
                temp_model = TicketChangingDetailResponseBodyModuleFlightInfoList()
                self.flight_info_list.append(temp_model.from_map(k))
        if m.get('last_pay_time') is not None:
            self.last_pay_time = m.get('last_pay_time')
        if m.get('pay_status') is not None:
            self.pay_status = m.get('pay_status')
        if m.get('pay_time') is not None:
            self.pay_time = m.get('pay_time')
        if m.get('settle_price') is not None:
            self.settle_price = m.get('settle_price')
        if m.get('settle_type') is not None:
            self.settle_type = m.get('settle_type')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('total_change_price') is not None:
            self.total_change_price = m.get('total_change_price')
        if m.get('total_price') is not None:
            self.total_price = m.get('total_price')
        if m.get('total_upgrade_price') is not None:
            self.total_upgrade_price = m.get('total_upgrade_price')
        self.traveler_info_list = []
        if m.get('traveler_info_list') is not None:
            for k in m.get('traveler_info_list'):
                temp_model = TicketChangingDetailResponseBodyModuleTravelerInfoList()
                self.traveler_info_list.append(temp_model.from_map(k))
        return self


class TicketChangingDetailResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: TicketChangingDetailResponseBodyModule
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(TicketChangingDetailResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = TicketChangingDetailResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class TicketChangingDetailResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: TicketChangingDetailResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(TicketChangingDetailResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TicketChangingDetailResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TicketChangingEnquiryHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TicketChangingEnquiryHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class TicketChangingEnquiryRequest(TeaModel):
    def __init__(self, arr_city=None, dep_city=None, dis_order_id=None, is_voluntary=None, modify_depart_date=None,
                 modify_flight_no=None, session_id=None):
        self.arr_city = arr_city  # type: str
        self.dep_city = dep_city  # type: str
        self.dis_order_id = dis_order_id  # type: str
        self.is_voluntary = is_voluntary  # type: int
        self.modify_depart_date = modify_depart_date  # type: str
        self.modify_flight_no = modify_flight_no  # type: str
        self.session_id = session_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TicketChangingEnquiryRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_city is not None:
            result['arr_city'] = self.arr_city
        if self.dep_city is not None:
            result['dep_city'] = self.dep_city
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        if self.is_voluntary is not None:
            result['is_voluntary'] = self.is_voluntary
        if self.modify_depart_date is not None:
            result['modify_depart_date'] = self.modify_depart_date
        if self.modify_flight_no is not None:
            result['modify_flight_no'] = self.modify_flight_no
        if self.session_id is not None:
            result['session_id'] = self.session_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('arr_city') is not None:
            self.arr_city = m.get('arr_city')
        if m.get('dep_city') is not None:
            self.dep_city = m.get('dep_city')
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        if m.get('is_voluntary') is not None:
            self.is_voluntary = m.get('is_voluntary')
        if m.get('modify_depart_date') is not None:
            self.modify_depart_date = m.get('modify_depart_date')
        if m.get('modify_flight_no') is not None:
            self.modify_flight_no = m.get('modify_flight_no')
        if m.get('session_id') is not None:
            self.session_id = m.get('session_id')
        return self


class TicketChangingEnquiryResponseBodyModuleFlightInfoListAirlineInfo(TeaModel):
    def __init__(self, airline_code=None, airline_name=None, airline_simple_name=None):
        self.airline_code = airline_code  # type: str
        self.airline_name = airline_name  # type: str
        self.airline_simple_name = airline_simple_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TicketChangingEnquiryResponseBodyModuleFlightInfoListAirlineInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.airline_name is not None:
            result['airline_name'] = self.airline_name
        if self.airline_simple_name is not None:
            result['airline_simple_name'] = self.airline_simple_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('airline_name') is not None:
            self.airline_name = m.get('airline_name')
        if m.get('airline_simple_name') is not None:
            self.airline_simple_name = m.get('airline_simple_name')
        return self


class TicketChangingEnquiryResponseBodyModuleFlightInfoListArrAirportInfo(TeaModel):
    def __init__(self, airport_code=None, airport_name=None, city_code=None, city_name=None, terminal=None):
        self.airport_code = airport_code  # type: str
        self.airport_name = airport_name  # type: str
        self.city_code = city_code  # type: str
        self.city_name = city_name  # type: str
        self.terminal = terminal  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TicketChangingEnquiryResponseBodyModuleFlightInfoListArrAirportInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airport_code is not None:
            result['airport_code'] = self.airport_code
        if self.airport_name is not None:
            result['airport_name'] = self.airport_name
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.terminal is not None:
            result['terminal'] = self.terminal
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('airport_code') is not None:
            self.airport_code = m.get('airport_code')
        if m.get('airport_name') is not None:
            self.airport_name = m.get('airport_name')
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('terminal') is not None:
            self.terminal = m.get('terminal')
        return self


class TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizesDescription(TeaModel):
    def __init__(self, desc=None, icon=None, image=None, title=None):
        self.desc = desc  # type: str
        self.icon = icon  # type: str
        self.image = image  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizesDescription, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.desc is not None:
            result['desc'] = self.desc
        if self.icon is not None:
            result['icon'] = self.icon
        if self.image is not None:
            result['image'] = self.image
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('desc') is not None:
            self.desc = m.get('desc')
        if m.get('icon') is not None:
            self.icon = m.get('icon')
        if m.get('image') is not None:
            self.image = m.get('image')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizesImageDO(TeaModel):
    def __init__(self, image=None, largest=None, middle=None, smallest=None):
        self.image = image  # type: str
        self.largest = largest  # type: str
        self.middle = middle  # type: str
        self.smallest = smallest  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizesImageDO, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.image is not None:
            result['image'] = self.image
        if self.largest is not None:
            result['largest'] = self.largest
        if self.middle is not None:
            result['middle'] = self.middle
        if self.smallest is not None:
            result['smallest'] = self.smallest
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('image') is not None:
            self.image = m.get('image')
        if m.get('largest') is not None:
            self.largest = m.get('largest')
        if m.get('middle') is not None:
            self.middle = m.get('middle')
        if m.get('smallest') is not None:
            self.smallest = m.get('smallest')
        return self


class TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizes(TeaModel):
    def __init__(self, baggage_desc=None, baggage_sub_content_type=None, description=None, image_do=None,
                 is_highlight=None, sub_title=None):
        self.baggage_desc = baggage_desc  # type: list[str]
        self.baggage_sub_content_type = baggage_sub_content_type  # type: int
        self.description = description  # type: TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizesDescription
        self.image_do = image_do  # type: TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizesImageDO
        self.is_highlight = is_highlight  # type: bool
        self.sub_title = sub_title  # type: str

    def validate(self):
        if self.description:
            self.description.validate()
        if self.image_do:
            self.image_do.validate()

    def to_map(self):
        _map = super(TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizes, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.baggage_desc is not None:
            result['baggage_desc'] = self.baggage_desc
        if self.baggage_sub_content_type is not None:
            result['baggage_sub_content_type'] = self.baggage_sub_content_type
        if self.description is not None:
            result['description'] = self.description.to_map()
        if self.image_do is not None:
            result['imageDO'] = self.image_do.to_map()
        if self.is_highlight is not None:
            result['is_highlight'] = self.is_highlight
        if self.sub_title is not None:
            result['subTitle'] = self.sub_title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('baggage_desc') is not None:
            self.baggage_desc = m.get('baggage_desc')
        if m.get('baggage_sub_content_type') is not None:
            self.baggage_sub_content_type = m.get('baggage_sub_content_type')
        if m.get('description') is not None:
            temp_model = TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizesDescription()
            self.description = temp_model.from_map(m['description'])
        if m.get('imageDO') is not None:
            temp_model = TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizesImageDO()
            self.image_do = temp_model.from_map(m['imageDO'])
        if m.get('is_highlight') is not None:
            self.is_highlight = m.get('is_highlight')
        if m.get('subTitle') is not None:
            self.sub_title = m.get('subTitle')
        return self


class TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContents(TeaModel):
    def __init__(self, baggage_desc=None, icon=None, style=None, sub_title=None):
        self.baggage_desc = baggage_desc  # type: str
        self.icon = icon  # type: str
        self.style = style  # type: int
        self.sub_title = sub_title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContents, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.baggage_desc is not None:
            result['baggage_desc'] = self.baggage_desc
        if self.icon is not None:
            result['icon'] = self.icon
        if self.style is not None:
            result['style'] = self.style
        if self.sub_title is not None:
            result['sub_title'] = self.sub_title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('baggage_desc') is not None:
            self.baggage_desc = m.get('baggage_desc')
        if m.get('icon') is not None:
            self.icon = m.get('icon')
        if m.get('style') is not None:
            self.style = m.get('style')
        if m.get('sub_title') is not None:
            self.sub_title = m.get('sub_title')
        return self


class TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItems(TeaModel):
    def __init__(self, attributes=None, baggage_sub_content_visualizes=None, baggage_sub_contents=None,
                 content=None, is_struct=None, ptc=None, title=None):
        # attributes
        self.attributes = attributes  # type: dict[str, any]
        self.baggage_sub_content_visualizes = baggage_sub_content_visualizes  # type: list[TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizes]
        self.baggage_sub_contents = baggage_sub_contents  # type: list[TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContents]
        self.content = content  # type: str
        self.is_struct = is_struct  # type: bool
        self.ptc = ptc  # type: str
        self.title = title  # type: str

    def validate(self):
        if self.baggage_sub_content_visualizes:
            for k in self.baggage_sub_content_visualizes:
                if k:
                    k.validate()
        if self.baggage_sub_contents:
            for k in self.baggage_sub_contents:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItems, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.attributes is not None:
            result['attributes'] = self.attributes
        result['baggage_sub_content_visualizes'] = []
        if self.baggage_sub_content_visualizes is not None:
            for k in self.baggage_sub_content_visualizes:
                result['baggage_sub_content_visualizes'].append(k.to_map() if k else None)
        result['baggage_sub_contents'] = []
        if self.baggage_sub_contents is not None:
            for k in self.baggage_sub_contents:
                result['baggage_sub_contents'].append(k.to_map() if k else None)
        if self.content is not None:
            result['content'] = self.content
        if self.is_struct is not None:
            result['is_struct'] = self.is_struct
        if self.ptc is not None:
            result['ptc'] = self.ptc
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('attributes') is not None:
            self.attributes = m.get('attributes')
        self.baggage_sub_content_visualizes = []
        if m.get('baggage_sub_content_visualizes') is not None:
            for k in m.get('baggage_sub_content_visualizes'):
                temp_model = TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizes()
                self.baggage_sub_content_visualizes.append(temp_model.from_map(k))
        self.baggage_sub_contents = []
        if m.get('baggage_sub_contents') is not None:
            for k in m.get('baggage_sub_contents'):
                temp_model = TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContents()
                self.baggage_sub_contents.append(temp_model.from_map(k))
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('is_struct') is not None:
            self.is_struct = m.get('is_struct')
        if m.get('ptc') is not None:
            self.ptc = m.get('ptc')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsTips(TeaModel):
    def __init__(self, logo=None, tips_desc=None, tips_image=None):
        self.logo = logo  # type: str
        self.tips_desc = tips_desc  # type: str
        self.tips_image = tips_image  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsTips, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.logo is not None:
            result['logo'] = self.logo
        if self.tips_desc is not None:
            result['tips_desc'] = self.tips_desc
        if self.tips_image is not None:
            result['tips_image'] = self.tips_image
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('logo') is not None:
            self.logo = m.get('logo')
        if m.get('tips_desc') is not None:
            self.tips_desc = m.get('tips_desc')
        if m.get('tips_image') is not None:
            self.tips_image = m.get('tips_image')
        return self


class TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetails(TeaModel):
    def __init__(self, baggage_sub_items=None, index=None, table_head=None, tips=None, title=None, type=None):
        self.baggage_sub_items = baggage_sub_items  # type: list[TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItems]
        self.index = index  # type: int
        self.table_head = table_head  # type: str
        self.tips = tips  # type: TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsTips
        self.title = title  # type: str
        self.type = type  # type: int

    def validate(self):
        if self.baggage_sub_items:
            for k in self.baggage_sub_items:
                if k:
                    k.validate()
        if self.tips:
            self.tips.validate()

    def to_map(self):
        _map = super(TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetails, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['baggage_sub_items'] = []
        if self.baggage_sub_items is not None:
            for k in self.baggage_sub_items:
                result['baggage_sub_items'].append(k.to_map() if k else None)
        if self.index is not None:
            result['index'] = self.index
        if self.table_head is not None:
            result['table_head'] = self.table_head
        if self.tips is not None:
            result['tips'] = self.tips.to_map()
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.baggage_sub_items = []
        if m.get('baggage_sub_items') is not None:
            for k in m.get('baggage_sub_items'):
                temp_model = TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItems()
                self.baggage_sub_items.append(temp_model.from_map(k))
        if m.get('index') is not None:
            self.index = m.get('index')
        if m.get('table_head') is not None:
            self.table_head = m.get('table_head')
        if m.get('tips') is not None:
            temp_model = TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsTips()
            self.tips = temp_model.from_map(m['tips'])
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsExtraContents(TeaModel):
    def __init__(self, content=None, icon=None, title=None):
        self.content = content  # type: str
        self.icon = icon  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsExtraContents, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.icon is not None:
            result['icon'] = self.icon
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('icon') is not None:
            self.icon = m.get('icon')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsRefundSubItemsRefundSubContents(TeaModel):
    def __init__(self, fee_desc=None, fee_range=None, style=None):
        self.fee_desc = fee_desc  # type: str
        self.fee_range = fee_range  # type: str
        self.style = style  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsRefundSubItemsRefundSubContents, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.fee_desc is not None:
            result['fee_desc'] = self.fee_desc
        if self.fee_range is not None:
            result['fee_range'] = self.fee_range
        if self.style is not None:
            result['style'] = self.style
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('fee_desc') is not None:
            self.fee_desc = m.get('fee_desc')
        if m.get('fee_range') is not None:
            self.fee_range = m.get('fee_range')
        if m.get('style') is not None:
            self.style = m.get('style')
        return self


class TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsRefundSubItems(TeaModel):
    def __init__(self, content=None, is_struct=None, ptc=None, refund_sub_contents=None, title=None):
        self.content = content  # type: str
        self.is_struct = is_struct  # type: bool
        self.ptc = ptc  # type: str
        self.refund_sub_contents = refund_sub_contents  # type: list[TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsRefundSubItemsRefundSubContents]
        self.title = title  # type: str

    def validate(self):
        if self.refund_sub_contents:
            for k in self.refund_sub_contents:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsRefundSubItems, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.is_struct is not None:
            result['is_struct'] = self.is_struct
        if self.ptc is not None:
            result['ptc'] = self.ptc
        result['refund_sub_contents'] = []
        if self.refund_sub_contents is not None:
            for k in self.refund_sub_contents:
                result['refund_sub_contents'].append(k.to_map() if k else None)
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('is_struct') is not None:
            self.is_struct = m.get('is_struct')
        if m.get('ptc') is not None:
            self.ptc = m.get('ptc')
        self.refund_sub_contents = []
        if m.get('refund_sub_contents') is not None:
            for k in m.get('refund_sub_contents'):
                temp_model = TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsRefundSubItemsRefundSubContents()
                self.refund_sub_contents.append(temp_model.from_map(k))
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetails(TeaModel):
    def __init__(self, extra_contents=None, index=None, refund_sub_items=None, table_head=None, title=None,
                 type=None):
        self.extra_contents = extra_contents  # type: list[TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsExtraContents]
        self.index = index  # type: int
        self.refund_sub_items = refund_sub_items  # type: list[TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsRefundSubItems]
        self.table_head = table_head  # type: str
        self.title = title  # type: str
        self.type = type  # type: int

    def validate(self):
        if self.extra_contents:
            for k in self.extra_contents:
                if k:
                    k.validate()
        if self.refund_sub_items:
            for k in self.refund_sub_items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetails, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['extra_contents'] = []
        if self.extra_contents is not None:
            for k in self.extra_contents:
                result['extra_contents'].append(k.to_map() if k else None)
        if self.index is not None:
            result['index'] = self.index
        result['refund_sub_items'] = []
        if self.refund_sub_items is not None:
            for k in self.refund_sub_items:
                result['refund_sub_items'].append(k.to_map() if k else None)
        if self.table_head is not None:
            result['table_head'] = self.table_head
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.extra_contents = []
        if m.get('extra_contents') is not None:
            for k in m.get('extra_contents'):
                temp_model = TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsExtraContents()
                self.extra_contents.append(temp_model.from_map(k))
        if m.get('index') is not None:
            self.index = m.get('index')
        self.refund_sub_items = []
        if m.get('refund_sub_items') is not None:
            for k in m.get('refund_sub_items'):
                temp_model = TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsRefundSubItems()
                self.refund_sub_items.append(temp_model.from_map(k))
        if m.get('table_head') is not None:
            self.table_head = m.get('table_head')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsExtraContents(TeaModel):
    def __init__(self, content=None, icon=None, title=None):
        self.content = content  # type: str
        self.icon = icon  # type: str
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsExtraContents, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.icon is not None:
            result['icon'] = self.icon
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('icon') is not None:
            self.icon = m.get('icon')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsRefundSubItemsRefundSubContents(TeaModel):
    def __init__(self, fee_desc=None, fee_range=None, style=None):
        self.fee_desc = fee_desc  # type: str
        self.fee_range = fee_range  # type: str
        self.style = style  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsRefundSubItemsRefundSubContents, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.fee_desc is not None:
            result['fee_desc'] = self.fee_desc
        if self.fee_range is not None:
            result['fee_range'] = self.fee_range
        if self.style is not None:
            result['style'] = self.style
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('fee_desc') is not None:
            self.fee_desc = m.get('fee_desc')
        if m.get('fee_range') is not None:
            self.fee_range = m.get('fee_range')
        if m.get('style') is not None:
            self.style = m.get('style')
        return self


class TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsRefundSubItems(TeaModel):
    def __init__(self, content=None, is_struct=None, ptc=None, refund_sub_contents=None, title=None):
        self.content = content  # type: str
        self.is_struct = is_struct  # type: bool
        self.ptc = ptc  # type: str
        self.refund_sub_contents = refund_sub_contents  # type: list[TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsRefundSubItemsRefundSubContents]
        self.title = title  # type: str

    def validate(self):
        if self.refund_sub_contents:
            for k in self.refund_sub_contents:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsRefundSubItems, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.is_struct is not None:
            result['is_struct'] = self.is_struct
        if self.ptc is not None:
            result['ptc'] = self.ptc
        result['refund_sub_contents'] = []
        if self.refund_sub_contents is not None:
            for k in self.refund_sub_contents:
                result['refund_sub_contents'].append(k.to_map() if k else None)
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('is_struct') is not None:
            self.is_struct = m.get('is_struct')
        if m.get('ptc') is not None:
            self.ptc = m.get('ptc')
        self.refund_sub_contents = []
        if m.get('refund_sub_contents') is not None:
            for k in m.get('refund_sub_contents'):
                temp_model = TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsRefundSubItemsRefundSubContents()
                self.refund_sub_contents.append(temp_model.from_map(k))
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetails(TeaModel):
    def __init__(self, extra_contents=None, index=None, refund_sub_items=None, table_head=None, title=None,
                 type=None):
        self.extra_contents = extra_contents  # type: list[TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsExtraContents]
        self.index = index  # type: int
        self.refund_sub_items = refund_sub_items  # type: list[TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsRefundSubItems]
        self.table_head = table_head  # type: str
        self.title = title  # type: str
        self.type = type  # type: int

    def validate(self):
        if self.extra_contents:
            for k in self.extra_contents:
                if k:
                    k.validate()
        if self.refund_sub_items:
            for k in self.refund_sub_items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetails, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['extra_contents'] = []
        if self.extra_contents is not None:
            for k in self.extra_contents:
                result['extra_contents'].append(k.to_map() if k else None)
        if self.index is not None:
            result['index'] = self.index
        result['refund_sub_items'] = []
        if self.refund_sub_items is not None:
            for k in self.refund_sub_items:
                result['refund_sub_items'].append(k.to_map() if k else None)
        if self.table_head is not None:
            result['table_head'] = self.table_head
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.extra_contents = []
        if m.get('extra_contents') is not None:
            for k in m.get('extra_contents'):
                temp_model = TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsExtraContents()
                self.extra_contents.append(temp_model.from_map(k))
        if m.get('index') is not None:
            self.index = m.get('index')
        self.refund_sub_items = []
        if m.get('refund_sub_items') is not None:
            for k in m.get('refund_sub_items'):
                temp_model = TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsRefundSubItems()
                self.refund_sub_items.append(temp_model.from_map(k))
        if m.get('table_head') is not None:
            self.table_head = m.get('table_head')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRq(TeaModel):
    def __init__(self, baggage_details=None, change_details=None, refund_details=None):
        self.baggage_details = baggage_details  # type: list[TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetails]
        self.change_details = change_details  # type: list[TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetails]
        self.refund_details = refund_details  # type: list[TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetails]

    def validate(self):
        if self.baggage_details:
            for k in self.baggage_details:
                if k:
                    k.validate()
        if self.change_details:
            for k in self.change_details:
                if k:
                    k.validate()
        if self.refund_details:
            for k in self.refund_details:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRq, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['baggage_details'] = []
        if self.baggage_details is not None:
            for k in self.baggage_details:
                result['baggage_details'].append(k.to_map() if k else None)
        result['change_details'] = []
        if self.change_details is not None:
            for k in self.change_details:
                result['change_details'].append(k.to_map() if k else None)
        result['refund_details'] = []
        if self.refund_details is not None:
            for k in self.refund_details:
                result['refund_details'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.baggage_details = []
        if m.get('baggage_details') is not None:
            for k in m.get('baggage_details'):
                temp_model = TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetails()
                self.baggage_details.append(temp_model.from_map(k))
        self.change_details = []
        if m.get('change_details') is not None:
            for k in m.get('change_details'):
                temp_model = TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetails()
                self.change_details.append(temp_model.from_map(k))
        self.refund_details = []
        if m.get('refund_details') is not None:
            for k in m.get('refund_details'):
                temp_model = TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetails()
                self.refund_details.append(temp_model.from_map(k))
        return self


class TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListModifyPriceList(TeaModel):
    def __init__(self, passenger_type=None, ticket_price=None, upgrade_fee=None, upgrade_price=None):
        self.passenger_type = passenger_type  # type: int
        self.ticket_price = ticket_price  # type: int
        self.upgrade_fee = upgrade_fee  # type: int
        self.upgrade_price = upgrade_price  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListModifyPriceList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.passenger_type is not None:
            result['passenger_type'] = self.passenger_type
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.upgrade_fee is not None:
            result['upgrade_fee'] = self.upgrade_fee
        if self.upgrade_price is not None:
            result['upgrade_price'] = self.upgrade_price
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('passenger_type') is not None:
            self.passenger_type = m.get('passenger_type')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('upgrade_fee') is not None:
            self.upgrade_fee = m.get('upgrade_fee')
        if m.get('upgrade_price') is not None:
            self.upgrade_price = m.get('upgrade_price')
        return self


class TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinList(TeaModel):
    def __init__(self, cabin=None, cabin_class=None, cabin_desc=None, cabin_discount=None,
                 change_ota_item_rule_rq=None, child_cabin=None, left_num=None, modify_price_list=None, ota_itemid=None):
        self.cabin = cabin  # type: str
        self.cabin_class = cabin_class  # type: str
        self.cabin_desc = cabin_desc  # type: str
        self.cabin_discount = cabin_discount  # type: int
        self.change_ota_item_rule_rq = change_ota_item_rule_rq  # type: TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRq
        self.child_cabin = child_cabin  # type: str
        self.left_num = left_num  # type: str
        self.modify_price_list = modify_price_list  # type: list[TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListModifyPriceList]
        self.ota_itemid = ota_itemid  # type: str

    def validate(self):
        if self.change_ota_item_rule_rq:
            self.change_ota_item_rule_rq.validate()
        if self.modify_price_list:
            for k in self.modify_price_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cabin is not None:
            result['cabin'] = self.cabin
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.cabin_desc is not None:
            result['cabin_desc'] = self.cabin_desc
        if self.cabin_discount is not None:
            result['cabin_discount'] = self.cabin_discount
        if self.change_ota_item_rule_rq is not None:
            result['change_ota_item_rule_rq'] = self.change_ota_item_rule_rq.to_map()
        if self.child_cabin is not None:
            result['child_cabin'] = self.child_cabin
        if self.left_num is not None:
            result['left_num'] = self.left_num
        result['modify_price_list'] = []
        if self.modify_price_list is not None:
            for k in self.modify_price_list:
                result['modify_price_list'].append(k.to_map() if k else None)
        if self.ota_itemid is not None:
            result['ota_itemid'] = self.ota_itemid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('cabin') is not None:
            self.cabin = m.get('cabin')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('cabin_desc') is not None:
            self.cabin_desc = m.get('cabin_desc')
        if m.get('cabin_discount') is not None:
            self.cabin_discount = m.get('cabin_discount')
        if m.get('change_ota_item_rule_rq') is not None:
            temp_model = TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRq()
            self.change_ota_item_rule_rq = temp_model.from_map(m['change_ota_item_rule_rq'])
        if m.get('child_cabin') is not None:
            self.child_cabin = m.get('child_cabin')
        if m.get('left_num') is not None:
            self.left_num = m.get('left_num')
        self.modify_price_list = []
        if m.get('modify_price_list') is not None:
            for k in m.get('modify_price_list'):
                temp_model = TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListModifyPriceList()
                self.modify_price_list.append(temp_model.from_map(k))
        if m.get('ota_itemid') is not None:
            self.ota_itemid = m.get('ota_itemid')
        return self


class TicketChangingEnquiryResponseBodyModuleFlightInfoListDepAirportInfo(TeaModel):
    def __init__(self, airport_code=None, airport_name=None, city_code=None, city_name=None, terminal=None):
        self.airport_code = airport_code  # type: str
        self.airport_name = airport_name  # type: str
        self.city_code = city_code  # type: str
        self.city_name = city_name  # type: str
        self.terminal = terminal  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TicketChangingEnquiryResponseBodyModuleFlightInfoListDepAirportInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airport_code is not None:
            result['airport_code'] = self.airport_code
        if self.airport_name is not None:
            result['airport_name'] = self.airport_name
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.terminal is not None:
            result['terminal'] = self.terminal
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('airport_code') is not None:
            self.airport_code = m.get('airport_code')
        if m.get('airport_name') is not None:
            self.airport_name = m.get('airport_name')
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('terminal') is not None:
            self.terminal = m.get('terminal')
        return self


class TicketChangingEnquiryResponseBodyModuleFlightInfoListLowestCabinPrice(TeaModel):
    def __init__(self, passenger_type=None, ticket_price=None, upgrade_fee=None, upgrade_price=None):
        self.passenger_type = passenger_type  # type: int
        self.ticket_price = ticket_price  # type: int
        self.upgrade_fee = upgrade_fee  # type: int
        self.upgrade_price = upgrade_price  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(TicketChangingEnquiryResponseBodyModuleFlightInfoListLowestCabinPrice, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.passenger_type is not None:
            result['passenger_type'] = self.passenger_type
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.upgrade_fee is not None:
            result['upgrade_fee'] = self.upgrade_fee
        if self.upgrade_price is not None:
            result['upgrade_price'] = self.upgrade_price
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('passenger_type') is not None:
            self.passenger_type = m.get('passenger_type')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('upgrade_fee') is not None:
            self.upgrade_fee = m.get('upgrade_fee')
        if m.get('upgrade_price') is not None:
            self.upgrade_price = m.get('upgrade_price')
        return self


class TicketChangingEnquiryResponseBodyModuleFlightInfoList(TeaModel):
    def __init__(self, airline_info=None, arr_airport_info=None, cabin_list=None, carrier_airline=None,
                 carrier_no=None, dep_airport_info=None, dep_city_code=None, flight_no=None, is_share=None, lowest_cabin=None,
                 lowest_cabin_class=None, lowest_cabin_desc=None, lowest_cabin_num=None, lowest_cabin_price=None,
                 modify_flight_arr_time=None, modify_flight_dep_date=None, modify_flight_dep_time=None, session_id=None):
        self.airline_info = airline_info  # type: TicketChangingEnquiryResponseBodyModuleFlightInfoListAirlineInfo
        self.arr_airport_info = arr_airport_info  # type: TicketChangingEnquiryResponseBodyModuleFlightInfoListArrAirportInfo
        self.cabin_list = cabin_list  # type: list[TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinList]
        self.carrier_airline = carrier_airline  # type: str
        self.carrier_no = carrier_no  # type: str
        self.dep_airport_info = dep_airport_info  # type: TicketChangingEnquiryResponseBodyModuleFlightInfoListDepAirportInfo
        self.dep_city_code = dep_city_code  # type: str
        self.flight_no = flight_no  # type: str
        self.is_share = is_share  # type: bool
        self.lowest_cabin = lowest_cabin  # type: str
        self.lowest_cabin_class = lowest_cabin_class  # type: str
        self.lowest_cabin_desc = lowest_cabin_desc  # type: str
        self.lowest_cabin_num = lowest_cabin_num  # type: str
        self.lowest_cabin_price = lowest_cabin_price  # type: list[TicketChangingEnquiryResponseBodyModuleFlightInfoListLowestCabinPrice]
        self.modify_flight_arr_time = modify_flight_arr_time  # type: str
        self.modify_flight_dep_date = modify_flight_dep_date  # type: str
        self.modify_flight_dep_time = modify_flight_dep_time  # type: str
        self.session_id = session_id  # type: str

    def validate(self):
        if self.airline_info:
            self.airline_info.validate()
        if self.arr_airport_info:
            self.arr_airport_info.validate()
        if self.cabin_list:
            for k in self.cabin_list:
                if k:
                    k.validate()
        if self.dep_airport_info:
            self.dep_airport_info.validate()
        if self.lowest_cabin_price:
            for k in self.lowest_cabin_price:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(TicketChangingEnquiryResponseBodyModuleFlightInfoList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_info is not None:
            result['airline_info'] = self.airline_info.to_map()
        if self.arr_airport_info is not None:
            result['arr_airport_info'] = self.arr_airport_info.to_map()
        result['cabin_list'] = []
        if self.cabin_list is not None:
            for k in self.cabin_list:
                result['cabin_list'].append(k.to_map() if k else None)
        if self.carrier_airline is not None:
            result['carrier_airline'] = self.carrier_airline
        if self.carrier_no is not None:
            result['carrier_no'] = self.carrier_no
        if self.dep_airport_info is not None:
            result['dep_airport_info'] = self.dep_airport_info.to_map()
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        if self.is_share is not None:
            result['is_share'] = self.is_share
        if self.lowest_cabin is not None:
            result['lowest_cabin'] = self.lowest_cabin
        if self.lowest_cabin_class is not None:
            result['lowest_cabin_class'] = self.lowest_cabin_class
        if self.lowest_cabin_desc is not None:
            result['lowest_cabin_desc'] = self.lowest_cabin_desc
        if self.lowest_cabin_num is not None:
            result['lowest_cabin_num'] = self.lowest_cabin_num
        result['lowest_cabin_price'] = []
        if self.lowest_cabin_price is not None:
            for k in self.lowest_cabin_price:
                result['lowest_cabin_price'].append(k.to_map() if k else None)
        if self.modify_flight_arr_time is not None:
            result['modify_flight_arr_time'] = self.modify_flight_arr_time
        if self.modify_flight_dep_date is not None:
            result['modify_flight_dep_date'] = self.modify_flight_dep_date
        if self.modify_flight_dep_time is not None:
            result['modify_flight_dep_time'] = self.modify_flight_dep_time
        if self.session_id is not None:
            result['session_id'] = self.session_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('airline_info') is not None:
            temp_model = TicketChangingEnquiryResponseBodyModuleFlightInfoListAirlineInfo()
            self.airline_info = temp_model.from_map(m['airline_info'])
        if m.get('arr_airport_info') is not None:
            temp_model = TicketChangingEnquiryResponseBodyModuleFlightInfoListArrAirportInfo()
            self.arr_airport_info = temp_model.from_map(m['arr_airport_info'])
        self.cabin_list = []
        if m.get('cabin_list') is not None:
            for k in m.get('cabin_list'):
                temp_model = TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinList()
                self.cabin_list.append(temp_model.from_map(k))
        if m.get('carrier_airline') is not None:
            self.carrier_airline = m.get('carrier_airline')
        if m.get('carrier_no') is not None:
            self.carrier_no = m.get('carrier_no')
        if m.get('dep_airport_info') is not None:
            temp_model = TicketChangingEnquiryResponseBodyModuleFlightInfoListDepAirportInfo()
            self.dep_airport_info = temp_model.from_map(m['dep_airport_info'])
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        if m.get('is_share') is not None:
            self.is_share = m.get('is_share')
        if m.get('lowest_cabin') is not None:
            self.lowest_cabin = m.get('lowest_cabin')
        if m.get('lowest_cabin_class') is not None:
            self.lowest_cabin_class = m.get('lowest_cabin_class')
        if m.get('lowest_cabin_desc') is not None:
            self.lowest_cabin_desc = m.get('lowest_cabin_desc')
        if m.get('lowest_cabin_num') is not None:
            self.lowest_cabin_num = m.get('lowest_cabin_num')
        self.lowest_cabin_price = []
        if m.get('lowest_cabin_price') is not None:
            for k in m.get('lowest_cabin_price'):
                temp_model = TicketChangingEnquiryResponseBodyModuleFlightInfoListLowestCabinPrice()
                self.lowest_cabin_price.append(temp_model.from_map(k))
        if m.get('modify_flight_arr_time') is not None:
            self.modify_flight_arr_time = m.get('modify_flight_arr_time')
        if m.get('modify_flight_dep_date') is not None:
            self.modify_flight_dep_date = m.get('modify_flight_dep_date')
        if m.get('modify_flight_dep_time') is not None:
            self.modify_flight_dep_time = m.get('modify_flight_dep_time')
        if m.get('session_id') is not None:
            self.session_id = m.get('session_id')
        return self


class TicketChangingEnquiryResponseBodyModule(TeaModel):
    def __init__(self, flight_info_list=None):
        self.flight_info_list = flight_info_list  # type: list[TicketChangingEnquiryResponseBodyModuleFlightInfoList]

    def validate(self):
        if self.flight_info_list:
            for k in self.flight_info_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(TicketChangingEnquiryResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['flight_info_list'] = []
        if self.flight_info_list is not None:
            for k in self.flight_info_list:
                result['flight_info_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.flight_info_list = []
        if m.get('flight_info_list') is not None:
            for k in m.get('flight_info_list'):
                temp_model = TicketChangingEnquiryResponseBodyModuleFlightInfoList()
                self.flight_info_list.append(temp_model.from_map(k))
        return self


class TicketChangingEnquiryResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: TicketChangingEnquiryResponseBodyModule
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(TicketChangingEnquiryResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = TicketChangingEnquiryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class TicketChangingEnquiryResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: TicketChangingEnquiryResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(TicketChangingEnquiryResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TicketChangingEnquiryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TicketChangingFlightListHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TicketChangingFlightListHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class TicketChangingFlightListRequestTravelerInfoList(TeaModel):
    def __init__(self, arr_city=None, dep_city=None, name=None, type=None, user_id=None):
        self.arr_city = arr_city  # type: str
        self.dep_city = dep_city  # type: str
        self.name = name  # type: str
        self.type = type  # type: str
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TicketChangingFlightListRequestTravelerInfoList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_city is not None:
            result['arr_city'] = self.arr_city
        if self.dep_city is not None:
            result['dep_city'] = self.dep_city
        if self.name is not None:
            result['name'] = self.name
        if self.type is not None:
            result['type'] = self.type
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('arr_city') is not None:
            self.arr_city = m.get('arr_city')
        if m.get('dep_city') is not None:
            self.dep_city = m.get('dep_city')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class TicketChangingFlightListRequest(TeaModel):
    def __init__(self, arr_city=None, dep_city=None, dep_date=None, dis_order_id=None, is_voluntary=None,
                 traveler_info_list=None):
        self.arr_city = arr_city  # type: str
        self.dep_city = dep_city  # type: str
        self.dep_date = dep_date  # type: str
        self.dis_order_id = dis_order_id  # type: str
        self.is_voluntary = is_voluntary  # type: int
        self.traveler_info_list = traveler_info_list  # type: list[TicketChangingFlightListRequestTravelerInfoList]

    def validate(self):
        if self.traveler_info_list:
            for k in self.traveler_info_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(TicketChangingFlightListRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_city is not None:
            result['arr_city'] = self.arr_city
        if self.dep_city is not None:
            result['dep_city'] = self.dep_city
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        if self.is_voluntary is not None:
            result['is_voluntary'] = self.is_voluntary
        result['traveler_info_list'] = []
        if self.traveler_info_list is not None:
            for k in self.traveler_info_list:
                result['traveler_info_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('arr_city') is not None:
            self.arr_city = m.get('arr_city')
        if m.get('dep_city') is not None:
            self.dep_city = m.get('dep_city')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        if m.get('is_voluntary') is not None:
            self.is_voluntary = m.get('is_voluntary')
        self.traveler_info_list = []
        if m.get('traveler_info_list') is not None:
            for k in m.get('traveler_info_list'):
                temp_model = TicketChangingFlightListRequestTravelerInfoList()
                self.traveler_info_list.append(temp_model.from_map(k))
        return self


class TicketChangingFlightListShrinkRequest(TeaModel):
    def __init__(self, arr_city=None, dep_city=None, dep_date=None, dis_order_id=None, is_voluntary=None,
                 traveler_info_list_shrink=None):
        self.arr_city = arr_city  # type: str
        self.dep_city = dep_city  # type: str
        self.dep_date = dep_date  # type: str
        self.dis_order_id = dis_order_id  # type: str
        self.is_voluntary = is_voluntary  # type: int
        self.traveler_info_list_shrink = traveler_info_list_shrink  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TicketChangingFlightListShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_city is not None:
            result['arr_city'] = self.arr_city
        if self.dep_city is not None:
            result['dep_city'] = self.dep_city
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        if self.is_voluntary is not None:
            result['is_voluntary'] = self.is_voluntary
        if self.traveler_info_list_shrink is not None:
            result['traveler_info_list'] = self.traveler_info_list_shrink
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('arr_city') is not None:
            self.arr_city = m.get('arr_city')
        if m.get('dep_city') is not None:
            self.dep_city = m.get('dep_city')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        if m.get('is_voluntary') is not None:
            self.is_voluntary = m.get('is_voluntary')
        if m.get('traveler_info_list') is not None:
            self.traveler_info_list_shrink = m.get('traveler_info_list')
        return self


class TicketChangingFlightListResponseBodyModuleFlightInfoListAirlineInfo(TeaModel):
    def __init__(self, airline_code=None, airline_name=None, airline_simple_name=None):
        self.airline_code = airline_code  # type: str
        self.airline_name = airline_name  # type: str
        self.airline_simple_name = airline_simple_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TicketChangingFlightListResponseBodyModuleFlightInfoListAirlineInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.airline_name is not None:
            result['airline_name'] = self.airline_name
        if self.airline_simple_name is not None:
            result['airline_simple_name'] = self.airline_simple_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('airline_name') is not None:
            self.airline_name = m.get('airline_name')
        if m.get('airline_simple_name') is not None:
            self.airline_simple_name = m.get('airline_simple_name')
        return self


class TicketChangingFlightListResponseBodyModuleFlightInfoListArrAirportInfo(TeaModel):
    def __init__(self, airport_code=None, airport_name=None, city_code=None, city_name=None, terminal=None):
        self.airport_code = airport_code  # type: str
        self.airport_name = airport_name  # type: str
        self.city_code = city_code  # type: str
        self.city_name = city_name  # type: str
        self.terminal = terminal  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TicketChangingFlightListResponseBodyModuleFlightInfoListArrAirportInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airport_code is not None:
            result['airport_code'] = self.airport_code
        if self.airport_name is not None:
            result['airport_name'] = self.airport_name
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.terminal is not None:
            result['terminal'] = self.terminal
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('airport_code') is not None:
            self.airport_code = m.get('airport_code')
        if m.get('airport_name') is not None:
            self.airport_name = m.get('airport_name')
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('terminal') is not None:
            self.terminal = m.get('terminal')
        return self


class TicketChangingFlightListResponseBodyModuleFlightInfoListCabinListModifyPriceList(TeaModel):
    def __init__(self, passenger_type=None, ticket_price=None, upgrade_fee=None, upgrade_price=None):
        self.passenger_type = passenger_type  # type: int
        self.ticket_price = ticket_price  # type: int
        self.upgrade_fee = upgrade_fee  # type: int
        self.upgrade_price = upgrade_price  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(TicketChangingFlightListResponseBodyModuleFlightInfoListCabinListModifyPriceList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.passenger_type is not None:
            result['passenger_type'] = self.passenger_type
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.upgrade_fee is not None:
            result['upgrade_fee'] = self.upgrade_fee
        if self.upgrade_price is not None:
            result['upgrade_price'] = self.upgrade_price
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('passenger_type') is not None:
            self.passenger_type = m.get('passenger_type')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('upgrade_fee') is not None:
            self.upgrade_fee = m.get('upgrade_fee')
        if m.get('upgrade_price') is not None:
            self.upgrade_price = m.get('upgrade_price')
        return self


class TicketChangingFlightListResponseBodyModuleFlightInfoListCabinList(TeaModel):
    def __init__(self, cabin=None, cabin_class=None, cabin_desc=None, cabin_discount=None, child_cabin=None,
                 left_num=None, modify_price_list=None, ota_itemid=None):
        self.cabin = cabin  # type: str
        self.cabin_class = cabin_class  # type: str
        self.cabin_desc = cabin_desc  # type: str
        self.cabin_discount = cabin_discount  # type: int
        self.child_cabin = child_cabin  # type: str
        self.left_num = left_num  # type: str
        self.modify_price_list = modify_price_list  # type: list[TicketChangingFlightListResponseBodyModuleFlightInfoListCabinListModifyPriceList]
        self.ota_itemid = ota_itemid  # type: str

    def validate(self):
        if self.modify_price_list:
            for k in self.modify_price_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(TicketChangingFlightListResponseBodyModuleFlightInfoListCabinList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cabin is not None:
            result['cabin'] = self.cabin
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.cabin_desc is not None:
            result['cabin_desc'] = self.cabin_desc
        if self.cabin_discount is not None:
            result['cabin_discount'] = self.cabin_discount
        if self.child_cabin is not None:
            result['child_cabin'] = self.child_cabin
        if self.left_num is not None:
            result['left_num'] = self.left_num
        result['modify_price_list'] = []
        if self.modify_price_list is not None:
            for k in self.modify_price_list:
                result['modify_price_list'].append(k.to_map() if k else None)
        if self.ota_itemid is not None:
            result['ota_itemid'] = self.ota_itemid
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('cabin') is not None:
            self.cabin = m.get('cabin')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('cabin_desc') is not None:
            self.cabin_desc = m.get('cabin_desc')
        if m.get('cabin_discount') is not None:
            self.cabin_discount = m.get('cabin_discount')
        if m.get('child_cabin') is not None:
            self.child_cabin = m.get('child_cabin')
        if m.get('left_num') is not None:
            self.left_num = m.get('left_num')
        self.modify_price_list = []
        if m.get('modify_price_list') is not None:
            for k in m.get('modify_price_list'):
                temp_model = TicketChangingFlightListResponseBodyModuleFlightInfoListCabinListModifyPriceList()
                self.modify_price_list.append(temp_model.from_map(k))
        if m.get('ota_itemid') is not None:
            self.ota_itemid = m.get('ota_itemid')
        return self


class TicketChangingFlightListResponseBodyModuleFlightInfoListDepAirportInfo(TeaModel):
    def __init__(self, airport_code=None, airport_name=None, city_code=None, city_name=None, terminal=None):
        self.airport_code = airport_code  # type: str
        self.airport_name = airport_name  # type: str
        self.city_code = city_code  # type: str
        self.city_name = city_name  # type: str
        self.terminal = terminal  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TicketChangingFlightListResponseBodyModuleFlightInfoListDepAirportInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airport_code is not None:
            result['airport_code'] = self.airport_code
        if self.airport_name is not None:
            result['airport_name'] = self.airport_name
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.terminal is not None:
            result['terminal'] = self.terminal
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('airport_code') is not None:
            self.airport_code = m.get('airport_code')
        if m.get('airport_name') is not None:
            self.airport_name = m.get('airport_name')
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('terminal') is not None:
            self.terminal = m.get('terminal')
        return self


class TicketChangingFlightListResponseBodyModuleFlightInfoListLowestCabinPrice(TeaModel):
    def __init__(self, passenger_type=None, ticket_price=None, upgrade_fee=None, upgrade_price=None):
        self.passenger_type = passenger_type  # type: int
        self.ticket_price = ticket_price  # type: int
        self.upgrade_fee = upgrade_fee  # type: int
        self.upgrade_price = upgrade_price  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(TicketChangingFlightListResponseBodyModuleFlightInfoListLowestCabinPrice, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.passenger_type is not None:
            result['passenger_type'] = self.passenger_type
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.upgrade_fee is not None:
            result['upgrade_fee'] = self.upgrade_fee
        if self.upgrade_price is not None:
            result['upgrade_price'] = self.upgrade_price
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('passenger_type') is not None:
            self.passenger_type = m.get('passenger_type')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('upgrade_fee') is not None:
            self.upgrade_fee = m.get('upgrade_fee')
        if m.get('upgrade_price') is not None:
            self.upgrade_price = m.get('upgrade_price')
        return self


class TicketChangingFlightListResponseBodyModuleFlightInfoList(TeaModel):
    def __init__(self, airline_info=None, arr_airport_info=None, cabin_list=None, carrier_airline=None,
                 carrier_no=None, dep_airport_info=None, flight_no=None, flight_size=None, flight_type=None, is_protocol=None,
                 is_share=None, is_stop=None, lowest_cabin=None, lowest_cabin_class=None, lowest_cabin_desc=None,
                 lowest_cabin_num=None, lowest_cabin_price=None, meal_desc=None, modify_flight_arr_time=None,
                 modify_flight_dep_date=None, modify_flight_dep_time=None, session_id=None, stop_arr_time=None, stop_city=None,
                 stop_dep_time=None):
        self.airline_info = airline_info  # type: TicketChangingFlightListResponseBodyModuleFlightInfoListAirlineInfo
        self.arr_airport_info = arr_airport_info  # type: TicketChangingFlightListResponseBodyModuleFlightInfoListArrAirportInfo
        self.cabin_list = cabin_list  # type: list[TicketChangingFlightListResponseBodyModuleFlightInfoListCabinList]
        self.carrier_airline = carrier_airline  # type: str
        self.carrier_no = carrier_no  # type: str
        self.dep_airport_info = dep_airport_info  # type: TicketChangingFlightListResponseBodyModuleFlightInfoListDepAirportInfo
        self.flight_no = flight_no  # type: str
        self.flight_size = flight_size  # type: str
        self.flight_type = flight_type  # type: str
        self.is_protocol = is_protocol  # type: bool
        self.is_share = is_share  # type: bool
        self.is_stop = is_stop  # type: bool
        self.lowest_cabin = lowest_cabin  # type: str
        self.lowest_cabin_class = lowest_cabin_class  # type: str
        self.lowest_cabin_desc = lowest_cabin_desc  # type: str
        self.lowest_cabin_num = lowest_cabin_num  # type: str
        self.lowest_cabin_price = lowest_cabin_price  # type: list[TicketChangingFlightListResponseBodyModuleFlightInfoListLowestCabinPrice]
        self.meal_desc = meal_desc  # type: str
        self.modify_flight_arr_time = modify_flight_arr_time  # type: str
        self.modify_flight_dep_date = modify_flight_dep_date  # type: str
        self.modify_flight_dep_time = modify_flight_dep_time  # type: str
        self.session_id = session_id  # type: str
        self.stop_arr_time = stop_arr_time  # type: str
        self.stop_city = stop_city  # type: str
        self.stop_dep_time = stop_dep_time  # type: str

    def validate(self):
        if self.airline_info:
            self.airline_info.validate()
        if self.arr_airport_info:
            self.arr_airport_info.validate()
        if self.cabin_list:
            for k in self.cabin_list:
                if k:
                    k.validate()
        if self.dep_airport_info:
            self.dep_airport_info.validate()
        if self.lowest_cabin_price:
            for k in self.lowest_cabin_price:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(TicketChangingFlightListResponseBodyModuleFlightInfoList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_info is not None:
            result['airline_info'] = self.airline_info.to_map()
        if self.arr_airport_info is not None:
            result['arr_airport_info'] = self.arr_airport_info.to_map()
        result['cabin_list'] = []
        if self.cabin_list is not None:
            for k in self.cabin_list:
                result['cabin_list'].append(k.to_map() if k else None)
        if self.carrier_airline is not None:
            result['carrier_airline'] = self.carrier_airline
        if self.carrier_no is not None:
            result['carrier_no'] = self.carrier_no
        if self.dep_airport_info is not None:
            result['dep_airport_info'] = self.dep_airport_info.to_map()
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        if self.flight_size is not None:
            result['flight_size'] = self.flight_size
        if self.flight_type is not None:
            result['flight_type'] = self.flight_type
        if self.is_protocol is not None:
            result['is_protocol'] = self.is_protocol
        if self.is_share is not None:
            result['is_share'] = self.is_share
        if self.is_stop is not None:
            result['is_stop'] = self.is_stop
        if self.lowest_cabin is not None:
            result['lowest_cabin'] = self.lowest_cabin
        if self.lowest_cabin_class is not None:
            result['lowest_cabin_class'] = self.lowest_cabin_class
        if self.lowest_cabin_desc is not None:
            result['lowest_cabin_desc'] = self.lowest_cabin_desc
        if self.lowest_cabin_num is not None:
            result['lowest_cabin_num'] = self.lowest_cabin_num
        result['lowest_cabin_price'] = []
        if self.lowest_cabin_price is not None:
            for k in self.lowest_cabin_price:
                result['lowest_cabin_price'].append(k.to_map() if k else None)
        if self.meal_desc is not None:
            result['meal_desc'] = self.meal_desc
        if self.modify_flight_arr_time is not None:
            result['modify_flight_arr_time'] = self.modify_flight_arr_time
        if self.modify_flight_dep_date is not None:
            result['modify_flight_dep_date'] = self.modify_flight_dep_date
        if self.modify_flight_dep_time is not None:
            result['modify_flight_dep_time'] = self.modify_flight_dep_time
        if self.session_id is not None:
            result['session_id'] = self.session_id
        if self.stop_arr_time is not None:
            result['stop_arr_time'] = self.stop_arr_time
        if self.stop_city is not None:
            result['stop_city'] = self.stop_city
        if self.stop_dep_time is not None:
            result['stop_dep_time'] = self.stop_dep_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('airline_info') is not None:
            temp_model = TicketChangingFlightListResponseBodyModuleFlightInfoListAirlineInfo()
            self.airline_info = temp_model.from_map(m['airline_info'])
        if m.get('arr_airport_info') is not None:
            temp_model = TicketChangingFlightListResponseBodyModuleFlightInfoListArrAirportInfo()
            self.arr_airport_info = temp_model.from_map(m['arr_airport_info'])
        self.cabin_list = []
        if m.get('cabin_list') is not None:
            for k in m.get('cabin_list'):
                temp_model = TicketChangingFlightListResponseBodyModuleFlightInfoListCabinList()
                self.cabin_list.append(temp_model.from_map(k))
        if m.get('carrier_airline') is not None:
            self.carrier_airline = m.get('carrier_airline')
        if m.get('carrier_no') is not None:
            self.carrier_no = m.get('carrier_no')
        if m.get('dep_airport_info') is not None:
            temp_model = TicketChangingFlightListResponseBodyModuleFlightInfoListDepAirportInfo()
            self.dep_airport_info = temp_model.from_map(m['dep_airport_info'])
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        if m.get('flight_size') is not None:
            self.flight_size = m.get('flight_size')
        if m.get('flight_type') is not None:
            self.flight_type = m.get('flight_type')
        if m.get('is_protocol') is not None:
            self.is_protocol = m.get('is_protocol')
        if m.get('is_share') is not None:
            self.is_share = m.get('is_share')
        if m.get('is_stop') is not None:
            self.is_stop = m.get('is_stop')
        if m.get('lowest_cabin') is not None:
            self.lowest_cabin = m.get('lowest_cabin')
        if m.get('lowest_cabin_class') is not None:
            self.lowest_cabin_class = m.get('lowest_cabin_class')
        if m.get('lowest_cabin_desc') is not None:
            self.lowest_cabin_desc = m.get('lowest_cabin_desc')
        if m.get('lowest_cabin_num') is not None:
            self.lowest_cabin_num = m.get('lowest_cabin_num')
        self.lowest_cabin_price = []
        if m.get('lowest_cabin_price') is not None:
            for k in m.get('lowest_cabin_price'):
                temp_model = TicketChangingFlightListResponseBodyModuleFlightInfoListLowestCabinPrice()
                self.lowest_cabin_price.append(temp_model.from_map(k))
        if m.get('meal_desc') is not None:
            self.meal_desc = m.get('meal_desc')
        if m.get('modify_flight_arr_time') is not None:
            self.modify_flight_arr_time = m.get('modify_flight_arr_time')
        if m.get('modify_flight_dep_date') is not None:
            self.modify_flight_dep_date = m.get('modify_flight_dep_date')
        if m.get('modify_flight_dep_time') is not None:
            self.modify_flight_dep_time = m.get('modify_flight_dep_time')
        if m.get('session_id') is not None:
            self.session_id = m.get('session_id')
        if m.get('stop_arr_time') is not None:
            self.stop_arr_time = m.get('stop_arr_time')
        if m.get('stop_city') is not None:
            self.stop_city = m.get('stop_city')
        if m.get('stop_dep_time') is not None:
            self.stop_dep_time = m.get('stop_dep_time')
        return self


class TicketChangingFlightListResponseBodyModule(TeaModel):
    def __init__(self, flight_info_list=None):
        self.flight_info_list = flight_info_list  # type: list[TicketChangingFlightListResponseBodyModuleFlightInfoList]

    def validate(self):
        if self.flight_info_list:
            for k in self.flight_info_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(TicketChangingFlightListResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['flight_info_list'] = []
        if self.flight_info_list is not None:
            for k in self.flight_info_list:
                result['flight_info_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.flight_info_list = []
        if m.get('flight_info_list') is not None:
            for k in m.get('flight_info_list'):
                temp_model = TicketChangingFlightListResponseBodyModuleFlightInfoList()
                self.flight_info_list.append(temp_model.from_map(k))
        return self


class TicketChangingFlightListResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: TicketChangingFlightListResponseBodyModule
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(TicketChangingFlightListResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = TicketChangingFlightListResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class TicketChangingFlightListResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: TicketChangingFlightListResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(TicketChangingFlightListResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TicketChangingFlightListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TicketChangingPayHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TicketChangingPayHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class TicketChangingPayRequest(TeaModel):
    def __init__(self, corp_pay_price=None, dis_order_id=None, dis_sub_order_id=None, extra=None,
                 personal_pay_price=None, total_pay_price=None):
        self.corp_pay_price = corp_pay_price  # type: long
        self.dis_order_id = dis_order_id  # type: str
        self.dis_sub_order_id = dis_sub_order_id  # type: str
        self.extra = extra  # type: dict[str, str]
        self.personal_pay_price = personal_pay_price  # type: long
        self.total_pay_price = total_pay_price  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(TicketChangingPayRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_pay_price is not None:
            result['corp_pay_price'] = self.corp_pay_price
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        if self.dis_sub_order_id is not None:
            result['dis_sub_order_id'] = self.dis_sub_order_id
        if self.extra is not None:
            result['extra'] = self.extra
        if self.personal_pay_price is not None:
            result['personal_pay_price'] = self.personal_pay_price
        if self.total_pay_price is not None:
            result['total_pay_price'] = self.total_pay_price
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('corp_pay_price') is not None:
            self.corp_pay_price = m.get('corp_pay_price')
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        if m.get('dis_sub_order_id') is not None:
            self.dis_sub_order_id = m.get('dis_sub_order_id')
        if m.get('extra') is not None:
            self.extra = m.get('extra')
        if m.get('personal_pay_price') is not None:
            self.personal_pay_price = m.get('personal_pay_price')
        if m.get('total_pay_price') is not None:
            self.total_pay_price = m.get('total_pay_price')
        return self


class TicketChangingPayShrinkRequest(TeaModel):
    def __init__(self, corp_pay_price=None, dis_order_id=None, dis_sub_order_id=None, extra_shrink=None,
                 personal_pay_price=None, total_pay_price=None):
        self.corp_pay_price = corp_pay_price  # type: long
        self.dis_order_id = dis_order_id  # type: str
        self.dis_sub_order_id = dis_sub_order_id  # type: str
        self.extra_shrink = extra_shrink  # type: str
        self.personal_pay_price = personal_pay_price  # type: long
        self.total_pay_price = total_pay_price  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(TicketChangingPayShrinkRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_pay_price is not None:
            result['corp_pay_price'] = self.corp_pay_price
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        if self.dis_sub_order_id is not None:
            result['dis_sub_order_id'] = self.dis_sub_order_id
        if self.extra_shrink is not None:
            result['extra'] = self.extra_shrink
        if self.personal_pay_price is not None:
            result['personal_pay_price'] = self.personal_pay_price
        if self.total_pay_price is not None:
            result['total_pay_price'] = self.total_pay_price
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('corp_pay_price') is not None:
            self.corp_pay_price = m.get('corp_pay_price')
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        if m.get('dis_sub_order_id') is not None:
            self.dis_sub_order_id = m.get('dis_sub_order_id')
        if m.get('extra') is not None:
            self.extra_shrink = m.get('extra')
        if m.get('personal_pay_price') is not None:
            self.personal_pay_price = m.get('personal_pay_price')
        if m.get('total_pay_price') is not None:
            self.total_pay_price = m.get('total_pay_price')
        return self


class TicketChangingPayResponseBodyModule(TeaModel):
    def __init__(self, can_retry=None, pay_price=None, pay_status=None, pay_time=None, trade_no=None):
        self.can_retry = can_retry  # type: bool
        self.pay_price = pay_price  # type: long
        self.pay_status = pay_status  # type: int
        self.pay_time = pay_time  # type: str
        self.trade_no = trade_no  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TicketChangingPayResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.can_retry is not None:
            result['can_retry'] = self.can_retry
        if self.pay_price is not None:
            result['pay_price'] = self.pay_price
        if self.pay_status is not None:
            result['pay_status'] = self.pay_status
        if self.pay_time is not None:
            result['pay_time'] = self.pay_time
        if self.trade_no is not None:
            result['trade_no'] = self.trade_no
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('can_retry') is not None:
            self.can_retry = m.get('can_retry')
        if m.get('pay_price') is not None:
            self.pay_price = m.get('pay_price')
        if m.get('pay_status') is not None:
            self.pay_status = m.get('pay_status')
        if m.get('pay_time') is not None:
            self.pay_time = m.get('pay_time')
        if m.get('trade_no') is not None:
            self.trade_no = m.get('trade_no')
        return self


class TicketChangingPayResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: TicketChangingPayResponseBodyModule
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(TicketChangingPayResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = TicketChangingPayResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class TicketChangingPayResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: TicketChangingPayResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(TicketChangingPayResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TicketChangingPayResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TrainBillSettlementQueryHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_so_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TrainBillSettlementQueryHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class TrainBillSettlementQueryRequest(TeaModel):
    def __init__(self, page_no=None, page_size=None, period_end=None, period_start=None):
        self.page_no = page_no  # type: int
        self.page_size = page_size  # type: int
        self.period_end = period_end  # type: str
        self.period_start = period_start  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TrainBillSettlementQueryRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_no is not None:
            result['page_no'] = self.page_no
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.period_end is not None:
            result['period_end'] = self.period_end
        if self.period_start is not None:
            result['period_start'] = self.period_start
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('page_no') is not None:
            self.page_no = m.get('page_no')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('period_end') is not None:
            self.period_end = m.get('period_end')
        if m.get('period_start') is not None:
            self.period_start = m.get('period_start')
        return self


class TrainBillSettlementQueryResponseBodyModuleDataList(TeaModel):
    def __init__(self, alipay_trade_no=None, apply_arr_city_code=None, apply_arr_city_name=None,
                 apply_dep_city_code=None, apply_dep_city_name=None, apply_extend_field=None, apply_id=None, arr_city_code=None,
                 arr_city_name=None, arr_date=None, arr_station=None, arr_time=None, bill_record_time=None, book_time=None,
                 booker_id=None, booker_job_no=None, booker_name=None, business_trip_result=None, capital_direction=None,
                 cascade_department=None, change_fee=None, change_result=None, coach_no=None, cost_center=None,
                 cost_center_number=None, coupon=None, dep_city_code=None, dep_city_name=None, department=None, department_id=None,
                 dept_date=None, dept_station=None, dept_time=None, exceed_reason=None, fee_type=None, index=None,
                 invoice_title=None, is_transfer_order=None, order_id=None, order_price=None, over_apply_id=None, primary_id=None,
                 print_ticket_price=None, project_code=None, project_name=None, refund_fee=None, refund_reason=None, remark=None,
                 reserve_mode=None, run_time=None, seat_no=None, seat_type=None, service_fee=None, settlement_fee=None,
                 settlement_grant_fee=None, settlement_time=None, settlement_type=None, short_ticket_no=None, status=None, tax_rate=None,
                 third_itinerary_id=None, ticket_corp_pay_price=None, ticket_no=None, ticket_person_pay_price=None, ticket_price=None,
                 train_no=None, train_type=None, traveler_id=None, traveler_job_no=None, traveler_member_type_name=None,
                 traveler_name=None, voucher_type=None):
        self.alipay_trade_no = alipay_trade_no  # type: str
        self.apply_arr_city_code = apply_arr_city_code  # type: str
        self.apply_arr_city_name = apply_arr_city_name  # type: str
        self.apply_dep_city_code = apply_dep_city_code  # type: str
        self.apply_dep_city_name = apply_dep_city_name  # type: str
        # 审批扩展自定义字段
        self.apply_extend_field = apply_extend_field  # type: str
        self.apply_id = apply_id  # type: str
        self.arr_city_code = arr_city_code  # type: str
        self.arr_city_name = arr_city_name  # type: str
        self.arr_date = arr_date  # type: str
        self.arr_station = arr_station  # type: str
        self.arr_time = arr_time  # type: str
        self.bill_record_time = bill_record_time  # type: str
        self.book_time = book_time  # type: str
        self.booker_id = booker_id  # type: str
        self.booker_job_no = booker_job_no  # type: str
        self.booker_name = booker_name  # type: str
        self.business_trip_result = business_trip_result  # type: str
        self.capital_direction = capital_direction  # type: str
        self.cascade_department = cascade_department  # type: str
        self.change_fee = change_fee  # type: float
        self.change_result = change_result  # type: str
        self.coach_no = coach_no  # type: str
        self.cost_center = cost_center  # type: str
        self.cost_center_number = cost_center_number  # type: str
        self.coupon = coupon  # type: float
        self.dep_city_code = dep_city_code  # type: str
        self.dep_city_name = dep_city_name  # type: str
        self.department = department  # type: str
        self.department_id = department_id  # type: str
        self.dept_date = dept_date  # type: str
        self.dept_station = dept_station  # type: str
        self.dept_time = dept_time  # type: str
        self.exceed_reason = exceed_reason  # type: str
        self.fee_type = fee_type  # type: str
        self.index = index  # type: str
        self.invoice_title = invoice_title  # type: str
        self.is_transfer_order = is_transfer_order  # type: str
        self.order_id = order_id  # type: str
        self.order_price = order_price  # type: float
        self.over_apply_id = over_apply_id  # type: str
        self.primary_id = primary_id  # type: long
        self.print_ticket_price = print_ticket_price  # type: float
        self.project_code = project_code  # type: str
        self.project_name = project_name  # type: str
        self.refund_fee = refund_fee  # type: float
        self.refund_reason = refund_reason  # type: str
        self.remark = remark  # type: str
        self.reserve_mode = reserve_mode  # type: str
        self.run_time = run_time  # type: str
        self.seat_no = seat_no  # type: str
        self.seat_type = seat_type  # type: str
        self.service_fee = service_fee  # type: float
        self.settlement_fee = settlement_fee  # type: float
        self.settlement_grant_fee = settlement_grant_fee  # type: float
        self.settlement_time = settlement_time  # type: str
        self.settlement_type = settlement_type  # type: str
        self.short_ticket_no = short_ticket_no  # type: str
        self.status = status  # type: int
        # 税率
        self.tax_rate = tax_rate  # type: str
        self.third_itinerary_id = third_itinerary_id  # type: str
        self.ticket_corp_pay_price = ticket_corp_pay_price  # type: str
        self.ticket_no = ticket_no  # type: str
        self.ticket_person_pay_price = ticket_person_pay_price  # type: str
        self.ticket_price = ticket_price  # type: float
        self.train_no = train_no  # type: str
        self.train_type = train_type  # type: str
        self.traveler_id = traveler_id  # type: str
        self.traveler_job_no = traveler_job_no  # type: str
        self.traveler_member_type_name = traveler_member_type_name  # type: str
        self.traveler_name = traveler_name  # type: str
        self.voucher_type = voucher_type  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(TrainBillSettlementQueryResponseBodyModuleDataList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alipay_trade_no is not None:
            result['alipay_trade_no'] = self.alipay_trade_no
        if self.apply_arr_city_code is not None:
            result['apply_arr_city_code'] = self.apply_arr_city_code
        if self.apply_arr_city_name is not None:
            result['apply_arr_city_name'] = self.apply_arr_city_name
        if self.apply_dep_city_code is not None:
            result['apply_dep_city_code'] = self.apply_dep_city_code
        if self.apply_dep_city_name is not None:
            result['apply_dep_city_name'] = self.apply_dep_city_name
        if self.apply_extend_field is not None:
            result['apply_extend_field'] = self.apply_extend_field
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.arr_city_name is not None:
            result['arr_city_name'] = self.arr_city_name
        if self.arr_date is not None:
            result['arr_date'] = self.arr_date
        if self.arr_station is not None:
            result['arr_station'] = self.arr_station
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.bill_record_time is not None:
            result['bill_record_time'] = self.bill_record_time
        if self.book_time is not None:
            result['book_time'] = self.book_time
        if self.booker_id is not None:
            result['booker_id'] = self.booker_id
        if self.booker_job_no is not None:
            result['booker_job_no'] = self.booker_job_no
        if self.booker_name is not None:
            result['booker_name'] = self.booker_name
        if self.business_trip_result is not None:
            result['business_trip_result'] = self.business_trip_result
        if self.capital_direction is not None:
            result['capital_direction'] = self.capital_direction
        if self.cascade_department is not None:
            result['cascade_department'] = self.cascade_department
        if self.change_fee is not None:
            result['change_fee'] = self.change_fee
        if self.change_result is not None:
            result['change_result'] = self.change_result
        if self.coach_no is not None:
            result['coach_no'] = self.coach_no
        if self.cost_center is not None:
            result['cost_center'] = self.cost_center
        if self.cost_center_number is not None:
            result['cost_center_number'] = self.cost_center_number
        if self.coupon is not None:
            result['coupon'] = self.coupon
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_city_name is not None:
            result['dep_city_name'] = self.dep_city_name
        if self.department is not None:
            result['department'] = self.department
        if self.department_id is not None:
            result['department_id'] = self.department_id
        if self.dept_date is not None:
            result['dept_date'] = self.dept_date
        if self.dept_station is not None:
            result['dept_station'] = self.dept_station
        if self.dept_time is not None:
            result['dept_time'] = self.dept_time
        if self.exceed_reason is not None:
            result['exceed_reason'] = self.exceed_reason
        if self.fee_type is not None:
            result['fee_type'] = self.fee_type
        if self.index is not None:
            result['index'] = self.index
        if self.invoice_title is not None:
            result['invoice_title'] = self.invoice_title
        if self.is_transfer_order is not None:
            result['is_transfer_order'] = self.is_transfer_order
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.order_price is not None:
            result['order_price'] = self.order_price
        if self.over_apply_id is not None:
            result['over_apply_id'] = self.over_apply_id
        if self.primary_id is not None:
            result['primary_id'] = self.primary_id
        if self.print_ticket_price is not None:
            result['print_ticket_price'] = self.print_ticket_price
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_name is not None:
            result['project_name'] = self.project_name
        if self.refund_fee is not None:
            result['refund_fee'] = self.refund_fee
        if self.refund_reason is not None:
            result['refund_reason'] = self.refund_reason
        if self.remark is not None:
            result['remark'] = self.remark
        if self.reserve_mode is not None:
            result['reserve_mode'] = self.reserve_mode
        if self.run_time is not None:
            result['run_time'] = self.run_time
        if self.seat_no is not None:
            result['seat_no'] = self.seat_no
        if self.seat_type is not None:
            result['seat_type'] = self.seat_type
        if self.service_fee is not None:
            result['service_fee'] = self.service_fee
        if self.settlement_fee is not None:
            result['settlement_fee'] = self.settlement_fee
        if self.settlement_grant_fee is not None:
            result['settlement_grant_fee'] = self.settlement_grant_fee
        if self.settlement_time is not None:
            result['settlement_time'] = self.settlement_time
        if self.settlement_type is not None:
            result['settlement_type'] = self.settlement_type
        if self.short_ticket_no is not None:
            result['short_ticket_no'] = self.short_ticket_no
        if self.status is not None:
            result['status'] = self.status
        if self.tax_rate is not None:
            result['tax_rate'] = self.tax_rate
        if self.third_itinerary_id is not None:
            result['third_itinerary_id'] = self.third_itinerary_id
        if self.ticket_corp_pay_price is not None:
            result['ticket_corp_pay_price'] = self.ticket_corp_pay_price
        if self.ticket_no is not None:
            result['ticket_no'] = self.ticket_no
        if self.ticket_person_pay_price is not None:
            result['ticket_person_pay_price'] = self.ticket_person_pay_price
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.train_no is not None:
            result['train_no'] = self.train_no
        if self.train_type is not None:
            result['train_type'] = self.train_type
        if self.traveler_id is not None:
            result['traveler_id'] = self.traveler_id
        if self.traveler_job_no is not None:
            result['traveler_job_no'] = self.traveler_job_no
        if self.traveler_member_type_name is not None:
            result['traveler_member_type_name'] = self.traveler_member_type_name
        if self.traveler_name is not None:
            result['traveler_name'] = self.traveler_name
        if self.voucher_type is not None:
            result['voucher_type'] = self.voucher_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('alipay_trade_no') is not None:
            self.alipay_trade_no = m.get('alipay_trade_no')
        if m.get('apply_arr_city_code') is not None:
            self.apply_arr_city_code = m.get('apply_arr_city_code')
        if m.get('apply_arr_city_name') is not None:
            self.apply_arr_city_name = m.get('apply_arr_city_name')
        if m.get('apply_dep_city_code') is not None:
            self.apply_dep_city_code = m.get('apply_dep_city_code')
        if m.get('apply_dep_city_name') is not None:
            self.apply_dep_city_name = m.get('apply_dep_city_name')
        if m.get('apply_extend_field') is not None:
            self.apply_extend_field = m.get('apply_extend_field')
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('arr_city_name') is not None:
            self.arr_city_name = m.get('arr_city_name')
        if m.get('arr_date') is not None:
            self.arr_date = m.get('arr_date')
        if m.get('arr_station') is not None:
            self.arr_station = m.get('arr_station')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('bill_record_time') is not None:
            self.bill_record_time = m.get('bill_record_time')
        if m.get('book_time') is not None:
            self.book_time = m.get('book_time')
        if m.get('booker_id') is not None:
            self.booker_id = m.get('booker_id')
        if m.get('booker_job_no') is not None:
            self.booker_job_no = m.get('booker_job_no')
        if m.get('booker_name') is not None:
            self.booker_name = m.get('booker_name')
        if m.get('business_trip_result') is not None:
            self.business_trip_result = m.get('business_trip_result')
        if m.get('capital_direction') is not None:
            self.capital_direction = m.get('capital_direction')
        if m.get('cascade_department') is not None:
            self.cascade_department = m.get('cascade_department')
        if m.get('change_fee') is not None:
            self.change_fee = m.get('change_fee')
        if m.get('change_result') is not None:
            self.change_result = m.get('change_result')
        if m.get('coach_no') is not None:
            self.coach_no = m.get('coach_no')
        if m.get('cost_center') is not None:
            self.cost_center = m.get('cost_center')
        if m.get('cost_center_number') is not None:
            self.cost_center_number = m.get('cost_center_number')
        if m.get('coupon') is not None:
            self.coupon = m.get('coupon')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_city_name') is not None:
            self.dep_city_name = m.get('dep_city_name')
        if m.get('department') is not None:
            self.department = m.get('department')
        if m.get('department_id') is not None:
            self.department_id = m.get('department_id')
        if m.get('dept_date') is not None:
            self.dept_date = m.get('dept_date')
        if m.get('dept_station') is not None:
            self.dept_station = m.get('dept_station')
        if m.get('dept_time') is not None:
            self.dept_time = m.get('dept_time')
        if m.get('exceed_reason') is not None:
            self.exceed_reason = m.get('exceed_reason')
        if m.get('fee_type') is not None:
            self.fee_type = m.get('fee_type')
        if m.get('index') is not None:
            self.index = m.get('index')
        if m.get('invoice_title') is not None:
            self.invoice_title = m.get('invoice_title')
        if m.get('is_transfer_order') is not None:
            self.is_transfer_order = m.get('is_transfer_order')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('order_price') is not None:
            self.order_price = m.get('order_price')
        if m.get('over_apply_id') is not None:
            self.over_apply_id = m.get('over_apply_id')
        if m.get('primary_id') is not None:
            self.primary_id = m.get('primary_id')
        if m.get('print_ticket_price') is not None:
            self.print_ticket_price = m.get('print_ticket_price')
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_name') is not None:
            self.project_name = m.get('project_name')
        if m.get('refund_fee') is not None:
            self.refund_fee = m.get('refund_fee')
        if m.get('refund_reason') is not None:
            self.refund_reason = m.get('refund_reason')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('reserve_mode') is not None:
            self.reserve_mode = m.get('reserve_mode')
        if m.get('run_time') is not None:
            self.run_time = m.get('run_time')
        if m.get('seat_no') is not None:
            self.seat_no = m.get('seat_no')
        if m.get('seat_type') is not None:
            self.seat_type = m.get('seat_type')
        if m.get('service_fee') is not None:
            self.service_fee = m.get('service_fee')
        if m.get('settlement_fee') is not None:
            self.settlement_fee = m.get('settlement_fee')
        if m.get('settlement_grant_fee') is not None:
            self.settlement_grant_fee = m.get('settlement_grant_fee')
        if m.get('settlement_time') is not None:
            self.settlement_time = m.get('settlement_time')
        if m.get('settlement_type') is not None:
            self.settlement_type = m.get('settlement_type')
        if m.get('short_ticket_no') is not None:
            self.short_ticket_no = m.get('short_ticket_no')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('tax_rate') is not None:
            self.tax_rate = m.get('tax_rate')
        if m.get('third_itinerary_id') is not None:
            self.third_itinerary_id = m.get('third_itinerary_id')
        if m.get('ticket_corp_pay_price') is not None:
            self.ticket_corp_pay_price = m.get('ticket_corp_pay_price')
        if m.get('ticket_no') is not None:
            self.ticket_no = m.get('ticket_no')
        if m.get('ticket_person_pay_price') is not None:
            self.ticket_person_pay_price = m.get('ticket_person_pay_price')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('train_no') is not None:
            self.train_no = m.get('train_no')
        if m.get('train_type') is not None:
            self.train_type = m.get('train_type')
        if m.get('traveler_id') is not None:
            self.traveler_id = m.get('traveler_id')
        if m.get('traveler_job_no') is not None:
            self.traveler_job_no = m.get('traveler_job_no')
        if m.get('traveler_member_type_name') is not None:
            self.traveler_member_type_name = m.get('traveler_member_type_name')
        if m.get('traveler_name') is not None:
            self.traveler_name = m.get('traveler_name')
        if m.get('voucher_type') is not None:
            self.voucher_type = m.get('voucher_type')
        return self


class TrainBillSettlementQueryResponseBodyModule(TeaModel):
    def __init__(self, category=None, corp_id=None, data_list=None, period_end=None, period_start=None,
                 total_num=None):
        self.category = category  # type: int
        self.corp_id = corp_id  # type: str
        self.data_list = data_list  # type: list[TrainBillSettlementQueryResponseBodyModuleDataList]
        self.period_end = period_end  # type: str
        self.period_start = period_start  # type: str
        self.total_num = total_num  # type: long

    def validate(self):
        if self.data_list:
            for k in self.data_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(TrainBillSettlementQueryResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['category'] = self.category
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        result['data_list'] = []
        if self.data_list is not None:
            for k in self.data_list:
                result['data_list'].append(k.to_map() if k else None)
        if self.period_end is not None:
            result['period_end'] = self.period_end
        if self.period_start is not None:
            result['period_start'] = self.period_start
        if self.total_num is not None:
            result['total_num'] = self.total_num
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('category') is not None:
            self.category = m.get('category')
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        self.data_list = []
        if m.get('data_list') is not None:
            for k in m.get('data_list'):
                temp_model = TrainBillSettlementQueryResponseBodyModuleDataList()
                self.data_list.append(temp_model.from_map(k))
        if m.get('period_end') is not None:
            self.period_end = m.get('period_end')
        if m.get('period_start') is not None:
            self.period_start = m.get('period_start')
        if m.get('total_num') is not None:
            self.total_num = m.get('total_num')
        return self


class TrainBillSettlementQueryResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: TrainBillSettlementQueryResponseBodyModule
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(TrainBillSettlementQueryResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = TrainBillSettlementQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class TrainBillSettlementQueryResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: TrainBillSettlementQueryResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(TrainBillSettlementQueryResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TrainBillSettlementQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TrainExceedApplyQueryHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_so_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TrainExceedApplyQueryHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class TrainExceedApplyQueryRequest(TeaModel):
    def __init__(self, apply_id=None):
        self.apply_id = apply_id  # type: long

    def validate(self):
        pass

    def to_map(self):
        _map = super(TrainExceedApplyQueryRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        return self


class TrainExceedApplyQueryResponseBodyModuleApplyIntentionInfoDO(TeaModel):
    def __init__(self, arr_city=None, arr_city_name=None, arr_station=None, arr_time=None, dep_city=None,
                 dep_city_name=None, dep_station=None, dep_time=None, price=None, seat_name=None, train_no=None,
                 train_type_desc=None, type=None):
        self.arr_city = arr_city  # type: str
        self.arr_city_name = arr_city_name  # type: str
        self.arr_station = arr_station  # type: str
        self.arr_time = arr_time  # type: str
        self.dep_city = dep_city  # type: str
        self.dep_city_name = dep_city_name  # type: str
        self.dep_station = dep_station  # type: str
        self.dep_time = dep_time  # type: str
        self.price = price  # type: long
        self.seat_name = seat_name  # type: str
        self.train_no = train_no  # type: str
        self.train_type_desc = train_type_desc  # type: str
        self.type = type  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(TrainExceedApplyQueryResponseBodyModuleApplyIntentionInfoDO, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_city is not None:
            result['arr_city'] = self.arr_city
        if self.arr_city_name is not None:
            result['arr_city_name'] = self.arr_city_name
        if self.arr_station is not None:
            result['arr_station'] = self.arr_station
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.dep_city is not None:
            result['dep_city'] = self.dep_city
        if self.dep_city_name is not None:
            result['dep_city_name'] = self.dep_city_name
        if self.dep_station is not None:
            result['dep_station'] = self.dep_station
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.price is not None:
            result['price'] = self.price
        if self.seat_name is not None:
            result['seat_name'] = self.seat_name
        if self.train_no is not None:
            result['train_no'] = self.train_no
        if self.train_type_desc is not None:
            result['train_type_desc'] = self.train_type_desc
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('arr_city') is not None:
            self.arr_city = m.get('arr_city')
        if m.get('arr_city_name') is not None:
            self.arr_city_name = m.get('arr_city_name')
        if m.get('arr_station') is not None:
            self.arr_station = m.get('arr_station')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('dep_city') is not None:
            self.dep_city = m.get('dep_city')
        if m.get('dep_city_name') is not None:
            self.dep_city_name = m.get('dep_city_name')
        if m.get('dep_station') is not None:
            self.dep_station = m.get('dep_station')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('seat_name') is not None:
            self.seat_name = m.get('seat_name')
        if m.get('train_no') is not None:
            self.train_no = m.get('train_no')
        if m.get('train_type_desc') is not None:
            self.train_type_desc = m.get('train_type_desc')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class TrainExceedApplyQueryResponseBodyModule(TeaModel):
    def __init__(self, apply_id=None, apply_intention_info_do=None, btrip_cause=None, corp_id=None,
                 exceed_reason=None, exceed_type=None, origin_standard=None, status=None, submit_time=None,
                 thirdpart_apply_id=None, thirdpart_corp_id=None, user_id=None):
        self.apply_id = apply_id  # type: long
        self.apply_intention_info_do = apply_intention_info_do  # type: TrainExceedApplyQueryResponseBodyModuleApplyIntentionInfoDO
        self.btrip_cause = btrip_cause  # type: str
        self.corp_id = corp_id  # type: str
        self.exceed_reason = exceed_reason  # type: str
        self.exceed_type = exceed_type  # type: int
        self.origin_standard = origin_standard  # type: str
        self.status = status  # type: int
        self.submit_time = submit_time  # type: str
        self.thirdpart_apply_id = thirdpart_apply_id  # type: str
        self.thirdpart_corp_id = thirdpart_corp_id  # type: str
        self.user_id = user_id  # type: str

    def validate(self):
        if self.apply_intention_info_do:
            self.apply_intention_info_do.validate()

    def to_map(self):
        _map = super(TrainExceedApplyQueryResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.apply_intention_info_do is not None:
            result['apply_intention_info_d_o'] = self.apply_intention_info_do.to_map()
        if self.btrip_cause is not None:
            result['btrip_cause'] = self.btrip_cause
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        if self.exceed_reason is not None:
            result['exceed_reason'] = self.exceed_reason
        if self.exceed_type is not None:
            result['exceed_type'] = self.exceed_type
        if self.origin_standard is not None:
            result['origin_standard'] = self.origin_standard
        if self.status is not None:
            result['status'] = self.status
        if self.submit_time is not None:
            result['submit_time'] = self.submit_time
        if self.thirdpart_apply_id is not None:
            result['thirdpart_apply_id'] = self.thirdpart_apply_id
        if self.thirdpart_corp_id is not None:
            result['thirdpart_corp_id'] = self.thirdpart_corp_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('apply_intention_info_d_o') is not None:
            temp_model = TrainExceedApplyQueryResponseBodyModuleApplyIntentionInfoDO()
            self.apply_intention_info_do = temp_model.from_map(m['apply_intention_info_d_o'])
        if m.get('btrip_cause') is not None:
            self.btrip_cause = m.get('btrip_cause')
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        if m.get('exceed_reason') is not None:
            self.exceed_reason = m.get('exceed_reason')
        if m.get('exceed_type') is not None:
            self.exceed_type = m.get('exceed_type')
        if m.get('origin_standard') is not None:
            self.origin_standard = m.get('origin_standard')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('submit_time') is not None:
            self.submit_time = m.get('submit_time')
        if m.get('thirdpart_apply_id') is not None:
            self.thirdpart_apply_id = m.get('thirdpart_apply_id')
        if m.get('thirdpart_corp_id') is not None:
            self.thirdpart_corp_id = m.get('thirdpart_corp_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class TrainExceedApplyQueryResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: TrainExceedApplyQueryResponseBodyModule
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(TrainExceedApplyQueryResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = TrainExceedApplyQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class TrainExceedApplyQueryResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: TrainExceedApplyQueryResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(TrainExceedApplyQueryResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TrainExceedApplyQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TrainOrderListQueryHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_so_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TrainOrderListQueryHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class TrainOrderListQueryRequest(TeaModel):
    def __init__(self, all_apply=None, apply_id=None, depart_id=None, end_time=None, page=None, page_size=None,
                 start_time=None, thirdpart_apply_id=None, update_end_time=None, update_start_time=None, user_id=None):
        self.all_apply = all_apply  # type: bool
        self.apply_id = apply_id  # type: long
        self.depart_id = depart_id  # type: str
        self.end_time = end_time  # type: str
        self.page = page  # type: int
        self.page_size = page_size  # type: int
        self.start_time = start_time  # type: str
        self.thirdpart_apply_id = thirdpart_apply_id  # type: str
        self.update_end_time = update_end_time  # type: str
        self.update_start_time = update_start_time  # type: str
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TrainOrderListQueryRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.all_apply is not None:
            result['all_apply'] = self.all_apply
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.depart_id is not None:
            result['depart_id'] = self.depart_id
        if self.end_time is not None:
            result['end_time'] = self.end_time
        if self.page is not None:
            result['page'] = self.page
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.start_time is not None:
            result['start_time'] = self.start_time
        if self.thirdpart_apply_id is not None:
            result['thirdpart_apply_id'] = self.thirdpart_apply_id
        if self.update_end_time is not None:
            result['update_end_time'] = self.update_end_time
        if self.update_start_time is not None:
            result['update_start_time'] = self.update_start_time
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('all_apply') is not None:
            self.all_apply = m.get('all_apply')
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('depart_id') is not None:
            self.depart_id = m.get('depart_id')
        if m.get('end_time') is not None:
            self.end_time = m.get('end_time')
        if m.get('page') is not None:
            self.page = m.get('page')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('start_time') is not None:
            self.start_time = m.get('start_time')
        if m.get('thirdpart_apply_id') is not None:
            self.thirdpart_apply_id = m.get('thirdpart_apply_id')
        if m.get('update_end_time') is not None:
            self.update_end_time = m.get('update_end_time')
        if m.get('update_start_time') is not None:
            self.update_start_time = m.get('update_start_time')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class TrainOrderListQueryResponseBodyModuleCostCenter(TeaModel):
    def __init__(self, corp_id=None, id=None, name=None, number=None):
        self.corp_id = corp_id  # type: str
        self.id = id  # type: long
        self.name = name  # type: str
        self.number = number  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TrainOrderListQueryResponseBodyModuleCostCenter, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        if self.number is not None:
            result['number'] = self.number
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('number') is not None:
            self.number = m.get('number')
        return self


class TrainOrderListQueryResponseBodyModuleInvoice(TeaModel):
    def __init__(self, id=None, title=None):
        self.id = id  # type: long
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TrainOrderListQueryResponseBodyModuleInvoice, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class TrainOrderListQueryResponseBodyModulePriceInfoList(TeaModel):
    def __init__(self, category_code=None, category_type=None, end_city=None, end_time=None, gmt_create=None,
                 original_train_no=None, passenger_name=None, pay_type=None, price=None, seat_type=None, start_city=None,
                 start_time=None, trade_id=None, train_no=None, type=None):
        self.category_code = category_code  # type: int
        self.category_type = category_type  # type: int
        self.end_city = end_city  # type: str
        self.end_time = end_time  # type: str
        self.gmt_create = gmt_create  # type: str
        self.original_train_no = original_train_no  # type: str
        self.passenger_name = passenger_name  # type: str
        self.pay_type = pay_type  # type: int
        self.price = price  # type: float
        self.seat_type = seat_type  # type: str
        self.start_city = start_city  # type: str
        self.start_time = start_time  # type: str
        self.trade_id = trade_id  # type: str
        self.train_no = train_no  # type: str
        self.type = type  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(TrainOrderListQueryResponseBodyModulePriceInfoList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category_code is not None:
            result['category_code'] = self.category_code
        if self.category_type is not None:
            result['category_type'] = self.category_type
        if self.end_city is not None:
            result['end_city'] = self.end_city
        if self.end_time is not None:
            result['end_time'] = self.end_time
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.original_train_no is not None:
            result['original_train_no'] = self.original_train_no
        if self.passenger_name is not None:
            result['passenger_name'] = self.passenger_name
        if self.pay_type is not None:
            result['pay_type'] = self.pay_type
        if self.price is not None:
            result['price'] = self.price
        if self.seat_type is not None:
            result['seat_type'] = self.seat_type
        if self.start_city is not None:
            result['start_city'] = self.start_city
        if self.start_time is not None:
            result['start_time'] = self.start_time
        if self.trade_id is not None:
            result['trade_id'] = self.trade_id
        if self.train_no is not None:
            result['train_no'] = self.train_no
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('category_code') is not None:
            self.category_code = m.get('category_code')
        if m.get('category_type') is not None:
            self.category_type = m.get('category_type')
        if m.get('end_city') is not None:
            self.end_city = m.get('end_city')
        if m.get('end_time') is not None:
            self.end_time = m.get('end_time')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('original_train_no') is not None:
            self.original_train_no = m.get('original_train_no')
        if m.get('passenger_name') is not None:
            self.passenger_name = m.get('passenger_name')
        if m.get('pay_type') is not None:
            self.pay_type = m.get('pay_type')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('seat_type') is not None:
            self.seat_type = m.get('seat_type')
        if m.get('start_city') is not None:
            self.start_city = m.get('start_city')
        if m.get('start_time') is not None:
            self.start_time = m.get('start_time')
        if m.get('trade_id') is not None:
            self.trade_id = m.get('trade_id')
        if m.get('train_no') is not None:
            self.train_no = m.get('train_no')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class TrainOrderListQueryResponseBodyModuleUserAffiliateList(TeaModel):
    def __init__(self, user_id=None, user_name=None):
        self.user_id = user_id  # type: str
        self.user_name = user_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TrainOrderListQueryResponseBodyModuleUserAffiliateList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class TrainOrderListQueryResponseBodyModule(TeaModel):
    def __init__(self, apply_id=None, arr_city=None, arr_city_ad_code=None, arr_station=None, arr_time=None,
                 btrip_title=None, contact_name=None, corp_id=None, corp_name=None, cost_center=None, dep_city=None,
                 dep_city_ad_code=None, dep_station=None, dep_time=None, depart_id=None, depart_name=None, gmt_create=None,
                 gmt_modified=None, id=None, invoice=None, price_info_list=None, project_code=None, project_id=None,
                 project_title=None, rider_name=None, run_time=None, seat_type=None, status=None, third_part_project_id=None,
                 thirdpart_apply_id=None, thirdpart_itinerary_id=None, ticket_count=None, ticket_no_12306=None, train_number=None,
                 train_type=None, user_affiliate_list=None, user_id=None, user_name=None):
        self.apply_id = apply_id  # type: long
        self.arr_city = arr_city  # type: str
        self.arr_city_ad_code = arr_city_ad_code  # type: str
        self.arr_station = arr_station  # type: str
        self.arr_time = arr_time  # type: str
        self.btrip_title = btrip_title  # type: str
        self.contact_name = contact_name  # type: str
        self.corp_id = corp_id  # type: str
        self.corp_name = corp_name  # type: str
        self.cost_center = cost_center  # type: TrainOrderListQueryResponseBodyModuleCostCenter
        self.dep_city = dep_city  # type: str
        self.dep_city_ad_code = dep_city_ad_code  # type: str
        self.dep_station = dep_station  # type: str
        self.dep_time = dep_time  # type: str
        self.depart_id = depart_id  # type: str
        self.depart_name = depart_name  # type: str
        self.gmt_create = gmt_create  # type: str
        self.gmt_modified = gmt_modified  # type: str
        self.id = id  # type: long
        self.invoice = invoice  # type: TrainOrderListQueryResponseBodyModuleInvoice
        self.price_info_list = price_info_list  # type: list[TrainOrderListQueryResponseBodyModulePriceInfoList]
        self.project_code = project_code  # type: str
        self.project_id = project_id  # type: long
        self.project_title = project_title  # type: str
        self.rider_name = rider_name  # type: str
        self.run_time = run_time  # type: str
        self.seat_type = seat_type  # type: str
        self.status = status  # type: int
        self.third_part_project_id = third_part_project_id  # type: str
        self.thirdpart_apply_id = thirdpart_apply_id  # type: str
        self.thirdpart_itinerary_id = thirdpart_itinerary_id  # type: str
        self.ticket_count = ticket_count  # type: int
        self.ticket_no_12306 = ticket_no_12306  # type: str
        self.train_number = train_number  # type: str
        self.train_type = train_type  # type: str
        self.user_affiliate_list = user_affiliate_list  # type: list[TrainOrderListQueryResponseBodyModuleUserAffiliateList]
        self.user_id = user_id  # type: str
        self.user_name = user_name  # type: str

    def validate(self):
        if self.cost_center:
            self.cost_center.validate()
        if self.invoice:
            self.invoice.validate()
        if self.price_info_list:
            for k in self.price_info_list:
                if k:
                    k.validate()
        if self.user_affiliate_list:
            for k in self.user_affiliate_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(TrainOrderListQueryResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.arr_city is not None:
            result['arr_city'] = self.arr_city
        if self.arr_city_ad_code is not None:
            result['arr_city_ad_code'] = self.arr_city_ad_code
        if self.arr_station is not None:
            result['arr_station'] = self.arr_station
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.btrip_title is not None:
            result['btrip_title'] = self.btrip_title
        if self.contact_name is not None:
            result['contact_name'] = self.contact_name
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        if self.corp_name is not None:
            result['corp_name'] = self.corp_name
        if self.cost_center is not None:
            result['cost_center'] = self.cost_center.to_map()
        if self.dep_city is not None:
            result['dep_city'] = self.dep_city
        if self.dep_city_ad_code is not None:
            result['dep_city_ad_code'] = self.dep_city_ad_code
        if self.dep_station is not None:
            result['dep_station'] = self.dep_station
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.depart_id is not None:
            result['depart_id'] = self.depart_id
        if self.depart_name is not None:
            result['depart_name'] = self.depart_name
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.gmt_modified is not None:
            result['gmt_modified'] = self.gmt_modified
        if self.id is not None:
            result['id'] = self.id
        if self.invoice is not None:
            result['invoice'] = self.invoice.to_map()
        result['price_info_list'] = []
        if self.price_info_list is not None:
            for k in self.price_info_list:
                result['price_info_list'].append(k.to_map() if k else None)
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_id is not None:
            result['project_id'] = self.project_id
        if self.project_title is not None:
            result['project_title'] = self.project_title
        if self.rider_name is not None:
            result['rider_name'] = self.rider_name
        if self.run_time is not None:
            result['run_time'] = self.run_time
        if self.seat_type is not None:
            result['seat_type'] = self.seat_type
        if self.status is not None:
            result['status'] = self.status
        if self.third_part_project_id is not None:
            result['third_part_project_id'] = self.third_part_project_id
        if self.thirdpart_apply_id is not None:
            result['thirdpart_apply_id'] = self.thirdpart_apply_id
        if self.thirdpart_itinerary_id is not None:
            result['thirdpart_itinerary_id'] = self.thirdpart_itinerary_id
        if self.ticket_count is not None:
            result['ticket_count'] = self.ticket_count
        if self.ticket_no_12306 is not None:
            result['ticket_no12306'] = self.ticket_no_12306
        if self.train_number is not None:
            result['train_number'] = self.train_number
        if self.train_type is not None:
            result['train_type'] = self.train_type
        result['user_affiliate_list'] = []
        if self.user_affiliate_list is not None:
            for k in self.user_affiliate_list:
                result['user_affiliate_list'].append(k.to_map() if k else None)
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('arr_city') is not None:
            self.arr_city = m.get('arr_city')
        if m.get('arr_city_ad_code') is not None:
            self.arr_city_ad_code = m.get('arr_city_ad_code')
        if m.get('arr_station') is not None:
            self.arr_station = m.get('arr_station')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('btrip_title') is not None:
            self.btrip_title = m.get('btrip_title')
        if m.get('contact_name') is not None:
            self.contact_name = m.get('contact_name')
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        if m.get('corp_name') is not None:
            self.corp_name = m.get('corp_name')
        if m.get('cost_center') is not None:
            temp_model = TrainOrderListQueryResponseBodyModuleCostCenter()
            self.cost_center = temp_model.from_map(m['cost_center'])
        if m.get('dep_city') is not None:
            self.dep_city = m.get('dep_city')
        if m.get('dep_city_ad_code') is not None:
            self.dep_city_ad_code = m.get('dep_city_ad_code')
        if m.get('dep_station') is not None:
            self.dep_station = m.get('dep_station')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('depart_id') is not None:
            self.depart_id = m.get('depart_id')
        if m.get('depart_name') is not None:
            self.depart_name = m.get('depart_name')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('gmt_modified') is not None:
            self.gmt_modified = m.get('gmt_modified')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('invoice') is not None:
            temp_model = TrainOrderListQueryResponseBodyModuleInvoice()
            self.invoice = temp_model.from_map(m['invoice'])
        self.price_info_list = []
        if m.get('price_info_list') is not None:
            for k in m.get('price_info_list'):
                temp_model = TrainOrderListQueryResponseBodyModulePriceInfoList()
                self.price_info_list.append(temp_model.from_map(k))
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_id') is not None:
            self.project_id = m.get('project_id')
        if m.get('project_title') is not None:
            self.project_title = m.get('project_title')
        if m.get('rider_name') is not None:
            self.rider_name = m.get('rider_name')
        if m.get('run_time') is not None:
            self.run_time = m.get('run_time')
        if m.get('seat_type') is not None:
            self.seat_type = m.get('seat_type')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('third_part_project_id') is not None:
            self.third_part_project_id = m.get('third_part_project_id')
        if m.get('thirdpart_apply_id') is not None:
            self.thirdpart_apply_id = m.get('thirdpart_apply_id')
        if m.get('thirdpart_itinerary_id') is not None:
            self.thirdpart_itinerary_id = m.get('thirdpart_itinerary_id')
        if m.get('ticket_count') is not None:
            self.ticket_count = m.get('ticket_count')
        if m.get('ticket_no12306') is not None:
            self.ticket_no_12306 = m.get('ticket_no12306')
        if m.get('train_number') is not None:
            self.train_number = m.get('train_number')
        if m.get('train_type') is not None:
            self.train_type = m.get('train_type')
        self.user_affiliate_list = []
        if m.get('user_affiliate_list') is not None:
            for k in m.get('user_affiliate_list'):
                temp_model = TrainOrderListQueryResponseBodyModuleUserAffiliateList()
                self.user_affiliate_list.append(temp_model.from_map(k))
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class TrainOrderListQueryResponseBodyPageInfo(TeaModel):
    def __init__(self, page=None, page_size=None, total_number=None):
        self.page = page  # type: int
        self.page_size = page_size  # type: int
        self.total_number = total_number  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(TrainOrderListQueryResponseBodyPageInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page is not None:
            result['page'] = self.page
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.total_number is not None:
            result['total_number'] = self.total_number
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('page') is not None:
            self.page = m.get('page')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('total_number') is not None:
            self.total_number = m.get('total_number')
        return self


class TrainOrderListQueryResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, page_info=None, request_id=None, success=None,
                 trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: list[TrainOrderListQueryResponseBodyModule]
        self.page_info = page_info  # type: TrainOrderListQueryResponseBodyPageInfo
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            for k in self.module:
                if k:
                    k.validate()
        if self.page_info:
            self.page_info.validate()

    def to_map(self):
        _map = super(TrainOrderListQueryResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        result['module'] = []
        if self.module is not None:
            for k in self.module:
                result['module'].append(k.to_map() if k else None)
        if self.page_info is not None:
            result['page_info'] = self.page_info.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        self.module = []
        if m.get('module') is not None:
            for k in m.get('module'):
                temp_model = TrainOrderListQueryResponseBodyModule()
                self.module.append(temp_model.from_map(k))
        if m.get('page_info') is not None:
            temp_model = TrainOrderListQueryResponseBodyPageInfo()
            self.page_info = temp_model.from_map(m['page_info'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class TrainOrderListQueryResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: TrainOrderListQueryResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(TrainOrderListQueryResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TrainOrderListQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TrainOrderQueryHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_so_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TrainOrderQueryHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class TrainOrderQueryRequest(TeaModel):
    def __init__(self, order_id=None, user_id=None):
        self.order_id = order_id  # type: long
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TrainOrderQueryRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class TrainOrderQueryResponseBodyModuleChangeTicketInfoList(TeaModel):
    def __init__(self, change_coach_no=None, change_gap_fee=None, change_handling_fee=None, change_seat_no=None,
                 change_seat_type_name=None, change_service_fee=None, change_train_no=None, change_train_type_name=None,
                 check_in_time=None, check_out_time=None, end_time=None, from_station_name=None, gmt_create=None, gmt_modify=None,
                 origin_ticket_no=None, out_ticket_status=None, start_time=None, ticket_no=None, to_station_name=None):
        self.change_coach_no = change_coach_no  # type: str
        self.change_gap_fee = change_gap_fee  # type: float
        self.change_handling_fee = change_handling_fee  # type: float
        self.change_seat_no = change_seat_no  # type: str
        self.change_seat_type_name = change_seat_type_name  # type: str
        self.change_service_fee = change_service_fee  # type: float
        self.change_train_no = change_train_no  # type: str
        self.change_train_type_name = change_train_type_name  # type: str
        self.check_in_time = check_in_time  # type: str
        self.check_out_time = check_out_time  # type: str
        self.end_time = end_time  # type: str
        self.from_station_name = from_station_name  # type: str
        self.gmt_create = gmt_create  # type: str
        self.gmt_modify = gmt_modify  # type: str
        self.origin_ticket_no = origin_ticket_no  # type: str
        self.out_ticket_status = out_ticket_status  # type: str
        self.start_time = start_time  # type: str
        self.ticket_no = ticket_no  # type: str
        self.to_station_name = to_station_name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TrainOrderQueryResponseBodyModuleChangeTicketInfoList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.change_coach_no is not None:
            result['change_coach_no'] = self.change_coach_no
        if self.change_gap_fee is not None:
            result['change_gap_fee'] = self.change_gap_fee
        if self.change_handling_fee is not None:
            result['change_handling_fee'] = self.change_handling_fee
        if self.change_seat_no is not None:
            result['change_seat_no'] = self.change_seat_no
        if self.change_seat_type_name is not None:
            result['change_seat_type_name'] = self.change_seat_type_name
        if self.change_service_fee is not None:
            result['change_service_fee'] = self.change_service_fee
        if self.change_train_no is not None:
            result['change_train_no'] = self.change_train_no
        if self.change_train_type_name is not None:
            result['change_train_type_name'] = self.change_train_type_name
        if self.check_in_time is not None:
            result['check_in_time'] = self.check_in_time
        if self.check_out_time is not None:
            result['check_out_time'] = self.check_out_time
        if self.end_time is not None:
            result['end_time'] = self.end_time
        if self.from_station_name is not None:
            result['from_station_name'] = self.from_station_name
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.gmt_modify is not None:
            result['gmt_modify'] = self.gmt_modify
        if self.origin_ticket_no is not None:
            result['origin_ticket_no'] = self.origin_ticket_no
        if self.out_ticket_status is not None:
            result['out_ticket_status'] = self.out_ticket_status
        if self.start_time is not None:
            result['start_time'] = self.start_time
        if self.ticket_no is not None:
            result['ticket_no'] = self.ticket_no
        if self.to_station_name is not None:
            result['to_station_name'] = self.to_station_name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('change_coach_no') is not None:
            self.change_coach_no = m.get('change_coach_no')
        if m.get('change_gap_fee') is not None:
            self.change_gap_fee = m.get('change_gap_fee')
        if m.get('change_handling_fee') is not None:
            self.change_handling_fee = m.get('change_handling_fee')
        if m.get('change_seat_no') is not None:
            self.change_seat_no = m.get('change_seat_no')
        if m.get('change_seat_type_name') is not None:
            self.change_seat_type_name = m.get('change_seat_type_name')
        if m.get('change_service_fee') is not None:
            self.change_service_fee = m.get('change_service_fee')
        if m.get('change_train_no') is not None:
            self.change_train_no = m.get('change_train_no')
        if m.get('change_train_type_name') is not None:
            self.change_train_type_name = m.get('change_train_type_name')
        if m.get('check_in_time') is not None:
            self.check_in_time = m.get('check_in_time')
        if m.get('check_out_time') is not None:
            self.check_out_time = m.get('check_out_time')
        if m.get('end_time') is not None:
            self.end_time = m.get('end_time')
        if m.get('from_station_name') is not None:
            self.from_station_name = m.get('from_station_name')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('gmt_modify') is not None:
            self.gmt_modify = m.get('gmt_modify')
        if m.get('origin_ticket_no') is not None:
            self.origin_ticket_no = m.get('origin_ticket_no')
        if m.get('out_ticket_status') is not None:
            self.out_ticket_status = m.get('out_ticket_status')
        if m.get('start_time') is not None:
            self.start_time = m.get('start_time')
        if m.get('ticket_no') is not None:
            self.ticket_no = m.get('ticket_no')
        if m.get('to_station_name') is not None:
            self.to_station_name = m.get('to_station_name')
        return self


class TrainOrderQueryResponseBodyModuleInvoiceInfo(TeaModel):
    def __init__(self, id=None, title=None):
        self.id = id  # type: long
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TrainOrderQueryResponseBodyModuleInvoiceInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class TrainOrderQueryResponseBodyModuleOrderBaseInfo(TeaModel):
    def __init__(self, apply_id=None, btrip_title=None, contact_name=None, corp_id=None, corp_name=None,
                 depart_id=None, depart_name=None, exceed_apply_id=None, exceed_third_part_apply_id=None, gmt_create=None,
                 gmt_modify=None, itinerary_id=None, order_id=None, order_status=None, thirdpart_apply_id=None,
                 thirdpart_corp_id=None, thirdpart_itinerary_id=None, trip_type=None, user_id=None):
        self.apply_id = apply_id  # type: str
        self.btrip_title = btrip_title  # type: str
        self.contact_name = contact_name  # type: str
        self.corp_id = corp_id  # type: str
        self.corp_name = corp_name  # type: str
        self.depart_id = depart_id  # type: str
        self.depart_name = depart_name  # type: str
        # 火车票超标审批id
        self.exceed_apply_id = exceed_apply_id  # type: str
        # 火车票超标审批三方id
        self.exceed_third_part_apply_id = exceed_third_part_apply_id  # type: str
        self.gmt_create = gmt_create  # type: str
        self.gmt_modify = gmt_modify  # type: str
        self.itinerary_id = itinerary_id  # type: str
        self.order_id = order_id  # type: long
        self.order_status = order_status  # type: int
        self.thirdpart_apply_id = thirdpart_apply_id  # type: str
        self.thirdpart_corp_id = thirdpart_corp_id  # type: str
        self.thirdpart_itinerary_id = thirdpart_itinerary_id  # type: str
        self.trip_type = trip_type  # type: int
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TrainOrderQueryResponseBodyModuleOrderBaseInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.btrip_title is not None:
            result['btrip_title'] = self.btrip_title
        if self.contact_name is not None:
            result['contact_name'] = self.contact_name
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        if self.corp_name is not None:
            result['corp_name'] = self.corp_name
        if self.depart_id is not None:
            result['depart_id'] = self.depart_id
        if self.depart_name is not None:
            result['depart_name'] = self.depart_name
        if self.exceed_apply_id is not None:
            result['exceed_apply_id'] = self.exceed_apply_id
        if self.exceed_third_part_apply_id is not None:
            result['exceed_third_part_apply_id'] = self.exceed_third_part_apply_id
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.gmt_modify is not None:
            result['gmt_modify'] = self.gmt_modify
        if self.itinerary_id is not None:
            result['itinerary_id'] = self.itinerary_id
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.order_status is not None:
            result['order_status'] = self.order_status
        if self.thirdpart_apply_id is not None:
            result['thirdpart_apply_id'] = self.thirdpart_apply_id
        if self.thirdpart_corp_id is not None:
            result['thirdpart_corp_id'] = self.thirdpart_corp_id
        if self.thirdpart_itinerary_id is not None:
            result['thirdpart_itinerary_id'] = self.thirdpart_itinerary_id
        if self.trip_type is not None:
            result['trip_type'] = self.trip_type
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('btrip_title') is not None:
            self.btrip_title = m.get('btrip_title')
        if m.get('contact_name') is not None:
            self.contact_name = m.get('contact_name')
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        if m.get('corp_name') is not None:
            self.corp_name = m.get('corp_name')
        if m.get('depart_id') is not None:
            self.depart_id = m.get('depart_id')
        if m.get('depart_name') is not None:
            self.depart_name = m.get('depart_name')
        if m.get('exceed_apply_id') is not None:
            self.exceed_apply_id = m.get('exceed_apply_id')
        if m.get('exceed_third_part_apply_id') is not None:
            self.exceed_third_part_apply_id = m.get('exceed_third_part_apply_id')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('gmt_modify') is not None:
            self.gmt_modify = m.get('gmt_modify')
        if m.get('itinerary_id') is not None:
            self.itinerary_id = m.get('itinerary_id')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('order_status') is not None:
            self.order_status = m.get('order_status')
        if m.get('thirdpart_apply_id') is not None:
            self.thirdpart_apply_id = m.get('thirdpart_apply_id')
        if m.get('thirdpart_corp_id') is not None:
            self.thirdpart_corp_id = m.get('thirdpart_corp_id')
        if m.get('thirdpart_itinerary_id') is not None:
            self.thirdpart_itinerary_id = m.get('thirdpart_itinerary_id')
        if m.get('trip_type') is not None:
            self.trip_type = m.get('trip_type')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class TrainOrderQueryResponseBodyModulePassengerInfoList(TeaModel):
    def __init__(self, cost_center_id=None, cost_center_name=None, cost_center_number=None, project_code=None,
                 project_id=None, project_title=None, thirdpart_project_id=None, user_id=None, user_name=None, user_type=None):
        self.cost_center_id = cost_center_id  # type: long
        self.cost_center_name = cost_center_name  # type: str
        self.cost_center_number = cost_center_number  # type: str
        self.project_code = project_code  # type: str
        self.project_id = project_id  # type: long
        self.project_title = project_title  # type: str
        self.thirdpart_project_id = thirdpart_project_id  # type: str
        self.user_id = user_id  # type: str
        self.user_name = user_name  # type: str
        self.user_type = user_type  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(TrainOrderQueryResponseBodyModulePassengerInfoList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cost_center_id is not None:
            result['cost_center_id'] = self.cost_center_id
        if self.cost_center_name is not None:
            result['cost_center_name'] = self.cost_center_name
        if self.cost_center_number is not None:
            result['cost_center_number'] = self.cost_center_number
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_id is not None:
            result['project_id'] = self.project_id
        if self.project_title is not None:
            result['project_title'] = self.project_title
        if self.thirdpart_project_id is not None:
            result['thirdpart_project_id'] = self.thirdpart_project_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        if self.user_type is not None:
            result['user_type'] = self.user_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('cost_center_id') is not None:
            self.cost_center_id = m.get('cost_center_id')
        if m.get('cost_center_name') is not None:
            self.cost_center_name = m.get('cost_center_name')
        if m.get('cost_center_number') is not None:
            self.cost_center_number = m.get('cost_center_number')
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_id') is not None:
            self.project_id = m.get('project_id')
        if m.get('project_title') is not None:
            self.project_title = m.get('project_title')
        if m.get('thirdpart_project_id') is not None:
            self.thirdpart_project_id = m.get('thirdpart_project_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        if m.get('user_type') is not None:
            self.user_type = m.get('user_type')
        return self


class TrainOrderQueryResponseBodyModulePriceInfoList(TeaModel):
    def __init__(self, category_code=None, gmt_create=None, passenger_name=None, pay_type=None, price=None,
                 trade_id=None, type=None):
        self.category_code = category_code  # type: int
        self.gmt_create = gmt_create  # type: str
        self.passenger_name = passenger_name  # type: str
        self.pay_type = pay_type  # type: int
        self.price = price  # type: float
        self.trade_id = trade_id  # type: str
        self.type = type  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(TrainOrderQueryResponseBodyModulePriceInfoList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category_code is not None:
            result['category_code'] = self.category_code
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.passenger_name is not None:
            result['passenger_name'] = self.passenger_name
        if self.pay_type is not None:
            result['pay_type'] = self.pay_type
        if self.price is not None:
            result['price'] = self.price
        if self.trade_id is not None:
            result['trade_id'] = self.trade_id
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('category_code') is not None:
            self.category_code = m.get('category_code')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('passenger_name') is not None:
            self.passenger_name = m.get('passenger_name')
        if m.get('pay_type') is not None:
            self.pay_type = m.get('pay_type')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('trade_id') is not None:
            self.trade_id = m.get('trade_id')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class TrainOrderQueryResponseBodyModuleRefundTicketInfoList(TeaModel):
    def __init__(self, gmt_create=None, gmt_modify=None, refund_fee=None, refund_service_fee=None, ticket_no=None):
        self.gmt_create = gmt_create  # type: str
        self.gmt_modify = gmt_modify  # type: str
        self.refund_fee = refund_fee  # type: float
        self.refund_service_fee = refund_service_fee  # type: float
        self.ticket_no = ticket_no  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TrainOrderQueryResponseBodyModuleRefundTicketInfoList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.gmt_modify is not None:
            result['gmt_modify'] = self.gmt_modify
        if self.refund_fee is not None:
            result['refund_fee'] = self.refund_fee
        if self.refund_service_fee is not None:
            result['refund_service_fee'] = self.refund_service_fee
        if self.ticket_no is not None:
            result['ticket_no'] = self.ticket_no
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('gmt_modify') is not None:
            self.gmt_modify = m.get('gmt_modify')
        if m.get('refund_fee') is not None:
            self.refund_fee = m.get('refund_fee')
        if m.get('refund_service_fee') is not None:
            self.refund_service_fee = m.get('refund_service_fee')
        if m.get('ticket_no') is not None:
            self.ticket_no = m.get('ticket_no')
        return self


class TrainOrderQueryResponseBodyModuleTicketInfoList(TeaModel):
    def __init__(self, changed=None, check_in_time=None, check_out_time=None, coach_no=None, end_time=None,
                 gmt_create=None, gmt_modify=None, out_ticket_status=None, pay_type=None, seat_no=None, seat_type_name=None,
                 service_fee=None, start_time=None, ticket_no=None, ticket_price=None, ticket_status=None, train_type_name=None,
                 user_id=None):
        self.changed = changed  # type: bool
        self.check_in_time = check_in_time  # type: str
        self.check_out_time = check_out_time  # type: str
        self.coach_no = coach_no  # type: str
        self.end_time = end_time  # type: str
        self.gmt_create = gmt_create  # type: str
        self.gmt_modify = gmt_modify  # type: str
        self.out_ticket_status = out_ticket_status  # type: str
        self.pay_type = pay_type  # type: int
        self.seat_no = seat_no  # type: str
        self.seat_type_name = seat_type_name  # type: str
        self.service_fee = service_fee  # type: float
        self.start_time = start_time  # type: str
        self.ticket_no = ticket_no  # type: str
        self.ticket_price = ticket_price  # type: float
        self.ticket_status = ticket_status  # type: int
        self.train_type_name = train_type_name  # type: str
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TrainOrderQueryResponseBodyModuleTicketInfoList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.changed is not None:
            result['changed'] = self.changed
        if self.check_in_time is not None:
            result['check_in_time'] = self.check_in_time
        if self.check_out_time is not None:
            result['check_out_time'] = self.check_out_time
        if self.coach_no is not None:
            result['coach_no'] = self.coach_no
        if self.end_time is not None:
            result['end_time'] = self.end_time
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.gmt_modify is not None:
            result['gmt_modify'] = self.gmt_modify
        if self.out_ticket_status is not None:
            result['out_ticket_status'] = self.out_ticket_status
        if self.pay_type is not None:
            result['pay_type'] = self.pay_type
        if self.seat_no is not None:
            result['seat_no'] = self.seat_no
        if self.seat_type_name is not None:
            result['seat_type_name'] = self.seat_type_name
        if self.service_fee is not None:
            result['service_fee'] = self.service_fee
        if self.start_time is not None:
            result['start_time'] = self.start_time
        if self.ticket_no is not None:
            result['ticket_no'] = self.ticket_no
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.ticket_status is not None:
            result['ticket_status'] = self.ticket_status
        if self.train_type_name is not None:
            result['train_type_name'] = self.train_type_name
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('changed') is not None:
            self.changed = m.get('changed')
        if m.get('check_in_time') is not None:
            self.check_in_time = m.get('check_in_time')
        if m.get('check_out_time') is not None:
            self.check_out_time = m.get('check_out_time')
        if m.get('coach_no') is not None:
            self.coach_no = m.get('coach_no')
        if m.get('end_time') is not None:
            self.end_time = m.get('end_time')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('gmt_modify') is not None:
            self.gmt_modify = m.get('gmt_modify')
        if m.get('out_ticket_status') is not None:
            self.out_ticket_status = m.get('out_ticket_status')
        if m.get('pay_type') is not None:
            self.pay_type = m.get('pay_type')
        if m.get('seat_no') is not None:
            self.seat_no = m.get('seat_no')
        if m.get('seat_type_name') is not None:
            self.seat_type_name = m.get('seat_type_name')
        if m.get('service_fee') is not None:
            self.service_fee = m.get('service_fee')
        if m.get('start_time') is not None:
            self.start_time = m.get('start_time')
        if m.get('ticket_no') is not None:
            self.ticket_no = m.get('ticket_no')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('ticket_status') is not None:
            self.ticket_status = m.get('ticket_status')
        if m.get('train_type_name') is not None:
            self.train_type_name = m.get('train_type_name')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class TrainOrderQueryResponseBodyModuleTrainInfo(TeaModel):
    def __init__(self, arr_time=None, dep_time=None, from_city_ad_code=None, from_station_name=None, run_time=None,
                 to_city_ad_code=None, to_station_name=None, train_no=None):
        self.arr_time = arr_time  # type: str
        self.dep_time = dep_time  # type: str
        self.from_city_ad_code = from_city_ad_code  # type: str
        self.from_station_name = from_station_name  # type: str
        self.run_time = run_time  # type: long
        self.to_city_ad_code = to_city_ad_code  # type: str
        self.to_station_name = to_station_name  # type: str
        self.train_no = train_no  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TrainOrderQueryResponseBodyModuleTrainInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.from_city_ad_code is not None:
            result['from_city_ad_code'] = self.from_city_ad_code
        if self.from_station_name is not None:
            result['from_station_name'] = self.from_station_name
        if self.run_time is not None:
            result['run_time'] = self.run_time
        if self.to_city_ad_code is not None:
            result['to_city_ad_code'] = self.to_city_ad_code
        if self.to_station_name is not None:
            result['to_station_name'] = self.to_station_name
        if self.train_no is not None:
            result['train_no'] = self.train_no
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('from_city_ad_code') is not None:
            self.from_city_ad_code = m.get('from_city_ad_code')
        if m.get('from_station_name') is not None:
            self.from_station_name = m.get('from_station_name')
        if m.get('run_time') is not None:
            self.run_time = m.get('run_time')
        if m.get('to_city_ad_code') is not None:
            self.to_city_ad_code = m.get('to_city_ad_code')
        if m.get('to_station_name') is not None:
            self.to_station_name = m.get('to_station_name')
        if m.get('train_no') is not None:
            self.train_no = m.get('train_no')
        return self


class TrainOrderQueryResponseBodyModule(TeaModel):
    def __init__(self, change_ticket_info_list=None, invoice_info=None, order_base_info=None,
                 passenger_info_list=None, price_info_list=None, refund_ticket_info_list=None, ticket_info_list=None, train_info=None):
        self.change_ticket_info_list = change_ticket_info_list  # type: list[TrainOrderQueryResponseBodyModuleChangeTicketInfoList]
        self.invoice_info = invoice_info  # type: TrainOrderQueryResponseBodyModuleInvoiceInfo
        self.order_base_info = order_base_info  # type: TrainOrderQueryResponseBodyModuleOrderBaseInfo
        self.passenger_info_list = passenger_info_list  # type: list[TrainOrderQueryResponseBodyModulePassengerInfoList]
        self.price_info_list = price_info_list  # type: list[TrainOrderQueryResponseBodyModulePriceInfoList]
        self.refund_ticket_info_list = refund_ticket_info_list  # type: list[TrainOrderQueryResponseBodyModuleRefundTicketInfoList]
        self.ticket_info_list = ticket_info_list  # type: list[TrainOrderQueryResponseBodyModuleTicketInfoList]
        self.train_info = train_info  # type: TrainOrderQueryResponseBodyModuleTrainInfo

    def validate(self):
        if self.change_ticket_info_list:
            for k in self.change_ticket_info_list:
                if k:
                    k.validate()
        if self.invoice_info:
            self.invoice_info.validate()
        if self.order_base_info:
            self.order_base_info.validate()
        if self.passenger_info_list:
            for k in self.passenger_info_list:
                if k:
                    k.validate()
        if self.price_info_list:
            for k in self.price_info_list:
                if k:
                    k.validate()
        if self.refund_ticket_info_list:
            for k in self.refund_ticket_info_list:
                if k:
                    k.validate()
        if self.ticket_info_list:
            for k in self.ticket_info_list:
                if k:
                    k.validate()
        if self.train_info:
            self.train_info.validate()

    def to_map(self):
        _map = super(TrainOrderQueryResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['change_ticket_info_list'] = []
        if self.change_ticket_info_list is not None:
            for k in self.change_ticket_info_list:
                result['change_ticket_info_list'].append(k.to_map() if k else None)
        if self.invoice_info is not None:
            result['invoice_info'] = self.invoice_info.to_map()
        if self.order_base_info is not None:
            result['order_base_info'] = self.order_base_info.to_map()
        result['passenger_info_list'] = []
        if self.passenger_info_list is not None:
            for k in self.passenger_info_list:
                result['passenger_info_list'].append(k.to_map() if k else None)
        result['price_info_list'] = []
        if self.price_info_list is not None:
            for k in self.price_info_list:
                result['price_info_list'].append(k.to_map() if k else None)
        result['refund_ticket_info_list'] = []
        if self.refund_ticket_info_list is not None:
            for k in self.refund_ticket_info_list:
                result['refund_ticket_info_list'].append(k.to_map() if k else None)
        result['ticket_info_list'] = []
        if self.ticket_info_list is not None:
            for k in self.ticket_info_list:
                result['ticket_info_list'].append(k.to_map() if k else None)
        if self.train_info is not None:
            result['train_info'] = self.train_info.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.change_ticket_info_list = []
        if m.get('change_ticket_info_list') is not None:
            for k in m.get('change_ticket_info_list'):
                temp_model = TrainOrderQueryResponseBodyModuleChangeTicketInfoList()
                self.change_ticket_info_list.append(temp_model.from_map(k))
        if m.get('invoice_info') is not None:
            temp_model = TrainOrderQueryResponseBodyModuleInvoiceInfo()
            self.invoice_info = temp_model.from_map(m['invoice_info'])
        if m.get('order_base_info') is not None:
            temp_model = TrainOrderQueryResponseBodyModuleOrderBaseInfo()
            self.order_base_info = temp_model.from_map(m['order_base_info'])
        self.passenger_info_list = []
        if m.get('passenger_info_list') is not None:
            for k in m.get('passenger_info_list'):
                temp_model = TrainOrderQueryResponseBodyModulePassengerInfoList()
                self.passenger_info_list.append(temp_model.from_map(k))
        self.price_info_list = []
        if m.get('price_info_list') is not None:
            for k in m.get('price_info_list'):
                temp_model = TrainOrderQueryResponseBodyModulePriceInfoList()
                self.price_info_list.append(temp_model.from_map(k))
        self.refund_ticket_info_list = []
        if m.get('refund_ticket_info_list') is not None:
            for k in m.get('refund_ticket_info_list'):
                temp_model = TrainOrderQueryResponseBodyModuleRefundTicketInfoList()
                self.refund_ticket_info_list.append(temp_model.from_map(k))
        self.ticket_info_list = []
        if m.get('ticket_info_list') is not None:
            for k in m.get('ticket_info_list'):
                temp_model = TrainOrderQueryResponseBodyModuleTicketInfoList()
                self.ticket_info_list.append(temp_model.from_map(k))
        if m.get('train_info') is not None:
            temp_model = TrainOrderQueryResponseBodyModuleTrainInfo()
            self.train_info = temp_model.from_map(m['train_info'])
        return self


class TrainOrderQueryResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: TrainOrderQueryResponseBodyModule
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(TrainOrderQueryResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = TrainOrderQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class TrainOrderQueryResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: TrainOrderQueryResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(TrainOrderQueryResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TrainOrderQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TrainOrderQueryV2Headers(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TrainOrderQueryV2Headers, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class TrainOrderQueryV2Request(TeaModel):
    def __init__(self, order_id=None, user_id=None):
        self.order_id = order_id  # type: long
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TrainOrderQueryV2Request, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList(TeaModel):
    def __init__(self, change_coach_no=None, change_gap_fee=None, change_handling_fee=None, change_seat_no=None,
                 change_seat_type_name=None, change_service_fee=None, change_train_no=None, change_train_type_name=None,
                 check_in_time=None, check_out_time=None, end_time=None, from_city_name=None, from_station_name=None,
                 gmt_create=None, gmt_modify=None, origin_ticket_no=None, out_ticket_status=None, segment_index=None,
                 start_time=None, ticket_no=None, to_city_name=None, to_station_name=None, use_ticket=None, user_id=None):
        self.change_coach_no = change_coach_no  # type: str
        self.change_gap_fee = change_gap_fee  # type: float
        self.change_handling_fee = change_handling_fee  # type: float
        self.change_seat_no = change_seat_no  # type: str
        self.change_seat_type_name = change_seat_type_name  # type: str
        self.change_service_fee = change_service_fee  # type: float
        self.change_train_no = change_train_no  # type: str
        self.change_train_type_name = change_train_type_name  # type: str
        self.check_in_time = check_in_time  # type: str
        self.check_out_time = check_out_time  # type: str
        self.end_time = end_time  # type: str
        self.from_city_name = from_city_name  # type: str
        self.from_station_name = from_station_name  # type: str
        self.gmt_create = gmt_create  # type: str
        self.gmt_modify = gmt_modify  # type: str
        self.origin_ticket_no = origin_ticket_no  # type: str
        self.out_ticket_status = out_ticket_status  # type: str
        self.segment_index = segment_index  # type: int
        self.start_time = start_time  # type: str
        self.ticket_no = ticket_no  # type: str
        self.to_city_name = to_city_name  # type: str
        self.to_station_name = to_station_name  # type: str
        self.use_ticket = use_ticket  # type: str
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.change_coach_no is not None:
            result['change_coach_no'] = self.change_coach_no
        if self.change_gap_fee is not None:
            result['change_gap_fee'] = self.change_gap_fee
        if self.change_handling_fee is not None:
            result['change_handling_fee'] = self.change_handling_fee
        if self.change_seat_no is not None:
            result['change_seat_no'] = self.change_seat_no
        if self.change_seat_type_name is not None:
            result['change_seat_type_name'] = self.change_seat_type_name
        if self.change_service_fee is not None:
            result['change_service_fee'] = self.change_service_fee
        if self.change_train_no is not None:
            result['change_train_no'] = self.change_train_no
        if self.change_train_type_name is not None:
            result['change_train_type_name'] = self.change_train_type_name
        if self.check_in_time is not None:
            result['check_in_time'] = self.check_in_time
        if self.check_out_time is not None:
            result['check_out_time'] = self.check_out_time
        if self.end_time is not None:
            result['end_time'] = self.end_time
        if self.from_city_name is not None:
            result['from_city_name'] = self.from_city_name
        if self.from_station_name is not None:
            result['from_station_name'] = self.from_station_name
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.gmt_modify is not None:
            result['gmt_modify'] = self.gmt_modify
        if self.origin_ticket_no is not None:
            result['origin_ticket_no'] = self.origin_ticket_no
        if self.out_ticket_status is not None:
            result['out_ticket_status'] = self.out_ticket_status
        if self.segment_index is not None:
            result['segment_index'] = self.segment_index
        if self.start_time is not None:
            result['start_time'] = self.start_time
        if self.ticket_no is not None:
            result['ticket_no'] = self.ticket_no
        if self.to_city_name is not None:
            result['to_city_name'] = self.to_city_name
        if self.to_station_name is not None:
            result['to_station_name'] = self.to_station_name
        if self.use_ticket is not None:
            result['use_ticket'] = self.use_ticket
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('change_coach_no') is not None:
            self.change_coach_no = m.get('change_coach_no')
        if m.get('change_gap_fee') is not None:
            self.change_gap_fee = m.get('change_gap_fee')
        if m.get('change_handling_fee') is not None:
            self.change_handling_fee = m.get('change_handling_fee')
        if m.get('change_seat_no') is not None:
            self.change_seat_no = m.get('change_seat_no')
        if m.get('change_seat_type_name') is not None:
            self.change_seat_type_name = m.get('change_seat_type_name')
        if m.get('change_service_fee') is not None:
            self.change_service_fee = m.get('change_service_fee')
        if m.get('change_train_no') is not None:
            self.change_train_no = m.get('change_train_no')
        if m.get('change_train_type_name') is not None:
            self.change_train_type_name = m.get('change_train_type_name')
        if m.get('check_in_time') is not None:
            self.check_in_time = m.get('check_in_time')
        if m.get('check_out_time') is not None:
            self.check_out_time = m.get('check_out_time')
        if m.get('end_time') is not None:
            self.end_time = m.get('end_time')
        if m.get('from_city_name') is not None:
            self.from_city_name = m.get('from_city_name')
        if m.get('from_station_name') is not None:
            self.from_station_name = m.get('from_station_name')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('gmt_modify') is not None:
            self.gmt_modify = m.get('gmt_modify')
        if m.get('origin_ticket_no') is not None:
            self.origin_ticket_no = m.get('origin_ticket_no')
        if m.get('out_ticket_status') is not None:
            self.out_ticket_status = m.get('out_ticket_status')
        if m.get('segment_index') is not None:
            self.segment_index = m.get('segment_index')
        if m.get('start_time') is not None:
            self.start_time = m.get('start_time')
        if m.get('ticket_no') is not None:
            self.ticket_no = m.get('ticket_no')
        if m.get('to_city_name') is not None:
            self.to_city_name = m.get('to_city_name')
        if m.get('to_station_name') is not None:
            self.to_station_name = m.get('to_station_name')
        if m.get('use_ticket') is not None:
            self.use_ticket = m.get('use_ticket')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class TrainOrderQueryV2ResponseBodyModuleInvoiceInfo(TeaModel):
    def __init__(self, id=None, title=None):
        self.id = id  # type: long
        self.title = title  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TrainOrderQueryV2ResponseBodyModuleInvoiceInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class TrainOrderQueryV2ResponseBodyModuleOrderBaseInfo(TeaModel):
    def __init__(self, apply_id=None, btrip_title=None, contact_name=None, contact_phone=None, corp_id=None,
                 corp_name=None, depart_id=None, depart_name=None, exceed_apply_id=None, exceed_thirdpart_apply_id=None,
                 gmt_create=None, gmt_modify=None, itinerary_id=None, order_id=None, order_status=None,
                 thirdpart_apply_id=None, thirdpart_depart_id=None, thirdpart_itinerary_id=None, trip_type=None, user_id=None,
                 user_nick=None):
        self.apply_id = apply_id  # type: str
        self.btrip_title = btrip_title  # type: str
        self.contact_name = contact_name  # type: str
        self.contact_phone = contact_phone  # type: str
        self.corp_id = corp_id  # type: str
        self.corp_name = corp_name  # type: str
        self.depart_id = depart_id  # type: str
        self.depart_name = depart_name  # type: str
        self.exceed_apply_id = exceed_apply_id  # type: str
        self.exceed_thirdpart_apply_id = exceed_thirdpart_apply_id  # type: str
        self.gmt_create = gmt_create  # type: str
        self.gmt_modify = gmt_modify  # type: str
        self.itinerary_id = itinerary_id  # type: str
        self.order_id = order_id  # type: long
        self.order_status = order_status  # type: int
        self.thirdpart_apply_id = thirdpart_apply_id  # type: str
        self.thirdpart_depart_id = thirdpart_depart_id  # type: str
        self.thirdpart_itinerary_id = thirdpart_itinerary_id  # type: str
        self.trip_type = trip_type  # type: int
        self.user_id = user_id  # type: str
        self.user_nick = user_nick  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TrainOrderQueryV2ResponseBodyModuleOrderBaseInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.btrip_title is not None:
            result['btrip_title'] = self.btrip_title
        if self.contact_name is not None:
            result['contact_name'] = self.contact_name
        if self.contact_phone is not None:
            result['contact_phone'] = self.contact_phone
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        if self.corp_name is not None:
            result['corp_name'] = self.corp_name
        if self.depart_id is not None:
            result['depart_id'] = self.depart_id
        if self.depart_name is not None:
            result['depart_name'] = self.depart_name
        if self.exceed_apply_id is not None:
            result['exceed_apply_id'] = self.exceed_apply_id
        if self.exceed_thirdpart_apply_id is not None:
            result['exceed_thirdpart_apply_id'] = self.exceed_thirdpart_apply_id
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.gmt_modify is not None:
            result['gmt_modify'] = self.gmt_modify
        if self.itinerary_id is not None:
            result['itinerary_id'] = self.itinerary_id
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.order_status is not None:
            result['order_status'] = self.order_status
        if self.thirdpart_apply_id is not None:
            result['thirdpart_apply_id'] = self.thirdpart_apply_id
        if self.thirdpart_depart_id is not None:
            result['thirdpart_depart_id'] = self.thirdpart_depart_id
        if self.thirdpart_itinerary_id is not None:
            result['thirdpart_itinerary_id'] = self.thirdpart_itinerary_id
        if self.trip_type is not None:
            result['trip_type'] = self.trip_type
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_nick is not None:
            result['user_nick'] = self.user_nick
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('btrip_title') is not None:
            self.btrip_title = m.get('btrip_title')
        if m.get('contact_name') is not None:
            self.contact_name = m.get('contact_name')
        if m.get('contact_phone') is not None:
            self.contact_phone = m.get('contact_phone')
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        if m.get('corp_name') is not None:
            self.corp_name = m.get('corp_name')
        if m.get('depart_id') is not None:
            self.depart_id = m.get('depart_id')
        if m.get('depart_name') is not None:
            self.depart_name = m.get('depart_name')
        if m.get('exceed_apply_id') is not None:
            self.exceed_apply_id = m.get('exceed_apply_id')
        if m.get('exceed_thirdpart_apply_id') is not None:
            self.exceed_thirdpart_apply_id = m.get('exceed_thirdpart_apply_id')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('gmt_modify') is not None:
            self.gmt_modify = m.get('gmt_modify')
        if m.get('itinerary_id') is not None:
            self.itinerary_id = m.get('itinerary_id')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('order_status') is not None:
            self.order_status = m.get('order_status')
        if m.get('thirdpart_apply_id') is not None:
            self.thirdpart_apply_id = m.get('thirdpart_apply_id')
        if m.get('thirdpart_depart_id') is not None:
            self.thirdpart_depart_id = m.get('thirdpart_depart_id')
        if m.get('thirdpart_itinerary_id') is not None:
            self.thirdpart_itinerary_id = m.get('thirdpart_itinerary_id')
        if m.get('trip_type') is not None:
            self.trip_type = m.get('trip_type')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_nick') is not None:
            self.user_nick = m.get('user_nick')
        return self


class TrainOrderQueryV2ResponseBodyModulePassengerInfoList(TeaModel):
    def __init__(self, cost_center_id=None, cost_center_name=None, cost_center_number=None, project_code=None,
                 project_id=None, project_title=None, thirdpart_cost_center_id=None, thirdpart_project_id=None, user_id=None,
                 user_name=None, user_type=None):
        self.cost_center_id = cost_center_id  # type: long
        self.cost_center_name = cost_center_name  # type: str
        self.cost_center_number = cost_center_number  # type: str
        self.project_code = project_code  # type: str
        self.project_id = project_id  # type: long
        self.project_title = project_title  # type: str
        self.thirdpart_cost_center_id = thirdpart_cost_center_id  # type: str
        self.thirdpart_project_id = thirdpart_project_id  # type: str
        self.user_id = user_id  # type: str
        self.user_name = user_name  # type: str
        self.user_type = user_type  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(TrainOrderQueryV2ResponseBodyModulePassengerInfoList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cost_center_id is not None:
            result['cost_center_id'] = self.cost_center_id
        if self.cost_center_name is not None:
            result['cost_center_name'] = self.cost_center_name
        if self.cost_center_number is not None:
            result['cost_center_number'] = self.cost_center_number
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_id is not None:
            result['project_id'] = self.project_id
        if self.project_title is not None:
            result['project_title'] = self.project_title
        if self.thirdpart_cost_center_id is not None:
            result['thirdpart_cost_center_id'] = self.thirdpart_cost_center_id
        if self.thirdpart_project_id is not None:
            result['thirdpart_project_id'] = self.thirdpart_project_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        if self.user_type is not None:
            result['user_type'] = self.user_type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('cost_center_id') is not None:
            self.cost_center_id = m.get('cost_center_id')
        if m.get('cost_center_name') is not None:
            self.cost_center_name = m.get('cost_center_name')
        if m.get('cost_center_number') is not None:
            self.cost_center_number = m.get('cost_center_number')
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_id') is not None:
            self.project_id = m.get('project_id')
        if m.get('project_title') is not None:
            self.project_title = m.get('project_title')
        if m.get('thirdpart_cost_center_id') is not None:
            self.thirdpart_cost_center_id = m.get('thirdpart_cost_center_id')
        if m.get('thirdpart_project_id') is not None:
            self.thirdpart_project_id = m.get('thirdpart_project_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        if m.get('user_type') is not None:
            self.user_type = m.get('user_type')
        return self


class TrainOrderQueryV2ResponseBodyModulePriceInfoList(TeaModel):
    def __init__(self, category_code=None, gmt_create=None, passenger_name=None, pay_type=None, price=None,
                 trade_id=None, type=None):
        self.category_code = category_code  # type: int
        self.gmt_create = gmt_create  # type: str
        self.passenger_name = passenger_name  # type: str
        self.pay_type = pay_type  # type: int
        self.price = price  # type: float
        self.trade_id = trade_id  # type: str
        self.type = type  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(TrainOrderQueryV2ResponseBodyModulePriceInfoList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category_code is not None:
            result['category_code'] = self.category_code
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.passenger_name is not None:
            result['passenger_name'] = self.passenger_name
        if self.pay_type is not None:
            result['pay_type'] = self.pay_type
        if self.price is not None:
            result['price'] = self.price
        if self.trade_id is not None:
            result['trade_id'] = self.trade_id
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('category_code') is not None:
            self.category_code = m.get('category_code')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('passenger_name') is not None:
            self.passenger_name = m.get('passenger_name')
        if m.get('pay_type') is not None:
            self.pay_type = m.get('pay_type')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('trade_id') is not None:
            self.trade_id = m.get('trade_id')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class TrainOrderQueryV2ResponseBodyModuleRefundTicketInfoList(TeaModel):
    def __init__(self, gmt_create=None, gmt_modify=None, refund_fee=None, refund_service_fee=None, ticket_no=None,
                 user_id=None):
        self.gmt_create = gmt_create  # type: str
        self.gmt_modify = gmt_modify  # type: str
        self.refund_fee = refund_fee  # type: float
        self.refund_service_fee = refund_service_fee  # type: float
        self.ticket_no = ticket_no  # type: str
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TrainOrderQueryV2ResponseBodyModuleRefundTicketInfoList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.gmt_modify is not None:
            result['gmt_modify'] = self.gmt_modify
        if self.refund_fee is not None:
            result['refund_fee'] = self.refund_fee
        if self.refund_service_fee is not None:
            result['refund_service_fee'] = self.refund_service_fee
        if self.ticket_no is not None:
            result['ticket_no'] = self.ticket_no
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('gmt_modify') is not None:
            self.gmt_modify = m.get('gmt_modify')
        if m.get('refund_fee') is not None:
            self.refund_fee = m.get('refund_fee')
        if m.get('refund_service_fee') is not None:
            self.refund_service_fee = m.get('refund_service_fee')
        if m.get('ticket_no') is not None:
            self.ticket_no = m.get('ticket_no')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoListTrainTicketInfos(TeaModel):
    def __init__(self, changed=None, check_in_time=None, check_out_time=None, coach_no=None, end_time=None,
                 gmt_create=None, gmt_modify=None, out_ticket_status=None, pay_type=None, seat_no=None, seat_type_name=None,
                 segment_index=None, service_fee=None, start_time=None, ticket_no=None, ticket_price=None, ticket_status=None,
                 train_type_name=None, use_ticket=None, user_id=None):
        self.changed = changed  # type: bool
        self.check_in_time = check_in_time  # type: str
        self.check_out_time = check_out_time  # type: str
        self.coach_no = coach_no  # type: str
        self.end_time = end_time  # type: str
        self.gmt_create = gmt_create  # type: str
        self.gmt_modify = gmt_modify  # type: str
        self.out_ticket_status = out_ticket_status  # type: str
        self.pay_type = pay_type  # type: int
        self.seat_no = seat_no  # type: str
        self.seat_type_name = seat_type_name  # type: str
        self.segment_index = segment_index  # type: int
        self.service_fee = service_fee  # type: float
        self.start_time = start_time  # type: str
        self.ticket_no = ticket_no  # type: str
        self.ticket_price = ticket_price  # type: float
        self.ticket_status = ticket_status  # type: int
        self.train_type_name = train_type_name  # type: str
        self.use_ticket = use_ticket  # type: str
        self.user_id = user_id  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoListTrainTicketInfos, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.changed is not None:
            result['changed'] = self.changed
        if self.check_in_time is not None:
            result['check_in_time'] = self.check_in_time
        if self.check_out_time is not None:
            result['check_out_time'] = self.check_out_time
        if self.coach_no is not None:
            result['coach_no'] = self.coach_no
        if self.end_time is not None:
            result['end_time'] = self.end_time
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.gmt_modify is not None:
            result['gmt_modify'] = self.gmt_modify
        if self.out_ticket_status is not None:
            result['out_ticket_status'] = self.out_ticket_status
        if self.pay_type is not None:
            result['pay_type'] = self.pay_type
        if self.seat_no is not None:
            result['seat_no'] = self.seat_no
        if self.seat_type_name is not None:
            result['seat_type_name'] = self.seat_type_name
        if self.segment_index is not None:
            result['segment_index'] = self.segment_index
        if self.service_fee is not None:
            result['service_fee'] = self.service_fee
        if self.start_time is not None:
            result['start_time'] = self.start_time
        if self.ticket_no is not None:
            result['ticket_no'] = self.ticket_no
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.ticket_status is not None:
            result['ticket_status'] = self.ticket_status
        if self.train_type_name is not None:
            result['train_type_name'] = self.train_type_name
        if self.use_ticket is not None:
            result['use_ticket'] = self.use_ticket
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('changed') is not None:
            self.changed = m.get('changed')
        if m.get('check_in_time') is not None:
            self.check_in_time = m.get('check_in_time')
        if m.get('check_out_time') is not None:
            self.check_out_time = m.get('check_out_time')
        if m.get('coach_no') is not None:
            self.coach_no = m.get('coach_no')
        if m.get('end_time') is not None:
            self.end_time = m.get('end_time')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('gmt_modify') is not None:
            self.gmt_modify = m.get('gmt_modify')
        if m.get('out_ticket_status') is not None:
            self.out_ticket_status = m.get('out_ticket_status')
        if m.get('pay_type') is not None:
            self.pay_type = m.get('pay_type')
        if m.get('seat_no') is not None:
            self.seat_no = m.get('seat_no')
        if m.get('seat_type_name') is not None:
            self.seat_type_name = m.get('seat_type_name')
        if m.get('segment_index') is not None:
            self.segment_index = m.get('segment_index')
        if m.get('service_fee') is not None:
            self.service_fee = m.get('service_fee')
        if m.get('start_time') is not None:
            self.start_time = m.get('start_time')
        if m.get('ticket_no') is not None:
            self.ticket_no = m.get('ticket_no')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('ticket_status') is not None:
            self.ticket_status = m.get('ticket_status')
        if m.get('train_type_name') is not None:
            self.train_type_name = m.get('train_type_name')
        if m.get('use_ticket') is not None:
            self.use_ticket = m.get('use_ticket')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoList(TeaModel):
    def __init__(self, arr_time=None, dep_time=None, from_city_ad_code=None, from_city_name=None,
                 from_station_name=None, item_id=None, run_time=None, to_city_ad_code=None, to_city_name=None, to_station_name=None,
                 train_no=None, train_ticket_infos=None):
        self.arr_time = arr_time  # type: str
        self.dep_time = dep_time  # type: str
        self.from_city_ad_code = from_city_ad_code  # type: str
        self.from_city_name = from_city_name  # type: str
        self.from_station_name = from_station_name  # type: str
        # itemId
        self.item_id = item_id  # type: long
        self.run_time = run_time  # type: long
        self.to_city_ad_code = to_city_ad_code  # type: str
        self.to_city_name = to_city_name  # type: str
        self.to_station_name = to_station_name  # type: str
        self.train_no = train_no  # type: str
        self.train_ticket_infos = train_ticket_infos  # type: list[TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoListTrainTicketInfos]

    def validate(self):
        if self.train_ticket_infos:
            for k in self.train_ticket_infos:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoList, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.from_city_ad_code is not None:
            result['from_city_ad_code'] = self.from_city_ad_code
        if self.from_city_name is not None:
            result['from_city_name'] = self.from_city_name
        if self.from_station_name is not None:
            result['from_station_name'] = self.from_station_name
        if self.item_id is not None:
            result['item_id'] = self.item_id
        if self.run_time is not None:
            result['run_time'] = self.run_time
        if self.to_city_ad_code is not None:
            result['to_city_ad_code'] = self.to_city_ad_code
        if self.to_city_name is not None:
            result['to_city_name'] = self.to_city_name
        if self.to_station_name is not None:
            result['to_station_name'] = self.to_station_name
        if self.train_no is not None:
            result['train_no'] = self.train_no
        result['train_ticket_infos'] = []
        if self.train_ticket_infos is not None:
            for k in self.train_ticket_infos:
                result['train_ticket_infos'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('from_city_ad_code') is not None:
            self.from_city_ad_code = m.get('from_city_ad_code')
        if m.get('from_city_name') is not None:
            self.from_city_name = m.get('from_city_name')
        if m.get('from_station_name') is not None:
            self.from_station_name = m.get('from_station_name')
        if m.get('item_id') is not None:
            self.item_id = m.get('item_id')
        if m.get('run_time') is not None:
            self.run_time = m.get('run_time')
        if m.get('to_city_ad_code') is not None:
            self.to_city_ad_code = m.get('to_city_ad_code')
        if m.get('to_city_name') is not None:
            self.to_city_name = m.get('to_city_name')
        if m.get('to_station_name') is not None:
            self.to_station_name = m.get('to_station_name')
        if m.get('train_no') is not None:
            self.train_no = m.get('train_no')
        self.train_ticket_infos = []
        if m.get('train_ticket_infos') is not None:
            for k in m.get('train_ticket_infos'):
                temp_model = TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoListTrainTicketInfos()
                self.train_ticket_infos.append(temp_model.from_map(k))
        return self


class TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainTransferInfo(TeaModel):
    def __init__(self, cost_time=None, end_time=None, from_city_ad_code=None, from_city_name=None,
                 from_station_name=None, middle_city=None, middle_city_ad_code=None, middle_date=None, middle_station=None,
                 middle_type=None, start_time=None, to_city_ad_code=None, to_city_name=None, to_station_name=None,
                 wait_time=None):
        self.cost_time = cost_time  # type: str
        self.end_time = end_time  # type: str
        self.from_city_ad_code = from_city_ad_code  # type: str
        self.from_city_name = from_city_name  # type: str
        self.from_station_name = from_station_name  # type: str
        self.middle_city = middle_city  # type: str
        self.middle_city_ad_code = middle_city_ad_code  # type: str
        self.middle_date = middle_date  # type: str
        self.middle_station = middle_station  # type: str
        self.middle_type = middle_type  # type: str
        self.start_time = start_time  # type: str
        self.to_city_ad_code = to_city_ad_code  # type: str
        self.to_city_name = to_city_name  # type: str
        self.to_station_name = to_station_name  # type: str
        self.wait_time = wait_time  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainTransferInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cost_time is not None:
            result['cost_time'] = self.cost_time
        if self.end_time is not None:
            result['end_time'] = self.end_time
        if self.from_city_ad_code is not None:
            result['from_city_ad_code'] = self.from_city_ad_code
        if self.from_city_name is not None:
            result['from_city_name'] = self.from_city_name
        if self.from_station_name is not None:
            result['from_station_name'] = self.from_station_name
        if self.middle_city is not None:
            result['middle_city'] = self.middle_city
        if self.middle_city_ad_code is not None:
            result['middle_city_ad_code'] = self.middle_city_ad_code
        if self.middle_date is not None:
            result['middle_date'] = self.middle_date
        if self.middle_station is not None:
            result['middle_station'] = self.middle_station
        if self.middle_type is not None:
            result['middle_type'] = self.middle_type
        if self.start_time is not None:
            result['start_time'] = self.start_time
        if self.to_city_ad_code is not None:
            result['to_city_ad_code'] = self.to_city_ad_code
        if self.to_city_name is not None:
            result['to_city_name'] = self.to_city_name
        if self.to_station_name is not None:
            result['to_station_name'] = self.to_station_name
        if self.wait_time is not None:
            result['wait_time'] = self.wait_time
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('cost_time') is not None:
            self.cost_time = m.get('cost_time')
        if m.get('end_time') is not None:
            self.end_time = m.get('end_time')
        if m.get('from_city_ad_code') is not None:
            self.from_city_ad_code = m.get('from_city_ad_code')
        if m.get('from_city_name') is not None:
            self.from_city_name = m.get('from_city_name')
        if m.get('from_station_name') is not None:
            self.from_station_name = m.get('from_station_name')
        if m.get('middle_city') is not None:
            self.middle_city = m.get('middle_city')
        if m.get('middle_city_ad_code') is not None:
            self.middle_city_ad_code = m.get('middle_city_ad_code')
        if m.get('middle_date') is not None:
            self.middle_date = m.get('middle_date')
        if m.get('middle_station') is not None:
            self.middle_station = m.get('middle_station')
        if m.get('middle_type') is not None:
            self.middle_type = m.get('middle_type')
        if m.get('start_time') is not None:
            self.start_time = m.get('start_time')
        if m.get('to_city_ad_code') is not None:
            self.to_city_ad_code = m.get('to_city_ad_code')
        if m.get('to_city_name') is not None:
            self.to_city_name = m.get('to_city_name')
        if m.get('to_station_name') is not None:
            self.to_station_name = m.get('to_station_name')
        if m.get('wait_time') is not None:
            self.wait_time = m.get('wait_time')
        return self


class TrainOrderQueryV2ResponseBodyModuleTrainOrderInfo(TeaModel):
    def __init__(self, train_info_list=None, train_transfer_info=None):
        self.train_info_list = train_info_list  # type: list[TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoList]
        self.train_transfer_info = train_transfer_info  # type: TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainTransferInfo

    def validate(self):
        if self.train_info_list:
            for k in self.train_info_list:
                if k:
                    k.validate()
        if self.train_transfer_info:
            self.train_transfer_info.validate()

    def to_map(self):
        _map = super(TrainOrderQueryV2ResponseBodyModuleTrainOrderInfo, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['train_info_list'] = []
        if self.train_info_list is not None:
            for k in self.train_info_list:
                result['train_info_list'].append(k.to_map() if k else None)
        if self.train_transfer_info is not None:
            result['train_transfer_info'] = self.train_transfer_info.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.train_info_list = []
        if m.get('train_info_list') is not None:
            for k in m.get('train_info_list'):
                temp_model = TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoList()
                self.train_info_list.append(temp_model.from_map(k))
        if m.get('train_transfer_info') is not None:
            temp_model = TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainTransferInfo()
            self.train_transfer_info = temp_model.from_map(m['train_transfer_info'])
        return self


class TrainOrderQueryV2ResponseBodyModule(TeaModel):
    def __init__(self, change_ticket_info_list=None, invoice_info=None, order_base_info=None,
                 passenger_info_list=None, price_info_list=None, refund_ticket_info_list=None, train_order_info=None):
        self.change_ticket_info_list = change_ticket_info_list  # type: list[TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList]
        self.invoice_info = invoice_info  # type: TrainOrderQueryV2ResponseBodyModuleInvoiceInfo
        self.order_base_info = order_base_info  # type: TrainOrderQueryV2ResponseBodyModuleOrderBaseInfo
        self.passenger_info_list = passenger_info_list  # type: list[TrainOrderQueryV2ResponseBodyModulePassengerInfoList]
        self.price_info_list = price_info_list  # type: list[TrainOrderQueryV2ResponseBodyModulePriceInfoList]
        self.refund_ticket_info_list = refund_ticket_info_list  # type: list[TrainOrderQueryV2ResponseBodyModuleRefundTicketInfoList]
        self.train_order_info = train_order_info  # type: TrainOrderQueryV2ResponseBodyModuleTrainOrderInfo

    def validate(self):
        if self.change_ticket_info_list:
            for k in self.change_ticket_info_list:
                if k:
                    k.validate()
        if self.invoice_info:
            self.invoice_info.validate()
        if self.order_base_info:
            self.order_base_info.validate()
        if self.passenger_info_list:
            for k in self.passenger_info_list:
                if k:
                    k.validate()
        if self.price_info_list:
            for k in self.price_info_list:
                if k:
                    k.validate()
        if self.refund_ticket_info_list:
            for k in self.refund_ticket_info_list:
                if k:
                    k.validate()
        if self.train_order_info:
            self.train_order_info.validate()

    def to_map(self):
        _map = super(TrainOrderQueryV2ResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['change_ticket_info_list'] = []
        if self.change_ticket_info_list is not None:
            for k in self.change_ticket_info_list:
                result['change_ticket_info_list'].append(k.to_map() if k else None)
        if self.invoice_info is not None:
            result['invoice_info'] = self.invoice_info.to_map()
        if self.order_base_info is not None:
            result['order_base_info'] = self.order_base_info.to_map()
        result['passenger_info_list'] = []
        if self.passenger_info_list is not None:
            for k in self.passenger_info_list:
                result['passenger_info_list'].append(k.to_map() if k else None)
        result['price_info_list'] = []
        if self.price_info_list is not None:
            for k in self.price_info_list:
                result['price_info_list'].append(k.to_map() if k else None)
        result['refund_ticket_info_list'] = []
        if self.refund_ticket_info_list is not None:
            for k in self.refund_ticket_info_list:
                result['refund_ticket_info_list'].append(k.to_map() if k else None)
        if self.train_order_info is not None:
            result['train_order_info'] = self.train_order_info.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.change_ticket_info_list = []
        if m.get('change_ticket_info_list') is not None:
            for k in m.get('change_ticket_info_list'):
                temp_model = TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList()
                self.change_ticket_info_list.append(temp_model.from_map(k))
        if m.get('invoice_info') is not None:
            temp_model = TrainOrderQueryV2ResponseBodyModuleInvoiceInfo()
            self.invoice_info = temp_model.from_map(m['invoice_info'])
        if m.get('order_base_info') is not None:
            temp_model = TrainOrderQueryV2ResponseBodyModuleOrderBaseInfo()
            self.order_base_info = temp_model.from_map(m['order_base_info'])
        self.passenger_info_list = []
        if m.get('passenger_info_list') is not None:
            for k in m.get('passenger_info_list'):
                temp_model = TrainOrderQueryV2ResponseBodyModulePassengerInfoList()
                self.passenger_info_list.append(temp_model.from_map(k))
        self.price_info_list = []
        if m.get('price_info_list') is not None:
            for k in m.get('price_info_list'):
                temp_model = TrainOrderQueryV2ResponseBodyModulePriceInfoList()
                self.price_info_list.append(temp_model.from_map(k))
        self.refund_ticket_info_list = []
        if m.get('refund_ticket_info_list') is not None:
            for k in m.get('refund_ticket_info_list'):
                temp_model = TrainOrderQueryV2ResponseBodyModuleRefundTicketInfoList()
                self.refund_ticket_info_list.append(temp_model.from_map(k))
        if m.get('train_order_info') is not None:
            temp_model = TrainOrderQueryV2ResponseBodyModuleTrainOrderInfo()
            self.train_order_info = temp_model.from_map(m['train_order_info'])
        return self


class TrainOrderQueryV2ResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: TrainOrderQueryV2ResponseBodyModule
        # requestId
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        # traceId
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(TrainOrderQueryV2ResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = TrainOrderQueryV2ResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class TrainOrderQueryV2Response(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: TrainOrderQueryV2ResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(TrainOrderQueryV2Response, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TrainOrderQueryV2ResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TrainStationSearchHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_so_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TrainStationSearchHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class TrainStationSearchRequest(TeaModel):
    def __init__(self, keyword=None):
        self.keyword = keyword  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TrainStationSearchRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.keyword is not None:
            result['keyword'] = self.keyword
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('keyword') is not None:
            self.keyword = m.get('keyword')
        return self


class TrainStationSearchResponseBodyModuleCities(TeaModel):
    def __init__(self, code=None, name=None):
        self.code = code  # type: str
        self.name = name  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TrainStationSearchResponseBodyModuleCities, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.name is not None:
            result['name'] = self.name
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('name') is not None:
            self.name = m.get('name')
        return self


class TrainStationSearchResponseBodyModule(TeaModel):
    def __init__(self, cities=None):
        self.cities = cities  # type: list[TrainStationSearchResponseBodyModuleCities]

    def validate(self):
        if self.cities:
            for k in self.cities:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(TrainStationSearchResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['cities'] = []
        if self.cities is not None:
            for k in self.cities:
                result['cities'].append(k.to_map() if k else None)
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.cities = []
        if m.get('cities') is not None:
            for k in m.get('cities'):
                temp_model = TrainStationSearchResponseBodyModuleCities()
                self.cities.append(temp_model.from_map(k))
        return self


class TrainStationSearchResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        # module
        self.module = module  # type: TrainStationSearchResponseBodyModule
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(TrainStationSearchResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = TrainStationSearchResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class TrainStationSearchResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: TrainStationSearchResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(TrainStationSearchResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TrainStationSearchResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TrainTicketScanQueryHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_so_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TrainTicketScanQueryHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class TrainTicketScanQueryRequest(TeaModel):
    def __init__(self, bill_date=None, bill_id=None, invoice_sub_task_id=None, page_no=None, page_size=None,
                 serial_number=None, ticket_no=None):
        self.bill_date = bill_date  # type: str
        self.bill_id = bill_id  # type: long
        self.invoice_sub_task_id = invoice_sub_task_id  # type: long
        self.page_no = page_no  # type: int
        self.page_size = page_size  # type: int
        self.serial_number = serial_number  # type: str
        self.ticket_no = ticket_no  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TrainTicketScanQueryRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bill_date is not None:
            result['bill_date'] = self.bill_date
        if self.bill_id is not None:
            result['bill_id'] = self.bill_id
        if self.invoice_sub_task_id is not None:
            result['invoice_sub_task_id'] = self.invoice_sub_task_id
        if self.page_no is not None:
            result['page_no'] = self.page_no
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.serial_number is not None:
            result['serial_number'] = self.serial_number
        if self.ticket_no is not None:
            result['ticket_no'] = self.ticket_no
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('bill_date') is not None:
            self.bill_date = m.get('bill_date')
        if m.get('bill_id') is not None:
            self.bill_id = m.get('bill_id')
        if m.get('invoice_sub_task_id') is not None:
            self.invoice_sub_task_id = m.get('invoice_sub_task_id')
        if m.get('page_no') is not None:
            self.page_no = m.get('page_no')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('serial_number') is not None:
            self.serial_number = m.get('serial_number')
        if m.get('ticket_no') is not None:
            self.ticket_no = m.get('ticket_no')
        return self


class TrainTicketScanQueryResponseBodyModuleItems(TeaModel):
    def __init__(self, arr_station=None, bill_date=None, coach_name=None, cost_center=None, dep_station=None,
                 dep_time=None, department=None, id=None, invoice_title=None, order_id=None, oss_url=None, passenger=None,
                 price=None, project=None, seat=None, seat_no=None, serial_number=None, tax_amount=None, tax_rate=None,
                 ticket_no=None, train_no=None):
        self.arr_station = arr_station  # type: str
        self.bill_date = bill_date  # type: str
        self.coach_name = coach_name  # type: str
        self.cost_center = cost_center  # type: str
        self.dep_station = dep_station  # type: str
        self.dep_time = dep_time  # type: str
        self.department = department  # type: str
        self.id = id  # type: str
        self.invoice_title = invoice_title  # type: str
        self.order_id = order_id  # type: long
        self.oss_url = oss_url  # type: str
        self.passenger = passenger  # type: str
        self.price = price  # type: str
        self.project = project  # type: str
        self.seat = seat  # type: str
        self.seat_no = seat_no  # type: str
        self.serial_number = serial_number  # type: str
        self.tax_amount = tax_amount  # type: str
        self.tax_rate = tax_rate  # type: str
        # 取票号
        self.ticket_no = ticket_no  # type: str
        # 车次
        self.train_no = train_no  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(TrainTicketScanQueryResponseBodyModuleItems, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_station is not None:
            result['arr_station'] = self.arr_station
        if self.bill_date is not None:
            result['bill_date'] = self.bill_date
        if self.coach_name is not None:
            result['coach_name'] = self.coach_name
        if self.cost_center is not None:
            result['cost_center'] = self.cost_center
        if self.dep_station is not None:
            result['dep_station'] = self.dep_station
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.department is not None:
            result['department'] = self.department
        if self.id is not None:
            result['id'] = self.id
        if self.invoice_title is not None:
            result['invoice_title'] = self.invoice_title
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.oss_url is not None:
            result['oss_url'] = self.oss_url
        if self.passenger is not None:
            result['passenger'] = self.passenger
        if self.price is not None:
            result['price'] = self.price
        if self.project is not None:
            result['project'] = self.project
        if self.seat is not None:
            result['seat'] = self.seat
        if self.seat_no is not None:
            result['seat_no'] = self.seat_no
        if self.serial_number is not None:
            result['serial_number'] = self.serial_number
        if self.tax_amount is not None:
            result['tax_amount'] = self.tax_amount
        if self.tax_rate is not None:
            result['tax_rate'] = self.tax_rate
        if self.ticket_no is not None:
            result['ticket_no'] = self.ticket_no
        if self.train_no is not None:
            result['train_no'] = self.train_no
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('arr_station') is not None:
            self.arr_station = m.get('arr_station')
        if m.get('bill_date') is not None:
            self.bill_date = m.get('bill_date')
        if m.get('coach_name') is not None:
            self.coach_name = m.get('coach_name')
        if m.get('cost_center') is not None:
            self.cost_center = m.get('cost_center')
        if m.get('dep_station') is not None:
            self.dep_station = m.get('dep_station')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('department') is not None:
            self.department = m.get('department')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('invoice_title') is not None:
            self.invoice_title = m.get('invoice_title')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('oss_url') is not None:
            self.oss_url = m.get('oss_url')
        if m.get('passenger') is not None:
            self.passenger = m.get('passenger')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('project') is not None:
            self.project = m.get('project')
        if m.get('seat') is not None:
            self.seat = m.get('seat')
        if m.get('seat_no') is not None:
            self.seat_no = m.get('seat_no')
        if m.get('serial_number') is not None:
            self.serial_number = m.get('serial_number')
        if m.get('tax_amount') is not None:
            self.tax_amount = m.get('tax_amount')
        if m.get('tax_rate') is not None:
            self.tax_rate = m.get('tax_rate')
        if m.get('ticket_no') is not None:
            self.ticket_no = m.get('ticket_no')
        if m.get('train_no') is not None:
            self.train_no = m.get('train_no')
        return self


class TrainTicketScanQueryResponseBodyModule(TeaModel):
    def __init__(self, items=None, page_no=None, page_size=None, total_page=None, total_size=None):
        self.items = items  # type: list[TrainTicketScanQueryResponseBodyModuleItems]
        self.page_no = page_no  # type: int
        self.page_size = page_size  # type: int
        self.total_page = total_page  # type: int
        self.total_size = total_size  # type: int

    def validate(self):
        if self.items:
            for k in self.items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(TrainTicketScanQueryResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['items'] = []
        if self.items is not None:
            for k in self.items:
                result['items'].append(k.to_map() if k else None)
        if self.page_no is not None:
            result['page_no'] = self.page_no
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.total_page is not None:
            result['total_page'] = self.total_page
        if self.total_size is not None:
            result['total_size'] = self.total_size
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.items = []
        if m.get('items') is not None:
            for k in m.get('items'):
                temp_model = TrainTicketScanQueryResponseBodyModuleItems()
                self.items.append(temp_model.from_map(k))
        if m.get('page_no') is not None:
            self.page_no = m.get('page_no')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('total_page') is not None:
            self.total_page = m.get('total_page')
        if m.get('total_size') is not None:
            self.total_size = m.get('total_size')
        return self


class TrainTicketScanQueryResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: TrainTicketScanQueryResponseBodyModule
        # requestId
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        # traceId
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(TrainTicketScanQueryResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = TrainTicketScanQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class TrainTicketScanQueryResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: TrainTicketScanQueryResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(TrainTicketScanQueryResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TrainTicketScanQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UserQueryHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_so_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UserQueryHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class UserQueryRequest(TeaModel):
    def __init__(self, modified_time_greater_or_equal_than=None, page_size=None, page_token=None,
                 third_part_job_no=None):
        self.modified_time_greater_or_equal_than = modified_time_greater_or_equal_than  # type: str
        self.page_size = page_size  # type: int
        self.page_token = page_token  # type: str
        self.third_part_job_no = third_part_job_no  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UserQueryRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.modified_time_greater_or_equal_than is not None:
            result['modified_time_greater_or_equal_than'] = self.modified_time_greater_or_equal_than
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.page_token is not None:
            result['page_token'] = self.page_token
        if self.third_part_job_no is not None:
            result['third_part_job_no'] = self.third_part_job_no
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('modified_time_greater_or_equal_than') is not None:
            self.modified_time_greater_or_equal_than = m.get('modified_time_greater_or_equal_than')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('page_token') is not None:
            self.page_token = m.get('page_token')
        if m.get('third_part_job_no') is not None:
            self.third_part_job_no = m.get('third_part_job_no')
        return self


class UserQueryResponseBodyModuleItems(TeaModel):
    def __init__(self, employee_nick=None, leave_status=None, third_part_employee_id=None, third_part_job_no=None):
        self.employee_nick = employee_nick  # type: str
        self.leave_status = leave_status  # type: int
        self.third_part_employee_id = third_part_employee_id  # type: str
        self.third_part_job_no = third_part_job_no  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(UserQueryResponseBodyModuleItems, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.employee_nick is not None:
            result['employee_nick'] = self.employee_nick
        if self.leave_status is not None:
            result['leave_status'] = self.leave_status
        if self.third_part_employee_id is not None:
            result['third_part_employee_id'] = self.third_part_employee_id
        if self.third_part_job_no is not None:
            result['third_part_job_no'] = self.third_part_job_no
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('employee_nick') is not None:
            self.employee_nick = m.get('employee_nick')
        if m.get('leave_status') is not None:
            self.leave_status = m.get('leave_status')
        if m.get('third_part_employee_id') is not None:
            self.third_part_employee_id = m.get('third_part_employee_id')
        if m.get('third_part_job_no') is not None:
            self.third_part_job_no = m.get('third_part_job_no')
        return self


class UserQueryResponseBodyModule(TeaModel):
    def __init__(self, has_more=None, items=None, page_token=None, total=None):
        self.has_more = has_more  # type: bool
        self.items = items  # type: list[UserQueryResponseBodyModuleItems]
        self.page_token = page_token  # type: str
        self.total = total  # type: long

    def validate(self):
        if self.items:
            for k in self.items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(UserQueryResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.has_more is not None:
            result['has_more'] = self.has_more
        result['items'] = []
        if self.items is not None:
            for k in self.items:
                result['items'].append(k.to_map() if k else None)
        if self.page_token is not None:
            result['page_token'] = self.page_token
        if self.total is not None:
            result['total'] = self.total
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('has_more') is not None:
            self.has_more = m.get('has_more')
        self.items = []
        if m.get('items') is not None:
            for k in m.get('items'):
                temp_model = UserQueryResponseBodyModuleItems()
                self.items.append(temp_model.from_map(k))
        if m.get('page_token') is not None:
            self.page_token = m.get('page_token')
        if m.get('total') is not None:
            self.total = m.get('total')
        return self


class UserQueryResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: UserQueryResponseBodyModule
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        # traceId
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(UserQueryResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = UserQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class UserQueryResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: UserQueryResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(UserQueryResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UserQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class VatInvoiceScanQueryHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_so_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(VatInvoiceScanQueryHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class VatInvoiceScanQueryRequest(TeaModel):
    def __init__(self, bill_date=None, bill_id=None, invoice_sub_task_id=None, page_no=None, page_size=None):
        self.bill_date = bill_date  # type: str
        self.bill_id = bill_id  # type: long
        self.invoice_sub_task_id = invoice_sub_task_id  # type: long
        self.page_no = page_no  # type: int
        self.page_size = page_size  # type: int

    def validate(self):
        pass

    def to_map(self):
        _map = super(VatInvoiceScanQueryRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bill_date is not None:
            result['bill_date'] = self.bill_date
        if self.bill_id is not None:
            result['bill_id'] = self.bill_id
        if self.invoice_sub_task_id is not None:
            result['invoice_sub_task_id'] = self.invoice_sub_task_id
        if self.page_no is not None:
            result['page_no'] = self.page_no
        if self.page_size is not None:
            result['page_size'] = self.page_size
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('bill_date') is not None:
            self.bill_date = m.get('bill_date')
        if m.get('bill_id') is not None:
            self.bill_id = m.get('bill_id')
        if m.get('invoice_sub_task_id') is not None:
            self.invoice_sub_task_id = m.get('invoice_sub_task_id')
        if m.get('page_no') is not None:
            self.page_no = m.get('page_no')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        return self


class VatInvoiceScanQueryResponseBodyModuleItemsInvoiceDetails(TeaModel):
    def __init__(self, amount=None, index=None, item_name=None, quantity=None, specification=None, tax=None,
                 tax_rate=None, unit=None, unit_price=None):
        self.amount = amount  # type: str
        # 行号
        self.index = index  # type: str
        self.item_name = item_name  # type: str
        self.quantity = quantity  # type: str
        self.specification = specification  # type: str
        self.tax = tax  # type: str
        self.tax_rate = tax_rate  # type: str
        self.unit = unit  # type: str
        self.unit_price = unit_price  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(VatInvoiceScanQueryResponseBodyModuleItemsInvoiceDetails, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.amount is not None:
            result['amount'] = self.amount
        if self.index is not None:
            result['index'] = self.index
        if self.item_name is not None:
            result['item_name'] = self.item_name
        if self.quantity is not None:
            result['quantity'] = self.quantity
        if self.specification is not None:
            result['specification'] = self.specification
        if self.tax is not None:
            result['tax'] = self.tax
        if self.tax_rate is not None:
            result['tax_rate'] = self.tax_rate
        if self.unit is not None:
            result['unit'] = self.unit
        if self.unit_price is not None:
            result['unit_price'] = self.unit_price
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('amount') is not None:
            self.amount = m.get('amount')
        if m.get('index') is not None:
            self.index = m.get('index')
        if m.get('item_name') is not None:
            self.item_name = m.get('item_name')
        if m.get('quantity') is not None:
            self.quantity = m.get('quantity')
        if m.get('specification') is not None:
            self.specification = m.get('specification')
        if m.get('tax') is not None:
            self.tax = m.get('tax')
        if m.get('tax_rate') is not None:
            self.tax_rate = m.get('tax_rate')
        if m.get('unit') is not None:
            self.unit = m.get('unit')
        if m.get('unit_price') is not None:
            self.unit_price = m.get('unit_price')
        return self


class VatInvoiceScanQueryResponseBodyModuleItems(TeaModel):
    def __init__(self, amount_with_tax=None, amount_without_tax=None, bill_date=None, check_code=None, drawer=None,
                 id=None, invoice_code=None, invoice_day=None, invoice_detail=None, invoice_details=None,
                 invoice_location=None, invoice_no=None, invoice_sub_task_id=None, invoice_type=None, invoice_type_desc=None,
                 machine_code=None, oss_url=None, password_area=None, purchaser_bank_account_info=None,
                 purchaser_contact_info=None, purchaser_name=None, purchaser_tax_no=None, recipient=None, remarks=None, reviewer=None,
                 seller_bank_account_info=None, seller_contact_info=None, seller_name=None, seller_tax_no=None, smart_check_code=None,
                 tax_amount=None, tax_rate=None, total_amount_in_words=None):
        self.amount_with_tax = amount_with_tax  # type: str
        self.amount_without_tax = amount_without_tax  # type: str
        self.bill_date = bill_date  # type: str
        self.check_code = check_code  # type: str
        self.drawer = drawer  # type: str
        self.id = id  # type: str
        self.invoice_code = invoice_code  # type: str
        self.invoice_day = invoice_day  # type: str
        self.invoice_detail = invoice_detail  # type: str
        self.invoice_details = invoice_details  # type: list[VatInvoiceScanQueryResponseBodyModuleItemsInvoiceDetails]
        self.invoice_location = invoice_location  # type: str
        self.invoice_no = invoice_no  # type: str
        self.invoice_sub_task_id = invoice_sub_task_id  # type: long
        self.invoice_type = invoice_type  # type: int
        self.invoice_type_desc = invoice_type_desc  # type: str
        # 机器码
        self.machine_code = machine_code  # type: str
        self.oss_url = oss_url  # type: str
        self.password_area = password_area  # type: str
        self.purchaser_bank_account_info = purchaser_bank_account_info  # type: str
        self.purchaser_contact_info = purchaser_contact_info  # type: str
        self.purchaser_name = purchaser_name  # type: str
        self.purchaser_tax_no = purchaser_tax_no  # type: str
        self.recipient = recipient  # type: str
        self.remarks = remarks  # type: str
        self.reviewer = reviewer  # type: str
        self.seller_bank_account_info = seller_bank_account_info  # type: str
        self.seller_contact_info = seller_contact_info  # type: str
        self.seller_name = seller_name  # type: str
        self.seller_tax_no = seller_tax_no  # type: str
        self.smart_check_code = smart_check_code  # type: str
        self.tax_amount = tax_amount  # type: str
        self.tax_rate = tax_rate  # type: str
        self.total_amount_in_words = total_amount_in_words  # type: str

    def validate(self):
        if self.invoice_details:
            for k in self.invoice_details:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(VatInvoiceScanQueryResponseBodyModuleItems, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.amount_with_tax is not None:
            result['amount_with_tax'] = self.amount_with_tax
        if self.amount_without_tax is not None:
            result['amount_without_tax'] = self.amount_without_tax
        if self.bill_date is not None:
            result['bill_date'] = self.bill_date
        if self.check_code is not None:
            result['check_code'] = self.check_code
        if self.drawer is not None:
            result['drawer'] = self.drawer
        if self.id is not None:
            result['id'] = self.id
        if self.invoice_code is not None:
            result['invoice_code'] = self.invoice_code
        if self.invoice_day is not None:
            result['invoice_day'] = self.invoice_day
        if self.invoice_detail is not None:
            result['invoice_detail'] = self.invoice_detail
        result['invoice_details'] = []
        if self.invoice_details is not None:
            for k in self.invoice_details:
                result['invoice_details'].append(k.to_map() if k else None)
        if self.invoice_location is not None:
            result['invoice_location'] = self.invoice_location
        if self.invoice_no is not None:
            result['invoice_no'] = self.invoice_no
        if self.invoice_sub_task_id is not None:
            result['invoice_sub_task_id'] = self.invoice_sub_task_id
        if self.invoice_type is not None:
            result['invoice_type'] = self.invoice_type
        if self.invoice_type_desc is not None:
            result['invoice_type_desc'] = self.invoice_type_desc
        if self.machine_code is not None:
            result['machine_code'] = self.machine_code
        if self.oss_url is not None:
            result['oss_url'] = self.oss_url
        if self.password_area is not None:
            result['password_area'] = self.password_area
        if self.purchaser_bank_account_info is not None:
            result['purchaser_bank_account_info'] = self.purchaser_bank_account_info
        if self.purchaser_contact_info is not None:
            result['purchaser_contact_info'] = self.purchaser_contact_info
        if self.purchaser_name is not None:
            result['purchaser_name'] = self.purchaser_name
        if self.purchaser_tax_no is not None:
            result['purchaser_tax_no'] = self.purchaser_tax_no
        if self.recipient is not None:
            result['recipient'] = self.recipient
        if self.remarks is not None:
            result['remarks'] = self.remarks
        if self.reviewer is not None:
            result['reviewer'] = self.reviewer
        if self.seller_bank_account_info is not None:
            result['seller_bank_account_info'] = self.seller_bank_account_info
        if self.seller_contact_info is not None:
            result['seller_contact_info'] = self.seller_contact_info
        if self.seller_name is not None:
            result['seller_name'] = self.seller_name
        if self.seller_tax_no is not None:
            result['seller_tax_no'] = self.seller_tax_no
        if self.smart_check_code is not None:
            result['smart_check_code'] = self.smart_check_code
        if self.tax_amount is not None:
            result['tax_amount'] = self.tax_amount
        if self.tax_rate is not None:
            result['tax_rate'] = self.tax_rate
        if self.total_amount_in_words is not None:
            result['total_amount_in_words'] = self.total_amount_in_words
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('amount_with_tax') is not None:
            self.amount_with_tax = m.get('amount_with_tax')
        if m.get('amount_without_tax') is not None:
            self.amount_without_tax = m.get('amount_without_tax')
        if m.get('bill_date') is not None:
            self.bill_date = m.get('bill_date')
        if m.get('check_code') is not None:
            self.check_code = m.get('check_code')
        if m.get('drawer') is not None:
            self.drawer = m.get('drawer')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('invoice_code') is not None:
            self.invoice_code = m.get('invoice_code')
        if m.get('invoice_day') is not None:
            self.invoice_day = m.get('invoice_day')
        if m.get('invoice_detail') is not None:
            self.invoice_detail = m.get('invoice_detail')
        self.invoice_details = []
        if m.get('invoice_details') is not None:
            for k in m.get('invoice_details'):
                temp_model = VatInvoiceScanQueryResponseBodyModuleItemsInvoiceDetails()
                self.invoice_details.append(temp_model.from_map(k))
        if m.get('invoice_location') is not None:
            self.invoice_location = m.get('invoice_location')
        if m.get('invoice_no') is not None:
            self.invoice_no = m.get('invoice_no')
        if m.get('invoice_sub_task_id') is not None:
            self.invoice_sub_task_id = m.get('invoice_sub_task_id')
        if m.get('invoice_type') is not None:
            self.invoice_type = m.get('invoice_type')
        if m.get('invoice_type_desc') is not None:
            self.invoice_type_desc = m.get('invoice_type_desc')
        if m.get('machine_code') is not None:
            self.machine_code = m.get('machine_code')
        if m.get('oss_url') is not None:
            self.oss_url = m.get('oss_url')
        if m.get('password_area') is not None:
            self.password_area = m.get('password_area')
        if m.get('purchaser_bank_account_info') is not None:
            self.purchaser_bank_account_info = m.get('purchaser_bank_account_info')
        if m.get('purchaser_contact_info') is not None:
            self.purchaser_contact_info = m.get('purchaser_contact_info')
        if m.get('purchaser_name') is not None:
            self.purchaser_name = m.get('purchaser_name')
        if m.get('purchaser_tax_no') is not None:
            self.purchaser_tax_no = m.get('purchaser_tax_no')
        if m.get('recipient') is not None:
            self.recipient = m.get('recipient')
        if m.get('remarks') is not None:
            self.remarks = m.get('remarks')
        if m.get('reviewer') is not None:
            self.reviewer = m.get('reviewer')
        if m.get('seller_bank_account_info') is not None:
            self.seller_bank_account_info = m.get('seller_bank_account_info')
        if m.get('seller_contact_info') is not None:
            self.seller_contact_info = m.get('seller_contact_info')
        if m.get('seller_name') is not None:
            self.seller_name = m.get('seller_name')
        if m.get('seller_tax_no') is not None:
            self.seller_tax_no = m.get('seller_tax_no')
        if m.get('smart_check_code') is not None:
            self.smart_check_code = m.get('smart_check_code')
        if m.get('tax_amount') is not None:
            self.tax_amount = m.get('tax_amount')
        if m.get('tax_rate') is not None:
            self.tax_rate = m.get('tax_rate')
        if m.get('total_amount_in_words') is not None:
            self.total_amount_in_words = m.get('total_amount_in_words')
        return self


class VatInvoiceScanQueryResponseBodyModule(TeaModel):
    def __init__(self, items=None, page_no=None, page_size=None, total_page=None, total_size=None):
        self.items = items  # type: list[VatInvoiceScanQueryResponseBodyModuleItems]
        self.page_no = page_no  # type: int
        self.page_size = page_size  # type: int
        self.total_page = total_page  # type: int
        self.total_size = total_size  # type: int

    def validate(self):
        if self.items:
            for k in self.items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(VatInvoiceScanQueryResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        result['items'] = []
        if self.items is not None:
            for k in self.items:
                result['items'].append(k.to_map() if k else None)
        if self.page_no is not None:
            result['page_no'] = self.page_no
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.total_page is not None:
            result['total_page'] = self.total_page
        if self.total_size is not None:
            result['total_size'] = self.total_size
        return result

    def from_map(self, m=None):
        m = m or dict()
        self.items = []
        if m.get('items') is not None:
            for k in m.get('items'):
                temp_model = VatInvoiceScanQueryResponseBodyModuleItems()
                self.items.append(temp_model.from_map(k))
        if m.get('page_no') is not None:
            self.page_no = m.get('page_no')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('total_page') is not None:
            self.total_page = m.get('total_page')
        if m.get('total_size') is not None:
            self.total_size = m.get('total_size')
        return self


class VatInvoiceScanQueryResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: VatInvoiceScanQueryResponseBodyModule
        # requestId
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        # traceId
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super(VatInvoiceScanQueryResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = VatInvoiceScanQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class VatInvoiceScanQueryResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: VatInvoiceScanQueryResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(VatInvoiceScanQueryResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = VatInvoiceScanQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class WaitApplyInvoiceTaskDetailQueryHeaders(TeaModel):
    def __init__(self, common_headers=None, x_acs_btrip_so_corp_token=None):
        self.common_headers = common_headers  # type: dict[str, str]
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(WaitApplyInvoiceTaskDetailQueryHeaders, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class WaitApplyInvoiceTaskDetailQueryRequest(TeaModel):
    def __init__(self, bill_date=None):
        self.bill_date = bill_date  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(WaitApplyInvoiceTaskDetailQueryRequest, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bill_date is not None:
            result['bill_date'] = self.bill_date
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('bill_date') is not None:
            self.bill_date = m.get('bill_date')
        return self


class WaitApplyInvoiceTaskDetailQueryResponseBodyModule(TeaModel):
    def __init__(self, contact=None, email=None, flight_invoice_fee=None, fu_point_invoice_fee=None,
                 hotel_normal_invoice_fee=None, hotel_special_invoice_fee=None, international_flight_invoice_fee=None,
                 invoice_third_part_id=None, invoice_title=None, mail_address=None, mail_city=None, mail_full_address=None,
                 mail_province=None, penalty_fee=None, remark=None, service_fee=None, telephone=None, train_invoice_fee=None,
                 vehicle_invoice_fee=None):
        self.contact = contact  # type: str
        self.email = email  # type: str
        self.flight_invoice_fee = flight_invoice_fee  # type: str
        self.fu_point_invoice_fee = fu_point_invoice_fee  # type: str
        self.hotel_normal_invoice_fee = hotel_normal_invoice_fee  # type: str
        self.hotel_special_invoice_fee = hotel_special_invoice_fee  # type: str
        self.international_flight_invoice_fee = international_flight_invoice_fee  # type: str
        self.invoice_third_part_id = invoice_third_part_id  # type: str
        self.invoice_title = invoice_title  # type: str
        self.mail_address = mail_address  # type: str
        self.mail_city = mail_city  # type: str
        self.mail_full_address = mail_full_address  # type: str
        self.mail_province = mail_province  # type: str
        self.penalty_fee = penalty_fee  # type: str
        self.remark = remark  # type: str
        self.service_fee = service_fee  # type: str
        self.telephone = telephone  # type: str
        self.train_invoice_fee = train_invoice_fee  # type: str
        self.vehicle_invoice_fee = vehicle_invoice_fee  # type: str

    def validate(self):
        pass

    def to_map(self):
        _map = super(WaitApplyInvoiceTaskDetailQueryResponseBodyModule, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact is not None:
            result['contact'] = self.contact
        if self.email is not None:
            result['email'] = self.email
        if self.flight_invoice_fee is not None:
            result['flight_invoice_fee'] = self.flight_invoice_fee
        if self.fu_point_invoice_fee is not None:
            result['fu_point_invoice_fee'] = self.fu_point_invoice_fee
        if self.hotel_normal_invoice_fee is not None:
            result['hotel_normal_invoice_fee'] = self.hotel_normal_invoice_fee
        if self.hotel_special_invoice_fee is not None:
            result['hotel_special_invoice_fee'] = self.hotel_special_invoice_fee
        if self.international_flight_invoice_fee is not None:
            result['international_flight_invoice_fee'] = self.international_flight_invoice_fee
        if self.invoice_third_part_id is not None:
            result['invoice_third_part_id'] = self.invoice_third_part_id
        if self.invoice_title is not None:
            result['invoice_title'] = self.invoice_title
        if self.mail_address is not None:
            result['mail_address'] = self.mail_address
        if self.mail_city is not None:
            result['mail_city'] = self.mail_city
        if self.mail_full_address is not None:
            result['mail_full_address'] = self.mail_full_address
        if self.mail_province is not None:
            result['mail_province'] = self.mail_province
        if self.penalty_fee is not None:
            result['penalty_fee'] = self.penalty_fee
        if self.remark is not None:
            result['remark'] = self.remark
        if self.service_fee is not None:
            result['service_fee'] = self.service_fee
        if self.telephone is not None:
            result['telephone'] = self.telephone
        if self.train_invoice_fee is not None:
            result['train_invoice_fee'] = self.train_invoice_fee
        if self.vehicle_invoice_fee is not None:
            result['vehicle_invoice_fee'] = self.vehicle_invoice_fee
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('contact') is not None:
            self.contact = m.get('contact')
        if m.get('email') is not None:
            self.email = m.get('email')
        if m.get('flight_invoice_fee') is not None:
            self.flight_invoice_fee = m.get('flight_invoice_fee')
        if m.get('fu_point_invoice_fee') is not None:
            self.fu_point_invoice_fee = m.get('fu_point_invoice_fee')
        if m.get('hotel_normal_invoice_fee') is not None:
            self.hotel_normal_invoice_fee = m.get('hotel_normal_invoice_fee')
        if m.get('hotel_special_invoice_fee') is not None:
            self.hotel_special_invoice_fee = m.get('hotel_special_invoice_fee')
        if m.get('international_flight_invoice_fee') is not None:
            self.international_flight_invoice_fee = m.get('international_flight_invoice_fee')
        if m.get('invoice_third_part_id') is not None:
            self.invoice_third_part_id = m.get('invoice_third_part_id')
        if m.get('invoice_title') is not None:
            self.invoice_title = m.get('invoice_title')
        if m.get('mail_address') is not None:
            self.mail_address = m.get('mail_address')
        if m.get('mail_city') is not None:
            self.mail_city = m.get('mail_city')
        if m.get('mail_full_address') is not None:
            self.mail_full_address = m.get('mail_full_address')
        if m.get('mail_province') is not None:
            self.mail_province = m.get('mail_province')
        if m.get('penalty_fee') is not None:
            self.penalty_fee = m.get('penalty_fee')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('service_fee') is not None:
            self.service_fee = m.get('service_fee')
        if m.get('telephone') is not None:
            self.telephone = m.get('telephone')
        if m.get('train_invoice_fee') is not None:
            self.train_invoice_fee = m.get('train_invoice_fee')
        if m.get('vehicle_invoice_fee') is not None:
            self.vehicle_invoice_fee = m.get('vehicle_invoice_fee')
        return self


class WaitApplyInvoiceTaskDetailQueryResponseBody(TeaModel):
    def __init__(self, code=None, message=None, module=None, request_id=None, success=None, trace_id=None):
        self.code = code  # type: str
        self.message = message  # type: str
        self.module = module  # type: list[WaitApplyInvoiceTaskDetailQueryResponseBodyModule]
        # requestId
        self.request_id = request_id  # type: str
        self.success = success  # type: bool
        # traceId
        self.trace_id = trace_id  # type: str

    def validate(self):
        if self.module:
            for k in self.module:
                if k:
                    k.validate()

    def to_map(self):
        _map = super(WaitApplyInvoiceTaskDetailQueryResponseBody, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        result['module'] = []
        if self.module is not None:
            for k in self.module:
                result['module'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        self.module = []
        if m.get('module') is not None:
            for k in m.get('module'):
                temp_model = WaitApplyInvoiceTaskDetailQueryResponseBodyModule()
                self.module.append(temp_model.from_map(k))
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class WaitApplyInvoiceTaskDetailQueryResponse(TeaModel):
    def __init__(self, headers=None, status_code=None, body=None):
        self.headers = headers  # type: dict[str, str]
        self.status_code = status_code  # type: int
        self.body = body  # type: WaitApplyInvoiceTaskDetailQueryResponseBody

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.status_code, 'status_code')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super(WaitApplyInvoiceTaskDetailQueryResponse, self).to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m=None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = WaitApplyInvoiceTaskDetailQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


